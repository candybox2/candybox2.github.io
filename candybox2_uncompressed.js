/**
 *
 * @source: http://candybox2.github.io/candybox2_uncompressed.js
 *
 * @licstart  The following is the entire license notice for the 
 *  JavaScript code in this page.
 *
 * Copyright (C) 2012 David "aniwey" L.
 *
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

var Place = (function () {
    // Constructor
    function Place(game) {
        this.game = game;
    }
    // Public methods
    Place.prototype.addBackToButton = function (renderArea, callbackCollection, text, translated, otherClass, y, x) {
        if (y === void 0) { y = 0; }
        if (x === void 0) { x = -1; }
        // If the x position is under zero, we set it so that the button will be centered
        if (x < 0) {
            x = renderArea.getWidth() / 2 - text.length / 2;
        }
        renderArea.addAsciiRealButton(text, x, y, otherClass, translated, true);
        renderArea.addLinkCall("." + otherClass, callbackCollection);
    };
    Place.prototype.addBackToMainMapButton = function (renderArea, otherClass, textName) {
        if (textName === void 0) { textName = "buttonBackToTheMap"; }
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), Database.getText(textName), Database.getTranslatedText(textName), otherClass);
    };
    // Public getters
    Place.prototype.getDefaultScroll = function () {
        return 0;
    };
    Place.prototype.getGame = function () {
        return this.game;
    };
    Place.prototype.getGap = function () {
        return 0;
    };
    Place.prototype.getRenderArea = function () {
        return new RenderArea(); // We return a new render area, but this should not happen, since our daughter class should override this function
    };
    Place.prototype.getScrolling = function () {
        return false; // By default, we disable scrolling on the place
    };
    Place.prototype.willBeClosed = function () { };
    Place.prototype.willBeDisplayed = function () { };
    Place.prototype.willStopBeingDisplayed = function () { };
    return Place;
})();
var Saving;
(function (Saving) {
    // Saving maps
    var bools = {};
    var numbers = {};
    var strings = {};
    // Can we register?
    Saving.canRegister = true;
    // Special public functions : used to load or the actual save
    function load(game, loadingType, loadingString) {
        // Depending on the loading type, do different things
        switch (loadingType) {
            // We don't load anything
            case MainLoadingType.NONE:
                // You can uncomment the lines below to start your game with everything unlocked (useful for testing purposes)
                /*
                Saving.saveNumber("aTreeStep", 2);
                
                Saving.saveBool("mainMapDoneDesert", true);
                Saving.saveBool("mainMapDoneBridge", true);
                Saving.saveBool("mainMapDoneCaveEntrance", true);
                Saving.saveBool("mainMapDonePier", true);
                Saving.saveBool("mainMapDoneForest", true);
                Saving.saveBool("mainMapDoneCastleEntrance", true);
                
                Saving.saveBool("gridItemPossessedMainMap", true);
                Saving.saveBool("gridItemPossessedTimeRing", true);
                Saving.saveBool("gridItemPossessedThirdHouseKey", true);
                Saving.saveBool("gridItemPossessedBeginnersGrimoire", true);
                
                Saving.saveBool("gridItemPossessedFeather", true);
                Saving.saveBool("gridItemPossessedPogoStick", true);
                Saving.saveBool("gridItemPossessedHeartPlug", true);
                Saving.saveBool("gridItemPossessedAdvancedGrimoire", true);
                
                Saving.saveBool("gridItemPossessedSponge", true);
                Saving.saveBool("gridItemPossessedShellPowder", true);
                Saving.saveBool("gridItemPossessedHeartPendant", true);
                Saving.saveBool("gridItemPossessedBlackMagicGrimoire", true);
                
                Saving.saveBool("gridItemPossessedFortressKey", true);
                Saving.saveBool("gridItemPossessedUnicornHorn", true);
                Saving.saveBool("gridItemPossessedXinopherydonClaw", true);
                Saving.saveBool("gridItemPossessedPitchfork", true);
                
                Saving.saveBool("gridItemPossessedRedSharkFin", true);
                Saving.saveBool("gridItemPossessedGreenSharkFin", true);
                Saving.saveBool("gridItemPossessedPurpleSharkFin", true);
                
                Saving.saveBool("gridItemPossessedTalkingCandy", true);
                
                Saving.saveBool("gridItemPossessedP", true);
                Saving.saveBool("gridItemPossessedL", true);
                Saving.saveBool("gridItemPossessedA", true);
                Saving.saveBool("gridItemPossessedY", true);
                
                Saving.saveBool("eqItemGlovesRedEnchantedGloves", true);
                Saving.saveBool("eqItemGlovesPinkEnchantedGloves", true);
                //Saving.saveBool("eqItemWeaponWoodenSword", true);
                Saving.saveBool("eqItemWeaponTrollBludgeon", true);
                Saving.saveBool("eqItemWeaponTribalSpear", true);
                Saving.saveBool("eqItemWeaponSummoningTribalSpear", true);
                Saving.saveBool("eqItemWeaponMonkeyWizardStaff", true);
                Saving.saveBool("eqItemWeaponGiantSpoon", true);
                Saving.saveBool("eqItemHatOctopusKingCrown", true);
                
                Saving.saveBool("eqItemBootsBootsOfIntrospection", true);
                
                Saving.saveBool("eqItemBootsRocketBoots", true);
                
                Saving.saveBool("eqItemWeaponGiantSpoonOfDoom", true);
                
                Saving.saveBool("eqItemBodyArmoursEnchantedKnightBodyArmour", true);
                
                Saving.saveNumber("gameCandiesEatenCurrent", 500000000);
                Saving.saveNumber("gameCandiesEatenMax", 500000000);
                
                Saving.saveNumber("playerHp", 1000);
                
                Saving.saveBool("questPlayerSpellHealthPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellTurtlePotionHasSpell", true);
                Saving.saveBool("questPlayerSpellAntiGravityPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellBerserkPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellCloningPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellPPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellXPotionHasSpell", true);
                
                Saving.saveNumber("questPlayerSpellHealthPotionQuantity", 0);
                Saving.saveNumber("questPlayerSpellTurtlePotionQuantity", 64084);
                Saving.saveNumber("questPlayerSpellAntiGravityPotionQuantity", 47542);
                Saving.saveNumber("questPlayerSpellBerserkPotionQuantity", 99549);
                Saving.saveNumber("questPlayerSpellCloningPotionQuantity", 10050);
                Saving.saveNumber("questPlayerSpellPPotionQuantity", 10085250);
                Saving.saveNumber("questPlayerSpellXPotionQuantity", 10050999);
                
                //Saving.saveBool("gameDebug", true);
                
                Saving.saveNumber("gameCandiesCurrent", 5000000);
                Saving.saveNumber("gameCandiesMax", 5000000);
                
                Saving.saveNumber("gameLollipopsCurrent", 5000000000);
                Saving.saveNumber("gameLollipopsMax", 500000000000);
                
                Saving.saveNumber("gameChocolateBarsCurrent", 7);
                Saving.saveNumber("gameChocolateBarsMax", 7);
                
                Saving.saveNumber("gamePainsAuChocolatCurrent", 7);
                Saving.saveNumber("gamePainsAuChocolatMax", 7);
                
                Saving.saveBool("lonelyHouseTakeTheBoxDone", true);
                
                Saving.saveNumber("lollipopFarmPondHowManyLolligators", 0);
                
                Saving.saveBool("statusBarUnlocked", true);
                Saving.saveBool("statusBarUnlockedCfg", true);
                Saving.saveBool("statusBarUnlockedSave", true);
                Saving.saveBool("statusBarUnlockedMap", true);
                Saving.saveBool("statusBarUnlockedInventory", true);
                Saving.saveBool("statusBarUnlockedLollipopFarm", true);
                Saving.saveBool("statusBarUnlockedCauldron", true);
                Saving.saveBool("statusBarUnlockedHealthBar", true);
                Saving.saveBool("statusBarUnlockedInsideYourBox", true);
                Saving.saveBool("statusBarUnlockedTheComputer", true);
                Saving.saveBool("statusBarUnlockedTheArena", true);
                
                Saving.saveBool("castleKilledNougatMonster", true);
                
                Saving.saveBool("dragonDone", true);
                Saving.saveBool("dragonUnlockedCyclops", true);
                
                Saving.saveBool("castleTowerFirstVisitDone", true);
                
                Saving.saveString("gameLanguage", "fr");
                */
                break;
            case MainLoadingType.LOCAL:
                LocalSaving.load(loadingString);
                break;
            case MainLoadingType.FILE:
                var fileBools = loadingString.match(/bool +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                var fileNumbers = loadingString.match(/number +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                var fileStrings = loadingString.match(/string +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                // Load the bools
                if (fileBools != null) {
                    for (var i = 0; i < fileBools.length; i++) {
                        Saving.saveBool(fileBools[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), Saving.stringToBool(fileBools[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", "")));
                    }
                }
                // Load the numbers
                if (fileNumbers != null) {
                    for (var i = 0; i < fileNumbers.length; i++) {
                        Saving.saveNumber(fileNumbers[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), Saving.stringToNumber(fileNumbers[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", "")));
                    }
                }
                // Load the strings
                if (fileStrings != null) {
                    for (var i = 0; i < fileStrings.length; i++) {
                        Saving.saveString(fileStrings[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), fileStrings[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", ""));
                    }
                }
                break;
        }
        // Apply the loaded variables to various things by calling the load() methods of various objects
        game.load(); // Various variables owned by the game object
        game.getPlayer().load(); // The player
    }
    Saving.load = load;
    function save(game, savingType, savingString) {
        // Save some special variables by calling the save() methods of various objects
        game.save(); // Various variables owned by the game object
        game.getPlayer().save(); // The player
        // Do different things depending on the saving type
        switch (savingType) {
            case MainLoadingType.LOCAL:
                return LocalSaving.save(savingString);
                break;
            case MainLoadingType.FILE:
                return false;
                break;
        }
    }
    Saving.save = save;
    // Public conversion functions (useful because we sometimes only want to store strings, either locally or online, but in fact we also work with numbers and bools)
    function boolToString(b) {
        if (b)
            return "true";
        return "false";
    }
    Saving.boolToString = boolToString;
    function numberToString(n) {
        return n.toString();
    }
    Saving.numberToString = numberToString;
    function stringToBool(s) {
        if (s == "true")
            return true;
        else if (s == "false")
            return false;
        console.log("Error : trying to convert a string to a bool but the string value is " + s + ".");
    }
    Saving.stringToBool = stringToBool;
    function stringToNumber(s) {
        return parseFloat(s); // We need to use parseFloat to avoid problems with scientific notations
    }
    Saving.stringToNumber = stringToNumber;
    // Public functions
    function getAllBools() {
        return bools;
    }
    Saving.getAllBools = getAllBools;
    function getAllNumbers() {
        return numbers;
    }
    Saving.getAllNumbers = getAllNumbers;
    function getAllStrings() {
        return strings;
    }
    Saving.getAllStrings = getAllStrings;
    function loadBool(key) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 2)
            saveBool(key, Random.flipACoin());
        if (key in bools)
            return bools[key];
        console.log("Error : trying to load the unknown bool " + key + ".");
    }
    Saving.loadBool = loadBool;
    function loadNumber(key) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 3 && Random.oneChanceOutOf(2))
            saveNumber(key, Random.between(0, 10000) - 5000);
        if (key in numbers)
            return numbers[key];
        console.log("Error : trying to load the unknown number " + key + ".");
    }
    Saving.loadNumber = loadNumber;
    function loadString(key) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 4 && Random.oneChanceOutOf(5))
            saveString(key, "bug");
        if (key in strings)
            return strings[key];
        console.log("Error : trying to load the unknown string " + key + ".");
    }
    Saving.loadString = loadString;
    function registerBool(key, b) {
        if (Saving.canRegister) {
            if (key in bools || key in numbers || key in strings)
                console.log("Error : trying to register the key " + key + " as bool, but this key is already registered.");
            this.saveBool(key, b, true);
        }
    }
    Saving.registerBool = registerBool;
    function registerNumber(key, n) {
        if (Saving.canRegister) {
            if (key in numbers || key in bools || key in strings)
                console.log("Error : trying to register the key " + key + " as number, but this key is already registered.");
            this.saveNumber(key, n, true);
        }
    }
    Saving.registerNumber = registerNumber;
    function registerString(key, s) {
        if (Saving.canRegister) {
            if (key in strings || key in bools || key in numbers)
                console.log("Error : trying to register the key " + key + " as string, but this key is already registered.");
            this.saveString(key, s, true);
        }
    }
    Saving.registerString = registerString;
    function saveBool(key, b, registering) {
        if (registering === void 0) { registering = false; }
        if (key in bools || registering) {
            bools[key] = b;
            return;
        }
        console.log("Error : trying to save the unknown bool " + key + ".");
    }
    Saving.saveBool = saveBool;
    function saveNumber(key, n, registering) {
        if (registering === void 0) { registering = false; }
        if (key in numbers || registering) {
            numbers[key] = n;
            return;
        }
        console.log("Error : trying to save the unknown number " + key + ".");
    }
    Saving.saveNumber = saveNumber;
    function saveString(key, s, registering) {
        if (registering === void 0) { registering = false; }
        if (key in strings || registering) {
            strings[key] = s;
            return;
        }
        console.log("Error : trying to save the unknown string " + key + ".");
    }
    Saving.saveString = saveString;
})(Saving || (Saving = {}));
///<reference path="Place.ts"/>
///<reference path="Saving.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
Saving.registerNumber("aTreeStep", 0);
var ATree = (function (_super) {
    __extends(ATree, _super);
    // Constructor
    function ATree(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Special tic-tac-toa variables
        this.ticTacToeStep = null;
        this.ticTacToeBoard = null;
        // If we're going to play tic tac toe
        if (Saving.loadNumber("aTreeStep") == 7) {
            this.startTicTacToe();
        }
        // If we're at step 8 (just won the tic tac toe game), go on to step 9
        if (Saving.loadNumber("aTreeStep") == 8)
            this.nextStep();
        // Resize & update
        this.renderArea.resizeFromArray(Database.getAscii("places/aTree/background"), 17, 3);
        this.update();
    }
    // getRenderArea()
    ATree.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    ATree.prototype.addEnigma = function (enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage) {
        if (wrongClass === void 0) { wrongClass = ""; }
        if (wrongMessage === void 0) { wrongMessage = "Wrong"; }
        this.renderArea.addEnigma(21, 41, 24, enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage);
    };
    ATree.prototype.drawSpeech = function (normal, translated, x2) {
        if (x2 === void 0) { x2 = 59; }
        this.renderArea.drawSpeech(normal, 4, 38, x2, "aTreeSpeech", translated);
    };
    ATree.prototype.drawTicTacToeBoard = function (addButtons, x, y) {
        if (addButtons === void 0) { addButtons = true; }
        if (x === void 0) { x = 19; }
        if (y === void 0) { y = 23; }
        // If the board isn't null
        if (this.ticTacToeBoard != null) {
            // Draw the board background
            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeBoard"), x + 7, y + 5);
            // Iterate over the board to draw signs && add buttons
            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 5; j++) {
                    // Draw the sign or add the button, depending on the sign
                    switch (this.ticTacToeBoard[i][j]) {
                        // There's already a sign : draw the sign
                        case ATreeTicTacToeSign.X:
                            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeX"), x + i * 7 + 3, y + j * 4 + 3);
                            break;
                        case ATreeTicTacToeSign.O:
                            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeO"), x + i * 7 + 2, y + j * 4 + 2);
                            break;
                        // There's no sign yet : draw the button
                        case ATreeTicTacToeSign.NO_SIGN:
                            if (addButtons) {
                                // Iterate over the lines on which we need to add the buttons
                                for (var yButton = y + j * 4 + 1; yButton <= y + j * 4 + 4; yButton++) {
                                    // If we're outside the board : add a ninja button
                                    if (i == 0 || i == 4 || j == 0 || j == 4) {
                                        this.renderArea.addAsciiNinjaButton(x + i * 7 + 1, x + i * 7 + 7, yButton, "aTreeTicTacToeBoardButton" + i + "_" + j);
                                    }
                                    else {
                                        this.renderArea.addAsciiButton(x + i * 7 + 1, x + i * 7 + 7, yButton, "aTreeTicTacToeBoardButton" + i + "_" + j);
                                    }
                                }
                                // Add the link
                                this.renderArea.addLinkCall(".aTreeTicTacToeBoardButton" + i + "_" + j, new CallbackCollection(this.playTicTacToeSign.bind(this, i, j)));
                            }
                            break;
                    }
                }
            }
        }
    };
    ATree.prototype.nextStep = function () {
        // We change the step
        Saving.saveNumber("aTreeStep", Saving.loadNumber("aTreeStep") + 1);
        // We possibly do some action depending on the new step
        if (Saving.loadNumber("aTreeStep") == 7) {
            this.startTicTacToe();
        }
        if (Saving.loadNumber("aTreeStep") == 9) {
            this.getGame().gainItem("gridItemPossessedThirdHouseKey");
        }
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    ATree.prototype.playTicTacToe_copyBoard = function (board) {
        // Create the new board
        var newBoard = [];
        // Copy the old one in the new one
        for (var i = 0; i < board.length; i++) {
            newBoard.push(board[i].slice(0));
        }
        // Return the new board
        return newBoard;
    };
    ATree.prototype.playTicTacToe_evaluateBoard = function (board) {
        // The score
        var score = 0;
        // Evaluate all the lines
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 2, 1, 3, 1); // First column
        score += this.playTicTacToe_evaluateLine(board, 1, 2, 2, 2, 3, 2); // Second column
        score += this.playTicTacToe_evaluateLine(board, 1, 3, 2, 3, 3, 3); // Third column
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 1, 2, 1, 3); // First row
        score += this.playTicTacToe_evaluateLine(board, 2, 1, 2, 2, 2, 3); // Second row
        score += this.playTicTacToe_evaluateLine(board, 3, 1, 3, 2, 3, 3); // Third row
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 2, 2, 3, 3); // Diagonal
        score += this.playTicTacToe_evaluateLine(board, 1, 3, 2, 2, 3, 1); // The other diagonal
        // Return the score
        return score;
    };
    ATree.prototype.playTicTacToe_evaluateLine = function (board, row1, col1, row2, col2, row3, col3) {
        // The score
        var score = 0;
        // First cell
        if (board[row1][col1] == ATreeTicTacToeSign.O)
            score = 1;
        else if (board[row1][col1] == ATreeTicTacToeSign.X)
            score = -1;
        // Second cell
        if (board[row2][col2] == ATreeTicTacToeSign.O) {
            if (score == 1)
                score = 10;
            else if (score == -1)
                return 0;
            else
                score = 1;
        }
        else if (board[row2][col2] == ATreeTicTacToeSign.X) {
            if (score == 1)
                return 0;
            else if (score == -1)
                score = -10;
            else
                score = -1;
        }
        // Third cell
        if (board[row3][col3] == ATreeTicTacToeSign.O) {
            if (score > 0)
                score *= 10;
            else if (score < 0)
                return 0;
            else
                score = 1;
        }
        else if (board[row3][col3] == ATreeTicTacToeSign.X) {
            if (score > 0)
                return 0;
            else if (score < 0)
                score *= 10;
            else
                score = -1;
        }
        // Return the score
        return score;
    };
    ATree.prototype.playTicTacToe_minimax = function (board, playerSign, depth) {
        if (depth === void 0) { depth = 2; }
        // Variables
        var tempBoard; // The temp board, used to simulate moves
        var currentScore; // Current score, used for calculations
        var returnValue = new ATreeTicTacToeMinimaxReturnValue; // The return value, which contains the best position and the best score
        var gameFull = true; // Used later to find out if the game is full or not
        // Set the initial best score, depending on the playerSign parameter
        if (playerSign == ATreeTicTacToeSign.O)
            returnValue.bestScore = -99999999;
        else
            returnValue.bestScore = 99999999;
        // If the depth is > to 0 (this condition is needed to stop the iterating loop at some point)
        if (depth > 0) {
            // Iterate over all the board
            for (var i = 1; i <= 3; i++) {
                for (var j = 1; j <= 3; j++) {
                    // If this cell is empty
                    if (board[i][j] == ATreeTicTacToeSign.NO_SIGN) {
                        // We found at least one non-empty cell : the game isn't full
                        gameFull = false;
                        // Set the temp board from the real board
                        tempBoard = this.playTicTacToe_copyBoard(board);
                        // Try to play on this cell using the temp board
                        tempBoard[i][j] = playerSign;
                        if (playerSign == ATreeTicTacToeSign.O) {
                            currentScore = this.playTicTacToe_minimax(tempBoard, ATreeTicTacToeSign.X, depth - 1).bestScore;
                            if (returnValue.bestScore <= currentScore) {
                                returnValue.bestScore = currentScore;
                                returnValue.bestPosition = new Pos(i, j);
                            }
                        }
                        else {
                            currentScore = this.playTicTacToe_minimax(tempBoard, ATreeTicTacToeSign.O, depth - 1).bestScore;
                            if (returnValue.bestScore >= currentScore) {
                                returnValue.bestScore = currentScore;
                                returnValue.bestPosition = new Pos(i, j);
                            }
                        }
                    }
                }
            }
            // If the game seems full, we calculate the best score too
            if (gameFull)
                returnValue.bestScore = this.playTicTacToe_evaluateBoard(board);
        }
        else
            returnValue.bestScore = this.playTicTacToe_evaluateBoard(board);
        // Return the return value (best position found + the score)
        return returnValue;
    };
    ATree.prototype.playTicTacToe_testEndGameConditions = function () {
        // Variables
        var shouldEnd = false;
        // Test if someone won (in the 5*5 grid)
        switch (this.playTicTacToe_testGameSomeoneWon()) {
            case ATreeTicTacToeSign.O:
                this.ticTacToeStep = ATreeTicTacToeStep.YOU_LOSE;
                return true;
                break;
            case ATreeTicTacToeSign.X:
                // add object to the player here
                this.nextStep();
                return true;
                break;
        }
        // Test if the game is full (in the 3*3 grid)
        if (this.playTicTacToe_testGameFull()) {
            this.ticTacToeStep = ATreeTicTacToeStep.NOBODY_WINS;
            return true;
        }
        // Nothing happens, we return false
        return false;
    };
    ATree.prototype.playTicTacToe_testGameFull = function () {
        // Variables
        var isFull = true; // Will be set to false if there's any empty cell
        // Search for any empty cell
        for (var i = 1; i <= 3; i++) {
            for (var j = 1; j <= 3; j++) {
                if (this.ticTacToeBoard[i][j] == ATreeTicTacToeSign.NO_SIGN) {
                    isFull = false;
                    break;
                }
            }
            if (isFull == false)
                break;
        }
        // If the board is full, return true
        if (isFull)
            return true;
        // Else, return false
        return false;
    };
    ATree.prototype.playTicTacToe_testGameSomeoneWon = function () {
        // Variables
        var returnSign;
        for (var i = 0; i < 5; i++) {
            returnSign = this.playTicTacToe_fiveInARow(i, 0, 0, 1);
            if (returnSign != null)
                return returnSign;
        }
        for (var i = 0; i < 5; i++) {
            returnSign = this.playTicTacToe_fiveInARow(0, i, 1, 0);
            if (returnSign != null)
                return returnSign;
        }
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 1, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(1, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 2, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(2, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(4, 0, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(3, 1, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(3, 0, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(4, 2, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(2, 0, -1, 1)) != null)
            return returnSign;
        // No won won, we return NO_SIGN
        return ATreeTicTacToeSign.NO_SIGN;
    };
    ATree.prototype.playTicTacToe_fiveInARow = function (x1, y1, x2, y2) {
        // Variables
        var column = x1;
        var row = y1;
        var counter = 0;
        var currentSign = null;
        while (column >= 0 && column < 5 && row >= 0 && row < 5) {
            if (this.ticTacToeBoard[column][row] != ATreeTicTacToeSign.NO_SIGN) {
                if (this.ticTacToeBoard[column][row] != currentSign) {
                    currentSign = this.ticTacToeBoard[column][row];
                    counter = 1;
                }
                else
                    counter++;
            }
            else
                counter = 0;
            if (currentSign != null && counter == 3)
                return currentSign;
            column += x2;
            row += y2;
        }
        return null;
    };
    ATree.prototype.playTicTacToe_tryAgain = function () {
        this.startTicTacToe();
        this.update();
        this.getGame().updatePlace();
    };
    ATree.prototype.playTicTacToeSign = function (xIndex, yIndex) {
        // Add the sign
        this.ticTacToeBoard[xIndex][yIndex] = ATreeTicTacToeSign.X;
        // Test end game conditions (we only make the squirrel play if nothing happens)
        if (this.playTicTacToe_testEndGameConditions() == false) {
            // IA
            var bestPosition = this.playTicTacToe_minimax(this.ticTacToeBoard, ATreeTicTacToeSign.O).bestPosition;
            this.ticTacToeBoard[bestPosition.x][bestPosition.y] = ATreeTicTacToeSign.O;
            // Test end game conditions
            this.playTicTacToe_testEndGameConditions();
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    ATree.prototype.reward1 = function () {
        this.getGame().getCandies().add(20);
    };
    ATree.prototype.reward2 = function () {
        this.getGame().getCandies().add(100);
    };
    ATree.prototype.reward3 = function () {
        this.getGame().getCandies().add(500);
    };
    ATree.prototype.reward4 = function () {
        this.getGame().getLollipops().add(3);
    };
    ATree.prototype.reward5 = function () {
        this.getGame().getChocolateBars().add(3);
    };
    ATree.prototype.startTicTacToe = function () {
        // Reset the array
        this.ticTacToeBoard = [];
        // Add the signs to the board
        for (var i = 0; i < 5; i++) {
            this.ticTacToeBoard.push([]);
            for (var j = 0; j < 5; j++) {
                this.ticTacToeBoard[i].push(ATreeTicTacToeSign.NO_SIGN);
            }
        }
        // Set the step
        this.ticTacToeStep = ATreeTicTacToeStep.PLAYING;
    };
    ATree.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "aTreeBackToTheMapButton");
        // Draw the tree with the squirrel
        this.renderArea.drawArray(Database.getAscii("places/aTree/background"), 0, 3);
        // Draw the speech
        switch (Saving.loadNumber("aTreeStep")) {
            // Introduction speech
            case 0:
                this.drawSpeech(Database.getText("mapATreeIntroductionSpeech"), Database.getTranslatedText("mapATreeIntroductionSpeech"));
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeIntroductionButton"), 21, 24, "aTreeIntroductionButton", Database.getTranslatedText("mapATreeIntroductionButton"));
                this.renderArea.addLinkCall(".aTreeIntroductionButton", new CallbackCollection(this.nextStep.bind(this)));
                break;
            // First question (do you like candies)
            case 1:
                this.drawSpeech(Database.getText("mapATreeFirstQuestion"), Database.getTranslatedText("mapATreeFirstQuestion"));
                this.addEnigma(new EnigmaAnswerStrings(["yes", "y", "yeah", "yeap", "yep"]), new CallbackCollection(this.nextStep.bind(this), this.reward1.bind(this)), "aTreeFirstQuestionEnigma", "aTreeFirstQuestionWrong");
                break;
            // Second question (S E I D N A ?)
            case 2:
                this.drawSpeech(Database.getText("mapATreeSecondQuestion"), Database.getTranslatedText("mapATreeSecondQuestion"));
                this.addEnigma(new EnigmaAnswerStrings(["c", "letterc", "theletterc"]), new CallbackCollection(this.nextStep.bind(this), this.reward2.bind(this)), "aTreeSecondQuestionEnigma", "aTreeSecondQuestionWrong");
                break;
            // Third question (how many candies does the candiest man in the world possess?)
            case 3:
                this.drawSpeech(Database.getText("mapATreeThirdQuestion"), Database.getTranslatedText("mapATreeThirdQuestion"));
                this.addEnigma(new EnigmaAnswerCandies(this.getGame()), new CallbackCollection(this.nextStep.bind(this), this.reward3.bind(this)), "aTreeThirdQuestionEnigma", "aTreeThirdQuestionWrong");
                break;
            // Fourth question (number of marks on the tree)
            case 4:
                this.drawSpeech(Database.getText("mapATreeFourthQuestion"), Database.getTranslatedText("mapATreeFourthQuestion"), 75);
                this.addEnigma(new EnigmaAnswerStrings(["10", "ten", "10marks", "tenmarks"]), new CallbackCollection(this.nextStep.bind(this), this.reward4.bind(this)), "aTreeFourthQuestionEnigma", "aTreeFourthQuestionWrong");
                break;
            // Fifth question (yellow hat in the red sea)
            case 5:
                this.drawSpeech(Database.getText("mapATreeFifthQuestion"), Database.getTranslatedText("mapATreeFifthQuestion"), 75);
                this.addEnigma(new EnigmaAnswerStrings(["wet", "itbecomeswet", "itbecomewet", "becomeswet", "becomewet", "itgetswet", "itgetwet", "itswet", "itgotwet", "itiswet", "itiswetnow", "itswetnow", "float", "floats", "itfloats", "itsfloating", "itisfloating", "floating", "itfloat"]), new CallbackCollection(this.nextStep.bind(this), this.reward5.bind(this)), "aTreeFifthQuestionEnigma", "aTreeFifthQuestionWrong");
                break;
            // Sixth question (tic-tac-toe) : intro speech
            case 6:
                // Draw the speech
                this.drawSpeech(Database.getText("mapATreeTicTacToeIntro"), Database.getTranslatedText("mapATreeTicTacToeIntro"), 75);
                // Add the button to go to the next step
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeIntroButton"), 21, 24, "mapATreeTicTacToeIntroButton", Database.getTranslatedText("mapATreeTicTacToeIntroButton"));
                this.renderArea.addLinkCall(".mapATreeTicTacToeIntroButton", new CallbackCollection(this.nextStep.bind(this)));
                break;
            case 7:
                // Draw different things depending on the tic-tac-toa step
                switch (this.ticTacToeStep) {
                    case ATreeTicTacToeStep.PLAYING:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeLetsPlay"), Database.getTranslatedText("mapATreeTicTacToeLetsPlay"), 75); // Speech
                        this.drawTicTacToeBoard(); // Board
                        break;
                    case ATreeTicTacToeStep.NOBODY_WINS:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeNobodyWins"), Database.getTranslatedText("mapATreeTicTacToeNobodyWins"), 75); // Speech
                        this.drawTicTacToeBoard(false); // Board
                        break;
                    case ATreeTicTacToeStep.YOU_LOSE:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeYouLose"), Database.getTranslatedText("mapATreeTicTacToeYouLose"), 75); // Speech
                        this.drawTicTacToeBoard(false); // Board
                        break;
                }
                // If was just had a draw / lose, add the button to try again
                if (this.ticTacToeStep == ATreeTicTacToeStep.NOBODY_WINS || this.ticTacToeStep == ATreeTicTacToeStep.YOU_LOSE) {
                    this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeTryAgainButton"), 21, 24, "mapATreeTicTacToeTryAgainButton", Database.getTranslatedText("mapATreeTicTacToeTryAgainButton"));
                    this.renderArea.addLinkCall(".mapATreeTicTacToeTryAgainButton", new CallbackCollection(this.playTicTacToe_tryAgain.bind(this)));
                }
                break;
            case 8:
                this.drawSpeech(Database.getText("mapATreeTicTacToeYouWin"), Database.getTranslatedText("mapATreeTicTacToeYouWin"), 75); // Speech
                this.drawTicTacToeBoard(false); // Board
                // Button
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeAnymoreSweet"), 21, 24, "mapATreeTicTacToeAnymoreSweet", Database.getTranslatedText("mapATreeTicTacToeAnymoreSweet"), true);
                this.renderArea.addLinkCall(".mapATreeTicTacToeAnymoreSweet", new CallbackCollection(this.nextStep.bind(this)));
                break;
            case 9:
                this.drawSpeech(Database.getText("mapATreeNoMoreChallenge"), Database.getTranslatedText("mapATreeNoMoreChallenge"));
                break;
        }
    };
    return ATree;
})(Place);
var ATreeTicTacToeMinimaxReturnValue = (function () {
    function ATreeTicTacToeMinimaxReturnValue() {
        this.bestPosition = null;
        this.bestScore = null;
    }
    return ATreeTicTacToeMinimaxReturnValue;
})();
var ATreeTicTacToeSign;
(function (ATreeTicTacToeSign) {
    ATreeTicTacToeSign[ATreeTicTacToeSign["NO_SIGN"] = 0] = "NO_SIGN";
    ATreeTicTacToeSign[ATreeTicTacToeSign["X"] = 1] = "X";
    ATreeTicTacToeSign[ATreeTicTacToeSign["O"] = 2] = "O";
})(ATreeTicTacToeSign || (ATreeTicTacToeSign = {}));
var ATreeTicTacToeStep;
(function (ATreeTicTacToeStep) {
    ATreeTicTacToeStep[ATreeTicTacToeStep["PLAYING"] = 0] = "PLAYING";
    ATreeTicTacToeStep[ATreeTicTacToeStep["NOBODY_WINS"] = 1] = "NOBODY_WINS";
    ATreeTicTacToeStep[ATreeTicTacToeStep["YOU_LOSE"] = 2] = "YOU_LOSE";
})(ATreeTicTacToeStep || (ATreeTicTacToeStep = {}));
// N.B. : the case when the player wins isn't in this enumeration because this case is a new aTreeStep and is therefore handled by the global saving system 
var Algo;
(function (Algo) {
    // Return 0 is the number given is under 0, else return the number given
    function correctIfUnderZero(n) {
        if (n < 0)
            return 0;
        return n;
    }
    Algo.correctIfUnderZero = correctIfUnderZero;
    // Return the maximum value a javascript Number can get before loosing precision
    function getMaximumJavascriptInt() {
        return 9007199254740992; // 2^53
    }
    Algo.getMaximumJavascriptInt = getMaximumJavascriptInt;
    // Return a Pos object corresponding to a direction
    // x and y values can be between -a and a, but they can't both be 0
    function getRandomNotImmobileDirectionUpToThisSpeed(a) {
        var pos = new Pos();
        // Set x and y
        pos.x = Random.between(-a, a);
        if (pos.x != 0)
            pos.y = Random.between(-a, a);
        else {
            // x is 0, so y can't be 0 : we pick positive or negative randomly
            if (Random.flipACoin())
                pos.y = Random.between(-a, -1);
            else
                pos.y = Random.between(1, a);
        }
        // We possibly invert x and y because since x is treated first, basically it has more chance than y to be 0
        if (Random.flipACoin())
            pos.invert();
        // We return the position
        return pos;
    }
    Algo.getRandomNotImmobileDirectionUpToThisSpeed = getRandomNotImmobileDirectionUpToThisSpeed;
    // Add the html <u> tag around the specified letter in the string given, and return the resulting string
    function makeUnderlinedLetter(s, underlinedLetter) {
        if (underlinedLetter != -1)
            return s.slice(0, underlinedLetter) + "<u>" + s.charAt(underlinedLetter) + "</u>" + s.slice(underlinedLetter + 1, s.length);
        else
            return s;
    }
    Algo.makeUnderlinedLetter = makeUnderlinedLetter;
    // Transform a number in a string and add whitespaces every three figures
    function numberToStringButNicely(n) {
        // We store the number as a string in the variable str
        var str = n.toString();
        // If the number isn't going to loose precision because it's too big, we add whitespaces every three characters
        if (n < getMaximumJavascriptInt()) {
            // If the var is bigger than 3 characters
            if (str.length > 3) {
                for (var i = Math.floor(str.length / 3); i > 0; i--) {
                    if (i * 3 != str.length)
                        str = str.addAt(str.length - i * 3, " ");
                }
            }
        }
        // Return str
        return str;
    }
    Algo.numberToStringButNicely = numberToStringButNicely;
    // Create a string from a number and a word added depending on the plurality of the number
    function pluralFormat(n, singular, plural) {
        if (n == 1)
            return n.toString() + singular;
        return n.toString() + plural;
    }
    Algo.pluralFormat = pluralFormat;
    // Create a string from a number and a word added depending on the plurality of the number (and format the number nicely)
    function pluralFormatNicely(n, singular, plural) {
        if (n == 1)
            return numberToStringButNicely(n) + singular;
        return numberToStringButNicely(n) + plural;
    }
    Algo.pluralFormatNicely = pluralFormatNicely;
    // Remove all special characters from a string, only let lower-case letters
    function simplifyString(s) {
        return s.toLowerCase().replace(/[^\w]|_/g, "");
    }
    Algo.simplifyString = simplifyString;
    // Return the biggest number between two numbers
    function takeBiggest(a, b) {
        if (a > b)
            return a;
        return b;
    }
    Algo.takeBiggest = takeBiggest;
})(Algo || (Algo = {}));
var BarType;
(function (BarType) {
    BarType[BarType["SIMPLE"] = 0] = "SIMPLE";
    BarType[BarType["HEALTH"] = 1] = "HEALTH";
    BarType[BarType["UNICOLOR_HEALTH"] = 2] = "UNICOLOR_HEALTH";
})(BarType || (BarType = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var RenderLink = (function () {
    // Constructor
    function RenderLink() {
    }
    // Public methods
    RenderLink.prototype.run = function () {
    };
    return RenderLink;
})();
var RenderTag = (function () {
    // Constructor
    function RenderTag(x, tagString) {
        this.x = x;
        this.tagString = tagString;
    }
    // Public methods
    RenderTag.prototype.clone = function () {
        return new RenderTag(this.x, this.tagString);
    };
    RenderTag.prototype.draw = function (str) {
        return str.addAt(this.x, this.tagString);
    };
    // Public getters
    RenderTag.prototype.getString = function () {
        return this.tagString;
    };
    RenderTag.prototype.getX = function () {
        return this.x;
    };
    // Public setters
    RenderTag.prototype.setX = function (x) {
        this.x = x;
        return this;
    };
    return RenderTag;
})();
String.prototype.addAt = function (index, text) {
    return this.substr(0, index) + text + this.substr(index);
};
String.prototype.addChineseSpaces = function () {
    var newStr = "";
    for (var i = 0; i < Math.floor(this.length / 3); i++) {
        newStr += " ";
    }
    newStr += this;
    for (var i = 0; i < Math.floor(this.length / 3); i++) {
        newStr += " ";
    }
    return newStr;
};
String.prototype.fillWith = function (characters, howMuch) {
    var str = "";
    for (var i = 0; i < howMuch; i++) {
        str += characters;
    }
    return this.concat(str);
};
String.prototype.replaceAt = function (index, text) {
    return this.substr(0, index) + text + this.substr(index + text.length);
};
///<reference path="RenderLink.ts"/>
///<reference path="RenderTag.ts"/>
///<reference path="string_prototype.ts"/>
var RenderArea = (function () {
    // Constructor : by default, it creates en empty drawing area
    function RenderArea(width, height, character) {
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (character === void 0) { character = " "; }
        this.area = []; // Array of strings
        this.width = 0; // Width of the area = length of the strings
        this.height = 0; // Height of the area = number of strings
        this.tags = []; // Array of array of tags
        this.links = []; // Array of links
        this.resize(width, height, character);
    }
    // Public methods
    RenderArea.prototype.addAsciiButton = function (x1, x2, y, otherClass) {
        if (otherClass === void 0) { otherClass = ""; }
        return this.addTwoTags(x1, x2, y, "<span class=\"asciiButton " + otherClass + "\">", "</span>");
    };
    RenderArea.prototype.addAsciiNinjaButton = function (x1, x2, y, otherClass) {
        if (otherClass === void 0) { otherClass = ""; }
        return this.addTwoTags(x1, x2, y, "<span class=\"asciiNinjaButton " + otherClass + "\">", "</span>");
    };
    RenderArea.prototype.addAsciiRealButton = function (str, x, y, otherClass, comment, commentBelow, underlinedLetter, color, commentCentered, commentRightAligned) {
        if (otherClass === void 0) { otherClass = ""; }
        if (comment === void 0) { comment = ""; }
        if (commentBelow === void 0) { commentBelow = false; }
        if (underlinedLetter === void 0) { underlinedLetter = -1; }
        if (color === void 0) { color = null; }
        if (commentCentered === void 0) { commentCentered = true; }
        if (commentRightAligned === void 0) { commentRightAligned = false; }
        // Add the button
        if (this.addTag(new RenderTag(x, "<span class=\"aroundRealButton\"><span class=\"asciiRealButton " + otherClass + "\"" + (color == null ? "" : " style=\"background-color:" + color.getColorString() + ";\"") + ">" + Algo.makeUnderlinedLetter(str, underlinedLetter) + "</span></span>"), y) == false)
            return false;
        // Add the comment
        if (comment != "") {
            var commentX;
            var commentY;
            // If the comment should be on the right
            if (commentBelow == false) {
                commentX = x + str.length + 2;
                commentY = y;
            }
            else {
                if (commentCentered)
                    commentX = Algo.correctIfUnderZero(x + str.length / 2 - comment.length / 2);
                else if (commentRightAligned == false)
                    commentX = x;
                else
                    commentX = x + (str.length - comment.length);
                commentY = y + 1;
            }
            if (this.drawString(comment, commentX, commentY) == false)
                return false;
            if (this.addTwoTags(commentX, commentX + comment.length, commentY, "<span class=\"translated\">", "</span>") == false)
                return false;
        }
        return true;
    };
    RenderArea.prototype.addBackgroundColor = function (x1, x2, y, color) {
        return this.addTwoTags(x1, x2, y, "<span style=\"background-color:" + color.getColorString() + "\">", "</span>");
    };
    RenderArea.prototype.addBold = function (x1, x2, y) {
        return this.addTwoTags(x1, x2, y, "<b>", "</b>");
    };
    RenderArea.prototype.addCheckbox = function (x, y, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked, otherClass, checkedByDefault) {
        if (checkedByDefault === void 0) { checkedByDefault = false; }
        this.addTag(new RenderTag(x, "<span class=\"aroundCheckbox\"><input type=\"checkbox\" class=\"asciiCheckbox " + otherClass + "\"" + (checkedByDefault ? "checked" : "") + "></span>"), y);
        this.addLinkCheckbox("." + otherClass, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked);
    };
    RenderArea.prototype.addColor = function (x1, x2, y, color) {
        return this.addTwoTags(x1, x2, y, "<span style=\"color:" + color.getColorString() + "\">", "</span>");
    };
    RenderArea.prototype.addComment = function (x, y, text, otherClass) {
        return this.addTag(new RenderTag(x, "<span class=\"aroundComment " + otherClass + "\"><span class=\"comment englishComment\">" + text + "</span></span>"), y);
    };
    RenderArea.prototype.addEnigma = function (x1, x2, y, enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage) {
        if (wrongClass === void 0) { wrongClass = null; }
        if (wrongMessage === void 0) { wrongMessage = "Wrong"; }
        this.addTag(new RenderTag(x1, "<span class=\"aroundTextInput\"><input type=\"text\" class=\"asciiTextInput noHotkeys " + otherClass + "\" style=\"width:" + (x2 - x1).toString() + "ex\"></span>"), y);
        // If there should be a wrong message
        if (wrongClass != null) {
            // We add the wrong message
            this.drawString(wrongMessage, x1, y + 2);
            this.addTwoTags(x1, x1 + wrongMessage.length, y + 2, "<span class=\"enigmaWrongMessage " + wrongClass + "\">", "</span>");
            // We add the link input which will also display the wrong message if needed
            this.addLinkInput("." + otherClass, enigmaAnswer, callbackCollection, new CallbackCollection(function () {
                // We make the element visible
                $("." + wrongClass).css("visibility", "visible");
                // We add a timeout to hide it soon
                window.setTimeout(function () {
                    $("." + wrongClass).css("visibility", "hidden");
                }, 1000);
            }));
        }
        else {
            // We add a simple link input
            this.addLinkInput("." + otherClass, enigmaAnswer, callbackCollection, new CallbackCollection());
        }
    };
    RenderArea.prototype.addFullComment = function (x, y, english, translated, otherClass) {
        if (this.addComment(Algo.correctIfUnderZero(x - (english.length / 2)), y, english, otherClass) == false)
            return false;
        else
            return this.addTranslatedComment(Algo.correctIfUnderZero(x - (translated.length / 2)), y + 1, translated, otherClass);
    };
    RenderArea.prototype.addHiddenClass = function (x1, x2, y, className) {
        return this.addTwoTags(x1, x2, y, "<span visibility=\"hidden\" class=\"" + className + "\">", "</span>");
    };
    RenderArea.prototype.addHtmlLink = function (x, y, url, text) {
        this.drawString(text, x, y);
        this.addTwoTags(x, x + text.length, y, "<a target=\"_blank\" href=\"" + url + "\">", "</a>");
    };
    RenderArea.prototype.addLinkCall = function (e, callbackCollection) {
        this.links.push(new RenderLinkClick(e, callbackCollection));
    };
    RenderArea.prototype.addLinkCallbackCollection = function (callbackCollection) {
        this.links.push(new RenderLinkCallbackCollection(callbackCollection));
    };
    RenderArea.prototype.addLinkChange = function (e, callbackCollection) {
        this.links.push(new RenderLinkChange(e, callbackCollection));
    };
    RenderArea.prototype.addLinkCheckbox = function (e, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked) {
        this.links.push(new RenderLinkCheckbox(e, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked));
    };
    RenderArea.prototype.addLinkInput = function (e, enigmaAnswer, callbackCollection, callbackCollectionWrong) {
        this.links.push(new RenderLinkInput(e, enigmaAnswer, callbackCollection, callbackCollectionWrong));
    };
    RenderArea.prototype.addLinkOnHoverShowTooltip = function (classHover, classTooltip) {
        this.links.push(new RenderLinkOnHoverShowTooltip(classHover, classTooltip));
    };
    RenderArea.prototype.addLinkOver = function (e1, e2) {
        this.links.push(new RenderLinkOver(e1, e2));
    };
    RenderArea.prototype.addLinkSimpleInput = function (e, callbackCollection, defaultValue, hasFocus) {
        this.links.push(new RenderLinkSimpleInput(e, callbackCollection, defaultValue, hasFocus));
    };
    RenderArea.prototype.addList = function (x1, x2, y, id, callbackCollection, optionsArray) {
        if (optionsArray === void 0) { optionsArray = []; }
        var options = "";
        // Add all the options tag & text to the options string
        for (var i = 0; i < optionsArray.length / 2; i++) {
            options += "<option id=\"" + optionsArray[i * 2] + "\" class=\"asciiSelectOption\">" + optionsArray[i * 2 + 1] + "</option>";
        }
        // Add the list itself as a tag
        this.addTag(new RenderTag(x1, "<span class=\"aroundSelect\"><select id=\"" + id + "\" class=\"asciiSelect\" style=\"width:" + (x2 - x1).toString() + "ex\">" + options + "</select></span>"), y);
        // Add the render link used to control the list
        this.addLinkChange("#" + id, callbackCollection);
    };
    RenderArea.prototype.addMultipleAsciiButtons = function (otherClass) {
        var coordinates = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            coordinates[_i - 1] = arguments[_i];
        }
        // If the length of the coordinates array isn't multiple of 3, we return false
        if (coordinates.length % 3 != 0)
            return false;
        // We add all the buttons
        for (var i = 0; i < coordinates.length / 3; i++) {
            if (this.addAsciiButton(coordinates[3 * i], coordinates[3 * i + 1], coordinates[3 * i + 2], otherClass) == false)
                return false;
        }
        // We return true
        return true;
    };
    RenderArea.prototype.addMultipleAsciiNinjaButtons = function (otherClass) {
        var coordinates = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            coordinates[_i - 1] = arguments[_i];
        }
        // If the length of the coordinates array isn't multiple of 3, we return false
        if (coordinates.length % 3 != 0)
            return false;
        // We add all the buttons
        for (var i = 0; i < coordinates.length / 3; i++) {
            if (this.addAsciiNinjaButton(coordinates[3 * i], coordinates[3 * i + 1], coordinates[3 * i + 2], otherClass) == false)
                return false;
        }
        // We return true
        return true;
    };
    RenderArea.prototype.addSimpleInput = function (x1, x2, y, callbackCollection, otherClass, defaultValue, hasFocus) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (hasFocus === void 0) { hasFocus = false; }
        this.addTag(new RenderTag(x1, "<span class=\"aroundTextInput\"><input type=\"text\" class=\"asciiTextInput noHotkeys " + otherClass + "\" style=\"width:" + (x2 - x1).toString() + "ex\"></span>"), y);
        this.addLinkSimpleInput("." + otherClass, callbackCollection, defaultValue, hasFocus);
    };
    RenderArea.prototype.addTag = function (tag, y) {
        // BUGS
        if (Bugs.getGraphicalBugLevel() >= 3)
            y += Random.between(0, 10) - 5;
        // Return false if y is out of bounds
        if (y < 0 || y >= this.height)
            return false;
        // Return false if x is out of bounds
        if (tag.getX() < 0 || tag.getX() > this.getWidth())
            return false;
        // If it's the first tag we add, we just add it
        if (this.tags[y].length == 0) {
            this.tags[y].push(tag);
            return true;
        }
        else {
            for (var i = 0; i < this.tags[y].length; i++) {
                // If this is the right place to add the tag, we add it and we break the loop
                if (tag.getX() > this.tags[y][i].getX()) {
                    this.tags[y].splice(i, 0, tag); // We add the tag just before the one we're iterating
                    return true;
                }
            }
        }
        // If we didn't add it yet, it means we have to add it at the end of the array : we do so
        this.tags[y].push(tag);
        // Return true
        return true;
    };
    RenderArea.prototype.addTextarea = function (x, y, width, height, otherClass, text) {
        if (text === void 0) { text = ""; }
        return this.addTag(new RenderTag(x, "<textarea class=\"textarea " + otherClass + "\" rows=\"" + height.toString() + "\" cols=\"" + width.toString() + "\">" + text + "</textarea>"), y);
    };
    RenderArea.prototype.addTooltip = function (tooltipClass, tooltipText) {
        return this.addTag(new RenderTag(0, "<span class=\"tooltip " + tooltipClass + "\">" + tooltipText + "</span>"), 0);
    };
    RenderArea.prototype.addTranslatedComment = function (x, y, text, otherClass) {
        return this.addTag(new RenderTag(x, "<span class=\"aroundComment " + otherClass + "\"><span class=\"comment translated\">" + text + "</span></span>"), y);
    };
    RenderArea.prototype.addTwoTags = function (x1, x2, y, tag1, tag2) {
        // If it fails, we return false
        if (this.addTag(new RenderTag(x1, tag1), y) == false || this.addTag(new RenderTag(x2, tag2), y) == false)
            return false;
        // Else, we return true
        return true;
    };
    RenderArea.prototype.drawArea = function (renderArea, x, y, transparency) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (transparency === void 0) { transparency = null; }
        // Iterate over lines of the area to draw
        for (var i = 0; i < renderArea.getHeight(); i++) {
            // Draw the text
            this.drawString(renderArea.getLine(i), x, y + i, false, transparency);
            // Add the tags
            for (var j = 0; j < renderArea.getTags()[i].length; j++) {
                this.addTag(renderArea.getTags()[i][j].clone().setX(renderArea.getTags()[i][j].getX() + x), y + i);
            }
        }
    };
    RenderArea.prototype.drawArray = function (array, x, y, transparency, spanClass) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (transparency === void 0) { transparency = null; }
        if (spanClass === void 0) { spanClass = null; }
        for (var i = 0; i < array.length; i++) {
            // Draw the string
            this.drawString(array[i], x, y + i, false, transparency);
            // Add the tags
            if (spanClass != null) {
                this.addTwoTags(x, x + array[i].length, y + i, "<span class=\"" + spanClass + "\">", "</span>");
            }
        }
    };
    RenderArea.prototype.drawHorizontalLine = function (str, x1, x2, y) {
        var strBuffer = "";
        // We put the string to draw in a buffer (for optimizations reasons)
        strBuffer = strBuffer.fillWith(str, x2 - x1);
        // We draw the string
        return this.drawString(strBuffer, x1, y);
    };
    RenderArea.prototype.drawSpeech = function (str, y, x1, x2, speechClass, translatedText) {
        if (speechClass === void 0) { speechClass = null; }
        if (translatedText === void 0) { translatedText = null; }
        var currentLine = ""; // Current line
        var lastWordIndex = 0; // Index of the last word drawn
        var width = x2 - x1 - 1; // We calculate the speech's width (-1 because we need space for the " characters)
        var words = str.split(" "); // We split the strings into an array of words
        var xPos; // Used to store some position at some time
        // Draw the first " character
        this.drawString("\"", x1, y);
        for (var i = 0; i < words.length; i++) {
            // If adding the current word to the line would exceed the width or we're working on the last word
            if (currentLine.length + words[i].length >= width) {
                // We draw the current line
                xPos = x1 + 1 + width / 2 - (currentLine.length / 2);
                this.drawString(currentLine, xPos, y);
                // If a speechClass is specified, we add tags
                if (speechClass != null)
                    this.addTwoTags(xPos, xPos + currentLine.length, y, "<span class=\"" + speechClass + "\">", "</span>");
                // We go to the line below
                currentLine = "";
                y++;
            }
            // We add a space before the word if there's at least one word before
            if (currentLine != "")
                currentLine += " ";
            // We add the word to the current line
            currentLine += words[i];
            // If we're working on the last word, we draw the line anyway
            if (i == words.length - 1) {
                xPos = x1 + 1 + width / 2 - (currentLine.length / 2);
                this.drawString(currentLine, xPos, y);
                // If a speechClass is specified, we add tags
                if (speechClass != null)
                    this.addTwoTags(xPos, xPos + currentLine.length, y, "<span class=\"" + speechClass + "\">", "</span>");
            }
        }
        // Draw the second " character
        this.drawString("\"", x2, y);
        // If we should add a translation, then we add it and the translated text isn't empty
        if (translatedText != null && translatedText != "") {
            this.addTooltip(speechClass + "Tooltip", translatedText);
            this.addLinkOnHoverShowTooltip("." + speechClass, "." + speechClass + "Tooltip");
        }
        // We return y, which is the y position of the last speech line
        return y;
    };
    RenderArea.prototype.drawString = function (str, x, y, translated, transparency) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (translated === void 0) { translated = false; }
        if (transparency === void 0) { transparency = null; }
        var indexFirst;
        var indexLast;
        // BUGS (change position)
        if (Bugs.getGraphicalBugLevel() >= 4) {
            x += Random.between(0, 20) - 10;
            y += Random.between(0, 4) - 2;
        }
        // Return false if y is out of bounds
        if (y < 0 || y >= this.height)
            return false;
        // BUGS (random character)
        if (Bugs.getGraphicalBugLevel() >= 3)
            str = Bugs.changeRandomCharacter(str);
        else if (Bugs.getGraphicalBugLevel() >= 2 && Random.oneChanceOutOf(2))
            str = Bugs.changeRandomCharacter(str);
        else if (Bugs.getGraphicalBugLevel() >= 1 && Random.oneChanceOutOf(3))
            str = Bugs.changeRandomCharacter(str);
        // The indices of the first and last character we're going to draw
        indexFirst = 0;
        indexLast = str.length;
        // Restrict the indices if out of bounds
        if (x + indexLast >= this.width)
            indexLast -= (x + indexLast - this.width);
        if (x < 0)
            indexFirst = -x;
        // If there isn't even one character to draw, we return false
        if (indexLast < 0 || indexFirst >= str.length)
            return false;
        // If there's no transparent character, we just draw the whole string
        if (transparency == null) {
            this.area[y] = this.area[y].replaceAt(x + indexFirst, str.substring(indexFirst, indexLast));
        }
        else {
            for (var i = indexFirst; i < indexLast; i++) {
                // If the character isn't alpha
                if (str[i] != transparency.getAlphaCharacter()) {
                    // If the meta alpha character isn't null and our character is this meta alpha character, we draw the alpha character
                    if (transparency.getMetaAlphaCharacter() != null && str[i] == transparency.getMetaAlphaCharacter())
                        this.area[y] = this.area[y].replaceAt(x + i, transparency.getAlphaCharacter());
                    else
                        this.area[y] = this.area[y].replaceAt(x + i, str[i]);
                }
            }
        }
        // If translated is true, add the tags
        if (translated) {
            this.addTwoTags(x, x + str.length, y, "<span class=\"translated\">", "</span>");
        }
        // And we return true
        return true;
    };
    RenderArea.prototype.drawVerticalLine = function (str, x, y1, y2) {
        for (var i = y1; i <= y2; i++) {
            if (this.drawString(str, x, i) == false)
                return false;
        }
        return true;
    };
    RenderArea.prototype.eraseEverything = function (character) {
        if (character === void 0) { character = " "; }
        var str;
        // We check if the character is correct, return false if it isn't
        if (character.length != 1)
            return false;
        // We prepare the string
        str = "";
        str = str.fillWith(character, this.width);
        // We fill all the lines with the character given in parameter
        for (var i = 0; i < this.height; i++) {
            this.drawString(str, 0, i);
        }
        // We return true
        return true;
    };
    RenderArea.prototype.removeAllLinks = function () {
        this.links = [];
    };
    RenderArea.prototype.removeAllTags = function () {
        for (var i = 0; i < this.tags.length; i++) {
            this.tags[i] = [];
        }
    };
    RenderArea.prototype.resetAllButSize = function (character) {
        if (character === void 0) { character = " "; }
        this.eraseEverything(character);
        this.removeAllTags();
        this.removeAllLinks();
    };
    RenderArea.prototype.resize = function (newWidth, newHeight, character) {
        if (character === void 0) { character = " "; }
        // We store the old size
        var oldWidth = this.width;
        var oldHeight = this.height;
        // We check if the character is correct, return false if it isn't
        if (character.length != 1)
            return false;
        // We try to change the size, return false if failure
        if (this.setSize(newWidth, newHeight) == false)
            return false;
        // We resize the height
        if (newHeight > oldHeight) {
            for (var i = oldHeight; i < newHeight; i++) {
                // We resize the tags
                this.tags.push([]);
                // We resize the area
                this.area.push("");
                // If the new width is higher
                if (newWidth > oldWidth) {
                    for (var j = 0; j < oldWidth; j++) {
                        this.area[i] += character;
                    }
                }
                else if (oldWidth > newWidth) {
                    for (var j = 0; j < newWidth; j++) {
                        this.area[i] += character;
                    }
                }
            }
        }
        else if (oldHeight > newHeight) {
            // We resize the tags
            this.tags.splice(this.tags.length - (oldHeight - newHeight), oldHeight - newHeight); // We remove some lines to reduce the height
            // We resize the area
            this.area.splice(this.area.length - (oldHeight - newHeight), oldHeight - newHeight); // We remove some lines to reduce the height
        }
        // We resize the width
        if (newWidth > oldWidth) {
            // We add characters at the end of the lines (lines 0 to new height)
            for (var i = 0; i < newHeight; i++) {
                for (var j = oldWidth; j < newWidth; j++) {
                    this.area[i] += character;
                }
            }
        }
        else if (oldWidth > newWidth) {
            // We each line (0 to new height), we only keep the beginning of the string
            for (var i = 0; i < newHeight; i++) {
                this.area[i] = this.area[i].substr(0, newWidth);
            }
        }
        // And we return true
        return true;
    };
    RenderArea.prototype.resizeFromArea = function (renderArea) {
        this.resize(renderArea.getWidth(), renderArea.getHeight());
    };
    RenderArea.prototype.resizeFromArray = function (array, xAdd, yAdd) {
        if (xAdd === void 0) { xAdd = 0; }
        if (yAdd === void 0) { yAdd = 0; }
        var width = 0;
        var height = array.length;
        for (var i = 0; i < array.length; i++) {
            if (width < array[i].length)
                width = array[i].length;
        }
        this.resize(width + xAdd, height + yAdd);
    };
    RenderArea.prototype.runLinks = function () {
        for (var i = 0; i < this.links.length; i++) {
            this.links[i].run();
        }
    };
    // Public getters
    RenderArea.prototype.getForRendering = function () {
        var areaClone = [];
        // If we have no tags at all
        if (this.tags.length == 0) {
            // We simply return the area as a string
            return this.area.join("\n");
        }
        else {
            // We clone the area
            areaClone = this.area.slice(0);
            // We add tags to it
            for (var i = 0; i < this.height; i++) {
                for (var j = 0; j < this.tags[i].length; j++) {
                    // If the tag should be added, we add it
                    areaClone[i] = this.tags[i][j].draw(areaClone[i]);
                }
            }
            // We return the cloned area as a string
            return areaClone.join("\n");
        }
    };
    RenderArea.prototype.getLine = function (n) {
        if (n < 0 || n >= this.height)
            console.log("Error : trying to get a line out of the bounds of a drawing area.");
        else
            return this.area[n];
    };
    RenderArea.prototype.getTags = function () {
        return this.tags;
    };
    RenderArea.prototype.getWidth = function () {
        return this.width;
    };
    RenderArea.prototype.getHeight = function () {
        return this.height;
    };
    // Private methods
    RenderArea.prototype.setSize = function (width, height) {
        // Return false if the size given is incorrect
        if (width < 0 || height < 0)
            return false;
        this.width = width;
        this.height = height;
        return true;
    };
    return RenderArea;
})();
var CallbackCollection = (function () {
    // Constructor
    function CallbackCollection() {
        var callbacks = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            callbacks[_i - 0] = arguments[_i];
        }
        this.callbacks = []; // Array of functions returning void
        this.callbacks = callbacks;
    }
    // Public methods
    CallbackCollection.prototype.addCallback = function (callback) {
        this.callbacks.push(callback);
        return this;
    };
    CallbackCollection.prototype.fire = function () {
        for (var i = 0; i < this.callbacks.length; i++) {
            this.callbacks[i]();
        }
    };
    CallbackCollection.prototype.reset = function () {
        this.callbacks = [];
    };
    return CallbackCollection;
})();
///<reference path="CallbackCollection.ts"/>
var Resource = (function () {
    // Constructor
    function Resource(savingPrefix) {
        if (savingPrefix === void 0) { savingPrefix = null; }
        // Attributes
        this.accumulated = 0;
        this.current = 0;
        this.max = 0;
        this.callbackCollection = new CallbackCollection();
        // Set the saving prefix
        this.savingPrefix = savingPrefix;
    }
    // Public methods
    Resource.prototype.add = function (n) {
        // If the operation would leave an < 0 value, we stop
        if (this.current + n < 0)
            return false;
        // If we add a positive value, we also add it to the accumulated
        if (n > 0)
            this.setAccumulated(this.accumulated + n);
        // We add to the current value
        this.setCurrent(this.current + n);
        // We return true
        return true;
    };
    Resource.prototype.load = function () {
        this.setAccumulated(Saving.loadNumber(this.savingPrefix + "Accumulated"));
        this.setCurrent(Saving.loadNumber(this.savingPrefix + "Current"));
        this.setMax(Saving.loadNumber(this.savingPrefix + "Max"));
    };
    Resource.prototype.save = function () {
        Saving.saveNumber(this.savingPrefix + "Accumulated", this.getAccumulated());
        Saving.saveNumber(this.savingPrefix + "Current", this.getCurrent());
        Saving.saveNumber(this.savingPrefix + "Max", this.getMax());
    };
    Resource.prototype.transferTo = function (resource, howMany, ratio) {
        if (howMany === void 0) { howMany = -1; }
        if (ratio === void 0) { ratio = 1; }
        // If howMany is below 0, then we transfer everything
        if (howMany < 0)
            howMany = this.current;
        else {
            // If we don't have enough to transfer, we return false
            if (howMany > this.current)
                return false;
        }
        // We lower our current quantity
        this.add(-howMany);
        // We add to the other resource
        resource.add(howMany * ratio);
        // We return true
        return true;
    };
    // Public getters
    Resource.prototype.getAccumulated = function () {
        return this.accumulated;
    };
    Resource.prototype.getCurrent = function () {
        return this.current;
    };
    Resource.prototype.getCurrentAsString = function () {
        return this.current.toString();
    };
    Resource.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    Resource.prototype.getMax = function () {
        return this.max;
    };
    // Public setters
    Resource.prototype.setCurrent = function (n) {
        // Set the value
        this.current = n;
        // Check if the max value should change
        if (this.current > this.max)
            this.max = this.current;
        // Fire the callbacks
        this.callbackCollection.fire();
    };
    // Private methods
    Resource.prototype.setAccumulated = function (n) {
        this.accumulated = n;
    };
    Resource.prototype.setMax = function (n) {
        this.max = n;
    };
    return Resource;
})();
///<reference path="BarType.ts"/>
///<reference path="RenderArea.ts"/>
///<reference path="Resource.ts"/>
var Bar = (function (_super) {
    __extends(Bar, _super);
    // Constructor
    function Bar(type) {
        // Super constructor
        _super.call(this);
        // We set the type
        this.type = type;
        // We set some parameters depending on the bar type
        switch (this.type) {
            case BarType.SIMPLE:
                this.contentCharacter = "*";
                this.bordersCharacter = "-";
                break;
            case BarType.HEALTH:
            case BarType.UNICOLOR_HEALTH:
                this.contentCharacter = " ";
                this.bordersCharacter = "-";
                break;
            default:
                console.log("Error : trying to load an incorrect bar type");
                break;
        }
    }
    // Public methods
    Bar.prototype.update = function (ratio, text) {
        if (text === void 0) { text = ""; }
        var bordersBool;
        var lateralBordersBool;
        var textBool;
        var contentY1;
        var contentY2;
        var contentSize;
        var colorType;
        // If we have no height, we return
        if (this.getHeight() <= 0)
            return false;
        // If the width is really to low, we return
        if (this.getWidth() <= 1)
            return false;
        // We remove all the tags and all the text
        this.removeAllTags();
        this.eraseEverything();
        // We decide if there will be text or not..
        if (text.length != 0)
            textBool = true;
        else
            textBool = false;
        // We decide if there will be borders or not..
        if (this.getHeight() < (textBool ? 4 : 3))
            bordersBool = false;
        else
            bordersBool = true;
        // ..and where the real content of the bar will take place
        if (bordersBool) {
            contentY1 = 1;
            if (textBool)
                contentY2 = this.getHeight() - 3;
            else
                contentY2 = this.getHeight() - 2;
        }
        else {
            contentY1 = 0;
            if (textBool && this.getHeight() > 1)
                contentY2 = this.getHeight() - 2;
            else
                contentY2 = this.getHeight() - 1;
        }
        // We decide if there will be lateral borders
        if (this.getWidth() >= 20)
            lateralBordersBool = true;
        else
            lateralBordersBool = false;
        // We possibly draw the lateral borders
        if (lateralBordersBool) {
            for (var i = contentY1; i <= contentY2; i++) {
                this.drawString("|", 0, i);
                this.drawString("|", this.getWidth() - 1, i);
            }
        }
        // We draw the borders if there are borders
        if (bordersBool) {
            this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, 0);
            if (textBool)
                this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, this.getHeight() - 2);
            else
                this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, this.getHeight() - 1);
        }
        // We calculate the content size
        contentSize = Math.floor((this.getWidth() - (lateralBordersBool ? 2 : 0)) * ratio);
        if (contentSize == 0 && ratio > 0)
            contentSize = 1; // If the ratio is > 0, then the content size can't be == 0
        // We draw the content if the content size is > 0
        if (contentSize > 0) {
            for (var i = contentY1; i <= contentY2; i++) {
                this.drawHorizontalLine(this.contentCharacter, (lateralBordersBool ? 1 : 0), contentSize, i);
            }
        }
        // We draw the text if there is text
        if (textBool) {
            this.drawString(text, (text.length > this.getWidth() ? 0 : Math.floor(this.getWidth() / 2 - text.length / 2)), this.getHeight() - 1);
        }
        // We add special tags, depending on the type of bar
        switch (this.type) {
            case BarType.HEALTH:
            case BarType.UNICOLOR_HEALTH:
                // We choose the color
                if (this.type == BarType.HEALTH) {
                    if (ratio < 0.2)
                        colorType = ColorType.HEALTH_RED;
                    else if (ratio < 0.5)
                        colorType = ColorType.HEALTH_ORANGE;
                    else
                        colorType = ColorType.HEALTH_GREEN;
                }
                else
                    colorType = ColorType.HEALTH_UNICOLOR;
                // We add the tags
                if (contentSize > 0) {
                    for (var i = contentY1; i <= contentY2; i++) {
                        this.addBackgroundColor((lateralBordersBool ? 1 : 0), (lateralBordersBool ? 1 : 0) + contentSize, i, new Color(colorType));
                    }
                }
                break;
        }
        // Finally, we return true
        return true;
    };
    return Bar;
})(RenderArea);
var QuestEntity = (function () {
    // Constructor
    function QuestEntity(quest, globalPosition, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation) {
        if (naming === void 0) { naming = new Naming("???", "???"); }
        if (renderArea === void 0) { renderArea = null; }
        if (renderAreaPosition === void 0) { renderAreaPosition = new Pos(0, 0); }
        if (cbc === void 0) { cbc = null; }
        if (questEntityMovement === void 0) { questEntityMovement = null; }
        if (questEntityAnimation === void 0) { questEntityAnimation = null; }
        // Is dead ?
        this.dead = false;
        // Is out of area ?
        this.outOfArea = false;
        // Is destructible ?
        this.destructible = false;
        // Should the health bar be shown ?
        this.healthBar = null;
        this.transparency = null;
        this.noMovementLastUpdate = true;
        // Weapon
        this.questEntityWeapons = [];
        // Spell casters
        this.questEntitySpellCasters = [];
        // Last damage reason
        this.lastDamageReason = null;
        // Naming
        this.naming = null;
        // Team
        this.team = QuestEntityTeam.MOBS; // The default team of an entity is MOBS because most entities want to use this one
        // Can it be forced to move?
        this.canBeForcedToMove = true;
        // The special spell casting damage reason, null until we create it
        this.spellCastingDamageReason = null;
        // Is a spell?
        this.isASpell = false;
        // Is jumping?
        this.jumping = false;
        this.jumpSpeed = null;
        this.jumpDuration = null;
        // Is controlled falling? (controlled falling is when we fall after a jump for example, it means that we can move while falling)
        this.controlledFalling = false;
        // Is stopped?
        this.stopped = false;
        this.stoppedDuration = null;
        // Is affected by anti gravity?
        this.antiGravity = false;
        this.antiGravityDuration = null;
        // Is a turtle?
        this.turtle = false;
        this.turtleDuration = null;
        this.turtleLastMovement = null;
        // Is in berserk mode?
        this.berserk = false;
        this.berserkDuration = null;
        // Apply parameters
        this.quest = quest;
        this.globalPosition = globalPosition;
        this.naming = naming;
        this.setRenderArea(renderArea);
        this.renderAreaPosition = renderAreaPosition;
        this.setCbc(cbc);
        this.setQuestEntityMovement(questEntityMovement);
        this.setQuestEntityAnimation(questEntityAnimation);
    }
    // Public methods
    QuestEntity.prototype.addQuestEntitySpellCaster = function (questEntitySpellCaster) {
        this.questEntitySpellCasters.push(questEntitySpellCaster);
    };
    QuestEntity.prototype.addQuestEntityWeapon = function (questEntityWeapon) {
        this.questEntityWeapons.push(questEntityWeapon);
    };
    QuestEntity.prototype.beginAntiGravity = function (antiGravityDuration) {
        if (this.antiGravity == false) {
            this.antiGravity = true;
            this.antiGravityDuration = antiGravityDuration;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.beginBerserk = function (berserkDuration) {
        if (this.berserk == false) {
            this.berserk = true;
            this.berserkDuration = berserkDuration;
            this.setHp(Math.ceil(this.getHp() / 2));
            return true;
        }
        return false;
    };
    QuestEntity.prototype.beginTurtle = function (turtleDuration) {
        if (this.turtle == false) {
            this.turtle = true;
            this.turtleDuration = turtleDuration;
            this.turtleLastMovement = 0;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.canJumpInMidAir = function () {
        return false;
    };
    QuestEntity.prototype.checkCollision = function (pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // BUGS : if the level is >= 4, we just return a random value
        if (Bugs.getQuestBugLevel() >= 4)
            return Random.flipACoin();
        for (var i = 0; i < this.quest.getEntities().length; i++) {
            // If it's not the same object as us
            if (this.quest.getEntities()[i] != this) {
                // If we collide with it, we return true
                if (this.collidesWith(this.quest.getEntities()[i], pos))
                    return true;
            }
        }
        // No collision
        return false;
    };
    QuestEntity.prototype.collidesWith = function (questEntity, pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // If we both have a collision box collection, we return the result of the collision test
        if (this.cbc != null && questEntity.getCbc() != null)
            return this.cbc.collidesWith(questEntity.getCbc(), pos);
        // Else, we return false, there can't be any collision
        return false;
    };
    QuestEntity.prototype.draw = function (renderArea) {
        if (this.renderArea != null) {
            // On some conditions, we exit now and don't draw anything (it allows no drawing outside of the quest panel when realQuestSize and realQuestDrawingSize are different (in the hole for example)
            if (this.globalPosition.x + this.renderAreaPosition.x + this.quest.getGlobalDrawingOffset().x > this.quest.getRealQuestDrawingSize().x)
                return;
            if (this.globalPosition.y + this.renderAreaPosition.y + this.quest.getGlobalDrawingOffset().y > this.quest.getRealQuestDrawingSize().y)
                return;
            if (this.globalPosition.x + this.renderAreaPosition.x + this.renderArea.getWidth() + this.quest.getGlobalDrawingOffset().x < 0)
                return;
            if (this.globalPosition.y + this.renderAreaPosition.y + this.renderArea.getHeight() + this.quest.getGlobalDrawingOffset().y < 0)
                return;
            renderArea.drawArea(this.renderArea, this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.globalPosition.x + this.renderAreaPosition.x, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.globalPosition.y + this.renderAreaPosition.y, this.transparency);
        }
        // If the debug mode is on
        if (Saving.loadBool("gameDebug")) {
            if (this.cbc != null) {
                for (var i = 0; i < this.cbc.getBoxes().length; i++) {
                    for (var k = 0; k < this.cbc.getBoxes()[i].getSize().x; k++) {
                        for (var j = 0; j < this.cbc.getBoxes()[i].getSize().y; j++) {
                            renderArea.drawString("D", this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.globalPosition.x + this.cbc.getBoxes()[i].getPosition().x + k, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.globalPosition.y + this.cbc.getBoxes()[i].getPosition().y + j);
                        }
                    }
                }
            }
        }
    };
    QuestEntity.prototype.forceMoving = function (movement) {
        if (this.canBeForcedToMove)
            this.move(movement, true);
    };
    QuestEntity.prototype.getAndPossiblyCreateSpellCastingDamageReason = function (naming) {
        // If our spell casting damage reason is null, we create it
        if (this.spellCastingDamageReason == null) {
            this.spellCastingDamageReason = new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL);
            this.spellCastingDamageReason.setQuestEntity(this);
        }
        // We set the naming given
        this.spellCastingDamageReason.setSpellNaming(naming);
        // We return it
        return this.spellCastingDamageReason;
    };
    QuestEntity.prototype.getDeathMessage = function () {
        // If there's a last damage reason
        if (this.getLastDamageReason() != null) {
            return this.getLastDamageReason().getWhoNaming().getBeginning() + " killed " + this.naming.getAnywhere() + " with " + this.getLastDamageReason().getWhatNaming().getAnywhere() + ".";
        }
        // Else
        return this.naming.getBeginning() + " was erased from reality.";
    };
    QuestEntity.prototype.getRenderAreaCenter = function () {
        if (this.renderArea != null)
            return this.globalPosition.plus(new Pos(Math.floor(this.renderArea.getWidth() / 2), Math.floor(this.renderArea.getHeight() / 2)));
        return this.globalPosition;
    };
    QuestEntity.prototype.goTowards = function (ourPosition, goalPosition, minDistance, speed, dontTakeYInAccount) {
        if (minDistance === void 0) { minDistance = 0; }
        if (speed === void 0) { speed = new Pos(1, 1); }
        if (dontTakeYInAccount === void 0) { dontTakeYInAccount = false; }
        // We create the movement
        var movement = new Pos(0, 0);
        // We find the distance between our position and the position where we want to go
        var distance = ourPosition.getDistance(goalPosition);
        // If the x distance is the biggest (we do /2 because characters are thin in the ascii art world!) and big enough (or if we don't take in account y)
        if ((Math.abs(distance.x) / 2 > Math.abs(distance.y) && Math.abs(distance.x) > minDistance * 2) || dontTakeYInAccount) {
            if (distance.x > 0)
                movement.x = -speed.x;
            else if (distance.x < 0)
                movement.x = speed.x;
        }
        else if (Math.abs(distance.y) > minDistance) {
            if (distance.y > 0)
                movement.y = -speed.y;
            else if (distance.y < 0)
                movement.y = speed.y;
        }
        // We use this movement to set our quest entity movement's offset
        this.getQuestEntityMovement().setOffset(movement);
    };
    QuestEntity.prototype.heal = function (hp) {
        this.setHp(this.getHp() + hp);
    };
    QuestEntity.prototype.hit = function (questEntity, damage, reason) {
        // BUGS
        if (Bugs.getQuestBugLevel() >= 1)
            damage *= Random.between(1, 3);
        if (this.berserk == false)
            questEntity.inflictDamage(damage, reason);
        else
            questEntity.inflictDamage(damage * 2, reason);
    };
    QuestEntity.prototype.inflictDamage = function (damage, reason) {
        // We save the damage reason
        this.lastDamageReason = reason;
        // If we're destructible, we get the damage
        if (this.destructible) {
            // If we're not a turtle
            if (this.turtle == false)
                this.setHp(this.getHp() - damage);
            else
                this.setHp(this.getHp() - Math.ceil(damage / 2));
        }
    };
    QuestEntity.prototype.isOutOfArea = function () {
        // If the entity if too much out of the area, we return true
        if (this.globalPosition.x < -this.getQuest().getLeftLimit())
            return true;
        if (this.globalPosition.y < -this.getQuest().getTopLimit())
            return true;
        if (this.globalPosition.x > this.quest.getRealQuestSize().x + this.getQuest().getRightLimit())
            return true;
        if (this.globalPosition.y > this.quest.getRealQuestSize().y + this.getQuest().getBottomLimit())
            return true;
        // Else we return false
        return false;
    };
    QuestEntity.prototype.jump = function (jumpDuration, jumpSpeed) {
        if (jumpSpeed === void 0) { jumpSpeed = 1; }
        // BUGS
        if (Bugs.getQuestBugLevel() >= 2)
            jumpSpeed = Random.between(1, 5);
        // If we're not already jumping or controlled falling and we would collide by going down (which means we're on the ground), we jump (we also jump without checking all that if we are able to jump in mid-air)
        if ((this.jumping == false && this.controlledFalling == false && this.checkCollision(new Pos(0, 1))) || this.canJumpInMidAir()) {
            this.jumping = true;
            this.jumpDuration = jumpDuration;
            this.jumpSpeed = jumpSpeed;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.move = function (pos, force) {
        if (force === void 0) { force = false; }
        // BUGS
        if (Bugs.getQuestBugLevel() >= 3 || (Bugs.getQuestBugLevel() >= 2 && Random.oneChanceOutOf(3)) || (Bugs.getQuestBugLevel() >= 1 && Random.oneChanceOutOf(5))) {
            pos.x += Random.between(1, 3) - 2;
            pos.y += Random.between(1, 3) - 2;
        }
        // If we're not a turtle or this isn't a pure horizontal movement (turtles only care about horizontal movement)
        if (this.turtle == false || pos.y != 0)
            return this.setGlobalPosition(this.globalPosition.plus(pos), force);
        else {
            // We check the duration
            if (this.turtleDuration > 0) {
                this.turtleDuration -= 1;
            }
            else
                this.stopTurtle();
            // If the movement is >= 2
            if (this.turtleLastMovement >= 2) {
                this.turtleLastMovement = 0; // We reset the movement
                return this.setGlobalPosition(this.globalPosition.plus(pos), force); // We move
            }
            else {
                this.turtleLastMovement += 1;
                return false;
            }
        }
    };
    QuestEntity.prototype.moveWormsLike = function (pos) {
        // If we can move normally
        if (this.checkCollision(pos) == false) {
            // If we can't move two steps below but we can move on step below, then we move one step below (if we're not jumping or controlled falling)
            if (this.checkCollision(pos.plus(new Pos(0, 2))) == true && this.checkCollision(pos.plus(new Pos(0, 1))) == false && this.jumping == false && this.controlledFalling == false) {
                return this.move(pos.plus(new Pos(0, 1)));
            }
            else {
                return this.move(pos);
            }
        }
        else if (this.checkCollision(pos.plus(new Pos(0, -1))) == false && this.jumping == false && this.controlledFalling == false) {
            // We move one step above
            return this.move(pos.plus(new Pos(0, -1)));
        }
        // Else we don't move
        return false;
    };
    QuestEntity.prototype.removeQuestEntityWeapons = function () {
        this.questEntityWeapons = [];
    };
    QuestEntity.prototype.setGlobalPosition = function (pos, force) {
        if (force === void 0) { force = false; }
        var oldPosition = this.globalPosition;
        this.globalPosition = pos;
        // Check for collisions : restore the old position and return false if the movement would cause a collision
        if (force == false && this.checkCollision()) {
            this.globalPosition = oldPosition;
            return false;
        }
        // Return true
        return true;
    };
    QuestEntity.prototype.shouldDie = function () {
        // Return true if we are destructible and have 0 hp or we're already dead
        if ((this.destructible == true && this.hp <= 0) || this.dead == true)
            return true;
        return false;
    };
    QuestEntity.prototype.stop = function (stoppedDuration) {
        // If we're not already stopped
        if (this.stopped == false) {
            this.stopped = true;
            this.stoppedDuration = stoppedDuration;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.stopBerserk = function () {
        this.berserk = false;
    };
    QuestEntity.prototype.stopTurtle = function () {
        this.turtle = false;
    };
    QuestEntity.prototype.teleport = function (pos) {
        return this.setGlobalPosition(pos);
    };
    QuestEntity.prototype.testNewGlobalPosition = function (pos) {
        var oldPosition = this.globalPosition;
        this.globalPosition = pos;
        // If there's a collision, restore the old position and return false
        if (this.checkCollision()) {
            this.globalPosition = oldPosition;
            return false;
        }
        // Else, restore the old position and return true
        this.globalPosition = oldPosition;
        return true;
    };
    QuestEntity.prototype.update = function () {
        // We handle berserk mode
        if (this.berserk) {
            if (this.berserkDuration > 0) {
                this.berserkDuration -= 1;
            }
            else {
                this.stopBerserk();
            }
        }
        // We handle animation
        this.handleAnimation();
        // We handle gravity, and then movement if gravity had no effect
        this.noMovementLastUpdate = true;
        if (this.handleGravity() == false)
            this.handleMovement();
        // We handle combat
        this.handleCombat();
    };
    // Default behaviour of this function : displaying a simple death message in the quest log
    QuestEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
    };
    // Public getters
    QuestEntity.prototype.getBerserk = function () {
        return this.berserk;
    };
    QuestEntity.prototype.getCbc = function () {
        return this.cbc;
    };
    QuestEntity.prototype.getDead = function () {
        return this.dead;
    };
    QuestEntity.prototype.getDestructible = function () {
        return this.destructible;
    };
    QuestEntity.prototype.getGlobalPosition = function () {
        return this.globalPosition;
    };
    QuestEntity.prototype.getHealthBar = function () {
        return this.healthBar;
    };
    QuestEntity.prototype.getHp = function () {
        return this.hp;
    };
    QuestEntity.prototype.getIsASpell = function () {
        return this.isASpell;
    };
    QuestEntity.prototype.getJumping = function () {
        return this.jumping;
    };
    QuestEntity.prototype.getLastDamageReason = function () {
        return this.lastDamageReason;
    };
    QuestEntity.prototype.getLastQuestEntitySpellCaster = function () {
        return this.questEntitySpellCasters[this.questEntitySpellCasters.length - 1];
    };
    QuestEntity.prototype.getLastQuestEntityWeapon = function () {
        return this.questEntityWeapons[this.questEntityWeapons.length - 1];
    };
    QuestEntity.prototype.getMaxHp = function () {
        return this.maxHp;
    };
    QuestEntity.prototype.getNaming = function () {
        return this.naming;
    };
    QuestEntity.prototype.getNoMovementLastUpdate = function () {
        return this.noMovementLastUpdate;
    };
    QuestEntity.prototype.getOutOfArea = function () {
        return this.outOfArea;
    };
    QuestEntity.prototype.getQuest = function () {
        return this.quest;
    };
    QuestEntity.prototype.getQuestEntityAnimation = function () {
        return this.questEntityAnimation;
    };
    QuestEntity.prototype.getQuestEntityMovement = function () {
        return this.questEntityMovement;
    };
    QuestEntity.prototype.getQuestEntityWeapons = function () {
        return this.questEntityWeapons;
    };
    QuestEntity.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    QuestEntity.prototype.getRenderAreaPosition = function () {
        return this.renderAreaPosition;
    };
    QuestEntity.prototype.getTeam = function () {
        return this.team;
    };
    QuestEntity.prototype.getTurtle = function () {
        return this.turtle;
    };
    // Public setters
    QuestEntity.prototype.setCanBeForcedToMove = function (canBeForcedToMove) {
        this.canBeForcedToMove = canBeForcedToMove;
    };
    QuestEntity.prototype.setCbc = function (cbc) {
        this.cbc = cbc;
    };
    QuestEntity.prototype.setDead = function (dead) {
        this.dead = dead;
    };
    QuestEntity.prototype.setDestructible = function (value) {
        this.destructible = value;
    };
    QuestEntity.prototype.setHealthBar = function (healthBar) {
        this.healthBar = healthBar;
    };
    QuestEntity.prototype.setHp = function (hp) {
        // BUGS
        if (Bugs.getQuestBugLevel() >= 2)
            hp *= Random.between(1, 5);
        this.hp = hp;
        if (this.hp > this.maxHp)
            this.hp = this.maxHp;
        if (this.hp < 0)
            this.hp = 0;
        this.tryToUpdateHealthBar();
    };
    QuestEntity.prototype.setIsASpell = function (isASpell) {
        this.isASpell = isASpell;
    };
    QuestEntity.prototype.setMaxHp = function (maxHp) {
        // BUGS
        if (Bugs.getQuestBugLevel() >= 4)
            maxHp *= Random.between(1, 5);
        this.maxHp = maxHp;
        this.tryToUpdateHealthBar();
    };
    QuestEntity.prototype.setOutOfArea = function (outOfArea) {
        this.outOfArea = outOfArea;
    };
    QuestEntity.prototype.setQuest = function (quest) {
        this.quest = quest;
    };
    QuestEntity.prototype.setQuestEntityAnimation = function (questEntityAnimation) {
        // We set the animation
        this.questEntityAnimation = questEntityAnimation;
        // We update for the first time if not null
        if (this.questEntityAnimation != null)
            this.questEntityAnimation.draw(this.renderArea);
    };
    QuestEntity.prototype.setQuestEntityMovement = function (questEntityMovement) {
        this.questEntityMovement = questEntityMovement;
    };
    QuestEntity.prototype.setRenderArea = function (renderArea) {
        this.renderArea = renderArea;
    };
    QuestEntity.prototype.setTeam = function (questEntityTeam) {
        this.team = questEntityTeam;
    };
    QuestEntity.prototype.setTransparency = function (transparency) {
        this.transparency = transparency;
    };
    // Private methods
    QuestEntity.prototype.handleAnimation = function () {
        if (this.questEntityAnimation != null) {
            this.questEntityAnimation.update();
            if (this.questEntityAnimation.shouldUpdateRenderAreaAtThisFrame()) {
                this.renderArea.resetAllButSize();
                this.questEntityAnimation.draw(this.renderArea);
            }
        }
    };
    QuestEntity.prototype.handleCombat = function () {
        // We iterate over weapons and use them
        for (var i = 0; i < this.questEntityWeapons.length; i++) {
            this.questEntityWeapons[i].handleCombat();
        }
        // We iterate over spellc asters and use them
        for (var i = 0; i < this.questEntitySpellCasters.length; i++) {
            this.questEntitySpellCasters[i].tryToCast();
        }
    };
    QuestEntity.prototype.handleGravity = function () {
        // If we're jumping, we handle jumping
        if (this.jumping == true) {
            // Decrease the jump duration
            this.jumpDuration -= 1;
            // If this is the last jumping frame, we stop jumping and don't jump at this frame
            if (this.jumpDuration <= 0) {
                this.jumping = false;
                this.controlledFalling = true;
            }
            else {
                // If we don't manage to jump, stop jumping
                if (this.move(new Pos(0, -this.jumpSpeed)) == false) {
                    this.jumping = false;
                    this.controlledFalling = true;
                }
            }
            // Return false so that we can move while jumping
            return false;
        }
        else {
            // If we're not affected by anti-gravity and gravity isn't disabled in the whole quest
            if (this.antiGravity == false && this.getQuest().getGravityDisabled() == false) {
                if (this.questEntityMovement != null && this.questEntityMovement.getGravity()) {
                    if (this.move(new Pos(0, 1))) {
                        if (this.controlledFalling == false)
                            return true; // If we weren't controlling our falling, then we return true because we can't move
                    }
                    else
                        this.controlledFalling = false; // If we hit the ground above, no mroe controlled falling
                }
            }
            else {
                this.antiGravityDuration -= 1;
                if (this.antiGravityDuration <= 0)
                    this.antiGravity = false;
            }
        }
        // Gravity had no effect
        return false;
    };
    QuestEntity.prototype.handleMovement = function () {
        // If we're not stopped
        if (this.stopped == false) {
            if (this.questEntityMovement != null) {
                this.questEntityMovement.update();
                if (this.questEntityMovement.shouldMoveAtThisFrame()) {
                    // If worms like movement is activated and we're not under anti-gravity and worms like movement isn't disabled by the quest
                    if (this.questEntityMovement.getWormsLike() && this.antiGravity == false && this.getQuest().getWormsLikeDisabled() == false) {
                        if (this.moveWormsLike(this.questEntityMovement.getCurrentFrameMovement()))
                            this.noMovementLastUpdate = false;
                    }
                    else {
                        if (this.move(this.questEntityMovement.getCurrentFrameMovement()))
                            this.noMovementLastUpdate = false;
                    }
                }
            }
        }
        else {
            this.stoppedDuration -= 1;
            if (this.stoppedDuration <= 0)
                this.stopped = false;
        }
    };
    QuestEntity.prototype.tryToUpdateHealthBar = function () {
        // Update our health bar if we have one
        if (this.healthBar != null)
            this.healthBar.update();
    };
    return QuestEntity;
})();
///<reference path="QuestEntity.ts"/>
var BigShark = (function (_super) {
    __extends(BigShark, _super);
    // Constructor
    function BigShark(quest, pos) {
        _super.call(this, quest, pos, new Naming("A shark", "a shark"), new RenderArea(47, 10), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(14, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(13, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(12, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(41, 2), new Pos(5, 1)), new CollisionBox(this, new Pos(11, 3), new Pos(7, 1)), new CollisionBox(this, new Pos(35, 3), new Pos(11, 1)), new CollisionBox(this, new Pos(2, 4), new Pos(40, 1)), new CollisionBox(this, new Pos(0, 5), new Pos(40, 1)), new CollisionBox(this, new Pos(1, 6), new Pos(44, 1)), new CollisionBox(this, new Pos(3, 7), new Pos(43, 1)), new CollisionBox(this, new Pos(15, 8), new Pos(3, 1)), new CollisionBox(this, new Pos(16, 9), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // By default, finType is null
        this.finType = null;
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(200);
        this.setHp(200);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/bigShark"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its sharp teeth", "its sharp teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(49, 12))), Random.between(30, 42)));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // draw()
    BigShark.prototype.draw = function (renderArea) {
        // Mother class draw method
        _super.prototype.draw.call(this, renderArea);
        // Add the fin color if we have a special fin type
        if (this.finType != null) {
            switch (this.finType) {
                case BigSharkFinType.RED:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_RED);
                    break;
                case BigSharkFinType.GREEN:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_GREEN);
                    break;
                case BigSharkFinType.PURPLE:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_PURPLE);
                    break;
            }
        }
    };
    // willDie()
    BigShark.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(500 + Random.upTo(30) * 35), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        if (this.finType != null) {
            switch (this.finType) {
                case BigSharkFinType.RED:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedRedSharkFin", "You found a red shark fin", "You gain a red shark fin"));
                    break;
                case BigSharkFinType.GREEN:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedGreenSharkFin", "You found a green shark fin", "You gain a green shark fin"));
                    break;
                case BigSharkFinType.PURPLE:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedPurpleSharkFin", "You found a purple shark fin", "You gain a purple shark fin"));
                    break;
            }
        }
    };
    // Public methods
    BigShark.prototype.hasFin = function (finType) {
        this.finType = finType;
    };
    // Private methods
    BigShark.prototype.drawFinColor = function (renderArea, colorType) {
        // If the fin color wouldn't be outside of the quest
        if (this.getGlobalPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 11 >= 0 &&
            this.getGlobalPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 18 <= 99) {
            // We draw it
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 14, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 15, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 0, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 13, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 15, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 1, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 12, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 16, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 2, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 11, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 18, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 3, new Color(colorType));
        }
    };
    return BigShark;
})(QuestEntity);
var BigSharkFinType;
(function (BigSharkFinType) {
    BigSharkFinType[BigSharkFinType["RED"] = 0] = "RED";
    BigSharkFinType[BigSharkFinType["GREEN"] = 1] = "GREEN";
    BigSharkFinType[BigSharkFinType["PURPLE"] = 2] = "PURPLE";
})(BigSharkFinType || (BigSharkFinType = {}));
///<reference path="QuestEntity.ts"/>
var QuestEntitySpell = (function (_super) {
    __extends(QuestEntitySpell, _super);
    // Constructor
    function QuestEntitySpell(quest, pos, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation) {
        if (renderArea === void 0) { renderArea = null; }
        if (renderAreaPosition === void 0) { renderAreaPosition = new Pos(0, 0); }
        if (cbc === void 0) { cbc = null; }
        if (questEntityMovement === void 0) { questEntityMovement = null; }
        if (questEntityAnimation === void 0) { questEntityAnimation = null; }
        _super.call(this, quest, pos, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation);
        // Colors
        this.colors = [];
        // Set isASpell
        this.setIsASpell(true);
    }
    // Public methods
    QuestEntitySpell.prototype.addColor = function (color) {
        this.colors.push(color);
    };
    QuestEntitySpell.prototype.draw = function (renderArea) {
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
        // Draw the colors
        for (var i = 0; i < this.colors.length; i++) {
            this.colors[i].draw(renderArea, this.getQuest().getRealQuestPosition().plus(this.getGlobalPosition()).plus(this.getQuest().getGlobalDrawingOffset()));
        }
    };
    QuestEntitySpell.prototype.removeColors = function () {
        this.colors = [];
    };
    return QuestEntitySpell;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var Blackhole = (function (_super) {
    __extends(Blackhole, _super);
    // Constructor
    function Blackhole(quest, pos, damage, questEntityDamageReason) {
        // Call the mother class constructor
        _super.call(this, quest, pos, new Naming("A blackhole", "a blackhole"));
        // Set from parameters
        this.damage = damage;
        this.questEntityDamageReason = questEntityDamageReason;
        // Create the collision box collection
        this.cbcDamage = new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -3), new Pos(2, 1)), new CollisionBox(this, new Pos(-3, -2), new Pos(6, 1)), new CollisionBox(this, new Pos(-4, -1), new Pos(8, 1)), new CollisionBox(this, new Pos(-5, 0), new Pos(10, 1)), new CollisionBox(this, new Pos(-4, 1), new Pos(8, 1)), new CollisionBox(this, new Pos(-3, 2), new Pos(6, 1)), new CollisionBox(this, new Pos(-1, 3), new Pos(2, 1)));
        // Set the timer
        this.timer = 30;
        // Set the colors for the first time
        this.reAddColors();
    }
    // Public methods
    Blackhole.prototype.update = function () {
        // Lower the timer
        this.timer -= 1;
        // Re add the colors
        this.reAddColors();
        // Inflict damage to any entity under us
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            // If it is destructible
            if (this.getQuest().getEntities()[i].getDestructible()) {
                // If it has a collision box collection
                if (this.getQuest().getEntities()[i].getCbc() != null) {
                    // If this collision box collection collides with ours
                    if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.cbcDamage)) {
                        this.getQuest().getEntities()[i].inflictDamage(this.damage, this.questEntityDamageReason);
                    }
                }
            }
        }
        // If the timer is too low, we're dead!
        if (this.timer <= 0)
            this.setDead(true);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // Private methods
    Blackhole.prototype.addColorsFirstLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, 0), new Pos(2, 1), new Color(colorType, true)));
    };
    Blackhole.prototype.addColorsSecondLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, -1), new Pos(4, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, +1), new Pos(4, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, 0), new Pos(1, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+1, 0), new Pos(1, 1), new Color(colorType, true)));
    };
    Blackhole.prototype.addColorsThirdLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, -3), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-3, -2), new Pos(6, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-4, -1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, -1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-5, 0), new Pos(3, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, 0), new Pos(3, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-4, +1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, +1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-3, +2), new Pos(6, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, +3), new Pos(2, 1), new Color(colorType, true)));
    };
    Blackhole.prototype.reAddColors = function () {
        // Remove the colors
        this.removeColors();
        // Re add them
        switch (this.timer) {
            case 30:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 29:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY220);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 28:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY200);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY220);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 27:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY180);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY200);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY220);
                break;
            case 26:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY160);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY180);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY200);
                break;
            case 25:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY140);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY160);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY180);
                break;
            case 24:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY120);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY140);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY160);
                break;
            case 23:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY100);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY120);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY140);
                break;
            case 22:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY80);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY100);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY120);
                break;
            case 21:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY60);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY80);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY100);
                break;
            case 20:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY40);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY60);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY80);
                break;
            case 19:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY20);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY40);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY60);
                break;
            default:
                this.addColorsFirstLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                this.addColorsSecondLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                this.addColorsThirdLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                break;
        }
    };
    return Blackhole;
})(QuestEntitySpell);
var QuestEntityWeapon = (function () {
    // Constructor
    function QuestEntityWeapon(quest, questEntity, naming, cbc, damage) {
        if (cbc === void 0) { cbc = new CollisionBoxCollection(); }
        if (damage === void 0) { damage = 0; }
        this.closeCombatDelay = new QuestEntityWeaponDelay();
        this.quest = quest;
        this.questEntity = questEntity;
        this.naming = naming;
        this.damage = damage;
        this.cbc = cbc;
    }
    // Public methods
    QuestEntityWeapon.prototype.getRealDamage = function () {
        return this.damage;
    };
    QuestEntityWeapon.prototype.getRealDamageText = function () {
        return this.damage.toString();
    };
    QuestEntityWeapon.prototype.getSpeedText = function () {
        return this.closeCombatDelay.getText();
    };
    QuestEntityWeapon.prototype.handleCombat = function () {
        // If we can attack with close combat at this frame
        if (this.getRealDamage() > 0 && this.closeCombatDelay.tryToAttack()) {
            // We iterate over all entities
            for (var i = 0; i < this.quest.getEntities().length; i++) {
                // If we're not iterating over the entity we are used by
                if (this.quest.getEntities()[i] != this.questEntity) {
                    // If the entities are from different teams
                    if (this.quest.getEntities()[i].getTeam() != this.questEntity.getTeam()) {
                        // If we collide with this entity
                        if (this.collidesWith(this.quest.getEntities()[i])) {
                            // We hit it
                            this.hit(this.quest.getEntities()[i]);
                            // We warn the delay
                            this.closeCombatDelay.theWeaponAttacked();
                        }
                    }
                }
            }
        }
    };
    // Public getters
    QuestEntityWeapon.prototype.getCloseCombatDelay = function () {
        return this.closeCombatDelay;
    };
    QuestEntityWeapon.prototype.getNaming = function () {
        return this.naming;
    };
    // Private methods
    QuestEntityWeapon.prototype.collidesWith = function (questEntity) {
        // If we both have a collision box collection, we return the result of the collision test
        if (this.cbc != null && questEntity.getCbc() != null)
            return this.cbc.collidesWith(questEntity.getCbc());
        // Else, we return false, there can't be any collision
        return false;
    };
    QuestEntityWeapon.prototype.hit = function (questEntity) {
        this.questEntity.hit(questEntity, this.getRealDamage(), new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.WEAPON)
            .setQuestEntity(this.questEntity)
            .setQuestEntityWeapon(this));
    };
    return QuestEntityWeapon;
})();
///<reference path="QuestEntityWeapon.ts"/>
var Bludgeon = (function (_super) {
    __extends(Bludgeon, _super);
    function Bludgeon() {
        _super.apply(this, arguments);
    }
    // Public methods
    Bludgeon.prototype.getRealDamage = function () {
        return Random.between(15, 25);
    };
    Bludgeon.prototype.getRealDamageText = function () {
        return "15-25";
    };
    return Bludgeon;
})(QuestEntityWeapon);
var Item = (function () {
    // Constructor
    function Item(savingName, databaseName, databaseDescriptionName, ascii) {
        // We set the variables
        this.savingName = savingName;
        this.databaseName = databaseName;
        this.databaseDescriptionName = databaseDescriptionName;
        this.ascii = ascii;
        // We register the savingName
        Saving.registerBool(this.savingName, false);
    }
    // Public methods
    Item.prototype.foundCandies = function (player, quest, howMany) {
        return howMany;
    };
    Item.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return damage;
    };
    Item.prototype.inflictDamage = function (player, quest, damage, reason) {
        return damage;
    };
    Item.prototype.isPossessed = function () {
        return Saving.loadBool(this.savingName);
    };
    // Public getters
    Item.prototype.getAscii = function () {
        return this.ascii;
    };
    Item.prototype.getDatabaseDescriptionName = function () {
        return this.databaseDescriptionName;
    };
    Item.prototype.getDatabaseName = function () {
        return this.databaseName;
    };
    Item.prototype.getSavingName = function () {
        return this.savingName;
    };
    Item.prototype.getSpecialAbility = function () {
        return null;
    };
    return Item;
})();
///<reference path="Item.ts"/>
var EqItem = (function (_super) {
    __extends(EqItem, _super);
    function EqItem() {
        _super.apply(this, arguments);
    }
    // Public methods    
    EqItem.prototype.update = function (player, quest) {
    };
    // Public getters
    EqItem.prototype.getQuestEntityWeapon = function (quest, player) {
        return new QuestEntityWeapon(quest, player, new Naming("???", "???"));
    };
    return EqItem;
})(Item);
///<reference path="EqItem.ts"/>
var BootsOfIntrospection = (function (_super) {
    __extends(BootsOfIntrospection, _super);
    // Constructor
    function BootsOfIntrospection() {
        _super.call(this, "eqItemBootsBootsOfIntrospection", "eqItemBootsBootsOfIntrospectionName", "eqItemBootsBootsOfIntrospectionDescription", "eqItems/boots/bootsOfIntrospection");
    }
    return BootsOfIntrospection;
})(EqItem);
///<reference path="Place.ts"/>
var Quest = (function (_super) {
    __extends(Quest, _super);
    // Constructor
    function Quest(game, specialInstruction) {
        if (specialInstruction === void 0) { specialInstruction = null; }
        _super.call(this, game);
        // Array of quest entities
        this.entities = [];
        // Render area
        this.renderArea = new RenderArea();
        this.globalDrawingOffset = new Pos(0, 0); // Global offset applied to all entities (very useful when dealing with a scrolling quest like the hole for example)
        // Drops
        this.candiesFound = new Resource();
        this.chocolateBarsFound = new Resource();
        this.itemsFound = [];
        // Is the quest ended? (and did we win?)
        this.questEnded = false;
        this.questEndedAndWeWon = false;
        // Player spells
        this.playerSpells = [];
        this.playerSpellsHotkeys = [];
        // Countdowns
        this.playerSpellsCountdown = 0;
        this.playerPotionsCountdown = 0;
        // Is gravity / worms like disabled?
        this.gravityDisabled = false;
        this.wormsLikeDisabled = false;
        // How many P potions did we use since the beginning of the quest?
        this.howManyPPotions = 0;
        // Set the special instruction
        this.specialInstruction = specialInstruction;
        // Reset the player
        this.getGame().resetPlayer();
        // Create player spells
        this.createPlayerSpells();
        // Set the real quest position
        this.realQuestPosition = new Pos(0, 2);
        // And the size to add to the real quest size
        this.sizeToAddToTheRealQuestSize = new Pos(0, 12);
        // If there is a special instruction, change the real quest position
        if (this.specialInstruction != null) {
            this.realQuestPosition.add(new Pos(0, 1));
        }
        // If there is at least a spell, change the real quest position
        if (this.playerSpells.length != 0) {
            this.realQuestPosition.add(new Pos(0, this.playerSpellsHeight));
        }
        // Add two delimiters in the quest log
        this.getGame().getQuestLog().addDelimiter();
        // Create the player collision boxes entity
        this.playerCollisionBoxes = new Wall(this, new Pos(0, 0));
        // Set the quest slowed down variable at the game level (and the quest speed up too)
        this.getGame().setQuestSlowedDown(false);
        this.getGame().setQuestSpeedUp(0);
    }
    // Public methods
    Quest.prototype.addPlayerCollisionBoxes = function (top, right, bottom, left) {
        // We remove boxes
        this.playerCollisionBoxes.removeBoxes();
        // And we re-add them
        if (top)
            this.playerCollisionBoxes.addBox(new Pos(-1, -1), new Pos(this.getRealQuestSize().x + 2, 1));
        if (right)
            this.playerCollisionBoxes.addBox(new Pos(this.getRealQuestSize().x, -1), new Pos(1, this.getRealQuestSize().y + 2));
        if (bottom)
            this.playerCollisionBoxes.addBox(new Pos(-1, this.getRealQuestSize().y), new Pos(this.getRealQuestSize().x + 2, 1));
        if (left)
            this.playerCollisionBoxes.addBox(new Pos(-1, -1), new Pos(1, this.getRealQuestSize().y + 2));
    };
    Quest.prototype.addEntity = function (entity) {
        // Add the entity
        this.entities.push(entity);
        // If it collides, remove it and return false (+ BUGS)
        if (this.entities[this.entities.length - 1].checkCollision() && Bugs.getQuestBugLevel() < 4) {
            this.entities.splice(this.entities.length - 1, 1);
            return false;
        }
        // Else, successfully added, we return true
        return true;
    };
    Quest.prototype.addExitQuestButton = function (callbackCollection, buttonText) {
        this.addBackToButton(this.renderArea, callbackCollection, Database.getText(buttonText), Database.getTranslatedText(buttonText), buttonText, 0, ((this.renderArea.getWidth() - 100) - this.getGap()) / 2 + (50 - Database.getText(buttonText).length / 2));
    };
    Quest.prototype.castPlayerAcidRain = function (areaPosition, areaSize, maxLeftDistanceFromPlayer, maxRightDistanceFromPlayer) {
        if (areaPosition === void 0) { areaPosition = null; }
        if (areaSize === void 0) { areaSize = null; }
        if (maxLeftDistanceFromPlayer === void 0) { maxLeftDistanceFromPlayer = 50; }
        if (maxRightDistanceFromPlayer === void 0) { maxRightDistanceFromPlayer = 50; }
        // We set the position & size of the area of the acid rain
        if (areaPosition == null)
            areaPosition = new Pos(0, 0);
        if (areaSize == null)
            areaSize = new Pos(this.getRealQuestSize().x, this.getRealQuestSize().y);
        // Correct the position to fit with the max left and right distance from player
        if (areaPosition.x < this.getGame().getPlayer().getGlobalPosition().x - maxLeftDistanceFromPlayer)
            areaPosition.x = this.getGame().getPlayer().getGlobalPosition().x - maxLeftDistanceFromPlayer;
        if (areaPosition.x + areaSize.x > this.getGame().getPlayer().getGlobalPosition().x + maxRightDistanceFromPlayer)
            areaSize.x = this.getGame().getPlayer().getGlobalPosition().x + maxRightDistanceFromPlayer - areaPosition.x;
        // Add the acid drops in the area
        for (var i = areaPosition.x; i < areaPosition.x + areaSize.x; i++) {
            if (Random.oneChanceOutOf((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 3 : 5))) {
                this.addEntity(this.createPlayerAcidDrop(new Pos(i, areaPosition.y - Random.upTo(5))));
            }
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an acid rain!"));
    };
    Quest.prototype.castPlayerAntiGravityPotion = function () {
        this.getGame().getPlayer().beginAntiGravity((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 50 : 30));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink an anti gravity potion!"));
    };
    Quest.prototype.castPlayerBlackDemons = function () {
        // X position where the demons will start
        var xPosition = 0;
        // Y position of the beginning of the demon column
        var yBeginningPosition = 0;
        // Y position of the end of the demon column
        var yEndingPosition = this.getRealQuestSize().y;
        // We try to add demons from the beginning to the end, every five characters
        for (var i = yBeginningPosition; i < yEndingPosition; i++) {
            if (i % 5 == 0)
                this.addEntity(new PlayerSummonedDemon(this, new Pos(xPosition, i), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 80 : 50)));
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You summoned black demons!"));
    };
    Quest.prototype.castPlayerBlackhole = function () {
        // Array which will contain the indices (in the entities array) of all possible enemies
        var indices = [];
        // The blackhole position
        var position;
        // Fill the indices array
        for (var i = 0; i < this.getEntities().length; i++) {
            // If this entity is destructible and is from a different team then the player
            if (this.getEntities()[i].getDestructible() && this.getEntities()[i].getTeam() != this.getGame().getPlayer().getTeam()) {
                // We add its index
                indices.push(i);
            }
        }
        // We get the position of the blackhole from the position of a random destructible and not in the player's team entity, or if there's isn't any, from the player's position
        if (indices.length > 0) {
            position = this.getEntities()[indices[Random.between(0, indices.length - 1)]].getRenderAreaCenter();
        }
        else {
            position = this.getGame().getPlayer().getRenderAreaCenter();
        }
        // We cast the blackhole on the position we just set
        this.addEntity(new Blackhole(this, position, 100, this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A blackhole", "a blackhole"))));
        // We add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast the black hole spell!"));
    };
    Quest.prototype.castPlayerBerserkPotion = function () {
        this.getGame().getPlayer().beginBerserk((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 120 : 80));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a berserk potion!"));
    };
    Quest.prototype.castPlayerCloningPotion = function () {
        // The clone to be added
        var clone = null;
        // Create a different clone depnding on the character type
        switch (this.getGame().getPlayer().getCharacterType()) {
            case PlayerCharacterType.CANDYBOX:
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                clone = new PlayerCloneCandyBox(this, this.getGame().getPlayer().getGlobalPosition().plus(new Pos(0, -1)));
                break;
            case PlayerCharacterType.MEDIUM:
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                clone = new PlayerCloneMedium(this, this.getGame().getPlayer().getGlobalPosition().plus(new Pos(0, -4)));
                break;
        }
        // If we didn't manage to add this clone (this could fail because it may not have enough space to be added)
        if (this.addEntity(clone) == false) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a cloning potion but there's not enough space for a clone to appear."));
            return; // We return
        }
        // Else, config the clone as a player (this config method is made to be overriden by the daughter classes)
        this.configPlayerOrClone(clone);
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a cloning potion!"));
    };
    Quest.prototype.castPlayerEraseMagic = function () {
        // Will be true if at least one spell was erased
        var magicErased = false;
        // Set dead to all the spells
        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getIsASpell()) {
                this.getEntities()[i].setDead(true);
                magicErased = true;
            }
        }
        // If some spell was erase, we successfully casted the spell
        if (magicErased)
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an erase magic spell!"));
        else
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed to cast an erase magic spell : there's no magic to erase."));
    };
    Quest.prototype.castPlayerFireball = function (movement) {
        if (movement === void 0) { movement = new Pos(2, 0); }
        // Create the fireball
        var fireball = new Fireball(this, this.getGame().getPlayer().getSpellCastingPosition(), new Naming("A fireball", "a fireball"), new Color(ColorType.PLAYER_FIREBALL), new Pos((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 6 : 4), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 3 : 2)), 45 * (Saving.loadBool("gridItemPossessedRedSharkFin") ? 3 : 1), this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A fireball", "a fireball")));
        // No target
        fireball.setTargetTypeNoTarget(movement);
        // Add the entity
        this.addEntity(fireball);
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a fireball!"));
    };
    Quest.prototype.castPlayerHealthPotion = function () {
        this.getGame().getPlayer().heal((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 200 : 100));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a health potion!"));
    };
    Quest.prototype.castPlayerJump = function () {
        // If we don't have the feather
        if (Saving.loadBool("gridItemPossessedFeather") == false)
            this.getGame().getPlayer().jump(3);
        else
            this.getGame().getPlayer().jump(6);
    };
    Quest.prototype.castPlayerObsidianWall = function () {
        // X position of the wall
        var xPosition = this.getGame().getPlayer().getSpellCastingPosition().x;
        // Beginning of the wall
        var yBeginningPosition = 0;
        // End of the wall
        var yEndingPosition = this.getRealQuestSize().y;
        // We try to add bricks from the beginning to the end
        for (var i = yBeginningPosition; i < yEndingPosition; i++) {
            this.addEntity(new ObsidianBrick(this, new Pos(xPosition, i), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 300 : 200)));
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an obsidian wall!"));
    };
    Quest.prototype.castPlayerPPotion = function () {
        // Variables which will be used for calculations
        var hp;
        // Additional message, depends on the effect
        var additionalMessage = null;
        // If the player is a turtle
        if (this.getGame().getPlayer().getTurtle()) {
            // We're not a turtle anymore
            this.getGame().getPlayer().stopTurtle();
            // We lose half of our health points
            hp = Math.ceil(this.getGame().getPlayer().getHp() / 2);
            this.getGame().getPlayer().heal(-hp);
            // Set the message
            additionalMessage = "You lose " + hp + " health points.";
        }
        else if (this.getGame().getPlayer().getHp() < (this.getGame().getPlayer().getMaxHp() * 8 / 100)) {
            // Choose between the following
            switch (Random.between(0, 8)) {
                case 0:
                    this.getGame().getPlayer().heal(200);
                    additionalMessage = "You gain 200 health points.";
                    break; // Heal 200 hp
                case 1:
                    this.getGame().getPlayer().heal(400);
                    additionalMessage = "You gain 400 health points.";
                    break; // Heal 400 hp
                case 2:
                    this.getGame().getPlayer().heal(600);
                    additionalMessage = "You gain 600 health points.";
                    break; // Heal 600 hp
                case 3:
                    hp = this.getGame().getPlayer().getMaxHp() * 50 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break; // Heal 50%
                case 4:
                    hp = this.getGame().getPlayer().getMaxHp() * 65 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break; // Heal 65%
                case 5:
                    hp = this.getGame().getPlayer().getMaxHp() * 80 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break; // Heal 80%
                case 6:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 10 health points.";
                    break; // Wow, not very effective : heal 10hp
                case 7:
                    this.getGame().getPlayer().heal(7);
                    additionalMessage = "You gain 7 health points.";
                    break; // Wow, not very effective : heal 7hp
                case 8:
                    this.getGame().getPlayer().heal(3);
                    additionalMessage = "You gain 3 health points.";
                    break; // Wow, not very effective : heal 3hp
            }
        }
        else {
            // Normal effect
            if (Random.oneChanceOutOf(Math.ceil((this.howManyPPotions + 1) / 2))) {
                // 20%/30% of our health points
                hp = this.getGame().getPlayer().getMaxHp() * (Random.flipACoin() ? 20 : 30) / 100;
                // We lose those health points
                if (Random.oneChanceOutOf(3)) {
                    this.getGame().getPlayer().heal(-hp);
                    additionalMessage = "You lose " + hp + " health points.";
                }
                else {
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                }
            }
            else if (Random.oneChanceOutOf(Math.ceil((this.howManyPPotions + 1) / 6))) {
                switch (Random.between(0, 3)) {
                    case 0:
                        this.getGame().getPlayer().stop(Random.between(30, 100));
                        additionalMessage = "You can't move anymore.";
                        break;
                    case 1:
                        this.getGame().getPlayer().beginTurtle(Random.between(30, 100));
                        additionalMessage = "Now you're a turtle!";
                        break;
                    case 2:
                        this.getGame().getPlayer().setHp(this.getGame().getPlayer().getMaxHp());
                        additionalMessage = "You recover all your health.";
                        break;
                    case 3:
                        this.getGame().getPlayer().setHp(10);
                        additionalMessage = "You only have 10 health points now. Great.";
                        break;
                }
            }
            else {
                this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a P potion! Something strange is happening."));
                switch (Random.between(0, 2)) {
                    case 0:
                        this.castPlayerAcidRain();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        break;
                    case 1:
                        this.castPlayerAcidRain();
                        this.castPlayerAcidRain();
                        this.castPlayerAcidRain();
                        this.castPlayerTeleport();
                        break;
                    case 2:
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        break;
                }
                this.getGame().getQuestLog().addMessage(new QuestLogMessage("Wait. What did you just do?"));
            }
        }
        // Increase the number of used P potions
        this.howManyPPotions += 1;
        // Add a message to the log
        if (additionalMessage != null)
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a P potion! " + additionalMessage));
    };
    Quest.prototype.castPlayerThornsShield = function () {
        // Create the thorns positions array, which will contain all the positions where we want to add thorns
        var positions = this.getGame().getPlayer().getThornsPositionsArray();
        // Add the thorns
        for (var i = 0; i < positions.length; i++) {
            // Create the thorn
            var thorn = new Fireball(this, this.getGame().getPlayer().getGlobalPosition().plus(positions[i]), new Naming("A magical thorn", "a magical thorn"), new Color(ColorType.PLAYER_THORN), new Pos(2, 1), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 40 : 20), this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical thorn", "a magical thorn")));
            // Add the entity
            this.addEntity(thorn);
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a thorns shield!"));
    };
    Quest.prototype.castPlayerTurtlePotion = function () {
        this.getGame().getPlayer().beginTurtle((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 120 : 80));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a turtle potion!"));
    };
    Quest.prototype.castPlayerSqueeze = function () {
        if (this.getGame().getPlayer().getQuestEntityMovement() != null)
            this.getGame().getPlayer().squeeze();
    };
    Quest.prototype.castPlayerTeleport = function (where, teleportArea) {
        if (where === void 0) { where = null; }
        if (teleportArea === void 0) { teleportArea = null; }
        var teleportSucceeded = false;
        var teleportPosition;
        // If there's a special position to teleport the player, but no teleport area (which means we want to teleport it to this precise point only)
        if (where != null && teleportArea == null) {
            // If we manage to teleport here
            if (this.getGame().getPlayer().teleport(where))
                teleportSucceeded = true;
        }
        else {
            // Find where the teleport area will begin
            if (where == null)
                where = new Pos(0, 0);
            // Find the size of the teleport area
            if (teleportArea == null)
                teleportArea = new Pos(this.getRealQuestSize().x - 1, this.getRealQuestSize().y - 1);
            // We try to teleport 10 times in the teleport area, if one time succeed then it's okay, else the teleport fails
            for (var i = 0; i < 10; i++) {
                teleportPosition = where.plus(Random.fromPosition(teleportArea));
                // If we're not trying to teleport where we already are and the teleport succeed
                if (teleportPosition != this.getGame().getPlayer().getGlobalPosition() && this.getGame().getPlayer().teleport(teleportPosition)) {
                    teleportSucceeded = true;
                    break;
                }
            }
        }
        // Show a message depending on teleportSucceeded
        if (teleportSucceeded) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a teleport spell!"));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed to cast the teleport spell. Magic works in mysterious ways..."));
        }
    };
    Quest.prototype.castPlayerTimeSlowing = function () {
        // We invert questSlowedDown
        this.getGame().setQuestSlowedDown(!this.getGame().getQuestSlowedDown());
    };
    Quest.prototype.castPlayerXPotion = function () {
        this.getGame().goToYourself();
    };
    Quest.prototype.configPlayerOrClone = function (entity) {
    };
    Quest.prototype.drawAroundQuest = function () {
        // Draw the player spells
        this.drawPlayerSpells();
        // Draw the special instruction
        this.drawSpecialInstruction();
        // Draw the quest log
        this.drawQuestLog();
    };
    Quest.prototype.drawEntities = function () {
        for (var i = 0; i < this.entities.length; i++) {
            // Let the entity draw itself
            this.entities[i].draw(this.renderArea);
            // Should we draw a health bar ?
            if (this.entities[i].getHealthBar() != null)
                this.entities[i].getHealthBar().draw(this.renderArea);
        }
    };
    Quest.prototype.endQuest = function (win) {
        // If the player won the quest
        if (win) {
            // Handle candies drops
            // We add a message to the log to tell about the candies we found
            this.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getCandiesDropMessage()));
            // We give him/her the candies found during the quest
            this.candiesFound.transferTo(this.getGame().getCandies());
            // Handle chocolate bars drops
            if (this.chocolateBarsFound.getCurrent() > 0) {
                // We add a message to the log to tell about the chocolate bars we found
                this.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getChocolateBarsDropMessage(), null, true));
                // We give him/her the chocolate bars found during the quest
                this.chocolateBarsFound.transferTo(this.getGame().getChocolateBars());
            }
            // Handle items drops
            for (var i = 0; i < this.itemsFound.length; i++) {
                // We show the drop message
                this.itemsFound[i].get();
                // We give him/her the item
                this.getGame().gainItem(this.itemsFound[i].getSavingName());
            }
            // We won
            this.questEndedAndWeWon = true;
        }
        // The quest ended !
        this.questEnded = true;
    };
    Quest.prototype.foundCandies = function (howMany) {
        // We check all eqItems in case they want to change how many candies were found
        for (var savingName in this.getGame().getSelectedEqItems()) {
            howMany = this.getGame().getSelectedEqItems()[savingName].foundCandies(this.getGame().getPlayer(), this, howMany);
        }
        // We add the candies found
        this.candiesFound.add(howMany);
        // We return the number of candies found
        return howMany;
    };
    Quest.prototype.foundChocolateBars = function (howMany) {
        // We add the chocolate bars found
        this.chocolateBarsFound.add(howMany);
        // We return the number of chocolate bars found
        return howMany;
    };
    Quest.prototype.foundGridOrEqItem = function (itemFound) {
        // If we already have this item, we return false
        if (Saving.loadBool(itemFound.getSavingName()) == true)
            return false;
        // If we already found this item during this quest, we return false
        for (var i = 0; i < this.itemsFound.length; i++) {
            if (itemFound.getSavingName() == this.itemsFound[i].getSavingName())
                return false;
        }
        // We add the item to our found array, tell it that we found it, and return true
        this.itemsFound.push(itemFound);
        this.itemsFound[this.itemsFound.length - 1].found();
        return true;
    };
    Quest.prototype.forceMovingAllEntities = function (movement) {
        for (var i = 0; i < this.entities.length; i++) {
            this.entities[i].forceMoving(movement);
        }
    };
    Quest.prototype.getCandiesDropMessage = function () {
        return "You gain " + Algo.pluralFormat(this.candiesFound.getCurrent(), " candy", " candies") + ".";
    };
    Quest.prototype.getCandiesFoundMessage = function () {
        return "(" + this.candiesFound.getCurrentAsString() + " found so far)";
    };
    Quest.prototype.getChocolateBarsDropMessage = function () {
        return "You gain " + Algo.pluralFormat(this.chocolateBarsFound.getCurrent(), " chocolate bar", " chocolate bars") + ".";
    };
    Quest.prototype.increasePlayerPotionsCountdown = function (howMuch) {
        this.playerPotionsCountdown += howMuch;
    };
    Quest.prototype.increasePlayerSpellsCountdown = function (howMuch) {
        this.playerSpellsCountdown += howMuch;
    };
    Quest.prototype.lowerCountdowns = function () {
        // Lower spells countdown
        if (this.playerSpellsCountdown > 0)
            this.playerSpellsCountdown -= 1;
        // Lower potions countdown
        if (this.playerPotionsCountdown > 0)
            this.playerPotionsCountdown -= 1;
    };
    Quest.prototype.postDraw = function () {
        this.getGame().updatePlace();
    };
    Quest.prototype.preDraw = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
    };
    Quest.prototype.resizeQuest = function (width, height, forcedRealQuestSize) {
        if (forcedRealQuestSize === void 0) { forcedRealQuestSize = null; }
        // Set the real quest drawing size
        this.realQuestDrawingSize = new Pos(width, height);
        // Set the real quest size
        if (forcedRealQuestSize == null)
            this.realQuestSize = new Pos(width, height);
        else
            this.realQuestSize = forcedRealQuestSize;
        // Resize the area
        this.renderArea.resize(this.realQuestPosition.x + width + this.sizeToAddToTheRealQuestSize.x, this.realQuestPosition.y + height + this.sizeToAddToTheRealQuestSize.y); // We add ten for the quest log !
    };
    Quest.prototype.update = function () { };
    Quest.prototype.updateEntities = function () {
        // We store the current length before calling update stuff
        var length = this.entities.length;
        // Call the update function on each entity
        for (var i = 0; i < length; i++) {
            this.entities[i].update();
        }
        // Iterate over entities for removal (the only thing they can't do by themselves..)
        for (var i = 0; i < this.entities.length; i++) {
            // If the entity should die, we remove it and we make the appropriate callback
            if (this.entities[i].shouldDie()) {
                this.entities[i].willDie();
                this.entities[i].setDead(true);
                this.entities.splice(i, 1);
                i--;
            }
            else if (this.entities[i].isOutOfArea()) {
                this.entities[i].setOutOfArea(true);
                this.entities.splice(i, 1);
                i--;
            }
        }
        // Lower countdowns
        this.lowerCountdowns();
    };
    Quest.prototype.willBeDisplayed = function () {
        // Some some stuff needed because we start questing
        this.getGame().setWeAreQuesting(true);
        this.getGame().getQuestCallbackCollection().addCallback(this.update.bind(this));
        // Add some hotkeys
        for (var i = 0; i < this.playerSpellsHotkeys.length; i++) {
            this.getGame().addHotkey(this.playerSpellsHotkeys[i]);
        }
    };
    Quest.prototype.willBeClosed = function () {
        this.getGame().setWeAreQuesting(false);
    };
    // Public getters
    Quest.prototype.getBottomLimit = function () {
        return 20;
    };
    Quest.prototype.getCandiesFound = function () {
        return this.candiesFound;
    };
    Quest.prototype.getChocolateBarsFound = function () {
        return this.chocolateBarsFound;
    };
    Quest.prototype.getEntities = function () {
        return this.entities;
    };
    Quest.prototype.getGap = function () {
        // We find the perfect gap so that the player would be in the center
        var gap = (this.renderArea.getWidth() - 100) - (this.getGame().getPlayer().getGlobalPosition().x - 50) * 2;
        // We possibly correct this gap to keep the quest in the center if the player is in the left or right of the quest
        if (gap > (this.renderArea.getWidth() - 100))
            gap = (this.renderArea.getWidth() - 100);
        if (gap < -(this.renderArea.getWidth() - 100))
            gap = -(this.renderArea.getWidth() - 100);
        // We return the possibly corrected gap
        return gap;
    };
    Quest.prototype.getGlobalDrawingOffset = function () {
        return this.globalDrawingOffset;
    };
    Quest.prototype.getGravityDisabled = function () {
        return this.gravityDisabled;
    };
    Quest.prototype.getLastEntity = function () {
        return this.entities[this.entities.length - 1];
    };
    Quest.prototype.getLeftLimit = function () {
        return 20;
    };
    Quest.prototype.getPlayerCollisionBoxes = function () {
        return this.playerCollisionBoxes;
    };
    Quest.prototype.getPlayerPotionsCountdown = function () {
        return this.playerPotionsCountdown;
    };
    Quest.prototype.getPlayerSpellsCountdown = function () {
        return this.playerSpellsCountdown;
    };
    Quest.prototype.getQuestEnded = function () {
        return this.questEnded;
    };
    Quest.prototype.getQuestEndedAndWeWon = function () {
        return this.questEndedAndWeWon;
    };
    Quest.prototype.getRealQuestDrawingSize = function () {
        return this.realQuestDrawingSize;
    };
    Quest.prototype.getRealQuestPosition = function () {
        return this.realQuestPosition;
    };
    Quest.prototype.getRealQuestSize = function () {
        return this.realQuestSize;
    };
    Quest.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    Quest.prototype.getRightLimit = function () {
        return 20;
    };
    Quest.prototype.getTopLimit = function () {
        return 20;
    };
    Quest.prototype.getWormsLikeDisabled = function () {
        return this.wormsLikeDisabled;
    };
    // Public setters
    Quest.prototype.setGlobalDrawingOffset = function (globalDrawingOffset) {
        this.globalDrawingOffset = globalDrawingOffset;
    };
    Quest.prototype.setGravityDisabled = function (gravityDisabled) {
        this.gravityDisabled = gravityDisabled;
    };
    Quest.prototype.setWormsLikeDisabled = function (wormsLikeDisabled) {
        this.wormsLikeDisabled = wormsLikeDisabled;
    };
    // Private methods
    Quest.prototype.addPlayerSpell = function (playerSpell) {
        this.playerSpells.push(playerSpell);
        this.playerSpellsHotkeys.push(playerSpell.getHotkey());
    };
    Quest.prototype.createPlayerAcidDrop = function (position) {
        var acidDrop = new Fireball(this, position, new Naming("An acid drop", "an acid drop"), new Color(ColorType.PLAYER_ACID_DROP), new Pos(1, 1), 8, this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("An acid drop", "an acid drop")));
        // No target
        acidDrop.setTargetTypeNoTarget(new Pos(0, 1));
        // Return the acid drop
        return acidDrop;
    };
    Quest.prototype.createPlayerSpells = function () {
        // Add the spells
        if (Saving.loadBool("gridItemPossessedBeginnersGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellAcidRainButton", new Pos(0, 0), "Acid rain", new Color(ColorType.QUEST_BUTTON_ACID_RAIN), new CallbackCollection(this.castPlayerAcidRain.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "a"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellFireballButton", new Pos(11, 0), "Fireball", new Color(ColorType.QUEST_BUTTON_FIREBALL), new CallbackCollection(this.castPlayerFireball.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "f"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTeleportButton", new Pos(21, 0), "Teleport", new Color(ColorType.QUEST_BUTTON_TELEPORT), new CallbackCollection(this.castPlayerTeleport.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "t"));
        }
        if (Saving.loadBool("gridItemPossessedAdvancedGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellEraseMagicButton", new Pos(33, 0), "Erase magic", new Color(ColorType.QUEST_BUTTON_ERASE_MAGIC), new CallbackCollection(this.castPlayerEraseMagic.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "e"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellThornsShieldButton", new Pos(46, 0), "Thorns shield", new Color(ColorType.QUEST_BUTTON_THORNS_SHIELD), new CallbackCollection(this.castPlayerThornsShield.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 6, " "));
        }
        if (Saving.loadBool("gridItemPossessedBlackMagicGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellObsidianWallButton", new Pos(63, 0), "Obsidian wall", new Color(ColorType.QUEST_BUTTON_OBSIDIAN_WALL), new CallbackCollection(this.castPlayerObsidianWall.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "o"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellBlackDemonsButton", new Pos(78, 0), "Black demons", new Color(ColorType.QUEST_BUTTON_BLACK_DEMONS), new CallbackCollection(this.castPlayerBlackDemons.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 6, "d"));
        }
        // Add the potions
        if (Saving.loadBool("questPlayerSpellHealthPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellHealthPotionButton", new Pos(0, 2), "Health", new Color(ColorType.QUEST_BUTTON_HEALTH_POTION), new CallbackCollection(this.castPlayerHealthPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "h", "questPlayerSpellHealthPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellTurtlePotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTurtlePotionButton", new Pos(13, 2), "Turtle", new Color(ColorType.QUEST_BUTTON_TURTLE_POTION), new CallbackCollection(this.castPlayerTurtlePotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 2, "r", "questPlayerSpellTurtlePotionQuantity"));
        if (Saving.loadBool("questPlayerSpellAntiGravityPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellAntiGravityPotionButton", new Pos(26, 2), "Anti gravity", new Color(ColorType.QUEST_BUTTON_ANTI_GRAVITY_POTION), new CallbackCollection(this.castPlayerAntiGravityPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 5, "g", "questPlayerSpellAntiGravityPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellBerserkPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellBerserkPotionButton", new Pos(45, 2), "Berserk", new Color(ColorType.QUEST_BUTTON_BERSERK_POTION), new CallbackCollection(this.castPlayerBerserkPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "b", "questPlayerSpellBerserkPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellCloningPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellCloningPotionButton", new Pos(59, 2), "Cloning", new Color(ColorType.QUEST_BUTTON_CLONING_POTION), new CallbackCollection(this.castPlayerCloningPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "c", "questPlayerSpellCloningPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellPPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellPPotionButton", new Pos(73, 2), "P", new Color(ColorType.QUEST_BUTTON_P_POTION), new CallbackCollection(this.castPlayerPPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "p", "questPlayerSpellPPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellXPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellXPotionButton", new Pos(81, 2), "X", new Color(ColorType.QUEST_BUTTON_X_POTION), new CallbackCollection(this.castPlayerXPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "x", "questPlayerSpellXPotionQuantity"));
        // Add the capacities granted by objects
        if (Saving.loadBool("gridItemPossessedTimeRing"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTimeSlowingButton", new Pos(0, 4), "Time slowing", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerTimeSlowing.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 8, "w"));
        if (Saving.loadBool("gridItemPossessedPogoStick"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellJumpButton", new Pos(14, 4), "Jump", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerJump.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 0, "j"));
        if (Saving.loadBool("gridItemPossessedSponge"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellSqueezeButton", new Pos(20, 4), "Squeeze", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerSqueeze.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 0, "s"));
        // Add the special spell granted by the purple shark fin
        if (Saving.loadBool("gridItemPossessedPurpleSharkFin"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpell", new Pos(38, 4), "Black hole spell (purple shark fin) (once per quest)", new Color(ColorType.QUEST_BLACKHOLE_SPELL), new CallbackCollection(this.castPlayerBlackhole.bind(this)), QuestPlayerSpellCountdownType.BLACKHOLE, 1, 4, "k"));
        // Set the player spells height from the max height found in all the spells added
        this.playerSpellsHeight = 0;
        for (var i = 0; i < this.playerSpells.length; i++) {
            if (this.playerSpells[i].getButtonPosition().y > this.playerSpellsHeight)
                this.playerSpellsHeight = this.playerSpells[i].getButtonPosition().y;
        }
        this.playerSpellsHeight += 1; // Add one because for example if the highest spell is at 0 we need a 1 height
        this.playerSpellsHeight += 1; // Add one to make a clear separation with the real quest
    };
    Quest.prototype.drawPlayerSpells = function () {
        // If there's at least one player spell
        if (this.playerSpells.length > 0) {
            var baseXPosition = ((this.renderArea.getWidth() - 100) - this.getGap()) / 2;
            // Draw the spells
            for (var i = 0; i < this.playerSpells.length; i++) {
                this.playerSpells[i].draw(this.renderArea, new Pos(baseXPosition, 2));
            }
            // Draw the spell countdown
            if (this.playerSpellsCountdown > 0) {
                this.renderArea.drawString("(" + Math.ceil(this.playerSpellsCountdown / 10).toString() + " sec)", baseXPosition + 92, 2);
                this.renderArea.addColor(baseXPosition + 92, baseXPosition + 100, 2, new Color(ColorType.QUEST_COUNTDOWN));
            }
            // Draw the potion countdown
            if (this.playerPotionsCountdown > 0) {
                this.renderArea.drawString("(" + Math.ceil(this.playerPotionsCountdown / 10).toString() + " sec)", baseXPosition + 92, 4);
                this.renderArea.addColor(baseXPosition + 92, baseXPosition + 100, 4, new Color(ColorType.QUEST_COUNTDOWN));
            }
        }
    };
    Quest.prototype.drawQuestLog = function () {
        this.getGame().getQuestLog().draw(this.renderArea, new Pos(((this.renderArea.getWidth() - 100) - this.getGap()) / 2, this.renderArea.getHeight() - 12));
    };
    Quest.prototype.drawSpecialInstruction = function () {
        if (this.specialInstruction != null) {
            this.renderArea.drawString(this.specialInstruction, this.realQuestPosition.x, this.realQuestPosition.y - 1);
            this.renderArea.addBold(this.realQuestPosition.x, this.realQuestPosition.x + this.specialInstruction.length, this.realQuestPosition.y - 1);
        }
    };
    Quest.prototype.getMagicCountdownTime = function () {
        var time = 0;
        // If we have the sorceress hat, the base time is 50
        if (this.getGame().isEquipped("hat", "eqItemHatSorceressHat"))
            time = 50;
        else
            time = 80;
        // Reduce the time thanks to the magic gift
        time -= time * (Saving.loadNumber("gameGiftMagic") * 15 / 100);
        // Set the time to 0 if it is < 0 (which shouldn't happen anyway, but you know, since some people will probably modify the game variables by themselves it's better if we try to avoid bugs)
        if (time < 0)
            time = 0;
        // Return the time
        return time;
    };
    return Quest;
})(Place);
///<reference path="Quest.ts"/>
var Bridge = (function (_super) {
    __extends(Bridge, _super);
    // Constructor
    function Bridge(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(138, 32);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, false, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add a wall at the bridge position
        this.addBridgeFloor();
        // Add the troll
        this.addTroll();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're trying to cross the bridge. A huge troll is blocking your way!"));
    }
    // Public methods
    Bridge.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Bridge.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to cross the bridge!"));
            Saving.saveBool("mainMapDoneBridge", true); // The bridge is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You didn't manage to cross the bridge."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Bridge.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/bridge/bridge"), this.getRealQuestPosition().x, this.getRealQuestPosition().y + 17);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Bridge.prototype.addBridgeFloor = function () {
        // Create the wall
        var wall = new Wall(this, new Pos(0, 18));
        // Add boxes
        wall.addBox(new Pos(0, 0), new Pos(138, 2));
        wall.addBox(new Pos(3, 2), new Pos(10, 1));
        wall.addBox(new Pos(6, 3), new Pos(4, 11));
        wall.addBox(new Pos(64, 2), new Pos(10, 1));
        wall.addBox(new Pos(67, 3), new Pos(4, 11));
        wall.addBox(new Pos(126, 2), new Pos(10, 1));
        wall.addBox(new Pos(129, 3), new Pos(4, 11));
        // Add the wall to the quest
        this.addEntity(wall);
    };
    Bridge.prototype.addTroll = function () {
        var troll = new Troll(this, new Pos(100, 8));
        troll.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0), 12));
        troll.setHealthBar(new QuestEntityHealthBar(troll, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(troll);
    };
    Bridge.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 138)
            return true;
        // Else we return false
        return false;
    };
    return Bridge;
})(Quest);
var Bugs;
(function (Bugs) {
    // Variables
    var graphicalBugLevel = 0;
    var questBugLevel = 0;
    var ultimateBugLevel = 0;
    // Various functions
    function changeRandomCharacter(str) {
        var index = Random.between(0, str.length - 1);
        return str.substr(0, index) + getRandomCharacter() + str.substr(index + 1);
    }
    Bugs.changeRandomCharacter = changeRandomCharacter;
    function getRandomCharacter() {
        return Random.fromArray(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "#", "_", "/", "-", "+", "*", "^", ";", ",", ".", ":", "!", "§", "$", "£", "ù", "è", "à", "@", ")", "(", "|", "]", "}", "{", "(",
            "~", "é", "<", ">", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "%", "`", "'", "ç"]);
    }
    Bugs.getRandomCharacter = getRandomCharacter;
    // Getters
    function getGraphicalBugLevel() {
        return graphicalBugLevel;
    }
    Bugs.getGraphicalBugLevel = getGraphicalBugLevel;
    function getQuestBugLevel() {
        return questBugLevel;
    }
    Bugs.getQuestBugLevel = getQuestBugLevel;
    function getUltimateBugLevel() {
        return ultimateBugLevel;
    }
    Bugs.getUltimateBugLevel = getUltimateBugLevel;
    // Setters    
    function setGraphicalBugLevel(graphicalBugLevel_) {
        graphicalBugLevel = graphicalBugLevel_;
    }
    Bugs.setGraphicalBugLevel = setGraphicalBugLevel;
    function setQuestBugLevel(questBugLevel_) {
        questBugLevel = questBugLevel_;
    }
    Bugs.setQuestBugLevel = setQuestBugLevel;
    function setUltimateBugLevel(ultimateBugLevel_) {
        ultimateBugLevel = ultimateBugLevel_;
    }
    Bugs.setUltimateBugLevel = setUltimateBugLevel;
})(Bugs || (Bugs = {}));
///<reference path="QuestEntity.ts"/>
var Camazotz = (function (_super) {
    __extends(Camazotz, _super);
    // Constructor
    function Camazotz(quest, pos) {
        _super.call(this, quest, pos, new Naming("Camazotz, the bat god", "Camazotz, the bat god"), new RenderArea(22, 8), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(8, 1), new Pos(6, 2)), new CollisionBox(this, new Pos(2, 3), new Pos(18, 1)), new CollisionBox(this, new Pos(1, 4), new Pos(20, 1)), new CollisionBox(this, new Pos(0, 5), new Pos(22, 1)), new CollisionBox(this, new Pos(9, 6), new Pos(4, 1)), new CollisionBox(this, new Pos(10, 7), new Pos(2, 1))), new QuestEntityMovement());
        // Set the drop a demon timer default value
        this.resetDropADemonTimer();
        // Set the default distance from the player
        this.distanceFromPlayer = 5;
        // Set the default tryToMoveAgainTimer
        this.tryToMoveAgainTimer = 0;
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(5000);
        this.setHp(5000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/camazotz"));
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its claws", "its claws"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(24, 9))), 300));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(20, 100); // This delay because Camazotz is quite busy throwing enemies to the player
    }
    // update()
    Camazotz.prototype.update = function () {
        // Handle the movement towards the player
        this.handleMovementTowardsPlayer();
        // Handle demon dropping
        this.handleDropADemon();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willeDie()
    Camazotz.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    Camazotz.prototype.dropADemon = function () {
        // Create the demon
        var demon = new Demon(this.getQuest(), this.getGlobalPosition().plus(new Pos(8, 8)));
        // Set the health bar
        demon.setHealthBar(new QuestEntityHealthBar(demon, new Pos(6, 1)));
        // Add the demon
        this.getQuest().addEntity(demon);
    };
    Camazotz.prototype.handleDropADemon = function () {
        // If it's time to add one
        if (this.dropADemonTimer < 0) {
            // Drop a demon and reset the timer
            this.dropADemon();
            this.resetDropADemonTimer();
        }
        else {
            // Decrese the timer
            this.dropADemonTimer -= 1;
        }
    };
    Camazotz.prototype.handleMovementTowardsPlayer = function () {
        // If we try to move
        if (this.tryToMoveAgainTimer <= 0) {
            // We go towards the player
            this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(this.distanceFromPlayer, 0)), 2, new Pos(2, 0), true);
            // We'll try to move again in 3 frames
            this.tryToMoveAgainTimer = 3;
        }
        else {
            this.tryToMoveAgainTimer -= 1;
        }
    };
    Camazotz.prototype.resetDropADemonTimer = function () {
        this.dropADemonTimer = Random.between(8, 12);
    };
    return Camazotz;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Camel = (function (_super) {
    __extends(Camel, _super);
    // Constructor
    function Camel(quest, pos) {
        _super.call(this, quest, pos, new Naming("A camel", "a camel"), new RenderArea(7, 2), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 1), new Pos(5, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(7);
        this.setHp(7);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/camel"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its long neck", "its long neck"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(3, 3))), 5));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(5, 7);
    }
    // Public methods
    Camel.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(5 + Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Camel;
})(QuestEntity);
///<reference path="Resource.ts"/>
var StatusBarResource = (function (_super) {
    __extends(StatusBarResource, _super);
    // Constructor
    function StatusBarResource(game, savingPrefix) {
        _super.call(this, savingPrefix);
        this.game = game;
    }
    // Public setters
    StatusBarResource.prototype.setCurrent = function (n, reCalcPlayerMaxHp) {
        if (reCalcPlayerMaxHp === void 0) { reCalcPlayerMaxHp = false; }
        _super.prototype.setCurrent.call(this, n);
        if (reCalcPlayerMaxHp)
            this.game.getPlayer().reCalcMaxHp();
        else
            this.game.updateStatusBar();
    };
    return StatusBarResource;
})(Resource);
///<reference path="StatusBarResource.ts"/>
var Candies = (function (_super) {
    __extends(Candies, _super);
    // Constructor
    function Candies(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    Candies.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        var comment = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative candies?!";
        else if (n == 1)
            return "You have 1 candy";
        else {
            if (n == 1337)
                base = "leet";
            else
                base = Algo.numberToStringButNicely(n);
        }
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 8) {
            suffix = " candies";
            // We add a prefix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 4)
            suffix = " cnd";
        else if (size >= 2)
            suffix = " c";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        // We possibly set a comment
        if (n == 42 && size >= 4)
            comment = " \\o/";
        else if ((n == 65535 || n == 314159) && size >= 1)
            comment = "!";
        return prefix + base + suffix + comment;
    };
    return Candies;
})(StatusBarResource);
///<reference path="StatusBarResource.ts"/>
var CandiesEaten = (function (_super) {
    __extends(CandiesEaten, _super);
    // Constructor
    function CandiesEaten(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    CandiesEaten.prototype.getCurrentAsString = function () {
        var n = this.getCurrent();
        if (n < 0)
            return "You have eaten negative candies ?!";
        else if (n == 1)
            return "You have eaten 1 candy";
        else {
            return "You have eaten " + Algo.numberToStringButNicely(n) + " candies";
        }
    };
    // Public setters
    CandiesEaten.prototype.setCurrent = function (n) {
        _super.prototype.setCurrent.call(this, n, true);
    };
    return CandiesEaten;
})(StatusBarResource);
///<reference path="Resource.ts"/>
Saving.registerBool("candiesThrownGotChocolateBar", false);
var CandiesThrown = (function (_super) {
    __extends(CandiesThrown, _super);
    // Constructor
    function CandiesThrown(game, savingPrefix) {
        _super.call(this, savingPrefix);
        // Smileys
        this.smileys = [new CandiesThrownSmileyFirstLine("."),
            new CandiesThrownSmileyFirstLine("..."),
            new CandiesThrownSmileyFirstLine("...?"),
            new CandiesThrownSmileyFirstLine("...? :|"),
            new CandiesThrownSmileyFirstLine("...? :/"),
            new CandiesThrownSmileyFirstLine("...? :("),
            new CandiesThrownSmileyFirstLine("...? :["),
            new CandiesThrownSmileyFirstLine("...? :{"),
            new CandiesThrownSmileyFirstLine("...? :'("),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?  (;_;)"),
            new CandiesThrownSmileyFirstLine("...?   (;_;)"),
            new CandiesThrownSmileyFirstLine("...?    (;_;)"),
            new CandiesThrownSmileyFirstLine("...?   (;_;)"),
            new CandiesThrownSmileyFirstLine("...?  (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;__;)"),
            new CandiesThrownSmileyFirstLine("...? (;___;)"),
            new CandiesThrownSmileyFirstLine("...? (;__;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;.;)"),
            new CandiesThrownSmileyFirstLine("...? (:.:)"),
            new CandiesThrownSmileyFirstLine("...? (:_:)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;) come"),
            new CandiesThrownSmileyFirstLine("...? (;_;) come on"),
            new CandiesThrownSmileyFirstLine("...? (-_-) come on"),
            new CandiesThrownSmileyFirstLine("...? (-_-)"),
            new CandiesThrownSmileyFirstLine("...? (-_-) why are you throwing candies like that?"),
            new CandiesThrownSmileyFirstLine("...? (o_o)"),
            new CandiesThrownSmileyFirstLine("...? (o_o) I'm gonna destroy something if you don't stop!!"),
            new CandiesThrownSmileyFirstLine("...? (o_o)"),
            new CandiesThrownSmileyFirstLine("...?  (o_o)"),
            new CandiesThrownSmileyFirstLine("...?   (o_o)"),
            new CandiesThrownSmileyFirstLine("...?    (o_o)"),
            new CandiesThrownSmileyFirstLine("...?     (o_o)"),
            new CandiesThrownSmileyFirstLine("...?      (o_o)"),
            new CandiesThrownSmileyFirstLine("...?       (o_o)"),
            new CandiesThrownSmileyFirstLine("...?       (O_O)"),
            new CandiesThrownSmileyFirstLine("...?      (O_O)"),
            new CandiesThrownSmileyFirstLine("...?     (O_O)"),
            new CandiesThrownSmileyFirstLine("...?    (O_O)"),
            new CandiesThrownSmileyFirstLine("...?   (O_O)"),
            new CandiesThrownSmileyFirstLine("...?  (O_O)"),
            new CandiesThrownSmileyFirstLine("...? (O_O)"),
            new CandiesThrownSmileyFirstLine("...?(O_O)"),
            new CandiesThrownSmileyFirstLine("...(O_O)"),
            new CandiesThrownSmileyFirstLine("..(O_O)"),
            new CandiesThrownSmileyFirstLine(".(O_O)"),
            new CandiesThrownSmileyFirstLine("(O_O)"),
            new CandiesThrownSmileyFirstLine(" (O_O)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o) stop!!"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (;_;)"),
            new CandiesThrownSmileyFirstLine(" (;_;) well."),
            new CandiesThrownSmileyFirstLine(" (;_;) I guess I'll just leave, then."),
            new CandiesThrownSmileyFirstLine("  (;_;)"),
            new CandiesThrownSmileyFirstLine("   (;_;)"),
            new CandiesThrownSmileyFirstLine("    (;_;)"),
            new CandiesThrownSmileyFirstLine("     (;_;)"),
            new CandiesThrownSmileyFirstLine("      (;_;)"),
            new CandiesThrownSmileyFirstLine("       (;_;)"),
            new CandiesThrownSmileyFirstLine("        (;_;)"),
            new CandiesThrownSmileyFirstLine("         (;_;)"),
            new CandiesThrownSmileyFirstLine("          (;_;)"),
            new CandiesThrownSmileyFirstLine("           (;_;)"),
            new CandiesThrownSmileyFirstLine("            (;_;)"),
            new CandiesThrownSmileyFirstLine("             (;_;)"),
            new CandiesThrownSmileyFirstLine("              (;_;)"),
            new CandiesThrownSmileyFirstLine("               (;_;)"),
            new CandiesThrownSmileyFirstLine("                (;_;)"),
            new CandiesThrownSmileyFirstLine("                 (;_;)"),
            new CandiesThrownSmileyFirstLine("                  (;_;)"),
            new CandiesThrownSmileyFirstLine("                   (;_;)"),
            new CandiesThrownSmileyFirstLine("                    (;_;)"),
            new CandiesThrownSmileyFirstLine("                     (;_;)"),
            new CandiesThrownSmileyFirstLine("                      (;_;)"),
            new CandiesThrownSmileyFirstLine("                      (;_;)|"),
            new CandiesThrownSmileyFirstLine("                      (o_o)|"),
            new CandiesThrownSmileyFirstLine("                 crap (o_o)|"),
            new CandiesThrownSmileyFirstLine("               a wall (o_o)|"),
            new CandiesThrownSmileyFirstLine("                      (._.)|"),
            new CandiesThrownSmileyFirstLine("     I'm trapped here (._.)|"),
            new CandiesThrownSmileyFirstLine("    maybe...          (._.)|"),
            new CandiesThrownSmileyFirstLine("    maybe I could dig (._.)|"),
            new CandiesThrownSmileyFirstLine("    dig in the ground (._.)|"),
            new CandiesThrownSmileyFirstLine("                      (._.)|"),
            new CandiesThrownSmileyFirstLine("                *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 1)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 2)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 3)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 4)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 5)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 6)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)).addObject(new CandiesThrownSmileyCaveObject("wow.", new Pos(52, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)).addObject(new CandiesThrownSmileyCaveObject("I didn't expect that.", new Pos(35, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(55, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(53, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(51, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(49, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(47, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)).addObject(new CandiesThrownSmileyCaveObject("what's this place?", new Pos(39, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(43, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(41, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(39, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(37, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(35, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)).addObject(new CandiesThrownSmileyCaveObject("it looks like a cave", new Pos(26, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(31, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(29, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(27, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(25, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(23, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(21, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)).addObject(new CandiesThrownSmileyCaveObject("oh! there's a chest over there!", new Pos(8, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(17, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(15, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(13, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(11, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(9, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(7, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(5, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I guess I should open it", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).openChest(),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("!!!", new Pos(5, 5))).openChest(),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I found a chocolate bar!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("...", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("hey, listen", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I'll give you the chocolate bar", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("if you swear to stop throwing candies", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("okay?", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("throw 10 last candies to let me know if you agree", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("good. here's the bar. no more throwing!!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("Hey?!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("You're still throwing candies!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("Candies are precious, you know.", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("...", new Pos(5, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I'm out of here.", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 8), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 9), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 10), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 11), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 12), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 13), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 14), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(6, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(8, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(10, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(12, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 14), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 13), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 12), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(13, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(15, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(17, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("this is...", new Pos(13, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("a room...", new Pos(13, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("FULL OF GIANT CANDIES!", new Pos(33, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("well", new Pos(16, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("don't worry about the candies you threw", new Pos(6, 7))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("just let me eat those candies and you're forgiven", new Pos(6, 7))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("<3", new Pos(17, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(20, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(22, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(22, 10), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(23, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(25, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(27, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(29, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(31, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(33, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(34, 10), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(34, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(36, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(38, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(40, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(42, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
        ];
        // *nom* *nom* smileys
        this.nomNomSmileys = [new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(40, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(41, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(42, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(43, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(44, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(45, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(46, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom* *nom*", new Pos(40, 9))),
        ];
        // Index of the *nom* *nom* smiley we show
        this.nomNomSmileyIndex = 0;
        this.game = game;
    }
    // Public methods
    CandiesThrown.prototype.add = function (n) {
        // We save the return value
        var returnValue = _super.prototype.add.call(this, n);
        // If it's time to get this chocolate bar, we get it
        if (Saving.loadBool("candiesThrownGotChocolateBar") == false && Math.floor(this.getCurrent() / 10) - 1 == 162) {
            this.game.getChocolateBars().add(1);
            Saving.saveBool("candiesThrownGotChocolateBar", true);
        }
        // We choose a random *nom* *nom* smiley index in case we're at this step of the animation
        this.nomNomSmileyIndex = Random.between(0, this.nomNomSmileys.length - 1);
        // We return the return value
        return returnValue;
    };
    CandiesThrown.prototype.draw = function (renderArea, x, y) {
        var n = this.getCurrent();
        var smileyIndex;
        var base;
        // Set the base
        if (n < 0)
            base = "You threw negative candies ?!";
        else if (n == 1)
            base = "You threw 1 candy on the ground";
        else {
            base = "You threw " + Algo.numberToStringButNicely(n) + " candies on the ground";
        }
        // Get the index of the smiley we should add
        smileyIndex = Math.floor(n / 10) - 1;
        // Add a smiley from the smileys array if the index is correct
        if (smileyIndex >= 0 && smileyIndex < this.smileys.length) {
            // Draw the smiley and return the correct y gap
            return this.smileys[smileyIndex].draw(renderArea, x, y, base);
        }
        else if (smileyIndex < 0) {
            // We just draw the base and return 0
            renderArea.drawString(base, x, y);
            return 0;
        }
        else {
            // Draw the smiley and return the correct y gap
            return this.nomNomSmileys[this.nomNomSmileyIndex].draw(renderArea, x, y, base);
        }
    };
    return CandiesThrown;
})(Resource);
var CandiesThrownSmiley = (function () {
    // Constructor
    function CandiesThrownSmiley() {
    }
    // Public methods
    CandiesThrownSmiley.prototype.draw = function (renderArea, x, y, base) {
        // We're in the mother class, so we just draw nothing and return 0
        return 0;
    };
    return CandiesThrownSmiley;
})();
///<reference path="CandiesThrownSmiley.ts"/>
var CandiesThrownSmileyCave = (function (_super) {
    __extends(CandiesThrownSmileyCave, _super);
    // Constructor
    function CandiesThrownSmileyCave(smiley, smileyPosition, step) {
        if (step === void 0) { step = CandiesThrownSmileyCaveStep.FIRST_ROOM; }
        _super.call(this);
        // Various objects (can be speeches, for example)
        this.objects = [];
        // Is the chest open ? (closed by default)
        this.chestOpened = false;
        this.smiley = smiley;
        this.smileyPosition = smileyPosition;
        this.step = step;
    }
    // draw()
    CandiesThrownSmileyCave.prototype.draw = function (renderArea, x, y, base) {
        // Draw the base
        renderArea.drawString(base, x, y);
        // Draw the cave's walls, depending on the step
        renderArea.drawVerticalLine("|", 0, y + 2, y + 8); // Left wall
        renderArea.drawVerticalLine("|", 62, y, y + 8); // Right wall
        renderArea.drawHorizontalLine("_", 0, 57, y + 1); // Roof
        renderArea.drawString("|", 56, y + 1); // Additional character
        switch (this.step) {
            // Only third room
            case CandiesThrownSmileyCaveStep.THIRD_ROOM:
                renderArea.drawHorizontalLine("-", 12, 62, y + 16); // Floor
                renderArea.drawVerticalLine("|", 62, y + 9, y + 16); // Right wall
                renderArea.drawArray(Database.getAscii("general/candyRoom"), 12, y + 9); // Content of the room
            // Second & third room
            case CandiesThrownSmileyCaveStep.SECOND_ROOM:
                // Floor of the first room (we must make it in two pieces because there's a hole!)
                renderArea.drawHorizontalLine("-", 1, 4, y + 8); // Left
                renderArea.drawHorizontalLine("-", 9, 62, y + 8); // Right
                // Rest of the room
                renderArea.drawVerticalLine("|", 0, y + 9, y + 16); // Left wall
                renderArea.drawVerticalLine("|", 11, y + 9, y + 14); // Right wall
                renderArea.drawHorizontalLine("-", 1, 12, y + 16); // Floor
                break;
            // Only first room
            case CandiesThrownSmileyCaveStep.FIRST_ROOM:
                renderArea.drawHorizontalLine("-", 1, 62, y + 8); // Floor
                break;
        }
        // Draw the chest
        renderArea.drawString("|_|", 1, y + 7);
        if (this.chestOpened == false)
            renderArea.drawString("_", 2, y + 6);
        else
            renderArea.drawString("(", 1, y + 6);
        // Draw the smiley
        renderArea.drawString(this.smiley, x + this.smileyPosition.x, y + this.smileyPosition.y);
        // Draw objects
        for (var i = 0; i < this.objects.length; i++) {
            renderArea.drawString(this.objects[i].getStr(), x + this.objects[i].getPosition().x, y + this.objects[i].getPosition().y);
        }
        // Return the cave's height
        switch (this.step) {
            case CandiesThrownSmileyCaveStep.FIRST_ROOM:
                return 8;
                break;
            case CandiesThrownSmileyCaveStep.SECOND_ROOM:
            case CandiesThrownSmileyCaveStep.THIRD_ROOM:
                return 16;
                break;
        }
    };
    // Public methods used to add or change stuff (always return ourselves)
    CandiesThrownSmileyCave.prototype.addObject = function (object) {
        this.objects.push(object);
        return this;
    };
    CandiesThrownSmileyCave.prototype.openChest = function () {
        this.chestOpened = true;
        return this;
    };
    return CandiesThrownSmileyCave;
})(CandiesThrownSmiley);
var CandiesThrownSmileyCaveObject = (function () {
    // Constructor
    function CandiesThrownSmileyCaveObject(str, position) {
        this.str = str;
        this.position = position;
    }
    // Public getters
    CandiesThrownSmileyCaveObject.prototype.getPosition = function () {
        return this.position;
    };
    CandiesThrownSmileyCaveObject.prototype.getStr = function () {
        return this.str;
    };
    return CandiesThrownSmileyCaveObject;
})();
var CandiesThrownSmileyCaveStep;
(function (CandiesThrownSmileyCaveStep) {
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["FIRST_ROOM"] = 0] = "FIRST_ROOM";
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["SECOND_ROOM"] = 1] = "SECOND_ROOM";
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["THIRD_ROOM"] = 2] = "THIRD_ROOM";
})(CandiesThrownSmileyCaveStep || (CandiesThrownSmileyCaveStep = {}));
///<reference path="CandiesThrownSmiley.ts"/>
var CandiesThrownSmileyFirstLine = (function (_super) {
    __extends(CandiesThrownSmileyFirstLine, _super);
    // Constructor
    function CandiesThrownSmileyFirstLine(line) {
        _super.call(this);
        this.line = line;
    }
    // draw()
    CandiesThrownSmileyFirstLine.prototype.draw = function (renderArea, x, y, base) {
        renderArea.drawString(base + this.line, x, y);
        return 0;
    };
    return CandiesThrownSmileyFirstLine;
})(CandiesThrownSmiley);
///<reference path="Place.ts"/>
Saving.registerBool("candyBoxBoxOpened", false);
var CandyBox = (function (_super) {
    __extends(CandyBox, _super);
    // Constructor
    function CandyBox(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.eatButtonShown = false;
        this.throwButtonShown = false;
        this.requestFeatureButtonShown = false;
        // Resize the area
        this.renderArea.resize(100, 40);
        // Update
        this.update();
    }
    // willBeDisplayed()
    CandyBox.prototype.willBeDisplayed = function () {
        // We check right now
        this.checkCandies();
        // And we add the callback
        this.getGame().getCandies().getCallbackCollection().addCallback(this.checkCandies.bind(this));
        // We add hotkeys
        this.getGame().addHotkey(new Hotkey("e", new CallbackCollection(this.clickedEatCandiesButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("t", new CallbackCollection(this.clickedThrowCandiesButton.bind(this))));
    };
    // Public methods
    CandyBox.prototype.update = function () {
        // Y gap for everything below the throwing candies stuff (because the throwing candies stuff can be extended a lot)
        var yGapForEverythingBelowTheThrowingCandiesStuff = 0;
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the box
        if (Saving.loadBool("lonelyHouseTakeTheBoxDone")) {
            if (Saving.loadBool("candyBoxBoxOpened") == true)
                this.renderArea.drawArray(Database.getAscii("general/openBox"), 68, 4);
            else
                this.renderArea.drawArray(Database.getAscii("general/box"), 68, 4);
        }
        // If we possess the talking candy
        if (Saving.loadBool("gridItemPossessedTalkingCandy") == true) {
            // Draw the ascii art
            this.renderArea.drawArray(Database.getAscii("gridItems/talkingCandy"), 68, 37);
            // If we don't have the box yet
            if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("talkingCandySpeechNoBox"), 30, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeechNoBox"));
            }
            else {
                // If the talking candy already opened the box
                if (Saving.loadBool("candyBoxBoxOpened")) {
                    // Draw the speech
                    this.renderArea.drawSpeech(Database.getText("talkingCandySpeech2"), 34, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeech2"));
                }
                else {
                    // Draw the speech
                    this.renderArea.drawSpeech(Database.getText("talkingCandySpeech1"), 30, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeech1"));
                    // Add the button
                    this.renderArea.addAsciiRealButton(Database.getText("talkingCandyButton"), 80, 37, "candyBoxTalkingCandyButton", Database.getTranslatedText("talkingCandyButton"));
                    this.renderArea.addLinkCall(".candyBoxTalkingCandyButton", new CallbackCollection(this.openBox.bind(this)));
                }
            }
        }
        // Eat all the candies
        if (this.eatButtonShown) {
            this.renderArea.addAsciiRealButton(Database.getText("candyBoxEatCandiesButton"), 0, 1, "candyBoxEatCandiesButton", Database.getTranslatedText("candyBoxEatCandiesButton"), false, 0);
            this.renderArea.addLinkCall(".candyBoxEatCandiesButton", new CallbackCollection(this.clickedEatCandiesButton.bind(this)));
            if (this.getGame().getCandiesEaten().getCurrent() != 0)
                this.renderArea.drawString(this.getGame().getCandiesEaten().getCurrentAsString(), 0, 3);
        }
        // Throw 10 candies
        if (this.throwButtonShown) {
            this.renderArea.addAsciiRealButton(Database.getText("candyBoxThrowCandiesButton"), 0, 6, "candyBoxThrowCandiesButton", Database.getTranslatedText("candyBoxThrowCandiesButton"), false, 0);
            this.renderArea.addLinkCall(".candyBoxThrowCandiesButton", new CallbackCollection(this.clickedThrowCandiesButton.bind(this)));
            if (this.getGame().getCandiesThrown().getCurrent() != 0) {
                yGapForEverythingBelowTheThrowingCandiesStuff = this.getGame().getCandiesThrown().draw(this.renderArea, 0, 8); // Set the yGap..
            }
        }
        // Request feature
        if (this.requestFeatureButtonShown) {
            if (Saving.loadBool("statusBarUnlocked") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlocked"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlocked"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedButton", new CallbackCollection(this.requestStatusBarUnlocked.bind(this)));
            }
            else if (Saving.loadBool("statusBarUnlockedCfg") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedCfg"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedCfgButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfg"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedCfgButton", new CallbackCollection(this.requestStatusBarUnlockedCfg.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
            else if (Saving.loadBool("statusBarUnlockedSave") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedSave"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedSaveButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedSave"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedSaveButton", new CallbackCollection(this.requestStatusBarUnlockedSave.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedCfgComment1"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedCfgComment2"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfgComment1"), 0, 16 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfgComment2"), 0, 17 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
            else if (Saving.loadBool("statusBarUnlockedHealthBar") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedHealthBar"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedHealthBarButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedHealthBar"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedHealthBarButton", new CallbackCollection(this.requestStatusBarUnlockedHealthBar.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedSaveComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedSaveComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
            else if (Saving.loadBool("statusBarUnlockedMap") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedMap"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedMapButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedMap"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedMapButton", new CallbackCollection(this.requestStatusBarUnlockedMap.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedHealthBarComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedHealthBarComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
        }
    };
    // getRenderArea()
    CandyBox.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    CandyBox.prototype.checkCandies = function () {
        // Possibly show the eat button
        if (this.eatButtonShown == false) {
            if (this.getGame().getCandies().getMax() > 0) {
                this.eatButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
        // Possibly show the throw button
        if (this.throwButtonShown == false) {
            if (this.getGame().getCandies().getMax() >= 10) {
                this.throwButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
        // Possibly show the request feature button
        if (this.requestFeatureButtonShown == false) {
            // If we have enough candies & the last feature isn't unlocked yet
            if (this.getGame().getCandies().getMax() >= 30 && Saving.loadBool("statusBarUnlockedMap") == false) {
                this.requestFeatureButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
    };
    CandyBox.prototype.clickedEatCandiesButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 1) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesEaten());
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.clickedThrowCandiesButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesThrown(), 10);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.openBox = function () {
        // The box is now opened
        Saving.saveBool("candyBoxBoxOpened", true);
        // The tabs are unlocked
        Saving.saveBool("statusBarUnlockedInsideYourBox", true);
        Saving.saveBool("statusBarUnlockedTheComputer", true);
        Saving.saveBool("statusBarUnlockedTheArena", true);
        this.getGame().updateStatusBar(true);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    CandyBox.prototype.requestStatusBarUnlocked = function () {
        if (this.getGame().getCandies().getCurrent() >= 30) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 30);
            Saving.saveBool("statusBarUnlocked", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedCfg = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedCfg", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedHealthBar = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedHealthBar", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedMap = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 10);
            Saving.saveBool("statusBarUnlockedMap", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedSave = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedSave", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    return CandyBox;
})(Place);
var CandyMerchantItem = (function () {
    // Constructor
    function CandyMerchantItem(game, savingBool, asciiName, asciiPosition, merchantSpeech, price, buttonText, buttonName) {
        this.game = game;
        this.savingBool = savingBool;
        this.asciiName = asciiName;
        this.asciiPosition = asciiPosition;
        this.merchantSpeech = merchantSpeech;
        this.price = price;
        this.buttonText = buttonText;
        this.buttonName = buttonName;
    }
    // Public methods
    CandyMerchantItem.prototype.buy = function () {
        // We tell the saving system that this item is bought
        Saving.saveBool(this.savingBool, true);
    };
    CandyMerchantItem.prototype.canBeBought = function () {
        // If it's already bought, we return false
        if (this.isBought())
            return false;
        return true;
    };
    CandyMerchantItem.prototype.canBeClicked = function () {
        // If it's already bought, we return false
        if (this.isBought())
            return false;
        return true;
    };
    CandyMerchantItem.prototype.canBeShown = function () {
        // If it's already bought, we return false
        if (this.isBought())
            return false;
        return true;
    };
    CandyMerchantItem.prototype.isBought = function () {
        return Saving.loadBool(this.savingBool);
    };
    // Public getters
    CandyMerchantItem.prototype.getAsciiName = function () {
        return this.asciiName;
    };
    CandyMerchantItem.prototype.getAsciiPosition = function () {
        return this.asciiPosition;
    };
    CandyMerchantItem.prototype.getButtonName = function () {
        return this.buttonName;
    };
    CandyMerchantItem.prototype.getButtonText = function () {
        return this.buttonText;
    };
    CandyMerchantItem.prototype.getGame = function () {
        return this.game;
    };
    CandyMerchantItem.prototype.getMerchantSpeech = function () {
        return this.merchantSpeech;
    };
    CandyMerchantItem.prototype.getPrice = function () {
        return this.price;
    };
    return CandyMerchantItem;
})();
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_ChocolateBar = (function (_super) {
    __extends(CandyMerchantItem_ChocolateBar, _super);
    function CandyMerchantItem_ChocolateBar() {
        _super.apply(this, arguments);
    }
    // When we buy, we get one chocolate bar
    CandyMerchantItem_ChocolateBar.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().getChocolateBars().add(1);
    };
    return CandyMerchantItem_ChocolateBar;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_LeatherBoots = (function (_super) {
    __extends(CandyMerchantItem_LeatherBoots, _super);
    function CandyMerchantItem_LeatherBoots() {
        _super.apply(this, arguments);
    }
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_LeatherBoots.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_LeatherBoots;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_LeatherGloves = (function (_super) {
    __extends(CandyMerchantItem_LeatherGloves, _super);
    function CandyMerchantItem_LeatherGloves() {
        _super.apply(this, arguments);
    }
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_LeatherGloves.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_LeatherGloves;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_Lollipop = (function (_super) {
    __extends(CandyMerchantItem_Lollipop, _super);
    function CandyMerchantItem_Lollipop() {
        _super.apply(this, arguments);
    }
    // When we buy, we get one lollipop
    CandyMerchantItem_Lollipop.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().getLollipops().add(1);
    };
    return CandyMerchantItem_Lollipop;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_MerchantHat = (function (_super) {
    __extends(CandyMerchantItem_MerchantHat, _super);
    function CandyMerchantItem_MerchantHat() {
        _super.apply(this, arguments);
    }
    // When we buy, we get the merchant hat
    CandyMerchantItem_MerchantHat.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().gainItem("eqItemHatMerchantHat");
    };
    // The item can't be clicked if the inventory isn't shown yet
    CandyMerchantItem_MerchantHat.prototype.canBeClicked = function () {
        if (_super.prototype.canBeClicked.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_MerchantHat;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_TimeRing = (function (_super) {
    __extends(CandyMerchantItem_TimeRing, _super);
    function CandyMerchantItem_TimeRing() {
        _super.apply(this, arguments);
    }
    // When we buy, we get the time ring
    CandyMerchantItem_TimeRing.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().gainItem("gridItemPossessedTimeRing");
    };
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_TimeRing.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_TimeRing;
})(CandyMerchantItem);
///<reference path="Place.ts"/>
Saving.registerBool("castleKilledNougatMonster", false);
var Castle = (function (_super) {
    __extends(Castle, _super);
    // Constructor
    function Castle(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/castle/map"), 0, 5);
        this.update();
    }
    // getRenderArea()
    Castle.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods   
    Castle.prototype.drawBigRoom = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleBigRoomButton", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 9, y, Database.getText("castleBigRoomComment"), Database.getTranslatedText("castleBigRoomComment"), "castleBigRoomComment");
        // Interactions
        this.renderArea.addLinkOver(".castleBigRoomButton, .castleBigRoomComment", ".castleBigRoomComment");
        this.renderArea.addLinkCall(".castleBigRoomButton", new CallbackCollection(this.goToBigRoom.bind(this)));
    };
    Castle.prototype.drawCastleEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiNinjaButtons("castleCastleEntranceButton", x, x + 2, y);
        // Comment
        this.renderArea.addFullComment(x + 1, y + 1, Database.getText("castleCastleEntranceComment"), Database.getTranslatedText("castleCastleEntranceComment"), "castleCastleEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".castleCastleEntranceButton, .castleCastleEntranceComment", ".castleCastleEntranceComment");
    };
    Castle.prototype.drawNougatMonster = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleNougatMonsterButton", x + 1, x + 8, y, x, x + 10, y + 1, x, x + 10, y + 2, x + 1, x + 8, y + 3);
        // Comment
        this.renderArea.addFullComment(x + 5, y - 2, Database.getText("castleNougatMonsterComment"), Database.getTranslatedText("castleNougatMonsterComment"), "castleNougatMonsterComment");
        // Interactions
        this.renderArea.addLinkOver(".castleNougatMonsterButton, .castleNougatMonsterComment", ".castleNougatMonsterComment");
        this.renderArea.addLinkCall(".castleNougatMonsterButton", new CallbackCollection(this.goToNougatMonster.bind(this)));
    };
    Castle.prototype.drawRoom1 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom1Button", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleARoomComment"), Database.getTranslatedText("castleARoomComment"), "castleRoom1Comment");
        // Interactions
        this.renderArea.addLinkOver(".castleRoom1Button, .castleRoom1Comment", ".castleRoom1Comment");
        this.renderArea.addLinkCall(".castleRoom1Button, .castleRoom1Comment", new CallbackCollection(this.goToRoom1.bind(this)));
    };
    Castle.prototype.drawRoom2 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom2Button", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleADarkRoomComment"), Database.getTranslatedText("castleADarkRoomComment"), "castleRoom2Comment");
        // Interactions
        this.renderArea.addLinkOver(".castleRoom2Button, .castleRoom2Comment", ".castleRoom2Comment");
        this.renderArea.addLinkCall(".castleRoom2Button, .castleRoom2Comment", new CallbackCollection(this.goToRoom2.bind(this)));
    };
    Castle.prototype.drawRoom3 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom3Button", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleARoomComment"), Database.getTranslatedText("castleARoomComment"), "castleRoom3Comment");
        // Interactions
        this.renderArea.addLinkOver(".castleRoom3Button, .castleRoom3Comment", ".castleRoom3Comment");
        this.renderArea.addLinkCall(".castleRoom3Button, .castleRoom3Comment", new CallbackCollection(this.goToRoom3.bind(this)));
    };
    Castle.prototype.drawStairs = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleStairsButton", x, x + 4, y, x, x + 4, y + 1, x, x + 4, y + 2, x, x + 4, y + 3, x, x + 4, y + 4);
        // Comment
        this.renderArea.addFullComment(x + 10, y + 2, Database.getText("castleStairsComment"), Database.getTranslatedText("castleStairsComment"), "castleStairsComment");
        // Interactions
        this.renderArea.addLinkOver(".castleStairsButton, .castleStairsComment", ".castleStairsComment");
        this.renderArea.addLinkCall(".castleStairsButton", new CallbackCollection(this.goToStairs.bind(this)));
    };
    Castle.prototype.drawTowerEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleTowerEntranceButton", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x + 12, y, Database.getText("castleTowerEntranceComment"), Database.getTranslatedText("castleTowerEntranceComment"), "castleTowerEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".castleTowerEntranceButton, .castleTowerEntranceComment", ".castleTowerEntranceComment");
        this.renderArea.addLinkCall(".castleTowerEntranceButton", new CallbackCollection(this.goToTowerEntrance.bind(this)));
    };
    Castle.prototype.goToBigRoom = function () {
        this.getGame().setPlace(new CastleBigRoom(this.getGame()));
    };
    Castle.prototype.goToNougatMonster = function () {
        this.getGame().setPlace(new GiantNougatMonsterQuest(this.getGame()));
    };
    Castle.prototype.goToRoom1 = function () {
        this.getGame().setPlace(new CastleRoom1(this.getGame()));
    };
    Castle.prototype.goToRoom2 = function () {
        this.getGame().setPlace(new CastleRoom2(this.getGame()));
    };
    Castle.prototype.goToRoom3 = function () {
        this.getGame().setPlace(new CastleRoom3(this.getGame()));
    };
    Castle.prototype.goToStairs = function () {
        this.getGame().setPlace(new Dragon(this.getGame()));
    };
    Castle.prototype.goToTowerEntrance = function () {
        this.getGame().setPlace(new CastleTower(this.getGame()));
    };
    Castle.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "castleBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/castle/map"), 0, 3);
        // Draw various stuff
        this.drawCastleEntrance(43, 36);
        this.drawBigRoom(57, 19);
        this.drawRoom1(15, 27);
        this.drawRoom2(15, 21);
        this.drawRoom3(15, 15);
        this.drawNougatMonster(68, 15);
        this.drawStairs(32, 3);
        if (Saving.loadBool("castleKilledNougatMonster")) {
            this.drawTowerEntrance(84, 16);
        }
    };
    return Castle;
})(Place);
///<reference path="Place.ts"/>
var CastleRoom = (function (_super) {
    __extends(CastleRoom, _super);
    // Constructor
    function CastleRoom(game) {
        _super.call(this, game);
    }
    // Special method used to add a button to go back to the castle
    CastleRoom.prototype.addBackToTheCastleButton = function (renderArea, otherClass) {
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToCastle.bind(this.getGame())), Database.getText("buttonBackToTheCastle"), Database.getTranslatedText("buttonBackToTheCastle"), otherClass);
    };
    return CastleRoom;
})(Place);
///<reference path="CastleRoom.ts"/>
// Is the hoven happy? He is if he cooked something at least once
Saving.registerBool("castleBigRoomHovenHappy", false);
var CastleBigRoom = (function (_super) {
    __extends(CastleBigRoom, _super);
    // Constructor
    function CastleBigRoom(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // At first the hoven is waiting
        this.hovenWaiting = true;
        // Set the default speech, depending on if the hoven is happy or not
        if (Saving.loadBool("castleBigRoomHovenHappy") == false) {
            this.currentSpeech = "castleBigRoomHovenSpeechSad";
        }
        else {
            this.currentSpeech = "castleBigRoomHovenSpeechHappy";
        }
        // Resize the area and update
        this.renderArea.resize(160, 30);
        this.update();
    }
    // getRenderArea()
    CastleBigRoom.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // update()
    CastleBigRoom.prototype.update = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
        // Add the button to go back to the castle
        this.addBackToTheCastleButton(this.renderArea, "castleBigRoomBackToTheCastleButton");
        // Draw the background
        this.drawBackground(0, 3);
        // Draw the speech
        this.drawSpeech(83, 10);
        // If the hoven is waiting, we add the button to give it the sweets
        if (this.hovenWaiting) {
            this.renderArea.addAsciiRealButton(Database.getText("castleBigRoomHovenLetHovenTakeButton"), 83, 19, "castleBigRoomLetHovenTakeButton", Database.getTranslatedText("castleBigRoomHovenLetHovenTakeButton"), true);
            this.renderArea.addLinkCall(".castleBigRoomLetHovenTakeButton", new CallbackCollection(this.letHovenTake.bind(this)));
        }
        else {
            this.renderArea.addAsciiRealButton(Database.getText("castleBigRoomHovenThanks"), 83, 19, "castleBigRoomThanksButton", Database.getTranslatedText("castleBigRoomHovenThanks"), true);
            this.renderArea.addLinkCall(".castleBigRoomThanksButton", new CallbackCollection(this.thanksHoven.bind(this)));
        }
    };
    // Private methods
    CastleBigRoom.prototype.drawBackground = function (x, y) {
        // Draw the background ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/bigRoom/background"), x, y);
        // If the hoven is happy, change its face
        if (Saving.loadBool("castleBigRoomHovenHappy")) {
            this.renderArea.drawString("^       ^", x + 61, y + 9);
            this.renderArea.drawString("         ", x + 61, y + 10);
            this.renderArea.drawString("  '-.-'  ", x + 61, y + 11);
        }
    };
    CastleBigRoom.prototype.drawSpeech = function (x, y) {
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), y, x, x + 30, "CastleBigRoomHovenSpeech", Database.getTranslatedText(this.currentSpeech));
    };
    CastleBigRoom.prototype.letHovenTake = function () {
        // If we have enough sweets
        if (this.getGame().getCandies().getCurrent() >= 100 && this.getGame().getChocolateBars().getCurrent() >= 1) {
            // We spend the sweets
            this.getGame().getCandies().add(-100);
            this.getGame().getChocolateBars().add(-1);
            // The hoven is now happy
            Saving.saveBool("castleBigRoomHovenHappy", true);
            // The hoven isn't waiting anymore
            this.hovenWaiting = false;
            // We set the new speech
            this.currentSpeech = "castleBigRoomHovenSpeechMadePainAuChocolat";
            // We add the pain au chocolat
            this.getGame().getPainsAuChocolat().add(1);
        }
        else {
            // If the hoven isn't happy
            if (Saving.loadBool("castleBigRoomHovenHappy") == false) {
                this.currentSpeech = "castleBigRoomHovenNotEnough";
            }
            else {
                this.currentSpeech = "castleBigRoomHovenSpeechHappyNotEnough";
            }
        }
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    CastleBigRoom.prototype.thanksHoven = function () {
        // The hoven is now waiting
        this.hovenWaiting = true;
        // Set the new speech
        this.currentSpeech = "castleBigRoomHovenSpeechHappy";
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    return CastleBigRoom;
})(CastleRoom);
///<reference path="Quest.ts"/>
var CastleEntrance = (function (_super) {
    __extends(CastleEntrance, _super);
    // Constructor
    function CastleEntrance(game) {
        _super.call(this, game);
        // Last knight added
        this.lastKnightAdded = null;
        // Resize the quest
        this.resizeQuest(149, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 25));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the first knight
        this.addKnight(Random.between(80, 120));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're trying to cross the castle's entrance."));
    }
    // Public methods
    CastleEntrance.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(60, 20));
    };
    CastleEntrance.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    CastleEntrance.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You crossed the castle's entrance! You can now enter the castle."));
            Saving.saveBool("mainMapDoneCastleEntrance", true); // The castle entrance is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died trying to cross the castle's entrance."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    CastleEntrance.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Handle monsters
            this.handleKnights();
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/front"), this.getRealQuestPosition().x + 104, this.getRealQuestPosition().y);
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    CastleEntrance.prototype.addKnight = function (x) {
        if (x === void 0) { x = 149; }
        var knight = new Knight(this, new Pos(x, 20));
        knight.setHealthBar(new QuestEntityHealthBar(knight, new Pos(15, 1)));
        if (this.addEntity(knight))
            this.lastKnightAdded = knight;
    };
    CastleEntrance.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 26), new Pos(200, 4));
        wall.addBox(new Pos(104, 6), new Pos(15, 15));
        wall.addBox(new Pos(104, 5), new Pos(16, 1));
        wall.addBox(new Pos(104, 4), new Pos(17, 1));
        wall.addBox(new Pos(106, 3), new Pos(16, 1));
        wall.addBox(new Pos(107, 2), new Pos(6, 1));
        wall.addBox(new Pos(116, 2), new Pos(7, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    CastleEntrance.prototype.handleKnights = function () {
        // If there's no last knight added or the last knight added is weak or on the left of the player, we add a new one
        if (this.lastKnightAdded == null ||
            (this.lastKnightAdded != null && this.lastKnightAdded.getHp() / this.lastKnightAdded.getMaxHp() < 0.4) ||
            (this.lastKnightAdded != null && this.lastKnightAdded.getGlobalPosition().x + 1 < this.getGame().getPlayer().getGlobalPosition().x)) {
            this.addKnight();
        }
    };
    CastleEntrance.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 149)
            return true;
        // Else we return false
        return false;
    };
    return CastleEntrance;
})(Quest);
///<reference path="Quest.ts"/>
var CastleRoom1 = (function (_super) {
    __extends(CastleRoom1, _super);
    // Constructor
    function CastleRoom1(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(97, 10));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the spikes
        this.addEntity(new Spikes(this, new Pos(7, 23), 88));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter one of the castle's room. Damn, it seems to be full of spikes!"));
    }
    // Public methods
    CastleRoom1.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(96, 6), new Pos(2, 3));
    };
    CastleRoom1.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    CastleRoom1.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    CastleRoom1.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room1/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToCastle.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    CastleRoom1.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 3));
        wall.addBox(new Pos(0, 3), new Pos(7, 25));
        wall.addBox(new Pos(7, 24), new Pos(93, 4));
        wall.addBox(new Pos(95, 3), new Pos(5, 5));
        wall.addBox(new Pos(95, 11), new Pos(5, 16));
        // Add the wall entity
        this.addEntity(wall);
    };
    return CastleRoom1;
})(Quest);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("castleRoom2LitFire", false);
Saving.registerBool("castleRoom2TookObject", false);
var CastleRoom2 = (function (_super) {
    __extends(CastleRoom2, _super);
    function CastleRoom2(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The smokes
        this.smokes = [];
        // If needed, we add smokes
        if (Saving.loadBool("castleRoom2LitFire") == true) {
            this.addSmokes();
        }
        this.renderArea.resize(100, 30);
        this.update();
    }
    // getRenderArea()
    CastleRoom2.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    CastleRoom2.prototype.willBeDisplayed = function () {
        this.getGame().getOneSecondCallbackCollection().addCallback(this.actionSmokes.bind(this));
    };
    // update()
    CastleRoom2.prototype.update = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
        // Add the button to go back to the castle
        this.addBackToTheCastleButton(this.renderArea, "castleRoom2BackToTheCastleButton");
        // If the fire isn't lit yet
        if (Saving.loadBool("castleRoom2LitFire") == false) {
            // Draw the dark color
            this.drawDark(0, 3, 100, 27);
            // Add the button on the fire
            this.drawFireButton(42, 20);
        }
        else {
            // We draw the fire
            this.drawFire(42, 20);
            // If we didn't take the object yet
            if (Saving.loadBool("castleRoom2TookObject") == false) {
                this.drawObject(21, 12);
            }
        }
    };
    // Private methods
    CastleRoom2.prototype.actionSmokes = function () {
        // If there's at least one smoke
        if (this.smokes.length > 0) {
            // We make the smokes move
            for (var i = 0; i < this.smokes.length; i++) {
                this.smokes[i].move();
            }
            // We update on the page
            this.update();
            this.getGame().updatePlace();
        }
    };
    CastleRoom2.prototype.addSmokes = function () {
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(3, 7), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
    };
    CastleRoom2.prototype.drawDark = function (x, y, width, height) {
        for (var i = y; i < y + height; i++) {
            this.renderArea.addBackgroundColor(x, x + width, i, new Color(ColorType.CASTLE_DARK_ROOM, true));
        }
    };
    CastleRoom2.prototype.drawFire = function (x, y) {
        // Draw the fire ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/room2/fire"), x, y);
        // Draw the smokes
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].draw(this.renderArea);
        }
    };
    CastleRoom2.prototype.drawFireButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("castleRoom2LightFireButton", x, x + 16, y, x, x + 16, y + 1, x, x + 16, y + 2, x, x + 16, y + 3, x, x + 16, y + 4, x, x + 16, y + 5);
        // Add the link
        this.renderArea.addLinkCall(".castleRoom2LightFireButton", new CallbackCollection(this.lightFire.bind(this)));
    };
    CastleRoom2.prototype.drawObject = function (x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/room2/pitchfork"), x, y);
        // Add the button
        this.renderArea.addMultipleAsciiButtons("castleRoom2TakeObjectButton", x + 6, x + 12, y, x + 5, x + 11, y + 1, x + 4, x + 10, y + 2, x + 3, x + 9, y + 3, x + 2, x + 8, y + 4, x + 1, x + 7, y + 5, x + 1, x + 5, y + 6, x, x + 4, y + 7);
        // Add the link
        this.renderArea.addLinkCall(".castleRoom2TakeObjectButton", new CallbackCollection(this.takeObject.bind(this)));
    };
    CastleRoom2.prototype.lightFire = function () {
        // Change the bool
        Saving.saveBool("castleRoom2LitFire", true);
        // Add the smokes
        this.addSmokes();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    CastleRoom2.prototype.takeObject = function () {
        // Set the bool
        Saving.saveBool("castleRoom2TookObject", true);
        // Take it
        this.getGame().gainItem("gridItemPossessedPitchfork");
        // Re-calc the farm production
        this.getGame().calcLollipopFarmProduction();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    return CastleRoom2;
})(CastleRoom);
///<reference path="Quest.ts"/>
var CastleRoom3 = (function (_super) {
    __extends(CastleRoom3, _super);
    // Constructor
    function CastleRoom3(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(97, 23));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the eggs
        this.addEggs();
        // Add the monster
        this.addMonster();
        // Add the chest
        this.addChest();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter one of the castle's room."));
    }
    // Public methods
    CastleRoom3.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(96, 19), new Pos(2, 3));
    };
    CastleRoom3.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    CastleRoom3.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    CastleRoom3.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToCastle.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    CastleRoom3.prototype.addChest = function () {
        this.addEntity(new Chest(this, new Pos(7, 23), true, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("gridItemPossessedL")));
    };
    CastleRoom3.prototype.addEggs = function () {
        this.addEntity(new Egg(this, new Pos(16, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(18, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(23, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(25, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(28, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(30, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(38, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(41, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(48, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(52, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(54, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(57, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(63, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(68, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(72, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(78, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
    };
    CastleRoom3.prototype.addMonster = function () {
        this.monster = new Monster(this, new Pos(67, 3));
        this.addEntity(this.monster);
    };
    CastleRoom3.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 3));
        wall.addBox(new Pos(0, 3), new Pos(7, 25));
        wall.addBox(new Pos(7, 24), new Pos(93, 4));
        wall.addBox(new Pos(95, 3), new Pos(5, 18));
        // Add the wall entity
        this.addEntity(wall);
    };
    CastleRoom3.prototype.anEggDiedCallback = function () {
        // We warn the monster that an egg was destroyed
        this.monster.eggDestroyed();
    };
    CastleRoom3.prototype.openChest = function () {
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedL", "You opened a chest and found a strange stone.", "You gain a strange stone."));
    };
    return CastleRoom3;
})(Quest);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("castleTowerFirstVisitDone", false); // True if we already visited the tower at least once
// The following bools are true if we placed the corresponding stones in the tower
Saving.registerBool("castleTowerPStoneDone", false);
Saving.registerBool("castleTowerLStoneDone", false);
Saving.registerBool("castleTowerAStoneDone", false);
Saving.registerBool("castleTowerYStoneDone", false);
// Another one
Saving.registerBool("castleTowerTookTalkingCandy", false);
var CastleTower = (function (_super) {
    __extends(CastleTower, _super);
    // Constructor
    function CastleTower(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Byt default, the interval ID is set to null
        this.intervalID = null;
        // Set the cut scene max timer
        this.cutSceneMaxTimer = 72;
        // If it's the first time we visit the tower, we change the bool, set the timer and start the interval
        if (Saving.loadBool("castleTowerFirstVisitDone") == false) {
            Saving.saveBool("castleTowerFirstVisitDone", true);
            this.cutSceneTimer = 0;
            this.intervalID = setInterval(this.actionInterval.bind(this), 100);
        }
        else {
            this.cutSceneTimer = this.cutSceneMaxTimer;
        }
        this.renderArea.resize(100, 38);
        this.update();
    }
    // getRenderArea()
    CastleTower.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    CastleTower.prototype.willStopBeingDisplayed = function () {
        // Clear the interval if the interval ID isn't null
        if (this.intervalID != null)
            clearInterval(this.intervalID);
    };
    // Private methods
    CastleTower.prototype.actionInterval = function () {
        // If the timer hasn't reached the max timer yet, we increase it and update
        if (this.cutSceneTimer < this.cutSceneMaxTimer) {
            this.cutSceneTimer += 1;
            this.update();
            this.getGame().updatePlace();
        }
    };
    CastleTower.prototype.clickedOnStone = function (ourSavingName) {
        // This stone is now in the tower
        Saving.saveBool(ourSavingName, true);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    CastleTower.prototype.drawBackground = function () {
        // Calculate the gap
        var gap = (this.cutSceneMaxTimer - this.cutSceneTimer);
        if (gap > 60)
            gap = 60;
        // Draw the background ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/tower/castleTower"), 5, 3 - gap);
    };
    CastleTower.prototype.drawTalkingCandy = function () {
        // If all the stones are in the tower AND we didn't already take the talking candy, we draw the key
        if (Saving.loadBool("castleTowerPStoneDone") && Saving.loadBool("castleTowerLStoneDone") && Saving.loadBool("castleTowerAStoneDone") && Saving.loadBool("castleTowerYStoneDone") && Saving.loadBool("castleTowerTookTalkingCandy") == false) {
            // Draw the ascii art
            this.renderArea.drawArray(Database.getAscii("places/castle/tower/talkingCandy"), 47, 22);
            // Draw the button
            this.renderArea.addMultipleAsciiButtons("castleTowerTalkingCandyButton", 47, 50, 22, 47, 50, 23);
            this.renderArea.addLinkCall(".castleTowerTalkingCandyButton", new CallbackCollection(this.takeTalkingCandy.bind(this)));
        }
    };
    CastleTower.prototype.drawStone = function (savingName, ourSavingName, asciiArtName, pos) {
        // If we have the stone but it isn't in the tower yet
        if (Saving.loadBool(savingName) == true && Saving.loadBool(ourSavingName) == false) {
            // We add the button to click on the stone
            this.renderArea.addMultipleAsciiButtons("castleTower" + savingName + "Button", pos.x + 3, pos.x + 8, pos.y, pos.x + 2, pos.x + 9, pos.y + 1, pos.x + 1, pos.x + 10, pos.y + 2, pos.x + 2, pos.x + 9, pos.y + 3, pos.x + 3, pos.x + 8, pos.y + 4);
            // Add the link
            this.renderArea.addLinkCall(".castleTower" + savingName + "Button", new CallbackCollection(this.clickedOnStone.bind(this, ourSavingName)));
        }
        else if (Saving.loadBool(savingName) == true && Saving.loadBool(ourSavingName) == true) {
            // We draw the stone ascii art on the specified position
            this.renderArea.drawArray(Database.getAscii(asciiArtName), pos.x, pos.y - 1);
        }
    };
    CastleTower.prototype.drawStones = function () {
        // Calculate the gap
        var gap = (this.cutSceneMaxTimer - this.cutSceneTimer);
        if (gap > 60)
            gap = 60;
        // Draw the stones
        this.drawStone("gridItemPossessedP", "castleTowerPStoneDone", "gridItems/p", new Pos(25, 26 - gap));
        this.drawStone("gridItemPossessedL", "castleTowerLStoneDone", "gridItems/l", new Pos(38, 26 - gap));
        this.drawStone("gridItemPossessedA", "castleTowerAStoneDone", "gridItems/a", new Pos(51, 26 - gap));
        this.drawStone("gridItemPossessedY", "castleTowerYStoneDone", "gridItems/y", new Pos(64, 26 - gap));
    };
    CastleTower.prototype.takeTalkingCandy = function () {
        // We take the candy
        Saving.saveBool("castleTowerTookTalkingCandy", true);
        // We gain the corresponding item
        this.getGame().gainItem("gridItemPossessedTalkingCandy");
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    CastleTower.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheCastleButton(this.renderArea, "castleTowerBackToTheCastleButton");
        // Draw the background
        this.drawBackground();
        // Draw the stones related stuff
        this.drawStones();
        // Draw the talking candy related stuff
        this.drawTalkingCandy();
    };
    return CastleTower;
})(CastleRoom);
///<reference path="Place.ts"/>
Saving.registerNumber("cauldronBookCurrentPage", 0);
var Cauldron = (function (_super) {
    __extends(Cauldron, _super);
    // Constructor
    function Cauldron(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Maximum page
        this.maxPage = 10;
        // The candies & lollipops in the input field
        this.candiesInput = "";
        this.lollipopsInput = "";
        // The comments next to candies and lollipops input fields (they're needed if the player types something which isn't a number, or which is a negative number)
        this.candiesInputComment = null;
        this.lollipopsInputComment = null;
        // What are we doing?
        this.currentAction = CauldronAction.NOTHING;
        // Current timer time
        this.timerTime = 0;
        // Action log
        this.actionLog = [null, null, null, null, null]; // We always remember the last five actions
        // The comment telling the player the potions he managed to brew
        this.potionsComment = null;
        // Array containing the flames we can see when heating up the cauldron
        this.flames = [];
        // Launch the interval and get the ID
        this.timerIntervalID = setInterval(this.actionInterval.bind(this), 1000);
        // Resize and update
        this.renderArea.resize(100, 57);
        this.update(true);
    }
    // getRenderArea()
    Cauldron.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willBeDisplayed()
    Cauldron.prototype.willBeDisplayed = function () {
        // We add hotkeys
        this.getGame().addHotkey(new Hotkey("a", new CallbackCollection(this.putInCauldron.bind(this))));
        this.getGame().addHotkey(new Hotkey("m", new CallbackCollection(this.changeAction.bind(this, CauldronAction.MIXING))));
        this.getGame().addHotkey(new Hotkey("b", new CallbackCollection(this.changeAction.bind(this, CauldronAction.BOILING))));
        this.getGame().addHotkey(new Hotkey("s", new CallbackCollection(this.changeAction.bind(this, CauldronAction.NOTHING))));
        this.getGame().addHotkey(new Hotkey("p", new CallbackCollection(this.putIntoBottles.bind(this))));
        this.getGame().addHotkey(new Hotkey("left", new CallbackCollection(this.previousPage.bind(this))));
        this.getGame().addHotkey(new Hotkey("right", new CallbackCollection(this.nextPage.bind(this))));
    };
    // willStopBeingDisplayed()
    Cauldron.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.timerIntervalID);
    };
    // Private methods
    Cauldron.prototype.actionInterval = function () {
        // Increase the time
        this.timerTime += 1;
        // If we're boiling, update the flames array
        if (this.currentAction == CauldronAction.BOILING) {
            this.updateFlamesArray();
        }
        // If we're not doing nothing, update
        if (this.currentAction != CauldronAction.NOTHING) {
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.changeAction = function (newAction) {
        // If we're not already doing that
        if (this.currentAction != newAction) {
            // If the action which just stopped wasn't nothing
            if (this.currentAction != CauldronAction.NOTHING) {
                // Shift actions in the log
                for (var i = this.actionLog.length - 1; i > 0; i--) {
                    this.actionLog[i] = this.actionLog[i - 1];
                }
                // Set actionLog[0] to the action which just stopped
                this.actionLog[0] = new CauldronActionLogEntry(this.currentAction, this.timerTime, this.getGame().getCandiesInCauldron().getCurrent(), this.getGame().getLollipopsInCauldron().getCurrent());
            }
            // Now we're doing that
            this.currentAction = newAction;
            // Reset the timer and restart the interval
            this.timerTime = 0;
            clearInterval(this.timerIntervalID);
            this.timerIntervalID = setInterval(this.actionInterval.bind(this), 1000);
            // We reset the flames array
            this.resetFlamesArray();
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.changeCandiesInput = function () {
        if ($(".cauldronCandiesInput").length)
            this.candiesInput = $(".cauldronCandiesInput").val();
    };
    Cauldron.prototype.changeLollipopsInput = function () {
        if ($(".cauldronLollipopsInput").length)
            this.lollipopsInput = $(".cauldronLollipopsInput").val();
    };
    Cauldron.prototype.drawActions = function (x, y, firstTimeWeUpdate, keepInputContent) {
        // Variables
        var candiesInputHasFocus = false;
        var lollipopsInputHasFocus = false;
        // If it's not the first time we update, we need to keep some stuff from the page (content of the inputs + focus on the inputs)
        if (firstTimeWeUpdate == false) {
            // If if the candies / lollipops input has the focus (in order to restore the focus after the page updating)
            candiesInputHasFocus = $(".cauldronCandiesInput").is(":focus");
            lollipopsInputHasFocus = $(".cauldronLollipopsInput").is(":focus");
            // Reset the content of candiesInput and lollipopsInput
            this.candiesInput = "";
            this.lollipopsInput = "";
        }
        // What you want to put in the cauldron
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatYouWantToPut"), x, y); // Normal
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatYouWantToPut").length, y); // Add bold on normal
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatYouWantToPut"), x, y + 1, true); // Translated
        // Candies input
        this.renderArea.addSimpleInput(x, x + 20, y + 2, new CallbackCollection(this.changeCandiesInput.bind(this)), "cauldronCandiesInput", (keepInputContent ? this.candiesInput : ""), candiesInputHasFocus);
        this.renderArea.drawString("candies", x + 21, y + 2);
        if (this.candiesInputComment != null) {
            this.renderArea.drawString(this.candiesInputComment, x + 29, y + 2);
            this.renderArea.addBold(x + 29, x + 29 + this.candiesInputComment.length, y + 2);
        }
        // Lollipops input
        this.renderArea.addSimpleInput(x, x + 20, y + 4, new CallbackCollection(this.changeLollipopsInput.bind(this)), "cauldronLollipopsInput", (keepInputContent ? this.lollipopsInput : ""), lollipopsInputHasFocus);
        this.renderArea.drawString("lollipops", x + 21, y + 4);
        if (this.lollipopsInputComment != null) {
            this.renderArea.drawString(this.lollipopsInputComment, x + 31, y + 4);
            this.renderArea.addBold(x + 31, x + 31 + this.lollipopsInputComment.length, y + 4);
        }
        // Put all that in the cauldron
        this.renderArea.addAsciiRealButton("Put all that in the cauldron", x, y + 6, "cauldronPutAllThatInTheCauldronButton", "", false, 4);
        this.renderArea.addLinkCall(".cauldronPutAllThatInTheCauldronButton", new CallbackCollection(this.putInCauldron.bind(this)));
        // What is in the cauldron
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatIsIn"), x, y + 9); // Normal
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatIsIn").length, y + 9); // Add bold on normal
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatIsIn"), x, y + 10, true); // Translated
        // Candies
        this.renderArea.drawString("Candies :", x + 2, y + 11);
        this.renderArea.drawString(Algo.numberToStringButNicely(this.getGame().getCandiesInCauldron().getCurrent()), x + 14, y + 11);
        // Lollipops
        this.renderArea.drawString("Lollipops :", x + 2, y + 12);
        this.renderArea.drawString(Algo.numberToStringButNicely(this.getGame().getLollipopsInCauldron().getCurrent()), x + 14, y + 12);
        // What you can do with it
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatYouCanDo"), x, y + 14); // Normal
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatYouCanDo").length, y + 14); // Add bold on normal
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatYouCanDo"), x, y + 15, true); // Translated
        // Mix button
        this.renderArea.addAsciiRealButton("Mix", x, y + 16, "cauldronMixButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronMixButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.MIXING)));
        // Boil button
        this.renderArea.addAsciiRealButton("Boil", x + 5, y + 16, "cauldronBoilButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronBoilButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.BOILING)));
        // Stop button
        this.renderArea.addAsciiRealButton("Stop", x + 11, y + 16, "cauldronStopButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronStopButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.NOTHING)));
        // Show what we're doing
        switch (this.currentAction) {
            case CauldronAction.MIXING:
                this.renderArea.drawString("Mixing" + this.getSpecialMixingText(), x, y + 18);
                break;
            case CauldronAction.BOILING:
                this.renderArea.drawString("Boiling" + this.getSpecialBoilingText(), x, y + 18);
                break;
        }
        // Put into bottles if we're not questing
        if (this.getGame().getWeAreQuesting() == false) {
            this.renderArea.addAsciiRealButton("Put into bottles", x, y + 20, "cauldronPutIntoBottlesButton", "", false, 0);
            this.renderArea.addLinkCall(".cauldronPutIntoBottlesButton", new CallbackCollection(this.putIntoBottles.bind(this)));
        }
        else {
            this.renderArea.drawString("You can't put into bottles while you're in a quest", x, y + 20);
        }
        // The comment
        if (this.potionsComment != null)
            this.renderArea.drawString(this.potionsComment, x, y + 22);
    };
    Cauldron.prototype.drawBook = function (x, y) {
        // Draw the book
        this.renderArea.drawArray(Database.getAscii("places/cauldron/book"), x, y);
        // Draw the pages' content
        this.renderArea.drawArray(Database.getAscii("places/cauldron/bookPage" + Saving.loadNumber("cauldronBookCurrentPage")), x + 8, y + 1);
        this.renderArea.drawArray(Database.getAscii("places/cauldron/bookPage" + (Saving.loadNumber("cauldronBookCurrentPage") + 1)), x + 50, y + 1);
        // Add the previous page button if we're not already at the first page
        if (Saving.loadNumber("cauldronBookCurrentPage") > 0) {
            this.renderArea.addAsciiRealButton(Database.getText("cauldronPreviousPageButton"), x, y + 31, "cauldronPreviousPageButton", Database.getTranslatedText("cauldronPreviousPageButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".cauldronPreviousPageButton", new CallbackCollection(this.previousPage.bind(this)));
        }
        // Add the next page button if we're not already at the last page
        if (Saving.loadNumber("cauldronBookCurrentPage") < this.maxPage) {
            this.renderArea.addAsciiRealButton(Database.getText("cauldronNextPageButton"), x + 87, y + 31, "cauldronNextPageButton", Database.getTranslatedText("cauldronNextPageButton"), true, -1, null, false, true);
            this.renderArea.addLinkCall(".cauldronNextPageButton", new CallbackCollection(this.nextPage.bind(this)));
        }
        // Add the translation if there is one
        if (Database.isTranslated()) {
            // Buttons on the left page
            for (var i = 1; i < 28; i++) {
                this.renderArea.addAsciiNinjaButton(x + 7, x + 48, i, "cauldronLeftPageTranslationButton");
            }
            // Buttons on the right page
            for (var i = 1; i < 28; i++) {
                this.renderArea.addAsciiNinjaButton(x + 49, x + 90, i, "cauldronRightPageTranslationButton");
            }
            // Tooltips
            this.renderArea.addTooltip("cauldronLeftPageTranslationButtonTooltip", Database.getTranslatedText("cauldron.page" + Saving.loadNumber("cauldronBookCurrentPage")));
            this.renderArea.addTooltip("cauldronRightPageTranslationButtonTooltip", Database.getTranslatedText("cauldron.page" + (Saving.loadNumber("cauldronBookCurrentPage") + 1)));
            // Links
            this.renderArea.addLinkOnHoverShowTooltip(".cauldronLeftPageTranslationButton", ".cauldronLeftPageTranslationButtonTooltip");
            this.renderArea.addLinkOnHoverShowTooltip(".cauldronRightPageTranslationButton", ".cauldronRightPageTranslationButtonTooltip");
        }
    };
    Cauldron.prototype.drawCauldron = function (x, y) {
        // Draw the cauldron
        this.renderArea.drawArray(Database.getAscii("places/cauldron/cauldron"), x, y);
        // Draw the flames
        for (var i = 0; i < this.flames.length; i++) {
            this.flames[i].draw(this.renderArea, x, y);
        }
    };
    Cauldron.prototype.getSpecialBoilingText = function () {
        if (this.timerTime < 3)
            return "... cold.";
        else if (this.timerTime < 6)
            return "... lukewarm.";
        else if (this.timerTime == 6)
            return "... hot.";
        else if (this.timerTime == 7)
            return "... hot..";
        else if (this.timerTime == 8)
            return "... hot...";
        else if (this.timerTime == 9)
            return "... very hot.";
        else if (this.timerTime == 10)
            return "... very hot..";
        else if (this.timerTime == 11)
            return "... very hot...";
        else if (this.timerTime < 14)
            return "... bubbles begin to appear.";
        else if (this.timerTime == 14)
            return "... bubbles begin to appear..";
        else if (this.timerTime == 15)
            return "... bubbles begin to appear...";
        else if (this.timerTime == 16)
            return "... bubbles begin to appear... and..";
        else if (this.timerTime == 17)
            return "... bubbles begin to appear... and...";
        else if (this.timerTime < 50)
            return "... BOILING!";
        else
            return "... the water is burnt. How is that possible?!";
    };
    Cauldron.prototype.getSpecialMixingText = function () {
        if (this.timerTime < 60)
            return "... (" + this.timerTime + ")";
        else
            return "... your arms are hurting :(";
    };
    Cauldron.prototype.makePotions = function (boolSavingName, numberSavingName, howMany, singularPotionName, pluralPotionName) {
        // We can now use this kind of potion
        Saving.saveBool(boolSavingName, true);
        // We increase the quantity
        Saving.saveNumber(numberSavingName, Saving.loadNumber(numberSavingName) + howMany);
        // We set the comment
        this.potionsComment = "You made " + Algo.pluralFormat(howMany, " " + singularPotionName, " " + pluralPotionName) + ".";
    };
    Cauldron.prototype.nextPage = function () {
        // If we can go to the next page
        if (Saving.loadNumber("cauldronBookCurrentPage") < this.maxPage) {
            // Change the current page number
            Saving.saveNumber("cauldronBookCurrentPage", Saving.loadNumber("cauldronBookCurrentPage") + 2);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.previousPage = function () {
        // If we can go to the previous page
        if (Saving.loadNumber("cauldronBookCurrentPage") > 0) {
            // Change the current page number
            Saving.saveNumber("cauldronBookCurrentPage", Saving.loadNumber("cauldronBookCurrentPage") - 2);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.putInCauldron = function () {
        // Used to know if we will have to update and return
        var updateAndReturn = false;
        // Parse the inputs and put them in two variables
        var candies = (this.candiesInput == "" ? 0 : parseInt(this.candiesInput));
        var lollipops = (this.lollipopsInput == "" ? 0 : parseInt(this.lollipopsInput));
        // Reset the comments
        this.candiesInputComment = null;
        this.lollipopsInputComment = null;
        // If the candies are incorrect, set the comment and return
        if (isNaN(candies)) {
            this.candiesInputComment = "(this isn't a number!)";
            updateAndReturn = true;
        }
        else if (candies < 0) {
            this.candiesInputComment = "(must be positive)";
            updateAndReturn = true;
        }
        else if (candies > this.getGame().getCandies().getCurrent()) {
            this.candiesInputComment = "(not enough candies)";
            updateAndReturn = true;
        }
        // If the lollipops are incorrect, set the comment and return
        if (isNaN(lollipops)) {
            this.lollipopsInputComment = "(this isn't a number!)";
            updateAndReturn = true;
        }
        else if (lollipops < 0) {
            this.lollipopsInputComment = "(must be positive)";
            updateAndReturn = true;
        }
        else if (lollipops > this.getGame().getLollipops().getCurrent()) {
            this.lollipopsInputComment = "(not enough lollipops)";
            updateAndReturn = true;
        }
        // If we have to update and return, well, we do that
        if (updateAndReturn) {
            this.update();
            this.getGame().updatePlace();
            return;
        }
        else {
            // Take the candies & lollipops
            this.getGame().getCandies().add(-candies);
            this.getGame().getLollipops().add(-lollipops);
            // Put all the stuff
            this.getGame().getCandiesInCauldron().add(candies);
            this.getGame().getLollipopsInCauldron().add(lollipops);
            // Update
            this.update(false, false);
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.putIntoBottles = function () {
        // Reset the potions comment
        this.potionsComment = null;
        // Stop any action
        this.changeAction(CauldronAction.NOTHING);
        // Take the candies & lollipops in the cauldron
        this.getGame().getCandiesInCauldron().add(-this.getGame().getCandiesInCauldron().getCurrent());
        this.getGame().getLollipopsInCauldron().add(-this.getGame().getLollipopsInCauldron().getCurrent());
        // Health potion check
        if (this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getLollipops() == 0 &&
            this.actionLog[0].getCandies() > 0 &&
            this.actionLog[0].getCandies() % 100 == 0 &&
            this.actionLog[0].getTime() < 30) {
            this.makePotions("questPlayerSpellHealthPotionHasSpell", "questPlayerSpellHealthPotionQuantity", this.actionLog[0].getCandies() / 100, "health potion", "health potions");
        }
        else if (this.actionLog[1] != null &&
            this.actionLog[1].getAction() == CauldronAction.MIXING &&
            this.actionLog[1].getCandies() > 0 &&
            this.actionLog[1].getLollipops() > 0 &&
            this.actionLog[1].getCandies() % 50 == 0 &&
            this.actionLog[1].getLollipops() % 500 == 0 &&
            this.actionLog[1].getLollipops() == 10 * this.actionLog[1].getCandies() &&
            this.actionLog[1].getTime() > 6 &&
            this.actionLog[1].getTime() < 14 &&
            this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getCandies() == 2 * this.actionLog[1].getCandies() &&
            this.actionLog[0].getLollipops() == this.actionLog[1].getLollipops()) {
            this.makePotions("questPlayerSpellTurtlePotionHasSpell", "questPlayerSpellTurtlePotionQuantity", this.actionLog[0].getLollipops() / 500, "turtle potion", "turtle potions");
        }
        else if (this.actionLog[1] != null &&
            this.actionLog[1].getAction() == CauldronAction.BOILING &&
            this.actionLog[1].getLollipops() == 0 &&
            this.actionLog[1].getCandies() > 0 &&
            this.actionLog[1].getCandies() % 1000 == 0 &&
            this.actionLog[1].getTime() >= 3 && this.actionLog[1].getTime() < 6 &&
            this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.BOILING &&
            this.actionLog[0].getLollipops() == 0 &&
            this.actionLog[0].getCandies() == 2 * this.actionLog[1].getCandies() &&
            this.actionLog[0].getTime() > 17) {
            this.makePotions("questPlayerSpellAntiGravityPotionHasSpell", "questPlayerSpellAntiGravityPotionQuantity", this.actionLog[1].getCandies() / 200, "anti-gravity potion", "anti-gravity potions");
        }
        else if (this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getLollipops() > 0 &&
            this.actionLog[0].getLollipops() % 20000 == 0 &&
            this.actionLog[0].getTime() >= 60) {
            // If we didn't use any candy, then we made berserk potions
            if (this.actionLog[0].getCandies() == 0) {
                this.makePotions("questPlayerSpellBerserkPotionHasSpell", "questPlayerSpellBerserkPotionQuantity", this.actionLog[0].getLollipops() / 20000, "berserk potion", "berserk potions");
            }
            else {
                this.makePotions("questPlayerSpellCloningPotionHasSpell", "questPlayerSpellCloningPotionQuantity", this.actionLog[0].getLollipops() / 20000, "cloning potion", "cloning potions");
            }
        }
        else if (this.actionLog[2] != null &&
            this.actionLog[2].getAction() == CauldronAction.MIXING &&
            this.actionLog[2].getLollipops() == 0 &&
            this.actionLog[2].getCandies() > 0 &&
            this.actionLog[2].getCandies() % 500 == 0 &&
            this.actionLog[2].getTime() < 30 &&
            this.actionLog[1] != null &&
            this.actionLog[1].getLollipops() == 0 &&
            this.actionLog[1].getCandies() == this.actionLog[2].getCandies() + 100 * this.actionLog[2].getTime() &&
            this.actionLog[1].getAction() == CauldronAction.BOILING &&
            this.actionLog[1].getTime() >= 3 && this.actionLog[1].getTime() < 6 &&
            this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getCandies() == this.actionLog[1].getCandies() &&
            this.actionLog[0].getLollipops() > 0) {
            this.makePotions("questPlayerSpellPPotionHasSpell", "questPlayerSpellPPotionQuantity", Math.ceil(this.actionLog[1].getCandies() / 500 + this.actionLog[0].getLollipops() / 1000), "P potion", "P potions");
        }
        else if (this.actionLog[4] != null && this.actionLog[3] != null && this.actionLog[2] != null && this.actionLog[1] != null && this.actionLog[0] != null &&
            this.actionLog[4].getAction() == CauldronAction.BOILING &&
            this.actionLog[3].getAction() == CauldronAction.BOILING &&
            this.actionLog[2].getAction() == CauldronAction.BOILING &&
            this.actionLog[1].getAction() == CauldronAction.BOILING &&
            this.actionLog[0].getAction() == CauldronAction.BOILING &&
            this.actionLog[4].getTime() < 3 &&
            this.actionLog[3].getTime() < 3 &&
            this.actionLog[2].getTime() < 3 &&
            this.actionLog[1].getTime() < 3 &&
            this.actionLog[0].getTime() >= 6 &&
            this.actionLog[4].getLollipops() == 0 && this.actionLog[4].getCandies() == 1 &&
            this.actionLog[3].getLollipops() == 0 && this.actionLog[3].getCandies() == 2 &&
            this.actionLog[2].getLollipops() == 0 && this.actionLog[2].getCandies() == 3 &&
            this.actionLog[1].getLollipops() == 0 && this.actionLog[1].getCandies() == 4 &&
            this.actionLog[0].getLollipops() == 1 && this.actionLog[0].getCandies() == 4) {
            this.makePotions("questPlayerSpellXPotionHasSpell", "questPlayerSpellXPotionQuantity", 1, "X potion", "X potions");
        }
        // If the potions comment is null, it means we didn't manage to make anything
        if (this.potionsComment == null)
            this.potionsComment = "You didn't manage to make anything.";
        // Reset the action log
        for (var i = 0; i < this.actionLog.length; i++) {
            this.actionLog[i] = null;
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Cauldron.prototype.resetFlamesArray = function () {
        this.flames = [];
    };
    Cauldron.prototype.update = function (firstTimeWeUpdate, keepInputContent) {
        if (firstTimeWeUpdate === void 0) { firstTimeWeUpdate = false; }
        if (keepInputContent === void 0) { keepInputContent = true; }
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw everything
        this.drawBook(2, 0);
        this.drawCauldron(2, 39);
        this.drawActions(47, 34, firstTimeWeUpdate, keepInputContent);
    };
    Cauldron.prototype.updateFlamesArray = function () {
        // Create the variables
        var minX = 0;
        var maxX = 41;
        var minY;
        var maxY = 14;
        var howManyFlames;
        var x;
        var y;
        // Calculate minY
        minY = 14 - this.timerTime;
        if (minY < 5)
            minY = 5;
        // Caulcate howManyFlames
        howManyFlames = this.timerTime * 25;
        if (howManyFlames > 200)
            howManyFlames = 200;
        // Reset the array
        this.resetFlamesArray();
        // If we're boiling
        if (this.currentAction = CauldronAction.BOILING) {
            // Add flames depending on the current timer time
            for (var i = 0; i < howManyFlames; i++) {
                // Set y
                y = null;
                for (var j = maxY; j > minY; j--) {
                    if (Random.oneChanceOutOf(3)) {
                        y = j;
                        break;
                    }
                }
                if (y == null)
                    y = maxY;
                // Set x
                x = Random.between(minX + (14 - y), maxX - (14 - y));
                // Add the flame
                this.flames.push(new CauldronFlame(new Pos(x, y), Random.fromArray([")", "(", "`", "'", "."])));
            }
        }
    };
    return Cauldron;
})(Place);
var CauldronAction;
(function (CauldronAction) {
    CauldronAction[CauldronAction["NOTHING"] = 0] = "NOTHING";
    CauldronAction[CauldronAction["MIXING"] = 1] = "MIXING";
    CauldronAction[CauldronAction["BOILING"] = 2] = "BOILING";
})(CauldronAction || (CauldronAction = {}));
var CauldronActionLogEntry = (function () {
    // Constructor
    function CauldronActionLogEntry(action, time, candies, lollipops) {
        this.action = action;
        this.time = time;
        this.candies = candies;
        this.lollipops = lollipops;
    }
    // Public getters
    CauldronActionLogEntry.prototype.getAction = function () {
        return this.action;
    };
    CauldronActionLogEntry.prototype.getCandies = function () {
        return this.candies;
    };
    CauldronActionLogEntry.prototype.getLollipops = function () {
        return this.lollipops;
    };
    CauldronActionLogEntry.prototype.getTime = function () {
        return this.time;
    };
    return CauldronActionLogEntry;
})();
var CauldronFlame = (function () {
    // Constructor
    function CauldronFlame(pos, character) {
        this.pos = pos;
        this.character = character;
    }
    // Public methods
    CauldronFlame.prototype.draw = function (renderArea, x, y) {
        renderArea.drawString(this.character, x + this.pos.x, y + this.pos.y);
    };
    return CauldronFlame;
})();
///<reference path="Quest.ts"/>
Saving.registerBool("cellarDone", false);
var Cellar = (function (_super) {
    __extends(Cellar, _super);
    // Constructor
    function Cellar(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 3);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 2));
        this.getGame().getPlayer().setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        this.getGame().getPlayer().getQuestEntityMovement().setGravity(true);
        this.getGame().getPlayer().getQuestEntityMovement().setWormsLike(false);
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround();
        // Add the rats
        this.addRats();
        // Add a delimiter and the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the cellar. It's dark and you hear rats squeaking all around you."));
    }
    // Public methods
    Cellar.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to kill all the rats!"));
            Saving.saveBool("cellarDone", true);
            // We gain the main map
            this.getGame().gainItem("gridItemPossessedMainMap");
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the cellar. Rats are probably going to eat your body."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Cellar.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded())
            this.addExitQuestButton(new CallbackCollection(this.goToFifthHouse.bind(this)), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Cellar.prototype.addGround = function () {
        var wall = new Wall(this, new Pos(0, this.getRealQuestSize().y));
        wall.addBox(new Pos(0, 0), new Pos(this.getRealQuestSize().x, 1));
        this.addEntity(wall);
    };
    Cellar.prototype.addRat = function (pos) {
        var rat = new Rat(this, pos);
        rat.setHealthBar(new QuestEntityHealthBar(rat, new Pos(3, 1)));
        this.addEntity(rat);
    };
    Cellar.prototype.addRats = function () {
        for (var i = 5; i <= 95; i++) {
            // One chance out of 3
            if (Random.oneChanceOutOf(3)) {
                // We add a rat
                this.addRat(new Pos(i, 2));
                // We increase i to avoid adding a rat above the last one
                i += 2;
            }
        }
    };
    Cellar.prototype.goToFifthHouse = function () {
        this.getGame().setPlace(new FifthHouse(this.getGame()));
    };
    Cellar.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 100)
            return true;
        // Else we return false
        return false;
    };
    return Cellar;
})(Quest);
///<reference path="Place.ts"/>
var Cfg = (function (_super) {
    __extends(Cfg, _super);
    // Constructor
    function Cfg(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The map used for the language selection : match the select's options id with the actual usually two letters code used by the Saving module
        this.languageSelectionMap = {
            "cfgLanguageEn": "en",
            "cfgLanguageBr": "br",
            "cfgLanguageCz": "cz",
            "cfgLanguageEs": "es",
            "cfgLanguageFr": "fr",
            "cfgLanguageNl": "nl",
            "cfgLanguageZh": "zh",
            "cfgLanguageDe": "de",
            "cfgLanguageSe": "se",
            "cfgLanguageHu": "hu",
            "cfgLanguageId": "id",
            "cfgLanguageKr": "kr",
            "cfgLanguagePl": "pl",
            "cfgLanguageUk": "uk",
            "cfgLanguageRu": "ru",
            "cfgLanguageTr": "tr",
            "cfgLanguageEl": "el"
        };
        // Resize the area
        this.renderArea.resize(100, 48);
        // Update for the first time
        this.update();
    }
    // getRenderArea()
    Cfg.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Cfg.prototype.drawAbout = function (x, y) {
        // The title
        this.renderArea.drawArray(Database.getAscii("text/About"), x + 34, y);
        // Who?
        this.renderArea.drawString("Who?", x + 2, y + 7);
        this.renderArea.addBold(x + 2, x + 6, y + 7);
        // Who...
        this.renderArea.drawString("Ideas, game design & code by aniwey.", x + 4, y + 9);
        this.renderArea.drawString("Ascii art by Tobias Nordqvist, GodsTurf, dixsept, Dani \"Deinol\" Gómez and aniwey.", x + 4, y + 10);
        // License?
        this.renderArea.drawString("License?", x + 2, y + 13);
        this.renderArea.addBold(x + 2, x + 10, y + 13);
        // License...
        this.renderArea.drawString("The game source code is published under the GPLv3 license. This means you are free to modify and", x + 4, y + 15);
        this.renderArea.drawString("redistribute the game, even for commercial purposes, under some conditions.", x, y + 16);
        this.renderArea.addHtmlLink(x + 76, y + 16, "source_code.html", "Learn more.");
        this.renderArea.drawString("The ascii art is published under the CC-BY-SA license, which means that you can reuse it if you", x + 4, y + 18);
        this.renderArea.drawString("credit the artist who made the art and share your modifications under the same license.", x, y + 19);
        this.renderArea.addHtmlLink(x + 88, y + 19, "ascii_art.html", "Learn more.");
        // Aything else?
        this.renderArea.drawString("Anything else?", x + 2, y + 22);
        this.renderArea.addBold(x + 2, x + 16, y + 22);
        // Contact
        this.renderArea.drawString("Feel free to contact me at aniwey@gmail.com if you have any comments or questions :)", x + 4, y + 24);
    };
    Cfg.prototype.drawCfgInvertColors = function (x, y) {
        // Text
        this.renderArea.drawString(Database.getText("cfgInvertColors"), x, y);
        this.renderArea.drawString(Database.getTranslatedText("cfgInvertColors"), x, y + 1, true);
        // The checkbox
        this.renderArea.addCheckbox(x + Algo.takeBiggest(Database.getText("cfgInvertColors").length, Database.getTranslatedText("cfgInvertColors").length) + 2, y, new CallbackCollection(this.invertColorsChecked.bind(this)), new CallbackCollection(this.invertColorsUnchecked.bind(this)), "cfgInvertColorsCheckbox", Saving.loadBool("gameInvertedColors"));
    };
    Cfg.prototype.drawCfgLanguage = function (x, y) {
        // Text
        this.renderArea.drawString(Database.getText("cfgChooseLanguage"), x, y);
        this.renderArea.drawString(Database.getTranslatedText("cfgChooseLanguage"), x, y + 1, true);
        // List
        this.renderArea.addList(x + Algo.takeBiggest(Database.getText("cfgChooseLanguage").length, Database.getTranslatedText("cfgChooseLanguage").length) + 2, x + Algo.takeBiggest(Database.getText("cfgChooseLanguage").length, Database.getTranslatedText("cfgChooseLanguage").length) + 20, y, "cfgLanguageList", new CallbackCollection(this.languageSelected.bind(this)), [
            "cfgLanguageEn", "English",
            "cfgLanguageBr", "Brazilian Portuguese (by TranslaCAT)",
            "cfgLanguageZh", "Chinese (by Fan Zhang)",
            "cfgLanguageCz", "Czech (by Keranis)",
            "cfgLanguageNl", "Dutch (by Noël Wierema and Vincent van Gennep, corrections by Wessel van den Putte)",
            "cfgLanguageFr", "French (by aniwey)",
            "cfgLanguageDe", "German (by Kai Kubasta)",
            "cfgLanguageEl", "Greek (by VagosLabrou)",
            "cfgLanguageHu", "Hungarian (by The_Reaper_CooL)",
            "cfgLanguageId", "Indonesian (by Richard Sudaryono)",
            "cfgLanguageKr", "Korean (by jiyeonnn03)",
            "cfgLanguagePl", "Polish (by Patryk Połomski)",
            "cfgLanguageRu", "Russian (by Julia Richter (Zen Chelios Jr.))",
            "cfgLanguageEs", "Spanish (by Saúl Ruiz Calleja and Tania López Camino)",
            "cfgLanguageSe", "Swedish (by Jessica Tsiamis)",
            "cfgLanguageTr", "Turkish (by B. Güler)",
            "cfgLanguageUk", "Ukrainian (by Volodymyr Lataniuk)"
        ]);
        // Add the link which will call the selectRightLanguage method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightLanguage.bind(this)));
        // Add the special message for the chinese translation
        if (Saving.loadString("gameLanguage") == "zh") {
            this.renderArea.drawString("中文版翻译会导致少量图像显示错误，我会尽量修复它们的！", x + 9, y + 2, true);
        }
        else if (Saving.loadString("gameLanguage") == "br") {
            this.renderArea.drawArray(Database.getAscii("general/translaCAT"), x + 70, y - 1);
            this.renderArea.addHtmlLink(x + 76, y + 7, "http://www.translacat.com/", "TranslaCAT");
        }
    };
    Cfg.prototype.drawConfigurationText = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("text/Configuration"), x + 17, y);
    };
    Cfg.prototype.invertColorsChecked = function () {
        this.setInvertedColors(true);
    };
    Cfg.prototype.invertColorsUnchecked = function () {
        this.setInvertedColors(false);
    };
    Cfg.prototype.languageSelected = function () {
        // Get the selected language id
        var id = $("#cfgLanguageList").find(":selected").attr("id");
        // Set the new language
        if (this.languageSelectionMap[id] != null) {
            Saving.saveString("gameLanguage", this.languageSelectionMap[id]);
        }
        // Update Cfg
        this.update();
        this.getGame().updatePlace();
    };
    Cfg.prototype.selectRightLanguage = function () {
        // We iterate over all languages
        for (var language in this.languageSelectionMap) {
            // If this is the right one, we select it
            if (Saving.loadString("gameLanguage") == this.languageSelectionMap[language]) {
                $("#" + language).prop('selected', true);
            }
        }
    };
    Cfg.prototype.setInvertedColors = function (invertedColors) {
        Saving.saveBool("gameInvertedColors", invertedColors);
        this.getGame().applyInvertedColorsToCss();
        this.update();
        this.getGame().updateStatusBar(); // We also update the status bar to fix the selected tab's color
        this.getGame().updatePlace();
    };
    Cfg.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // The "Configuration" text
        this.drawConfigurationText(0, 0);
        // Language selection
        this.drawCfgLanguage(0, 8);
        // Invert colors checkbox
        this.drawCfgInvertColors(0, 12);
        // "About" section
        this.drawAbout(0, 18);
    };
    return Cfg;
})(Place);
///<reference path="QuestEntity.ts"/>
var Chest = (function (_super) {
    __extends(Chest, _super);
    // Constructor
    function Chest(quest, globalPosition, isFacingRight, callbackCollection, isOpened) {
        if (isFacingRight === void 0) { isFacingRight = true; }
        if (callbackCollection === void 0) { callbackCollection = new CallbackCollection(); }
        if (isOpened === void 0) { isOpened = false; }
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A chest", "a chest"), new RenderArea(), new Pos(0, -1), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, -1), new Pos(3, 2))));
        // Set the parameters
        this.isFacingRight = isFacingRight;
        this.callbackCollection = callbackCollection;
        // At first, we're not opened
        this.isOpened = isOpened;
        // Create the opening collision box collection
        this.openingCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3)));
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Resize the render area
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/common/chestClosed"));
        this.setTransparency(new RenderTransparency(" "));
        // Draw for the first time
        this.drawChestAscii();
    }
    // update()
    Chest.prototype.update = function () {
        _super.prototype.update.call(this);
        // If the chest isn't opened yet
        if (this.isOpened == false) {
            // If the player has a collision box collection
            if (this.getQuest().getGame().getPlayer().getCbc() != null) {
                // If it collides with our opening collision box collection
                if (this.getQuest().getGame().getPlayer().getCbc().collidesWith(this.openingCollisionBoxCollection)) {
                    // We are now opened
                    this.isOpened = true;
                    // We fire the callback collection
                    this.callbackCollection.fire();
                    // We re-draw
                    this.drawChestAscii();
                }
            }
        }
    };
    // Private methods
    Chest.prototype.drawChestAscii = function () {
        // We erase
        this.getRenderArea().resetAllButSize();
        // If we're not opened
        if (this.isOpened == false) {
            this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestClosed"));
        }
        else {
            // If we're facing right
            if (this.isFacingRight)
                this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestOpenedRight"));
            else
                this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestOpenedLeft"));
        }
    };
    return Chest;
})(QuestEntity);
///<reference path="StatusBarResource.ts"/>
var ChocolateBars = (function (_super) {
    __extends(ChocolateBars, _super);
    // Constructor
    function ChocolateBars(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    ChocolateBars.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative chocolate bars?!";
        else if (n == 1)
            return "You have 1 chocolate bar";
        else
            base = Algo.numberToStringButNicely(n);
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 15) {
            suffix = " chocolate bars";
            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 3)
            suffix = " cb";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        return prefix + base + suffix;
    };
    return ChocolateBars;
})(StatusBarResource);
var CollisionBox = (function () {
    // Constructor
    function CollisionBox(questEntity, position, size) {
        this.questEntity = questEntity;
        this.position = position;
        this.size = size;
    }
    // Public methods
    CollisionBox.prototype.collidesWith = function (collisionBox, pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // We return false if we detect that the collision is impossible
        if (collisionBox.questEntity.getGlobalPosition().x + collisionBox.position.x + collisionBox.size.x <= this.questEntity.getGlobalPosition().x + this.position.plus(pos).x)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().x + collisionBox.position.x >= this.questEntity.getGlobalPosition().x + this.position.plus(pos).x + this.size.x)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().y + collisionBox.position.y + collisionBox.size.y <= this.questEntity.getGlobalPosition().y + this.position.plus(pos).y)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().y + collisionBox.position.y >= this.questEntity.getGlobalPosition().y + this.position.plus(pos).y + this.size.y)
            return false;
        // Else, we return true
        return true;
    };
    CollisionBox.prototype.move = function (pos) {
        this.position.add(pos);
    };
    // Public getters
    CollisionBox.prototype.getPosition = function () {
        return this.position;
    };
    CollisionBox.prototype.getSize = function () {
        return this.size;
    };
    return CollisionBox;
})();
var CollisionBoxCollection = (function () {
    // Constructor
    function CollisionBoxCollection() {
        var boxes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            boxes[_i - 0] = arguments[_i];
        }
        this.boxes = boxes;
    }
    // Public method
    CollisionBoxCollection.prototype.addCollisionBox = function (collisionBox) {
        this.boxes.push(collisionBox);
    };
    CollisionBoxCollection.prototype.collidesWith = function (collisionBoxCollection, pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // We test if one of our boxes collide with one of the boxes of the collection given in parameters
        for (var i = 0; i < this.boxes.length; i++) {
            for (var j = 0; j < collisionBoxCollection.getBoxes().length; j++) {
                // If there's a collision between those two, we return true
                if (this.boxes[i].collidesWith(collisionBoxCollection.getBoxes()[j], pos))
                    return true;
            }
        }
        // No collision, we return false
        return false;
    };
    CollisionBoxCollection.prototype.move = function (pos) {
        // We move each collision box
        for (var i = 0; i < this.boxes.length; i++) {
            this.boxes[i].move(pos);
        }
    };
    CollisionBoxCollection.prototype.removeBoxes = function () {
        this.boxes = [];
    };
    // Public getters
    CollisionBoxCollection.prototype.getBoxes = function () {
        return this.boxes;
    };
    return CollisionBoxCollection;
})();
var Color = (function () {
    // Constructor
    function Color(colorType, shouldInvert) {
        if (shouldInvert === void 0) { shouldInvert = false; }
        this.setColorType(colorType);
        this.shouldInvert = shouldInvert;
    }
    // Public getters
    Color.prototype.getColorString = function () {
        // If the player doesn't use inverted colors or we don't need to invert
        if (Saving.loadBool("gameInvertedColors") == false || this.shouldInvert == false)
            return this.colorString;
        else
            return this.invertedColorString;
    };
    // Public setters
    Color.prototype.setColorType = function (colorType) {
        // Set the type
        this.colorType = colorType;
        // Set r, g, and b depending on the color type
        switch (this.colorType) {
            // Health bars
            case ColorType.HEALTH_GREEN:
                this.setRGB(20, 212, 0);
                break;
            case ColorType.HEALTH_ORANGE:
                this.setRGB(255, 128, 0);
                break;
            case ColorType.HEALTH_RED:
                this.setRGB(230, 15, 0);
                break;
            case ColorType.HEALTH_UNICOLOR:
                this.setRGB(20, 212, 0);
                break;
            // Player spells
            case ColorType.PLAYER_FIREBALL:
                this.setRGB(255, 120, 0);
                break;
            case ColorType.PLAYER_ACID_DROP:
                this.setRGB(138, 172, 60);
                break;
            case ColorType.PLAYER_THORN:
                this.setRGB(85, 150, 40);
                break;
            case ColorType.PLAYER_OBSIDIAN_BRICK:
                this.setRGB(52, 0, 61);
                break;
            case ColorType.PLAYER_SUMMONED_DEMON:
                this.setRGB(0, 0, 0);
                break;
            // Eq items spells
            case ColorType.RED_ENCHANTED_GLOVES_FIREBALL:
                this.setRGB(255, 80, 0);
                break;
            // Quest buttons
            case ColorType.QUEST_BUTTON_ACID_RAIN:
                this.setRGB(138, 172, 60);
                break;
            case ColorType.QUEST_BUTTON_FIREBALL:
                this.setRGB(255, 120, 0);
                break;
            case ColorType.QUEST_BUTTON_TELEPORT:
                this.setRGB(185, 213, 213);
                break;
            case ColorType.QUEST_BUTTON_ERASE_MAGIC:
                this.setRGB(230, 255, 108);
                break;
            case ColorType.QUEST_BUTTON_THORNS_SHIELD:
                this.setRGB(85, 150, 40);
                break;
            case ColorType.QUEST_BUTTON_OBSIDIAN_WALL:
                this.setRGB(180, 90, 130);
                break;
            case ColorType.QUEST_BUTTON_BLACK_DEMONS:
                this.setRGB(128, 128, 128);
                break;
            case ColorType.QUEST_BUTTON_HEALTH_POTION:
                this.setRGB(255, 31, 31);
                break;
            case ColorType.QUEST_BUTTON_TURTLE_POTION:
                this.setRGB(123, 137, 13);
                break;
            case ColorType.QUEST_BUTTON_ANTI_GRAVITY_POTION:
                this.setRGB(187, 64, 188);
                break;
            case ColorType.QUEST_BUTTON_BERSERK_POTION:
                this.setRGB(110, 30, 47);
                break;
            case ColorType.QUEST_BUTTON_CLONING_POTION:
                this.setRGB(200, 200, 200);
                break;
            case ColorType.QUEST_BUTTON_P_POTION:
                this.setRGB(42, 135, 141);
                break;
            case ColorType.QUEST_BUTTON_X_POTION:
                this.setRGB(252, 82, 255);
                break;
            case ColorType.QUEST_BUTTON_SOME_OBJECT:
                this.setRGB(209, 131, 67);
                break;
            case ColorType.QUEST_BLACKHOLE_SPELL:
                this.setRGB(80, 80, 80);
                break;
            // Quest spells/potions countdown color
            case ColorType.QUEST_COUNTDOWN:
                this.setRGB(255, 0, 0);
                break;
            // Special colors used for the save page
            case ColorType.SAVE_GREEN:
                this.setRGB(42, 184, 39);
                break;
            case ColorType.SAVE_RED:
                this.setRGB(255, 28, 28);
                break;
            // Status bar special colors
            case ColorType.STATUS_BAR_SELECTED_TAB:
                this.setRGB(191, 191, 191);
                break;
            // Sea horse water ball
            case ColorType.SEAHORSE_WATER_BALL:
                this.setRGB(0, 58, 118);
                break;
            // The cave background color for the front exit
            case ColorType.THECAVE_BACKGROUND_COLOR:
                this.setRGB(20, 20, 20);
                break;
            // Secial color used by the monkey wizard
            case ColorType.MONKEY_WIZARD_BALL:
                this.setRGB(114, 0, 101);
                break;
            case ColorType.MONKEY_WIZARD_BALL_STORED:
                this.setRGB(114, 0, 56);
                break;
            // Special colors used in the forest quest
            case ColorType.TREE_SPIRIT_MAGIC_SPINE:
                this.setRGB(16, 95, 16);
                break;
            // Special color in the castle's dark room
            case ColorType.CASTLE_DARK_ROOM:
                this.setRGB(0, 0, 0);
                break;
            // Special colors for the shark fins
            case ColorType.BIGSHARK_FIN_RED:
                this.setRGB(217, 31, 31);
                break;
            case ColorType.BIGSHARK_FIN_GREEN:
                this.setRGB(31, 217, 64);
                break;
            case ColorType.BIGSHARK_FIN_PURPLE:
                this.setRGB(151, 31, 217);
                break;
            // Special colors for the blackhole spell
            case ColorType.BLACKHOLE_GREY20:
                this.setRGB(20, 20, 20);
                break;
            case ColorType.BLACKHOLE_GREY40:
                this.setRGB(40, 40, 40);
                break;
            case ColorType.BLACKHOLE_GREY60:
                this.setRGB(60, 60, 60);
                break;
            case ColorType.BLACKHOLE_GREY80:
                this.setRGB(80, 80, 80);
                break;
            case ColorType.BLACKHOLE_GREY100:
                this.setRGB(100, 100, 100);
                break;
            case ColorType.BLACKHOLE_GREY120:
                this.setRGB(120, 120, 120);
                break;
            case ColorType.BLACKHOLE_GREY140:
                this.setRGB(140, 140, 140);
                break;
            case ColorType.BLACKHOLE_GREY160:
                this.setRGB(160, 160, 160);
                break;
            case ColorType.BLACKHOLE_GREY180:
                this.setRGB(180, 180, 180);
                break;
            case ColorType.BLACKHOLE_GREY200:
                this.setRGB(200, 200, 200);
                break;
            case ColorType.BLACKHOLE_GREY220:
                this.setRGB(220, 220, 220);
                break;
            case ColorType.BLACKHOLE_GREY240:
                this.setRGB(240, 240, 240);
                break;
            // Special colors for the Hell quest
            case ColorType.HELL_RED_LAVA:
                this.setRGB(200, 8, 3);
                break;
            case ColorType.DEVIL_FIREBALL:
                this.setRGB(191, 0, 0);
                break;
            // Special colors for the developer quest
            case ColorType.DEVELOPER_BLUE:
                this.setRGB(20, 20, 213);
                break;
            case ColorType.DEVELOPER_YELLOW:
                this.setRGB(227, 194, 11);
                break;
            case ColorType.DEVELOPER_ORANGE:
                this.setRGB(201, 77, 9);
                break;
        }
    };
    // Private setters
    Color.prototype.setColorString = function (colorString) {
        this.colorString = colorString;
    };
    Color.prototype.setInvertedColorString = function (invertedColorString) {
        this.invertedColorString = invertedColorString;
    };
    Color.prototype.setRGB = function (r, g, b) {
        // Set r, g and b
        this.r = r;
        this.g = g;
        this.b = b;
        // Set the color strings from r, g and b
        this.setColorString("rgb(" + r.toString() + ", " + g.toString() + ", " + b.toString() + ")");
        this.setInvertedColorString("rgb(" + (255 - r).toString() + ", " + (255 - g).toString() + ", " + (255 - b).toString() + ")");
    };
    return Color;
})();
var ColorType;
(function (ColorType) {
    // Health bars
    ColorType[ColorType["HEALTH_GREEN"] = 0] = "HEALTH_GREEN";
    ColorType[ColorType["HEALTH_ORANGE"] = 1] = "HEALTH_ORANGE";
    ColorType[ColorType["HEALTH_RED"] = 2] = "HEALTH_RED";
    ColorType[ColorType["HEALTH_UNICOLOR"] = 3] = "HEALTH_UNICOLOR";
    // Player spells
    ColorType[ColorType["PLAYER_FIREBALL"] = 4] = "PLAYER_FIREBALL";
    ColorType[ColorType["PLAYER_ACID_DROP"] = 5] = "PLAYER_ACID_DROP";
    ColorType[ColorType["PLAYER_THORN"] = 6] = "PLAYER_THORN";
    ColorType[ColorType["PLAYER_OBSIDIAN_BRICK"] = 7] = "PLAYER_OBSIDIAN_BRICK";
    ColorType[ColorType["PLAYER_SUMMONED_DEMON"] = 8] = "PLAYER_SUMMONED_DEMON";
    // Eq items spells
    ColorType[ColorType["RED_ENCHANTED_GLOVES_FIREBALL"] = 9] = "RED_ENCHANTED_GLOVES_FIREBALL";
    // Quest buttons
    ColorType[ColorType["QUEST_BUTTON_ACID_RAIN"] = 10] = "QUEST_BUTTON_ACID_RAIN";
    ColorType[ColorType["QUEST_BUTTON_FIREBALL"] = 11] = "QUEST_BUTTON_FIREBALL";
    ColorType[ColorType["QUEST_BUTTON_TELEPORT"] = 12] = "QUEST_BUTTON_TELEPORT";
    ColorType[ColorType["QUEST_BUTTON_ERASE_MAGIC"] = 13] = "QUEST_BUTTON_ERASE_MAGIC";
    ColorType[ColorType["QUEST_BUTTON_THORNS_SHIELD"] = 14] = "QUEST_BUTTON_THORNS_SHIELD";
    ColorType[ColorType["QUEST_BUTTON_OBSIDIAN_WALL"] = 15] = "QUEST_BUTTON_OBSIDIAN_WALL";
    ColorType[ColorType["QUEST_BUTTON_BLACK_DEMONS"] = 16] = "QUEST_BUTTON_BLACK_DEMONS";
    ColorType[ColorType["QUEST_BUTTON_HEALTH_POTION"] = 17] = "QUEST_BUTTON_HEALTH_POTION";
    ColorType[ColorType["QUEST_BUTTON_TURTLE_POTION"] = 18] = "QUEST_BUTTON_TURTLE_POTION";
    ColorType[ColorType["QUEST_BUTTON_ANTI_GRAVITY_POTION"] = 19] = "QUEST_BUTTON_ANTI_GRAVITY_POTION";
    ColorType[ColorType["QUEST_BUTTON_BERSERK_POTION"] = 20] = "QUEST_BUTTON_BERSERK_POTION";
    ColorType[ColorType["QUEST_BUTTON_CLONING_POTION"] = 21] = "QUEST_BUTTON_CLONING_POTION";
    ColorType[ColorType["QUEST_BUTTON_P_POTION"] = 22] = "QUEST_BUTTON_P_POTION";
    ColorType[ColorType["QUEST_BUTTON_X_POTION"] = 23] = "QUEST_BUTTON_X_POTION";
    ColorType[ColorType["QUEST_BUTTON_SOME_OBJECT"] = 24] = "QUEST_BUTTON_SOME_OBJECT";
    ColorType[ColorType["QUEST_BLACKHOLE_SPELL"] = 25] = "QUEST_BLACKHOLE_SPELL";
    // Quest spells/potions countdown color
    ColorType[ColorType["QUEST_COUNTDOWN"] = 26] = "QUEST_COUNTDOWN";
    // Special colors used for the save page
    ColorType[ColorType["SAVE_GREEN"] = 27] = "SAVE_GREEN";
    ColorType[ColorType["SAVE_RED"] = 28] = "SAVE_RED";
    // Status bar special colors
    ColorType[ColorType["STATUS_BAR_SELECTED_TAB"] = 29] = "STATUS_BAR_SELECTED_TAB";
    // Sea horse water ball
    ColorType[ColorType["SEAHORSE_WATER_BALL"] = 30] = "SEAHORSE_WATER_BALL";
    // The cave background color for the front exit
    ColorType[ColorType["THECAVE_BACKGROUND_COLOR"] = 31] = "THECAVE_BACKGROUND_COLOR";
    // Secial colors used by the monkey wizard
    ColorType[ColorType["MONKEY_WIZARD_BALL"] = 32] = "MONKEY_WIZARD_BALL";
    ColorType[ColorType["MONKEY_WIZARD_BALL_STORED"] = 33] = "MONKEY_WIZARD_BALL_STORED";
    // Special colors used in the forest quest
    ColorType[ColorType["TREE_SPIRIT_MAGIC_SPINE"] = 34] = "TREE_SPIRIT_MAGIC_SPINE";
    // Special color in the castle's dark room
    ColorType[ColorType["CASTLE_DARK_ROOM"] = 35] = "CASTLE_DARK_ROOM";
    // Special colors for the shark fins
    ColorType[ColorType["BIGSHARK_FIN_RED"] = 36] = "BIGSHARK_FIN_RED";
    ColorType[ColorType["BIGSHARK_FIN_GREEN"] = 37] = "BIGSHARK_FIN_GREEN";
    ColorType[ColorType["BIGSHARK_FIN_PURPLE"] = 38] = "BIGSHARK_FIN_PURPLE";
    // Special colors for the blackhole spell
    ColorType[ColorType["BLACKHOLE_GREY20"] = 39] = "BLACKHOLE_GREY20";
    ColorType[ColorType["BLACKHOLE_GREY40"] = 40] = "BLACKHOLE_GREY40";
    ColorType[ColorType["BLACKHOLE_GREY60"] = 41] = "BLACKHOLE_GREY60";
    ColorType[ColorType["BLACKHOLE_GREY80"] = 42] = "BLACKHOLE_GREY80";
    ColorType[ColorType["BLACKHOLE_GREY100"] = 43] = "BLACKHOLE_GREY100";
    ColorType[ColorType["BLACKHOLE_GREY120"] = 44] = "BLACKHOLE_GREY120";
    ColorType[ColorType["BLACKHOLE_GREY140"] = 45] = "BLACKHOLE_GREY140";
    ColorType[ColorType["BLACKHOLE_GREY160"] = 46] = "BLACKHOLE_GREY160";
    ColorType[ColorType["BLACKHOLE_GREY180"] = 47] = "BLACKHOLE_GREY180";
    ColorType[ColorType["BLACKHOLE_GREY200"] = 48] = "BLACKHOLE_GREY200";
    ColorType[ColorType["BLACKHOLE_GREY220"] = 49] = "BLACKHOLE_GREY220";
    ColorType[ColorType["BLACKHOLE_GREY240"] = 50] = "BLACKHOLE_GREY240";
    // Special colors for the Hell quest
    ColorType[ColorType["HELL_RED_LAVA"] = 51] = "HELL_RED_LAVA";
    ColorType[ColorType["DEVIL_FIREBALL"] = 52] = "DEVIL_FIREBALL";
    // Special colors for the developer quest
    ColorType[ColorType["DEVELOPER_BLUE"] = 53] = "DEVELOPER_BLUE";
    ColorType[ColorType["DEVELOPER_YELLOW"] = 54] = "DEVELOPER_YELLOW";
    ColorType[ColorType["DEVELOPER_ORANGE"] = 55] = "DEVELOPER_ORANGE";
})(ColorType || (ColorType = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var Database;
(function (Database) {
    // Variables
    var asciiMap = {}; // A map which associates strings (the keys) to array of strings (the ascii arts)
    var asciiSizeMap = {}; // A map which associates strings (the keys) to the sizes of ascii arts
    var textMap = {}; // A map which associated strings (the keys) to strings (the texts)
    // Public functions
    function addAscii(asciiName, width, height, asciiArray) {
        asciiMap[asciiName] = asciiArray;
        asciiSizeMap[asciiName] = new Pos(width, height);
    }
    Database.addAscii = addAscii;
    function addText(key, text) {
        textMap[key] = text;
    }
    Database.addText = addText;
    function isTranslated() {
        if (Saving.loadString("gameLanguage") != "en")
            return true;
        return false;
    }
    Database.isTranslated = isTranslated;
    // Public getters
    function getAscii(key) {
        if (asciiMap[key] == null)
            console.log("Error : trying to access the unknown ascii art \"" + key + "\"");
        return asciiMap[key];
    }
    Database.getAscii = getAscii;
    function getAsciiHeight(key) {
        return asciiSizeMap[key].y;
    }
    Database.getAsciiHeight = getAsciiHeight;
    function getAsciiWidth(key) {
        return asciiSizeMap[key].x;
    }
    Database.getAsciiWidth = getAsciiWidth;
    function getPartOfAscii(key, y1, y2) {
        return getAscii(key).slice(y1, y2);
    }
    Database.getPartOfAscii = getPartOfAscii;
    function getText(key) {
        if (textMap["en." + key] == null)
            console.log("Error : trying to access the unknown text \"" + key + "\"");
        return textMap["en." + key];
    }
    Database.getText = getText;
    function getTranslatedText(key) {
        // If we have a language (other than english) selected
        if (Saving.loadString("gameLanguage") != "en") {
            // If the translated text can't be found
            if (textMap[Saving.loadString("gameLanguage") + "." + key] == null)
                console.log("Error : trying to access the unknown translated text \"" + key + "\" for language " + Saving.loadString("gameLanguage") + "."); // Error
            // If the translated text isn't chinese
            if (Saving.loadString("gameLanguage") != "zh")
                return textMap[Saving.loadString("gameLanguage") + "." + key]; // We just return the text
            else
                return textMap[Saving.loadString("gameLanguage") + "." + key].addChineseSpaces(); // We return the text after adding spaces
        }
        // Else, we return an empty string
        return "";
    }
    Database.getTranslatedText = getTranslatedText;
})(Database || (Database = {}));
///<reference path="QuestEntity.ts"/>
var Demon = (function (_super) {
    __extends(Demon, _super);
    // Constructor
    function Demon(quest, pos) {
        _super.call(this, quest, pos, new Naming("A demon", "a demon"), new RenderArea(0, 0), new Pos(0, 0), new CollisionBoxCollection(), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        // Set the demon type, randomly-chosen
        switch (Random.between(0, 2)) {
            case 0:
                this.type = DemonType.CUBE;
                break;
            case 1:
                this.type = DemonType.EYES;
                break;
            case 2:
                this.type = DemonType.BUBBLES;
                break;
        }
        // Depending on the type, resize the render area, add a collision box, and draw the ascii art, and add the weapon and its delay
        switch (this.type) {
            case DemonType.CUBE:
                this.getRenderArea().resize(5, 3);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 0), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonCube"));
                this.setTransparency(new RenderTransparency(" ", "%"));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its huge body", "its huge body"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 2), new Pos(7, 2))), 50));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(10);
                break;
            case DemonType.EYES:
                this.getRenderArea().resize(5, 4);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 1), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonEyes"));
                this.setTransparency(new RenderTransparency(" ", "%"));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Demonish eyes", "demonish eyes"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(7, 6))), 10));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
                break;
            case DemonType.BUBBLES:
                this.getRenderArea().resize(5, 3);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 0), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonBubbles" + Random.between(0, 6).toString()));
                this.setTransparency(new RenderTransparency(" "));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Fire bubbles", "fire bubbles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(7, 5))), 15));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
                break;
        }
        // Set the health points, depending on the type
        switch (this.type) {
            case DemonType.CUBE:
                this.setMaxHp(120);
                this.setHp(120);
                break;
            default:
                this.setMaxHp(30 + Random.between(0, 7) * 10);
                this.setHp(this.getMaxHp());
                break;
        }
    }
    // update()
    Demon.prototype.update = function () {
        // Try to go towards the player
        this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 0, new Pos(1, 0));
        // If we're far from the player, we try to jump
        if (Math.abs(this.getRenderAreaCenter().x - this.getQuest().getGame().getPlayer().getRenderAreaCenter().x) > 5)
            this.jump(3);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    Demon.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(5 + Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Demon;
})(QuestEntity);
var DemonType;
(function (DemonType) {
    DemonType[DemonType["CUBE"] = 0] = "CUBE";
    DemonType[DemonType["EYES"] = 1] = "EYES";
    DemonType[DemonType["BUBBLES"] = 2] = "BUBBLES";
})(DemonType || (DemonType = {}));
///<reference path="Quest.ts"/>
var Desert = (function (_super) {
    __extends(Desert, _super);
    // Constructor
    function Desert(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(149, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 26));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround(0, 3, 1, 4, 12, 0, 13, 18, 1, 19, 24, 2, 25, 30, 3, 31, 36, 2, 37, 42, 1, 43, 51, 0, 52, 57, 1, 58, 62, 2, 63, 68, 3, 69, 75, 2, 76, 82, 1, 83, 92, 0, 93, 97, 1, 98, 101, 2, 102, 107, 3, 108, 113, 2, 114, 119, 1, 120, 128, 0, 129, 134, 1, 135, 139, 2, 140, 145, 3, 146, 148, 2);
        // Bird adding stuff
        this.currentBirdTime = 0;
        this.setNextBirdAt();
        // Add the camels
        this.addCamel(new Pos(44, 24));
        this.addCamel(new Pos(65, 26));
        this.addCamel(new Pos(84, 24));
        this.addCamel(new Pos(106, 26));
        this.addCamel(new Pos(118, 24));
        this.addCamel(new Pos(144, 26));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the desert, camels and palm trees as far as the eye can see."));
    }
    // Public methods
    Desert.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Desert.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You made your way through the desert!"));
            Saving.saveBool("mainMapDoneDesert", true); // The desert is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the desert. Alone."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Desert.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Possibly add a bird
            if (this.currentBirdTime >= this.nextBirdAt) {
                this.currentBirdTime = 0;
                this.setNextBirdAt();
                this.addBird();
            }
            else
                this.currentBirdTime += 1;
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y + 21);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Desert.prototype.addBird = function () {
        // We create the variable which will contain our bird
        var bird;
        // We choose the y position of our bird
        var yPos = Random.upTo(14);
        // We check if we could collide with another bird using this y position
        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getCbc() != null && this.getEntities()[i].getCbc().collidesWith(new CollisionBoxCollection(new CollisionBox(new QuestEntity(this, new Pos(0, 0)), new Pos(0, yPos), new Pos(149, 4)))))
                return;
        }
        // We add a bird going right
        if (Random.flipACoin()) {
            bird = new DesertBird(this, new Pos(-9, yPos), true);
        }
        else {
            bird = new DesertBird(this, new Pos(149, yPos), false);
        }
        // We add the health bar and finally add the bird to the entities
        bird.setHealthBar(new QuestEntityHealthBar(bird, new Pos(9, 1)));
        this.addEntity(bird);
    };
    Desert.prototype.addCamel = function (pos) {
        var camel;
        if (Random.oneChanceOutOf(20))
            camel = new TripodCamel(this, pos);
        else
            camel = new Camel(this, pos);
        camel.setHealthBar(new QuestEntityHealthBar(camel, new Pos(7, 1)));
        this.addEntity(camel);
    };
    Desert.prototype.addGround = function () {
        var positions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            positions[_i - 0] = arguments[_i];
        }
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 26)));
        var wall = (this.getLastEntity());
        // Add the boxes
        for (var i = 0; i < positions.length / 3; i++) {
            wall.addBox(new Pos(positions[i * 3], positions[i * 3 + 2]), new Pos(positions[i * 3 + 1] - positions[i * 3] + 1, 4 - positions[i * 3 + 2]));
        }
    };
    Desert.prototype.setNextBirdAt = function () {
        this.nextBirdAt = 20 + Random.upTo(30);
    };
    Desert.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 149)
            return true;
        // Else we return false
        return false;
    };
    return Desert;
})(Quest);
///<reference path="QuestEntity.ts"/>
var DesertBird = (function (_super) {
    __extends(DesertBird, _super);
    // Constructor
    function DesertBird(quest, pos, goingRight) {
        _super.call(this, quest, pos, new Naming("A desert bird", "a desert bird"), new RenderArea(9, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(9, 4))));
        // If we're heading to right
        if (goingRight) {
            this.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
            this.setQuestEntityAnimation(new QuestEntityAnimation(3, Random.upTo(2), Random.upTo(1), "places/quests/desert/birdRightUp", "places/quests/desert/birdRightDown"));
        }
        else {
            this.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
            this.setQuestEntityAnimation(new QuestEntityAnimation(3, Random.upTo(2), Random.upTo(1), "places/quests/desert/birdLeftUp", "places/quests/desert/birdLeftDown"));
        }
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(6);
        this.setHp(6);
    }
    // willDie()
    DesertBird.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedFeather", "You found a desert bird feather!", "You gain a desert bird feather"));
    };
    return DesertBird;
})(QuestEntity);
///<reference path="Quest.ts"/>
var Developer = (function (_super) {
    __extends(Developer, _super);
    // Constructor
    function Developer(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 34);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 33));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the developer entity
        this.addDeveloperEntity(new Pos(57, 0));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're attacking the developer."));
    }
    // Public methods
    Developer.prototype.castPlayerBlackDemons = function () {
        _super.prototype.castPlayerBlackDemons.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.castPlayerBlackhole = function () {
        _super.prototype.castPlayerBlackhole.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.castPlayerEraseMagic = function () {
        _super.prototype.castPlayerEraseMagic.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.castPlayerObsidianWall = function () {
        _super.prototype.castPlayerObsidianWall.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Developer.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat me. Congratulations :)"));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died fighting the developer. Eh, he made this game after all!"));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Developer.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Developer.prototype.addDeveloperEntity = function (pos) {
        this.developerEntity = new DeveloperEntity(this, pos);
        this.developerEntity.setHealthBar(new QuestEntityHealthBar(this.developerEntity, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.developerEntity);
    };
    Developer.prototype.thePlayerWon = function () {
        // If the developer is dead, we return true
        if (this.developerEntity.shouldDie())
            return true;
        // Else we return false
        return false;
    };
    return Developer;
})(Quest);
///<reference path="QuestEntity.ts"/>
var DeveloperEntity = (function (_super) {
    __extends(DeveloperEntity, _super);
    // Constructor
    function DeveloperEntity(quest, pos) {
        _super.call(this, quest, pos, new Naming("The developer", "the developer"), new RenderArea(43, 34), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(20, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(16, 1), new Pos(12, 1)), new CollisionBox(this, new Pos(15, 2), new Pos(14, 1)), new CollisionBox(this, new Pos(12, 3), new Pos(18, 1)), new CollisionBox(this, new Pos(11, 4), new Pos(20, 1)), new CollisionBox(this, new Pos(10, 5), new Pos(22, 1)), new CollisionBox(this, new Pos(9, 6), new Pos(24, 2)), new CollisionBox(this, new Pos(9, 8), new Pos(25, 1)), new CollisionBox(this, new Pos(9, 9), new Pos(26, 2)), new CollisionBox(this, new Pos(9, 11), new Pos(27, 3)), new CollisionBox(this, new Pos(9, 14), new Pos(28, 1)), new CollisionBox(this, new Pos(8, 15), new Pos(29, 3)), new CollisionBox(this, new Pos(7, 18), new Pos(30, 4)), new CollisionBox(this, new Pos(7, 22), new Pos(31, 2)), new CollisionBox(this, new Pos(6, 24), new Pos(32, 4)), new CollisionBox(this, new Pos(5, 28), new Pos(33, 1)), new CollisionBox(this, new Pos(5, 29), new Pos(34, 1)), new CollisionBox(this, new Pos(4, 30), new Pos(35, 1)), new CollisionBox(this, new Pos(2, 31), new Pos(38, 1)), new CollisionBox(this, new Pos(1, 32), new Pos(40, 1)), new CollisionBox(this, new Pos(0, 33), new Pos(43, 1))), new QuestEntityMovement());
        // Init the time spent
        this.timeSpent = 0;
        // Create the texts
        this.createTexts();
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1000000000);
        this.setHp(1000000000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/developer/me"));
        this.setTransparency(new RenderTransparency(" "));
    }
    // inflictDamage()
    DeveloperEntity.prototype.inflictDamage = function (damage, reason) {
        _super.prototype.inflictDamage.call(this, damage * Random.between(60000, 70000), reason);
    };
    // update()
    DeveloperEntity.prototype.update = function () {
        // Increase the time spent
        this.timeSpent += 1;
        // Increase the current text index, depending on the time spent
        if (this.timeSpent == 95 || this.timeSpent == 245)
            this.indexOfCurrentText += 1;
        // Call the current text update method
        this.texts[this.indexOfCurrentText].update(this);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    DeveloperEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(6000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedY", "You found a strange stone.", "You gain a strange stone."));
    };
    // Public methods
    DeveloperEntity.prototype.addMagicBall = function (finalPosition, damage, timeToLive, colorType) {
        // Set the first position (either the mouth or one of the eyes)
        var firstPosition;
        switch (Random.upTo(2)) {
            case 0:
                firstPosition = new Pos(15, 15);
                break;
            case 1:
                firstPosition = new Pos(25, 15);
                break;
            case 2:
                firstPosition = new Pos(20, 26);
                break;
        }
        // Create the fireball
        var magicBall = new DeveloperMagicBall(this.getQuest(), this.getGlobalPosition().plus(firstPosition), new Naming("A magic ball", "a magic ball"), new Color(colorType), new Pos(2, 1), damage, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magic ball", "a magic ball")), timeToLive);
        // No target
        magicBall.setTargetTypeTargetPosition(finalPosition, new Pos(1, 1));
        // Add the entity
        this.getQuest().addEntity(magicBall);
    };
    DeveloperEntity.prototype.createTexts = function () {
        // Empty the array
        this.texts = [];
        // At first we're working on the first text
        this.indexOfCurrentText = 0;
        // Add "Hello"
        this.texts.push(new DeveloperEntityText(20, new Pos(3, 3), 110, Database.getAscii("places/quests/developer/hello")));
        // Add "I'm glad you made it so far"
        this.texts.push(new DeveloperEntityText(32, new Pos(3, 3), 150, Database.getAscii("places/quests/developer/imgladyoumadeitsofar")));
        // Add "<3"
        this.texts.push(new DeveloperEntityText(9999999999999, new Pos(8, 10), 100, Database.getAscii("places/quests/developer/love")));
    };
    DeveloperEntity.prototype.playerUsedBlackMagic = function () {
        // We use a blackhole on the player
        this.getQuest().addEntity(new Blackhole(this.getQuest(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 5000, new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL).setQuestEntity(this).setSpellNaming(new Naming("A blackhole", "a blackhole"))));
    };
    return DeveloperEntity;
})(QuestEntity);
var DeveloperEntityText = (function () {
    // Constructor
    function DeveloperEntityText(damage, textPos, timeToLive, text) {
        // Set from parameters
        this.damage = damage;
        this.text = text;
        this.textPos = textPos;
        this.timeToLive = timeToLive;
        // Set the default x position
        this.xPos = 0;
    }
    // Public methods
    DeveloperEntityText.prototype.update = function (dev) {
        // Iterate over strings
        for (var i = 0; i < this.text.length; i++) {
            // If there's a character at the current xPos of this string
            if (this.xPos < this.text[i].length && this.text[i][this.xPos] != " ") {
                // Add a magic ball, depending on the character
                switch (this.text[i][this.xPos]) {
                    case "B":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_BLUE);
                        break;
                    case "Y":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_YELLOW);
                        break;
                    case "O":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_ORANGE);
                        break;
                }
            }
        }
        // Increase xPos
        this.xPos += 1;
    };
    return DeveloperEntityText;
})();
///<reference path="QuestEntitySpell.ts"/>
var Fireball = (function (_super) {
    __extends(Fireball, _super);
    // Constructor
    function Fireball(quest, pos, naming, color, size, damage, questEntityDamageReason) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming);
        // Target stuff
        this.targetType = FireballTargetType.NO_TARGET;
        // Set the size
        this.size = size;
        // Set the damage
        this.damage = damage;
        // Set the quest entity damage reason
        this.questEntityDamageReason = questEntityDamageReason;
        // Create the damage collision box collection
        this.damageCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), this.size));
        // Add the color
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(0, 0), this.size, color));
        // Create a quest entity movement
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(0, 0)));
        // Set the default target type
        this.setTargetTypeNoTarget(new Pos(0, 0));
    }
    // Public methods
    Fireball.prototype.setTargetTypeNoTarget = function (movement) {
        this.targetType = FireballTargetType.NO_TARGET;
        this.getQuestEntityMovement().setOffset(movement); // Set the movement (it will be kept later by itself)
    };
    Fireball.prototype.setTargetTypeTargetEntity = function (entity, specialTargetDamage, speed) {
        if (specialTargetDamage === void 0) { specialTargetDamage = null; }
        if (speed === void 0) { speed = new Pos(1, 1); }
        this.targetType = FireballTargetType.TARGET_ENTITY;
        this.fireballTargetEntity = entity;
        this.specialTargetDamage = specialTargetDamage;
        this.speed = speed;
    };
    Fireball.prototype.setTargetTypeTargetPosition = function (pos, speed) {
        if (speed === void 0) { speed = new Pos(1, 1); }
        this.targetType = FireballTargetType.TARGET_POSITION;
        this.targetPosition = pos;
        this.speed = speed;
    };
    Fireball.prototype.setTargetTypeTargetStickOnEntity = function (entity, specialTargetPosition) {
        if (specialTargetPosition === void 0) { specialTargetPosition = new Pos(0, 0); }
        this.targetType = FireballTargetType.TARGET_STICK_ON_ENTITY;
        this.fireballTargetEntity = entity;
        this.specialTargetPosition = specialTargetPosition;
    };
    Fireball.prototype.update = function () {
        // If we target an entity
        if (this.targetType == FireballTargetType.TARGET_ENTITY) {
            // If this entity is still alive
            if (this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false) {
                // We go towards it
                this.goTowards(this.getGlobalPosition().plus(new Pos(Math.floor(this.size.x / 2), Math.floor(this.size.y / 2))), this.fireballTargetEntity.getRenderAreaCenter(), 0, this.speed);
            }
            else
                this.setDead(true);
        }
        else if (this.targetType == FireballTargetType.TARGET_STICK_ON_ENTITY) {
            // If this entity is still alive
            if (this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false) {
                // We teleport on it
                this.teleport(this.fireballTargetEntity.getGlobalPosition().plus(this.specialTargetPosition));
            }
            else
                this.setDead(true);
        }
        else if (this.targetType == FireballTargetType.TARGET_POSITION) {
            // We go towards this position
            this.goTowards(this.getGlobalPosition().plus(new Pos(Math.floor(this.size.x / 2), Math.floor(this.size.y / 2))), this.targetPosition, 0, this.speed);
        }
        // Handle our damage
        this.handleDamage();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    Fireball.prototype.willDie = function () { };
    // Private methods
    Fireball.prototype.handleDamage = function () {
        // We iterate over entities
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            // If it is from a different team than the team of the entity which launched the fireball
            if (this.questEntityDamageReason.getQuestEntityTeam() != this.getQuest().getEntities()[i].getTeam()) {
                // If it is destructible
                if (this.getQuest().getEntities()[i].getDestructible()) {
                    // If it has a collision box collection
                    if (this.getQuest().getEntities()[i].getCbc() != null) {
                        // If this collision box collection collides with ours
                        if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.damageCollisionBoxCollection)) {
                            // If...
                            if (this.getQuest().getEntities()[i] == this.fireballTargetEntity &&
                                this.targetType == FireballTargetType.TARGET_ENTITY &&
                                this.fireballTargetEntity != null &&
                                this.fireballTargetEntity.getDead() == false &&
                                this.specialTargetDamage != null // And we want to inflict it special damage
                            ) {
                                this.getQuest().getEntities()[i].inflictDamage(this.specialTargetDamage, this.questEntityDamageReason);
                            }
                            else {
                                this.getQuest().getEntities()[i].inflictDamage(this.damage, this.questEntityDamageReason);
                            }
                            // We die because we inflicted damage
                            this.setDead(true);
                        }
                    }
                }
            }
        }
    };
    return Fireball;
})(QuestEntitySpell);
///<reference path="Fireball.ts"/>
var DeveloperMagicBall = (function (_super) {
    __extends(DeveloperMagicBall, _super);
    // Constructor
    function DeveloperMagicBall(quest, pos, naming, color, size, damage, questEntityDamageReason, timeToLive) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming, color, size, damage, questEntityDamageReason);
        // Did we target the player already?
        this.playerTargeted = false;
        // Set the time to live
        this.timeToLive = timeToLive;
    }
    // Public methods
    DeveloperMagicBall.prototype.update = function () {
        // If the player isn't targeted yet
        if (this.playerTargeted == false) {
            // If it's time to target the player
            if (this.timeToLive <= 0) {
                // We target it
                this.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer(), null, new Pos(2, 1));
            }
            else
                this.timeToLive -= 1;
        }
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    DeveloperMagicBall.prototype.willDie = function () { };
    return DeveloperMagicBall;
})(Fireball);
///<reference path="QuestEntity.ts"/>
var Devil = (function (_super) {
    __extends(Devil, _super);
    // Constructor
    function Devil(quest, pos, minY, maxY) {
        _super.call(this, quest, pos, new Naming("The devil", "the devil"), new RenderArea(16, 16), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(4, 0), new Pos(8, 5))), new QuestEntityMovement());
        // Set from parameters
        this.minY = minY;
        this.maxY = maxY;
        // At first we're going down
        this.setGoingDown(true);
        // Init the flames array
        this.flames = [];
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(666);
        this.setHp(666);
        // Set the transparent character and draw
        this.setTransparency(new RenderTransparency(" ", "%"));
        this.reDraw();
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Evilness", "evilness"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(18, 18))), 500));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(0, 5);
    }
    // inflictDamage()
    Devil.prototype.inflictDamage = function (damage, reason) {
        _super.prototype.inflictDamage.call(this, Math.ceil(damage / 4), reason);
    };
    // update()
    Devil.prototype.update = function () {
        // Handle movement
        this.handleUpDownMovement();
        // Handle fireballs
        this.handleFireballs();
        // Handle the flames
        this.handleFlames();
        // Re draw the devil (ascii art + flames)
        this.reDraw();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    Devil.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedA", "You found a strange stone.", "You gain a strange stone."));
    };
    // Private methods
    Devil.prototype.castFireball = function () {
        // Create the fireball
        var fireBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(3, 4)), new Naming("The devil's fireball", "the devil's fireball"), new Color(ColorType.DEVIL_FIREBALL), new Pos(2, 1), 800, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("The devil's fireball", "the devil's fireball")));
        // If the player is on our left
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x) {
            // No target
            fireBall.setTargetTypeNoTarget(new Pos(-Random.between(3, 7), 0));
        }
        else {
            // We target the player
            fireBall.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer(), null, new Pos(1, 1));
        }
        // Add the entity
        this.getQuest().addEntity(fireBall);
    };
    Devil.prototype.handleFireballs = function () {
        if (Random.oneChanceOutOf(2))
            this.castFireball();
    };
    Devil.prototype.handleFlames = function () {
        // Create the variables
        var minX = 0;
        var maxX = 15;
        var minY = 6;
        var maxY = 15;
        var howManyFlames = 150;
        var x;
        var y;
        // Add flames depending on the current timer time
        for (var i = 0; i < howManyFlames; i++) {
            // If there is no flame for this index OR one chance out of 7
            if (i >= this.flames.length || Random.oneChanceOutOf(7)) {
                // Set y
                y = null;
                for (var j = minY; j < maxY; j++) {
                    if (Random.oneChanceOutOf(3)) {
                        y = j;
                        break;
                    }
                }
                if (y == null)
                    y = maxY;
                // Set x
                x = Random.between(minX + Math.floor((15 - y) / 3), maxX - Math.floor((15 - y) / 3));
                // Add or replace the flame
                var flame = new CauldronFlame(new Pos(x, y), Random.fromArray([")", "(", "`", "'", ".", ";", ":", ",", "-", "/", "\\", "|", "\"", "d", "e", "v", "i", "l"]));
                if (i >= this.flames.length)
                    this.flames.push(flame);
                else
                    this.flames[i] = flame;
            }
        }
    };
    Devil.prototype.handleUpDownMovement = function () {
        // If we're going down but we're too low or it will be impossible, we now go up
        if (this.goingDown && (this.getGlobalPosition().y >= this.maxY || this.checkCollision(new Pos(0, 1)))) {
            this.setGoingDown(false);
        }
        else if (this.goingDown == false && (this.getGlobalPosition().y <= this.minY || this.checkCollision(new Pos(0, -1)))) {
            this.setGoingDown(true);
        }
    };
    Devil.prototype.reDraw = function () {
        // Reset everything
        this.getRenderArea().resetAllButSize();
        // Draw the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/devil"), 4, 0);
        // Draw the flames
        for (var i = 0; i < this.flames.length; i++) {
            this.flames[i].draw(this.getRenderArea(), 0, 0);
        }
    };
    Devil.prototype.setGoingDown = function (goingDown) {
        this.goingDown = goingDown;
        if (this.goingDown) {
            this.getQuestEntityMovement().setOffset(new Pos(0, 1));
        }
        else {
            this.getQuestEntityMovement().setOffset(new Pos(0, -1));
        }
    };
    return Devil;
})(QuestEntity);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("dragonDone", false); // If true, it means we began talking to the dragon
Saving.registerBool("dragonUnlockedCyclops", false); // If true, we can ask the cyclops about the dragon
var Dragon = (function (_super) {
    __extends(Dragon, _super);
    // Constructor
    function Dragon(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Set the default step and player position
        if (Saving.loadBool("dragonDone") == false) {
            this.step = DragonStep.PLAYER_MOVING;
            this.playerPos = 0;
        }
        else {
            this.step = DragonStep.TALKING;
            this.playerPos = 60;
        }
        // Launch the interval and get the ID
        this.timerIntervalID = setInterval(this.actionInterval.bind(this), 100);
        // Resize and update
        this.renderArea.resizeFromArray(Database.getAscii("places/dragonFoot"), 0, 3);
        this.update();
    }
    // getRenderArea()
    Dragon.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    Dragon.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.timerIntervalID);
    };
    // Private methods
    Dragon.prototype.actionInterval = function () {
        // Do something different depending on the step
        switch (this.step) {
            case DragonStep.PLAYER_MOVING:
                // Move the player
                this.playerPos += 1;
                if (this.playerPos >= 60) {
                    // We're now attacking
                    this.step = DragonStep.PLAYER_ATTACKING;
                    // Set the countdown
                    this.playerAttackingCountdown = 40;
                }
                // Update
                this.update();
                this.getGame().updatePlace();
                break;
            case DragonStep.PLAYER_ATTACKING:
                // Lower the countdown
                this.playerAttackingCountdown -= 1;
                if (this.playerAttackingCountdown < 0) {
                    // We're now "stop tickling"
                    this.step = DragonStep.STOP_TICKLING;
                }
                // Update
                this.update();
                this.getGame().updatePlace();
                break;
        }
    };
    Dragon.prototype.chooseCandies = function () {
        // Change the step
        this.step = DragonStep.TALKING_CANDIES;
        // Set the bool
        Saving.saveBool("dragonUnlockedCyclops", true);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Dragon.prototype.chooseChallenge = function () {
        // Change the step
        this.step = DragonStep.TALKING_CHALLENGE;
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Dragon.prototype.chooseFame = function () {
        // Change the step
        this.step = DragonStep.TALKING_FAME;
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Dragon.prototype.drawPlayer = function (x, y) {
        if (y === void 0) { y = 26; }
        this.renderArea.drawString("\\o/", x, y);
    };
    Dragon.prototype.goToDeveloper = function () {
        this.getGame().setPlace(new Developer(this.getGame()));
    };
    Dragon.prototype.goToHell = function () {
        this.getGame().setPlace(new Hell(this.getGame()));
    };
    Dragon.prototype.okayStopTickling = function () {
        if (this.step == DragonStep.STOP_TICKLING) {
            // Change the step
            this.step = DragonStep.TALKING;
            // Set the bool
            Saving.saveBool("dragonDone", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Dragon.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheCastleButton(this.renderArea, "dragonBackToTheCastleButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/dragonFoot"), 0, 3);
        // Draw something different depending on the step
        switch (this.step) {
            case DragonStep.PLAYER_MOVING:
                // Draw the player (eventually going down the stairs at the beginning)
                this.drawPlayer(this.playerPos, 20 + (this.playerPos < 21 ? (Math.floor(this.playerPos / 3)) : 6));
                break;
            case DragonStep.PLAYER_ATTACKING:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the dragon fake health bar
                this.renderArea.drawString("|             A dragon foot : so much hp/so much hp             |", 45, 11);
                this.renderArea.addBackgroundColor(46, 109, 11, new Color(ColorType.HEALTH_GREEN));
                break;
            case DragonStep.STOP_TICKLING:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonStopTickling"), 5, 50, 78, "dragonStopTicklingSpeech", Database.getTranslatedText("dragonStopTickling"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonStopTicklingButton"), 50, 9, "dragonStopTicklingButton", Database.getTranslatedText("dragonStopTicklingButton"), true);
                this.renderArea.addLinkCall(".dragonStopTicklingButton", new CallbackCollection(this.okayStopTickling.bind(this)));
                break;
            case DragonStep.TALKING:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalking"), 5, 50, 78, "dragonTalkingSpeech", Database.getTranslatedText("dragonTalking"));
                // Add the challenge button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingChallengeButton"), 82, 5, "dragonTalkingChallengeButton", Database.getTranslatedText("dragonTalkingChallengeButton"));
                this.renderArea.addLinkCall(".dragonTalkingChallengeButton", new CallbackCollection(this.chooseChallenge.bind(this)));
                // Add the fame button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingFameButton"), 82, 7, "dragonTalkingFameButton", Database.getTranslatedText("dragonTalkingFameButton"));
                this.renderArea.addLinkCall(".dragonTalkingFameButton", new CallbackCollection(this.chooseFame.bind(this)));
                // Add the candies button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingCandiesButton"), 82, 9, "dragonTalkingCandiesButton", Database.getTranslatedText("dragonTalkingCandiesButton"));
                this.renderArea.addLinkCall(".dragonTalkingCandiesButton", new CallbackCollection(this.chooseCandies.bind(this)));
                break;
            case DragonStep.TALKING_CHALLENGE:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingChallengeSpeech"), 5, 50, 78, "dragonTalkingChallengeSpeech", Database.getTranslatedText("dragonTalkingChallengeSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingChallengeAnswer"), 82, 5, "dragonTalkingChallengeAnswer", Database.getTranslatedText("dragonTalkingChallengeAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingChallengeAnswer", new CallbackCollection(this.goToHell.bind(this)));
                break;
            case DragonStep.TALKING_FAME:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingFameSpeech"), 5, 50, 78, "dragonTalkingFameSpeech", Database.getTranslatedText("dragonTalkingFameSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingFameAnswer"), 82, 7, "dragonTalkingFameAnswer", Database.getTranslatedText("dragonTalkingFameAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingFameAnswer", new CallbackCollection(this.goToDeveloper.bind(this)));
                break;
            case DragonStep.TALKING_CANDIES:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingCandiesSpeech"), 5, 50, 78, "dragonTalkingCandiesSpeech", Database.getTranslatedText("dragonTalkingCandiesSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingCandiesAnswer"), 82, 9, "dragonTalkingCandiesAnswer", Database.getTranslatedText("dragonTalkingCandiesAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingCandiesAnswer", new CallbackCollection(this.getGame().goToCastle.bind(this.getGame())));
                break;
        }
    };
    return Dragon;
})(CastleRoom);
var DragonStep;
(function (DragonStep) {
    DragonStep[DragonStep["PLAYER_MOVING"] = 0] = "PLAYER_MOVING";
    DragonStep[DragonStep["PLAYER_ATTACKING"] = 1] = "PLAYER_ATTACKING";
    DragonStep[DragonStep["STOP_TICKLING"] = 2] = "STOP_TICKLING";
    DragonStep[DragonStep["TALKING"] = 3] = "TALKING";
    DragonStep[DragonStep["TALKING_CHALLENGE"] = 4] = "TALKING_CHALLENGE";
    DragonStep[DragonStep["TALKING_FAME"] = 5] = "TALKING_FAME";
    DragonStep[DragonStep["TALKING_CANDIES"] = 6] = "TALKING_CANDIES";
})(DragonStep || (DragonStep = {}));
///<reference path="QuestEntity.ts"/>
var Egg = (function (_super) {
    __extends(Egg, _super);
    // Constructor
    function Egg(quest, globalPosition, callbackWhenDying) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("An egg", "an egg"), new RenderArea(2, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(2, 1))), new QuestEntityMovement());
        // Set the callback from parameter
        this.callbackWhenDying = callbackWhenDying;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(4);
        this.setHp(4);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/egg"));
    }
    // willDie()
    Egg.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage("An egg was destroyed."));
        this.callbackWhenDying.fire();
    };
    return Egg;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var EnchantedKnightBodyArmour = (function (_super) {
    __extends(EnchantedKnightBodyArmour, _super);
    // Constructor
    function EnchantedKnightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursEnchantedKnightBodyArmour", "eqItemBodyArmoursEnchantedKnightBodyArmourName", "eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "eqItems/bodyArmours/enchantedKnightBodyArmour");
    }
    // Special ability
    EnchantedKnightBodyArmour.prototype.getSpecialAbility = function () {
        return "Dam. taken reduced by 80%, dam. inflicted divided by 2 (enchanted knight body armour)";
    };
    // hit()
    EnchantedKnightBodyArmour.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return Math.ceil(damage / 2);
    };
    // inflictDamage()
    EnchantedKnightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 80 / 100);
    };
    return EnchantedKnightBodyArmour;
})(EqItem);
///<reference path="EqItem.ts"/>
var MonkeyWizardStaffMotherClass = (function (_super) {
    __extends(MonkeyWizardStaffMotherClass, _super);
    function MonkeyWizardStaffMotherClass() {
        _super.apply(this, arguments);
    }
    // Public methods which the daughter classes can use
    MonkeyWizardStaffMotherClass.prototype.castPurpleBall = function (player, quest, target, speed) {
        if (speed === void 0) { speed = new Pos(2, 1); }
        var ball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("An magical purple ball", "a magical purple ball"), new Color(ColorType.MONKEY_WIZARD_BALL), new Pos(2, 1), 15, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("An magical purple ball", "a magical purple ball")));
        // Set the target
        ball.setTargetTypeTargetEntity(target, null, speed);
        // Add it to the quest
        quest.addEntity(ball);
    };
    MonkeyWizardStaffMotherClass.prototype.getRandomEnemy = function (player, quest) {
        // Array which will contain the indices (in the entities array) of all possible enemies
        var indices = [];
        // Fill the indices array
        for (var i = 0; i < quest.getEntities().length; i++) {
            // If this entity is destructible and is from a different team then the player
            if (quest.getEntities()[i].getDestructible() && quest.getEntities()[i].getTeam() != player.getTeam()) {
                // We add its index
                indices.push(i);
            }
        }
        // We return a random entity from the indices index
        if (indices.length > 0)
            return quest.getEntities()[indices[Random.between(0, indices.length - 1)]];
        else
            return null;
    };
    return MonkeyWizardStaffMotherClass;
})(EqItem);
///<reference path="MonkeyWizardStaffMotherClass.ts"/>
var EnchantedMonkeyWizardStaff = (function (_super) {
    __extends(EnchantedMonkeyWizardStaff, _super);
    // Constructor
    function EnchantedMonkeyWizardStaff() {
        _super.call(this, "eqItemWeaponEnchantedMonkeyWizardStaff", "eqItemWeaponEnchantedMonkeyWizardStaffName", "eqItemWeaponEnchantedMonkeyWizardStaffDescription", "eqItems/weapons/enchantedMonkeyWizardStaff");
        // Set the timer
        this.timer = 0;
    }
    // Public getters
    EnchantedMonkeyWizardStaff.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The monkey wizard staff (enchanted)", "the monkey wizard staff (enchanted)"), player.getClassicCollisionBoxCollection(), 2);
        qew.getCloseCombatDelay().setFixedDelay(0);
        return qew;
    };
    // update()
    EnchantedMonkeyWizardStaff.prototype.update = function (player, quest) {
        // Handle the timer
        if (this.timer < 4)
            this.timer += 1;
        else {
            this.timer = 0;
            var ent = this.getRandomEnemy(player, quest);
            if (ent != null)
                this.castPurpleBall(player, quest, ent);
        }
    };
    return EnchantedMonkeyWizardStaff;
})(MonkeyWizardStaffMotherClass);
var Enchantment = (function () {
    // Constructor
    function Enchantment(beforeItem, afterItem) {
        this.beforeItem = beforeItem;
        this.afterItem = afterItem;
    }
    // Public methods
    Enchantment.prototype.enchant = function () {
        // We check if we're currently wearing the before item. If so, we must stop wearing it !
        this.beforeItem.unequipIfEquipped();
        // We lose the before item and gain the after item
        Saving.saveBool(this.beforeItem.getSavingName(), false);
        Saving.saveBool(this.afterItem.getSavingName(), true);
    };
    Enchantment.prototype.isPossible = function () {
        // If we have the before item but not the after item, we return true
        if (this.beforeItem.isPossessed() == true && this.afterItem.isPossessed() == false)
            return true;
        // Else we return false
        return false;
    };
    // Public getters
    Enchantment.prototype.getAfterItem = function () {
        return this.afterItem;
    };
    Enchantment.prototype.getBeforeItem = function () {
        return this.beforeItem;
    };
    return Enchantment;
})();
var EnchantmentItem = (function () {
    // Constructor
    function EnchantmentItem(game, savingName, type) {
        this.game = game;
        this.savingName = savingName;
        this.type = type;
    }
    // Public methods
    EnchantmentItem.prototype.getText = function () {
        var text = Database.getText(this.game.getEqItemFromEqItemType(this.savingName, this.type).getDatabaseName());
        if (Database.isTranslated())
            text += " (" + Database.getTranslatedText(this.game.getEqItemFromEqItemType(this.savingName, this.type).getDatabaseName()) + ")";
        return text;
    };
    EnchantmentItem.prototype.isPossessed = function () {
        return Saving.loadBool(this.savingName);
    };
    EnchantmentItem.prototype.unequipIfEquipped = function () {
        this.game.unequipIfEquipped(this.savingName, this.type);
    };
    // Public getters
    EnchantmentItem.prototype.getSavingName = function () {
        return this.savingName;
    };
    return EnchantmentItem;
})();
// We can't use this class directly, we have to use a daughter class
var EnigmaAnswer = (function () {
    // Constructor
    function EnigmaAnswer() {
    }
    // Public methods
    EnigmaAnswer.prototype.isRight = function (answer) {
        return false;
    };
    return EnigmaAnswer;
})();
///<reference path="EnigmaAnswer.ts"/>
var EnigmaAnswerCandies = (function (_super) {
    __extends(EnigmaAnswerCandies, _super);
    // Constructor
    function EnigmaAnswerCandies(game) {
        _super.call(this);
        this.game = game;
    }
    // Public methods
    EnigmaAnswerCandies.prototype.isRight = function (answer) {
        // If the answer is the current number of candies we possess
        if (Algo.simplifyString(answer) == this.game.getCandies().getCurrent().toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 1).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 2).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 3).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 1).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 2).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 3).toString())
            return true;
        // The answer isn't correct
        return false;
    };
    return EnigmaAnswerCandies;
})(EnigmaAnswer);
///<reference path="EnigmaAnswer.ts"/>
var EnigmaAnswerStrings = (function (_super) {
    __extends(EnigmaAnswerStrings, _super);
    // Constructor
    function EnigmaAnswerStrings(validStrings) {
        _super.call(this);
        this.validStrings = validStrings;
    }
    // Public methods
    EnigmaAnswerStrings.prototype.isRight = function (answer) {
        for (var i = 0; i < this.validStrings.length; i++) {
            if (Algo.simplifyString(answer) == this.validStrings[i]) {
                // The answer is correct
                return true;
            }
        }
        // The answer isn't correct
        return false;
    };
    return EnigmaAnswerStrings;
})(EnigmaAnswer);
var EqItemType;
(function (EqItemType) {
    EqItemType[EqItemType["WEAPON"] = 0] = "WEAPON";
    EqItemType[EqItemType["HAT"] = 1] = "HAT";
    EqItemType[EqItemType["BODYARMOUR"] = 2] = "BODYARMOUR";
    EqItemType[EqItemType["GLOVES"] = 3] = "GLOVES";
    EqItemType[EqItemType["BOOTS"] = 4] = "BOOTS";
})(EqItemType || (EqItemType = {}));
///<reference path="Item.ts"/>
var GridItem = (function (_super) {
    __extends(GridItem, _super);
    // Constructor
    function GridItem(savingName, databaseName, databaseDescriptionName, ascii, position) {
        _super.call(this, savingName, databaseName, databaseDescriptionName, ascii);
        this.position = position;
    }
    // Public methods
    GridItem.prototype.update = function (player, quest) {
    };
    // Public getters
    GridItem.prototype.getPosition = function () {
        return this.position;
    };
    return GridItem;
})(Item);
///<reference path="GridItem.ts"/>
var Feather = (function (_super) {
    __extends(Feather, _super);
    function Feather() {
        _super.apply(this, arguments);
    }
    Feather.prototype.getDatabaseDescriptionName = function () {
        // If we don't have the pogo stick yet, we return a special message
        if (Saving.loadBool("gridItemPossessedPogoStick") == false)
            return "gridItemFeatherDescriptionNoPogoStick";
        // Else we return the normal description name
        return _super.prototype.getDatabaseDescriptionName.call(this);
    };
    return Feather;
})(GridItem);
///<reference path="Place.ts"/>
var House = (function (_super) {
    __extends(House, _super);
    // Constructor
    function House(game) {
        _super.call(this, game);
    }
    // Special method used to add a button to go back to the village
    House.prototype.addBackToTheVillageButton = function (renderArea, otherClass) {
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToVillage.bind(this.getGame())), Database.getText("buttonBackToTheVillage"), Database.getTranslatedText("buttonBackToTheVillage"), otherClass);
    };
    return House;
})(Place);
///<reference path="House.ts"/>
var FifthHouse = (function (_super) {
    __extends(FifthHouse, _super);
    // Constructor
    function FifthHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    FifthHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Public methods
    FifthHouse.prototype.willBeDisplayed = function () {
        // We need to update each time we're going to be displayed to avoid a "bug" in a very special case :
        // If the player is in the fifth house and the npc is asking for someone with a weapon
        // And then the player goes to its inventory, equip a weapon and then goes back to the fifth house
        // Here the fifth house must be updated so that the npc know that the player now has a weapon
        this.update();
    };
    // Private methods
    FifthHouse.prototype.beginQuest = function () {
        this.getGame().setPlace(new Cellar(this.getGame()));
    };
    FifthHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "fifthHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        // If we haven't defeated the rats yet
        if (Saving.loadBool("cellarDone") == false) {
            // If we have a weapon
            if (this.getGame().getSelectedEqItems()["weapon"] != null) {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseWeaponSpeech"), 6, 44, 67, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseWeaponSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("mapVillageFifthHouseAgree"), 69, 8, "mapVillageFifthHouseAgreeButton", Database.getTranslatedText("mapVillageFifthHouseAgree"), true);
                this.renderArea.addLinkCall(".mapVillageFifthHouseAgreeButton", new CallbackCollection(this.beginQuest.bind(this)));
            }
            else {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseNoWeaponSpeech"), 6, 44, 67, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseNoWeaponSpeech"));
            }
        }
        else {
            // Draw the speech
            this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseCellarDone"), 6, 44, 82, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseCellarDone"));
            // Change the NPC mouth
            this.renderArea.drawString("U", 52, 17);
        }
    };
    return FifthHouse;
})(House);
var FireballTargetType;
(function (FireballTargetType) {
    FireballTargetType[FireballTargetType["NO_TARGET"] = 0] = "NO_TARGET";
    FireballTargetType[FireballTargetType["TARGET_ENTITY"] = 1] = "TARGET_ENTITY";
    FireballTargetType[FireballTargetType["TARGET_STICK_ON_ENTITY"] = 2] = "TARGET_STICK_ON_ENTITY";
    FireballTargetType[FireballTargetType["TARGET_POSITION"] = 3] = "TARGET_POSITION";
})(FireballTargetType || (FireballTargetType = {}));
///<reference path="Quest.ts"/>
var Forest = (function (_super) {
    __extends(Forest, _super);
    // Constructor
    function Forest(game) {
        _super.call(this, game);
        // Various timers related to monsters handling
        this.timeSinceLastWolfAdding = 0;
        this.timeSinceLastTreeSpiritAdding = 40;
        // The ground y position
        this.groundYPosition = 20;
        // The mosquito timer (mosquitos will come when the timer reaches 0)
        this.mosquitoTimer = 250;
        // Resize the quest
        this.resizeQuest(294, this.groundYPosition + 2);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, this.groundYPosition));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround();
        // We add some wolves
        for (var i = 0; i < 10; i++) {
            this.addWolf(Random.between(80, 280));
        }
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the forest."));
    }
    // Public methods
    Forest.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, this.groundYPosition), new Pos(10, 1));
    };
    Forest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(false);
    };
    Forest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You made your way through the forest!"));
            Saving.saveBool("mainMapDoneForest", true); // The desert is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the forest. The tree's leaves should soon be covering your body."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Forest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Monsters handling
            this.monstersHandling();
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x + 98, this.getRealQuestPosition().y);
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x + 98 * 2, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Forest.prototype.addGround = function () {
        var ground = new Wall(this, new Pos(0, 0));
        ground.addBox(new Pos(0, this.groundYPosition + 1), new Pos(350, 1));
        this.addEntity(ground);
    };
    Forest.prototype.addMosquito = function () {
        return this.addEntity(new Mosquito(this, new Pos(0, this.groundYPosition - Random.between(3, 7)), this.groundYPosition));
    };
    Forest.prototype.addTreeSpirit = function (xPosition) {
        if (xPosition === void 0) { xPosition = 294; }
        var treeSpirit = new TreeSpirit(this, new Pos(xPosition, this.groundYPosition - 4), this.groundYPosition);
        treeSpirit.setHealthBar(new QuestEntityHealthBar(treeSpirit, new Pos(5, 1)));
        return this.addEntity(treeSpirit);
    };
    Forest.prototype.addWolf = function (xPosition) {
        if (xPosition === void 0) { xPosition = 294; }
        var wolf = new Wolf(this, new Pos(xPosition, this.groundYPosition - 2));
        wolf.setHealthBar(new QuestEntityHealthBar(wolf, new Pos(7, 1)));
        return this.addEntity(wolf);
    };
    Forest.prototype.monstersHandling = function () {
        // If it's time to add a tree spirit
        if (this.timeSinceLastTreeSpiritAdding > 70 && Random.flipACoin()) {
            this.addTreeSpirit(); // We add it
            this.timeSinceLastTreeSpiritAdding = 0; // We reset the timer
        }
        else
            this.timeSinceLastTreeSpiritAdding += 1; // We increase the timer
        // If it's time to add a wolf
        if (this.timeSinceLastWolfAdding > 30 && Random.oneChanceOutOf(5)) {
            this.addWolf(); // We add it
            this.timeSinceLastWolfAdding = 0; // We reset the timer
        }
        else
            this.timeSinceLastWolfAdding += 1; // We increase the timer
        // If it's time to add a mosquito
        if (this.mosquitoTimer <= 0) {
            this.addMosquito();
            this.mosquitoTimer = Random.between(5, 10);
        }
        else
            this.mosquitoTimer -= 1;
    };
    Forest.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 294)
            return true;
        // Else we return false
        return false;
    };
    return Forest;
})(Quest);
///<reference path="House.ts"/>
// The lollipop
Saving.registerBool("forgeFoundLollipop", false);
// Items sold
Saving.registerBool("forgeBoughtWoodenSword", false);
Saving.registerBool("forgeBoughtIronAxe", false);
Saving.registerBool("forgeBoughtPolishedSilverSword", false);
Saving.registerBool("forgeBoughtLightweightBodyArmour", false);
Saving.registerBool("forgeBoughtScythe", false);
var Forge = (function (_super) {
    __extends(Forge, _super);
    // Constructor
    function Forge(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // If...
        // We didn't buy one of the first three items
        if ((Saving.loadBool("forgeBoughtWoodenSword") == false || Saving.loadBool("forgeBoughtIronAxe") == false || Saving.loadBool("forgeBoughtPolishedSilverSword") == false)
            ||
                // We didn't buy the armour and we made the cave entrance
                (Saving.loadBool("forgeBoughtLightweightBodyArmour") == false && Saving.loadBool("mainMapDoneCaveEntrance") == true)
            ||
                // We didn't buy the scythe and the dragon is done
                (Saving.loadBool("forgeBoughtScythe") == false && Saving.loadBool("dragonDone") == true)) {
            // We set the normal introduction speech
            this.currentSpeech = "mapVillageForgeIntroductionSpeech";
        }
        else {
            // We set the no more to sell introduction speech
            this.currentSpeech = "mapVillageForgeIntroductionSpeechNoMoreToSell";
        }
        this.renderArea.resizeFromArray(Database.getAscii("places/village/forge"), 0, 3);
        this.update();
    }
    // getRenderArea()
    Forge.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Forge.prototype.clickedBuyIronAxeButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 400) {
            this.getGame().getCandies().add(-400); // -400 candies
            Saving.saveBool("forgeBoughtIronAxe", true); // We bought the axe
            this.getGame().gainItem("eqItemWeaponIronAxe"); // We now own the axe
            this.currentSpeech = "mapVillageForgeBuyIronAxeSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyLightweightBodyArmourButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 15000) {
            this.getGame().getCandies().add(-15000); // -15000 candies
            Saving.saveBool("forgeBoughtLightweightBodyArmour", true); // We bought the armour
            this.getGame().gainItem("eqItemBodyArmoursLightweightBodyArmour"); // We now own the armour
            this.currentSpeech = "mapVillageForgeBuyLightweightBodyArmourSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyPolishedSilverSwordButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 2000) {
            this.getGame().getCandies().add(-2000); // -2000 candies
            Saving.saveBool("forgeBoughtPolishedSilverSword", true); // We bought the sword
            this.getGame().gainItem("eqItemWeaponPolishedSilverSword"); // We now own the sword
            this.currentSpeech = "mapVillageForgeBuyPolishedSilverSwordSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyScytheButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 5000000) {
            this.getGame().getCandies().add(-5000000); // -5000000 candies
            Saving.saveBool("forgeBoughtScythe", true); // We bought the scythe
            this.getGame().gainItem("eqItemWeaponScythe"); // We now own the scythe
            this.currentSpeech = "mapVillageForgeBuyScytheSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyWoodenSwordButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 150) {
            this.getGame().getCandies().add(-150); // -150 candies
            Saving.saveBool("forgeBoughtWoodenSword", true); // We bought the sword
            this.getGame().gainItem("eqItemWeaponWoodenSword"); // We now own the sword
            this.currentSpeech = "mapVillageForgeBuyWoodenSwordSpeech"; // New speech
            Saving.saveBool("statusBarUnlockedInventory", true); // We unlock the inventory
            this.getGame().updateStatusBar(true); // We update the status bar
            this.getGame().getStatusBar().selectTabByType(StatusBarTabType.MAP); // We re-select the map tab (because adding the inventory tab created a gap in tab selection..)
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.drawLollipopStuff = function (x, y) {
        // If we didn't find the lollipop yet
        if (Saving.loadBool("forgeFoundLollipop") == false) {
            // We add a button to take the lollipop on the cupboard
            this.renderArea.addAsciiButton(x, x + 5, y, "forgeLollipopButton");
            // We add the link
            this.renderArea.addLinkCall(".forgeLollipopButton", new CallbackCollection(this.takeLollipop.bind(this)));
        }
        else {
            // We erase the lollipop
            this.renderArea.drawString("      ", x, y);
        }
    };
    Forge.prototype.takeLollipop = function () {
        // If we didn't get the lollipop yet
        if (Saving.loadBool("forgeFoundLollipop") == false) {
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Set the bool
            Saving.saveBool("forgeFoundLollipop", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheVillageButton(this.renderArea, "forgeBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/forge"), 0, 3);
        // Draw the stuff about the lollipop
        this.drawLollipopStuff(18, 15);
        // Draw the blacksmith's speech
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), 13, 44, 67, "forgeSpeech", Database.getTranslatedText(this.currentSpeech));
        // Draw the buttons
        // If we never bought the wooden sword and we don't have one
        if (Saving.loadBool("forgeBoughtWoodenSword") == false && Saving.loadBool("eqItemWeaponWoodenSword") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyWoodenSwordButton"), 8, 35, "mapVillageForgeBuyWoodenSwordButton", Database.getTranslatedText("mapVillageForgeBuyWoodenSwordButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyWoodenSwordButton", new CallbackCollection(this.clickedBuyWoodenSwordButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtWoodenSword") == true && Saving.loadBool("forgeBoughtIronAxe") == false && Saving.loadBool("eqItemWeaponIronAxe") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyIronAxeButton"), 8, 35, "mapVillageForgeBuyIronAxeButton", Database.getTranslatedText("mapVillageForgeBuyIronAxeButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyIronAxeButton", new CallbackCollection(this.clickedBuyIronAxeButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtIronAxe") == true && Saving.loadBool("forgeBoughtPolishedSilverSword") == false && Saving.loadBool("eqItemWeaponPolishedSilverSword") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyPolishedSilverSwordButton"), 8, 35, "mapVillageForgeBuyPolishedSilverSwordButton", Database.getTranslatedText("mapVillageForgeBuyPolishedSilverSwordButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyPolishedSilverSwordButton", new CallbackCollection(this.clickedBuyPolishedSilverSwordButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtPolishedSilverSword") == true && Saving.loadBool("forgeBoughtLightweightBodyArmour") == false && Saving.loadBool("eqItemBodyArmoursLightweightBodyArmour") == false && Saving.loadBool("mainMapDoneCaveEntrance")) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyLightweightBodyArmourButton"), 8, 35, "mapVillageForgeBuyLightweightBodyArmourButton", Database.getTranslatedText("mapVillageForgeBuyLightweightBodyArmourButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyLightweightBodyArmourButton", new CallbackCollection(this.clickedBuyLightweightBodyArmourButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtLightweightBodyArmour") == true && Saving.loadBool("forgeBoughtScythe") == false && Saving.loadBool("eqItemWeaponScythe") == false && Saving.loadBool("dragonDone")) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyScytheButton"), 8, 35, "mapVillageForgeBuyScytheButton", Database.getTranslatedText("mapVillageForgeBuyScytheButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyScytheButton", new CallbackCollection(this.clickedBuyScytheButton.bind(this)));
        }
    };
    return Forge;
})(House);
///<reference path="Quest.ts"/>
Saving.registerBool("fortressRoom1ChestFound", false);
var FortressRoom1 = (function (_super) {
    __extends(FortressRoom1, _super);
    // Constructor
    function FortressRoom1(game) {
        _super.call(this, game);
        // Did we open the chest?
        this.chestOpened = false;
        // Resize the quest
        this.resizeQuest(208, 31);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 7));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the spikes
        this.addSpikes(new Spikes(this, new Pos(16, 30), 18));
        this.addSpikes(new Spikes(this, new Pos(43, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(53, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(85, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(161, 30), 12));
        this.addSpikes(new Spikes(this, new Pos(180, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(117, 9), 4));
        this.addSpikes(new Spikes(this, new Pos(121, 14), 4));
        this.addSpikes(new Spikes(this, new Pos(125, 19), 4));
        this.addSpikes(new Spikes(this, new Pos(129, 24), 4));
        // Add the xinopherydon
        this.addXinopherydon(new Pos(181, 2));
        // Add the chest
        this.addEntity(new Chest(this, new Pos(203, 24), false, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("fortressRoom1ChestFound")));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the first room. It seems tricky."));
    }
    // Public methods
    FortressRoom1.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(2, 3), new Pos(1, 1));
    };
    FortressRoom1.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    FortressRoom1.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
        // If we won and we opened the chest, we confirm that we found it
        if (win && this.chestOpened) {
            Saving.saveBool("fortressRoom1ChestFound", true);
        }
    };
    FortressRoom1.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room1"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    FortressRoom1.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };
    FortressRoom1.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(208, 2));
        wall.addBox(new Pos(0, 8), new Pos(15, 1));
        wall.addBox(new Pos(0, 9), new Pos(16, 22));
        wall.addBox(new Pos(34, 2), new Pos(5, 11));
        wall.addBox(new Pos(34, 15), new Pos(9, 16));
        wall.addBox(new Pos(47, 13), new Pos(6, 18));
        wall.addBox(new Pos(57, 11), new Pos(6, 20));
        wall.addBox(new Pos(63, 19), new Pos(22, 12));
        wall.addBox(new Pos(66, 11), new Pos(4, 7));
        wall.addBox(new Pos(74, 11), new Pos(3, 7));
        wall.addBox(new Pos(80, 11), new Pos(5, 7));
        wall.addBox(new Pos(89, 10), new Pos(14, 5));
        wall.addBox(new Pos(89, 15), new Pos(20, 5));
        wall.addBox(new Pos(89, 20), new Pos(26, 5));
        wall.addBox(new Pos(89, 25), new Pos(72, 6));
        wall.addBox(new Pos(106, 10), new Pos(37, 2));
        wall.addBox(new Pos(112, 15), new Pos(31, 2));
        wall.addBox(new Pos(118, 20), new Pos(25, 2));
        wall.addBox(new Pos(200, 2), new Pos(8, 1));
        wall.addBox(new Pos(201, 3), new Pos(7, 4));
        wall.addBox(new Pos(200, 7), new Pos(8, 1));
        wall.addBox(new Pos(157, 8), new Pos(51, 10));
        wall.addBox(new Pos(157, 18), new Pos(25, 1));
        wall.addBox(new Pos(157, 19), new Pos(24, 1));
        wall.addBox(new Pos(157, 20), new Pos(23, 1));
        wall.addBox(new Pos(157, 21), new Pos(22, 1));
        wall.addBox(new Pos(173, 25), new Pos(7, 6));
        wall.addBox(new Pos(184, 23), new Pos(3, 2));
        wall.addBox(new Pos(207, 18), new Pos(1, 6));
        wall.addBox(new Pos(206, 24), new Pos(2, 1));
        wall.addBox(new Pos(184, 25), new Pos(24, 6));
        // Add the wall entity
        this.addEntity(wall);
    };
    FortressRoom1.prototype.addXinopherydon = function (pos) {
        var xino = new Xinopherydon(this, pos);
        xino.setHealthBar(new QuestEntityHealthBar(xino, new Pos(41, 1), new Pos(158, 2), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(xino);
    };
    FortressRoom1.prototype.openChest = function () {
        this.chestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedUnicornHorn", "You opened a chest and found a unicorn horn!", "You gain a unicorn horn."));
    };
    return FortressRoom1;
})(Quest);
///<reference path="Quest.ts"/>
var FortressRoom2 = (function (_super) {
    __extends(FortressRoom2, _super);
    // Constructor
    function FortressRoom2(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 17);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 13));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addWalls();
        // Add the chest
        this.addTeapot();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the second room. There's a giant teapot in the center."));
    }
    // Public methods
    FortressRoom2.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    FortressRoom2.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    FortressRoom2.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room2"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    FortressRoom2.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 4));
        wall.addBox(new Pos(96, 4), new Pos(4, 1));
        wall.addBox(new Pos(97, 5), new Pos(3, 8));
        wall.addBox(new Pos(96, 13), new Pos(4, 1));
        wall.addBox(new Pos(0, 14), new Pos(20, 1));
        wall.addBox(new Pos(79, 14), new Pos(21, 1));
        wall.addBox(new Pos(0, 15), new Pos(37, 1));
        wall.addBox(new Pos(59, 15), new Pos(41, 1));
        wall.addBox(new Pos(0, 16), new Pos(100, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    FortressRoom2.prototype.addTeapot = function () {
        var teapot = new Teapot(this, new Pos(39, 9));
        teapot.setHealthBar(new QuestEntityHealthBar(teapot, new Pos(96, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, false, true, BarType.HEALTH));
        this.addEntity(teapot);
    };
    return FortressRoom2;
})(Quest);
///<reference path="Quest.ts"/>
Saving.registerBool("fortressRoom3ChestFound", false);
var FortressRoom3 = (function (_super) {
    __extends(FortressRoom3, _super);
    // Constructor
    function FortressRoom3(game) {
        _super.call(this, game);
        // Did we open the chest?
        this.chestOpened = false;
        // Resize the quest
        this.resizeQuest(100, 31);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 30));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addWalls();
        // Add the chest
        this.addEntity(new Chest(this, new Pos(87, 6), false, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("fortressRoom3ChestFound")));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the third room. There's a chest up there. How to reach it?!"));
    }
    // Public methods
    FortressRoom3.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(2, 26), new Pos(1, 1));
    };
    FortressRoom3.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    FortressRoom3.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
        // If we won and we opened the chest, we confirm that we found it
        if (win && this.chestOpened) {
            Saving.saveBool("fortressRoom3ChestFound", true);
        }
    };
    FortressRoom3.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room3"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    FortressRoom3.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(16, 23));
        wall.addBox(new Pos(90, 2), new Pos(10, 1));
        wall.addBox(new Pos(91, 3), new Pos(9, 3));
        wall.addBox(new Pos(90, 6), new Pos(10, 1));
        wall.addBox(new Pos(82, 7), new Pos(18, 24));
        wall.addBox(new Pos(0, 31), new Pos(100, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    FortressRoom3.prototype.openChest = function () {
        this.chestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "eqItemBootsRocketBoots", "You opened a chest and found rocket boots!", "You gain rocket boots."));
    };
    return FortressRoom3;
})(Quest);
///<reference path="House.ts"/>
Saving.registerBool("fourthHouseFoundLollipopOnCupboard", false);
Saving.registerNumber("fourthHouseCupboardStep", 0); // 0 : closed ; 1 : opened ; 2 : lollipop taken
Saving.registerNumber("fourthHouseCarpetStep", 0); // 0 : lollipop still under the carpet ; 1 : lollipop outside ; 2 : lollipop taken
var FourthHouse = (function (_super) {
    __extends(FourthHouse, _super);
    // Constructor
    function FourthHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/village/fourthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    FourthHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    FourthHouse.prototype.clickOnCarpet = function () {
        // If we never clicked on the carpet
        if (Saving.loadNumber("fourthHouseCarpetStep") == 0) {
            // Set the step
            Saving.saveNumber("fourthHouseCarpetStep", 1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.drawCarpetStuff = function (x, y) {
        // We do different things depending on the step
        switch (Saving.loadNumber("fourthHouseCarpetStep")) {
            case 0:
                // We add a button on the area of the carpet around the lollipop
                this.renderArea.addMultipleAsciiButtons("fourthHouseCarpetButton", x - 2, x + 2, y - 1, x - 6, x + 1, y, x - 4, x, y + 1);
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseCarpetButton", new CallbackCollection(this.clickOnCarpet.bind(this)));
                break;
            case 1:
                // We draw the lollipop
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseLollipopUnderCarpet"), x, y);
                // We add a button on the lollipop
                this.renderArea.addAsciiButton(x, x + 4, y, "fourthHouseLollipopUnderCarpetButton");
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseLollipopUnderCarpetButton", new CallbackCollection(this.pickCarpetLollipop.bind(this)));
                break;
            case 2:
                break;
        }
    };
    FourthHouse.prototype.drawLollipopOnCupboardStuff = function (x, y) {
        // If we didn't find the lollipop yet
        if (Saving.loadBool("fourthHouseFoundLollipopOnCupboard") == false) {
            // We add a button to take the lollipop on the cupboard
            this.renderArea.addAsciiButton(x + 8, x + 13, y + 1, "fourthHouseLollipopOnCupboardButton");
            // We add the link
            this.renderArea.addLinkCall(".fourthHouseLollipopOnCupboardButton", new CallbackCollection(this.takeLollipopOnCupboard.bind(this)));
        }
        else {
            // We draw the no lollipop ascii art
            this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseNoLollipopOnCupboard"), x, y);
        }
    };
    FourthHouse.prototype.drawOpenCupboardStuff = function (x, y) {
        // We do different things depending on the step
        switch (Saving.loadNumber("fourthHouseCupboardStep")) {
            case 0:
                // We add a button on the cupboard's door
                this.renderArea.addMultipleAsciiButtons("fourthHouseCupboardDoorButton", x, x + 7, y, x, x + 7, y + 1, x, x + 7, y + 2, x, x + 7, y + 3, x, x + 7, y + 4, x, x + 7, y + 5, x, x + 7, y + 6, x, x + 7, y + 7, x, x + 7, y + 8, x, x + 7, y + 9, x, x + 7, y + 10, x, x + 7, y + 11, x, x + 7, y + 12);
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseCupboardDoorButton", new CallbackCollection(this.openCupboard.bind(this)));
                break;
            case 1:
                // We draw the opened cupboard with the lollipop in it
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseCupboardOpenedWithLollipop"), x - 2, y);
                // We add a button on the lollipop
                this.renderArea.addAsciiButton(x + 4, x + 6, y + 7, "fourthHouseLollipopInsideCupboardButton");
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseLollipopInsideCupboardButton", new CallbackCollection(this.takeLollipopInsideCupboard.bind(this)));
                break;
            case 2:
                // We draw the opened cupboard without lollipop
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseCupboardOpenedWithoutLollipop"), x - 2, y);
                break;
        }
    };
    FourthHouse.prototype.openCupboard = function () {
        // If the cupboard isn't opened yet
        if (Saving.loadNumber("fourthHouseCupboardStep") == 0) {
            // Set the step
            Saving.saveNumber("fourthHouseCupboardStep", 1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.pickCarpetLollipop = function () {
        // If the lollipop is outside the carpet
        if (Saving.loadNumber("fourthHouseCarpetStep") == 1) {
            // Set the step
            Saving.saveNumber("fourthHouseCarpetStep", 2);
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.takeLollipopInsideCupboard = function () {
        // If the cupboard is opened with the lollipop inside it
        if (Saving.loadNumber("fourthHouseCupboardStep") == 1) {
            // Set the step
            Saving.saveNumber("fourthHouseCupboardStep", 2);
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.takeLollipopOnCupboard = function () {
        // If we didn't get the lollipop yet
        if (Saving.loadBool("fourthHouseFoundLollipopOnCupboard") == false) {
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Set the bool
            Saving.saveBool("fourthHouseFoundLollipopOnCupboard", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheVillageButton(this.renderArea, "fourthHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/fourthHouse"), 0, 3);
        // Draw stuff about the lollipop on the cupboard
        this.drawLollipopOnCupboardStuff(35, 11);
        // Draw stuff about opening the cupboard
        this.drawOpenCupboardStuff(35, 14);
        // Draw stuff about the lollipop under the carpet
        this.drawCarpetStuff(41, 32);
    };
    return FourthHouse;
})(House);
var ThirdHouseGame = (function () {
    // Constructor
    function ThirdHouseGame(thirdHouse) {
        // Set the third house from parameter
        this.thirdHouse = thirdHouse;
        // Create the area
        this.renderArea = new RenderArea(53, 12);
        // Set the quest slowed down variable at the game level (and the quest speed up too)
        this.thirdHouse.getGame().setQuestSlowedDown(false);
        this.thirdHouse.getGame().setQuestSpeedUp(0);
    }
    // Public methods
    ThirdHouseGame.prototype.pressedDownButton = function () {
    };
    ThirdHouseGame.prototype.pressedSpaceButton = function () {
    };
    ThirdHouseGame.prototype.pressedUpButton = function () {
    };
    ThirdHouseGame.prototype.run = function () {
        return true;
    };
    // Public getters
    ThirdHouseGame.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    ThirdHouseGame.prototype.getThirdHouse = function () {
        return this.thirdHouse;
    };
    return ThirdHouseGame;
})();
///<reference path="ThirdHouseGame.ts"/>
Saving.registerNumber("galacticWarsBestScore", 0);
var GalacticWars = (function (_super) {
    __extends(GalacticWars, _super);
    function GalacticWars() {
        _super.apply(this, arguments);
        // The global step of the game (splash screen, the menu, or the game itself
        this.step = GalacticWarsStep.SPLASH_SCREEN;
        // The timer used for the splash screen
        this.splashScreenTimer = 47;
        // Asteroids
        this.asteroids = [];
        // Should we exit the game?
        this.exitGame = false;
    }
    // Public methods
    GalacticWars.prototype.run = function () {
        // To store the return value
        var returnValue = false;
        // If we should exit the game, we return true
        if (this.exitGame)
            return true;
        // Reset the area
        this.getRenderArea().resetAllButSize();
        // Do something different depending on the step
        switch (this.step) {
            case GalacticWarsStep.SPLASH_SCREEN:
                this.drawSplashScreen();
                returnValue = this.runSplashScreen();
                break;
            case GalacticWarsStep.GAME:
                this.drawGame();
                returnValue = this.runGame();
                break;
            case GalacticWarsStep.LOSE:
                this.drawLose();
                returnValue = false;
                break;
        }
        // We return
        return returnValue;
    };
    // Private methods
    GalacticWars.prototype.addAsteroids = function () {
        // Get the space sector we're in (0 to 3)
        var spaceSector = Math.floor(this.score / 100) % 4;
        // Get the space difficulty (0 to x)
        var spaceDifficulty = Math.floor(Math.floor(this.score / 100) / 4);
        // Get the spaceSeed43 (0 to 43), the spaceSeed21 (0 to 21) and the spaceSeed10 (0 to 10)
        var spaceSeed43 = this.score % 44;
        var spaceSeed21 = Math.floor(spaceSeed43 / 2);
        var spaceSeed10 = Math.floor(spaceSeed21 / 2);
        // Add different asteroids depending on the sector, the difficulty, and the seed
        switch (spaceSector) {
            // First sector : the seed is riding our tunnels, officer!
            case 0:
                switch (spaceDifficulty) {
                    case 0:
                        if (spaceSeed43 < 11 && spaceSeed21 < 6)
                            this.addAsteroid(spaceSeed10);
                        else if (spaceSeed43 > 29 && spaceSeed21 > 14)
                            this.addAsteroid(spaceSeed10);
                        break;
                    case 1:
                        if (spaceSeed43 < 13 && spaceSeed21 < 7)
                            this.addAsteroid(spaceSeed10);
                        else if (spaceSeed43 > 27 && spaceSeed21 > 13)
                            this.addAsteroid(spaceSeed10);
                        break;
                    default:
                        if (spaceSeed43 < 15 && spaceSeed21 < 8)
                            this.addAsteroid(spaceSeed10);
                        else if (spaceSeed43 > 25 && spaceSeed21 > 12)
                            this.addAsteroid(spaceSeed10);
                        break;
                }
                break;
            // Second sector
            case 1:
                switch (spaceDifficulty) {
                    case 0:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 15) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                    case 1:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 12) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                    default:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 10) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                }
                break;
            // Third sector
            case 2:
                switch (spaceDifficulty) {
                    case 0:
                        if (this.score % 25 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                    case 1:
                        if (this.score % 20 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                    default:
                        if (this.score % 15 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                }
                break;
            // Fourth sector : a bit of randomness
            case 3:
                switch (spaceDifficulty) {
                    case 0:
                        if (Random.oneChanceOutOf(15))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    case 1:
                        if (Random.oneChanceOutOf(10))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    case 2:
                        if (Random.oneChanceOutOf(7))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    default:
                        if (Random.oneChanceOutOf(5))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                }
                break;
        }
    };
    GalacticWars.prototype.addAsteroid = function (y) {
        this.asteroids.push(new Pos(53, y));
    };
    GalacticWars.prototype.checkCollision = function () {
        // If the ship is outside the screen, we return true
        if (this.shipYPosition < 0)
            return true;
        if (this.shipYPosition > 9)
            return true;
        // No collision, we return false
        return false;
    };
    GalacticWars.prototype.checkCollisionWithAsteroids = function () {
        // Boolean used to know if we already lose one hp or not
        var loseOneHp = false;
        for (var i = 0; i < this.asteroids.length; i++) {
            // There's a collision
            if (this.shipCollidesWithThisPos(this.asteroids[i])) {
                if (loseOneHp == false) {
                    // We lose one hp
                    this.hp -= 1;
                    loseOneHp = true;
                }
                // We destroy the asteroid
                this.asteroids.splice(i, 1);
                i--;
            }
        }
        // If we have less than 1 hp, we return true
        if (this.hp < 1)
            return true;
        // Else, we return false
        return false;
    };
    GalacticWars.prototype.drawGame = function () {
        // Draw the score
        this.getRenderArea().drawString("Score : " + this.score.toString(), 0, 0);
        // Draw hp
        this.getRenderArea().drawString("| HP : " + this.hp.toString(), 43, 0);
        // Draw the power
        this.getRenderArea().drawString("| Power : [", 14, 0);
        this.getRenderArea().drawHorizontalLine("x", 25, 25 + Math.floor(this.power / 150 * 16), 0);
        this.getRenderArea().drawString("]", 41, 0);
        // Draw the ship
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/ship"), 0, 1 + this.shipYPosition);
        // Draw asteroids
        for (var i = 0; i < this.asteroids.length; i++) {
            this.getRenderArea().drawString("O", this.asteroids[i].x, 1 + this.asteroids[i].y);
        }
    };
    GalacticWars.prototype.drawLose = function () {
        // Draw "you lose"
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/youLose"), 8, 1);
        // Draw the candies we won
        this.getRenderArea().drawString("Score : " + this.score + ".", 8, 7);
        this.getRenderArea().drawString("You gain " + (this.score + Algo.correctIfUnderZero(this.score - 1000) * 30) + " candies.", 8, 8);
        this.getRenderArea().drawString("Best score : " + Saving.loadNumber("galacticWarsBestScore") + ".", 8, 10);
    };
    GalacticWars.prototype.drawSplashScreen = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/splashScreen"), -87 + this.splashScreenTimer * 3, 2);
    };
    GalacticWars.prototype.goToLose = function () {
        // Change the step
        this.step = GalacticWarsStep.LOSE;
        // Get the candies
        this.getThirdHouse().getGame().getCandies().add(this.score + Algo.correctIfUnderZero(this.score - 1000) * 30);
        // Update the best score
        if (this.score > Saving.loadNumber("galacticWarsBestScore"))
            Saving.saveNumber("galacticWarsBestScore", this.score);
    };
    GalacticWars.prototype.goToGame = function () {
        // Change the step
        this.step = GalacticWarsStep.GAME;
        // Set some useful parameters
        this.score = 2;
        this.shipYPosition = 4;
        this.hp = 10;
        this.power = 150;
        this.maxPower = 150;
        // Set the quest speedup
        this.getThirdHouse().getGame().setQuestSpeedUp(-50);
    };
    GalacticWars.prototype.pressedDownButton = function () {
    };
    GalacticWars.prototype.pressedSpaceButton = function () {
        // Variable used when deleting asteroids
        var oldI;
        // If we pressed space and we were losing, we should now exit the game
        if (this.step == GalacticWarsStep.LOSE)
            this.exitGame = true;
        else if (this.step == GalacticWarsStep.GAME) {
            // If we have enough power
            if (this.power == this.maxPower) {
                // We delete 3/4 of the asteroids
                oldI = 0;
                for (var i = 0; i < this.asteroids.length; i++) {
                    if ((oldI % 5) != 0) {
                        this.asteroids.splice(i, 1);
                        i--;
                    }
                    oldI++;
                }
                // We have no more power
                this.power = 0;
            }
        }
    };
    GalacticWars.prototype.pressedUpButton = function () {
    };
    GalacticWars.prototype.runGame = function () {
        // Variable used to calc the quest speedup later
        var questSpeedUp = 0;
        // Handle the keys
        if (Keyboard.isKeyPressed("down")) {
            // We try to make the ship go down
            this.shipYPosition += 1;
            // If there's a collision, we revert
            if (this.checkCollision())
                this.shipYPosition -= 1;
        }
        else if (Keyboard.isKeyPressed("up")) {
            // We try to make the ship go up
            this.shipYPosition -= 1;
            // If there's a collision, we revert
            if (this.checkCollision())
                this.shipYPosition += 1;
        }
        // Shift asteroids on the left
        for (var i = 0; i < this.asteroids.length; i++) {
            // If we can shift it, we do so
            if (this.asteroids[i].x > 0)
                this.asteroids[i].x -= 1;
            else {
                this.asteroids.splice(i, 1);
                i--;
            }
        }
        // Add asteroids
        this.addAsteroids();
        // Increase the score
        this.score = Math.ceil(Math.pow(this.score, 1.00015));
        // Increase the power
        if (this.power < this.maxPower)
            this.power += 1;
        // Check the collision of the player with asteroids
        if (this.checkCollisionWithAsteroids())
            this.goToLose();
        return false;
    };
    GalacticWars.prototype.runSplashScreen = function () {
        // If the timer is >= 0
        if (this.splashScreenTimer >= 0) {
            // Reduce the timer
            this.splashScreenTimer -= 1;
        }
        else {
            // Switch to the next step
            this.goToGame();
        }
        // We can't end the game during the splash screen
        return false;
    };
    GalacticWars.prototype.shipCollidesWithThisPos = function (pos) {
        if (pos.x < 0)
            return false;
        if (pos.x > 10)
            return false;
        if (pos.y < this.shipYPosition)
            return false;
        if (pos.y > this.shipYPosition + 1)
            return false;
        return true;
    };
    return GalacticWars;
})(ThirdHouseGame);
var GalacticWarsStep;
(function (GalacticWarsStep) {
    GalacticWarsStep[GalacticWarsStep["SPLASH_SCREEN"] = 0] = "SPLASH_SCREEN";
    GalacticWarsStep[GalacticWarsStep["GAME"] = 1] = "GAME";
    GalacticWarsStep[GalacticWarsStep["LOSE"] = 2] = "LOSE";
})(GalacticWarsStep || (GalacticWarsStep = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var RenderLocation = (function () {
    // Constructor
    function RenderLocation(locationString, scrolling) {
        if (scrolling === void 0) { scrolling = false; }
        this.scrolling = null;
        this.setLocationString(locationString);
        this.setScrolling(scrolling);
    }
    // Public methods
    RenderLocation.prototype.render = function (renderArea) {
        $(this.locationString).html(renderArea.getForRendering());
        renderArea.runLinks();
    };
    RenderLocation.prototype.setContentGap = function (gap) {
        var ex, outerWidth, addGap = 0;
        // Get our outer width
        outerWidth = $(this.locationString).outerWidth();
        // Get the real ex value
        ex = this.getRealExValueFromTheStatusBar();
        // If our outerWidth is bigger than the window, calc an additional gap
        if (outerWidth > $(window).width())
            addGap = -(outerWidth - $(window).width()) / 2;
        // Finally change the "left" value of our div
        $(this.locationString).css({ "left": ((gap / 2) * ex + addGap).toString() + "px" });
    };
    // Public setters    
    RenderLocation.prototype.setLocationString = function (locationString) {
        this.locationString = locationString;
    };
    RenderLocation.prototype.setScrolling = function (scrolling, defaultScroll) {
        if (defaultScroll === void 0) { defaultScroll = 0; }
        // If the scrolling is different
        if (this.scrolling != scrolling) {
            this.scrolling = scrolling;
            // We initialize or stop scrolling, depending on the new scrolling value
            if (this.scrolling)
                this.initScrolling(defaultScroll);
            else
                this.stopScrolling();
        }
    };
    // Public getters
    RenderLocation.prototype.getScroll = function () {
        return $("html").scrollTop();
    };
    RenderLocation.prototype.getScrolling = function () {
        return this.scrolling;
    };
    // Private methods
    RenderLocation.prototype.getRealExValueFromTheStatusBar = function () {
        // DISCLAIMER
        // Yes, I know that this method is really ugly
        // But if I don't do this way, there are some stupid gaps in long quests and the browser zooms in and out (or even without zooming in Chrome)
        // If anyone has a better cross-browser solution, please tell me!
        // Return the real "ex" value in pixels
        return $("#statusBar").outerWidth() / 100;
    };
    RenderLocation.prototype.initScrolling = function (defaultScroll) {
        // Scroll to the default scroll
        $("html").scrollTop(defaultScroll);
        // Set css for our location string
        $(this.locationString).css({
            'position': 'absolute',
            'left': '0',
            'top': '0',
            'overflow-x': 'scroll'
        });
        // Set css for around the status bar
        $("#aroundStatusBar").css({
            'position': 'fixed',
            'top': '0',
            'left': '0',
            'right': '0',
            'height': '0'
        });
    };
    RenderLocation.prototype.stopScrolling = function () {
        // Set the scroll to 0
        $("html").scrollTop(0);
        // Reset css for our location string
        $(this.locationString).css({
            'position': 'relative',
            'overflow-x': 'hidden'
        });
        // Reset css for around the status bar
        $("#aroundStatusBar").css({
            'position': 'relative',
            'top': 'auto',
            'left': 'auto',
            'right': 'auto',
            'height': 'auto'
        });
    };
    return RenderLocation;
})();
///<reference path="Place.ts"/>
///<reference path="RenderLocation.ts"/>
///<reference path="RenderArea.ts"/>
///<reference path="Resource.ts"/>
// Config
Saving.registerBool("gameDebug", false);
Saving.registerString("gameLanguage", "en");
Saving.registerBool("gameInvertedColors", false);
// EqItems
Saving.registerString("gameWeaponSelected", "inventorySpecialNothingWeapon");
Saving.registerString("gameHatSelected", "inventorySpecialNothingHat");
Saving.registerString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
Saving.registerString("gameGlovesSelected", "inventorySpecialNothingGloves");
Saving.registerString("gameBootsSelected", "inventorySpecialNothingBoots");
// Stuff about gaining lollipops each second
Saving.registerNumber("gameSecondsElapsedSinceLastLollipopsProduction", 0);
// Resources
Saving.registerNumber("gameCandiesAccumulated", 0);
Saving.registerNumber("gameCandiesCurrent", 0);
Saving.registerNumber("gameCandiesMax", 0);
Saving.registerNumber("gameLollipopsAccumulated", 0);
Saving.registerNumber("gameLollipopsCurrent", 0);
Saving.registerNumber("gameLollipopsMax", 0);
Saving.registerNumber("gameChocolateBarsAccumulated", 0);
Saving.registerNumber("gameChocolateBarsCurrent", 0);
Saving.registerNumber("gameChocolateBarsMax", 0);
Saving.registerNumber("gamePainsAuChocolatAccumulated", 0);
Saving.registerNumber("gamePainsAuChocolatCurrent", 0);
Saving.registerNumber("gamePainsAuChocolatMax", 0);
Saving.registerNumber("gameCandiesEatenAccumulated", 0);
Saving.registerNumber("gameCandiesEatenCurrent", 0);
Saving.registerNumber("gameCandiesEatenMax", 0);
Saving.registerNumber("gameCandiesThrownAccumulated", 0);
Saving.registerNumber("gameCandiesThrownCurrent", 0);
Saving.registerNumber("gameCandiesThrownMax", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesAccumulated", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesCurrent", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesMax", 0);
Saving.registerNumber("gameCandiesInCauldronAccumulated", 0);
Saving.registerNumber("gameCandiesInCauldronCurrent", 0);
Saving.registerNumber("gameCandiesInCauldronMax", 0);
Saving.registerNumber("gameLollipopsInCauldronAccumulated", 0);
Saving.registerNumber("gameLollipopsInCauldronCurrent", 0);
Saving.registerNumber("gameLollipopsInCauldronMax", 0);
// Gifts
Saving.registerNumber("gameGiftPower", 0);
Saving.registerNumber("gameGiftHealth", 0);
Saving.registerNumber("gameGiftMagic", 0);
// The gamemode
Saving.registerString("gameGameMode", "normal");
var Game = (function () {
    // Constructor
    function Game(gameMode) {
        // Render locations
        this.statusBarLocation = new RenderLocation("#statusBar");
        this.mainContentLocation = new RenderLocation("#mainContent");
        this.candiesUsedToRequestFeatures = new Resource("gameCandiesUsedToRequestFeatures");
        this.candiesInCauldron = new Resource("gameCandiesInCauldron");
        this.lollipopsInCauldron = new Resource("gameLollipopsInCauldron");
        // Grid items
        this.gridItems = {};
        // EqItems
        this.weapons = {};
        this.hats = {};
        this.bodyArmours = {};
        this.gloves = {};
        this.boots = {};
        // EqItems selected from the various arrays above (the selection being made in the inventory tab)
        this.selectedEqItems = {};
        // The quest log
        this.questLog = new QuestLog();
        // Locations
        this.place = null;
        this.savedPlace = null;
        // Hotkeys
        this.hotkeys = {}; // Hotkeys used by the places
        this.specialHotkeys = []; // Special hotkeys, not linked to the places we visit (used to switch tabs, for example)
        // Some info bools
        this.weAreQuesting = false;
        // Callbacks
        this.oneSecondCallbackCollection = new CallbackCollection();
        this.questCallbackCollection = new CallbackCollection();
        // Is the quest slowed down ?
        this.questSlowedDown = false;
        // Local autosave
        this.localAutosaveEnabled = false;
        this.localAutosaveSlot = null;
        this.localAutosaveTime = null; // Time in seconds before the next save
        // Is the status bar allowed to use the n key to go to the next tab? (this is set to false when using the computer...)
        this.isStatusBarAllowedToUseTheNKey = true;
        // We save the game mode given in parameter
        if (gameMode != null)
            Saving.saveString("gameGameMode", gameMode);
        // We create the grid items
        this.createGridItems();
        // We create the eqItems
        this.createEqItems();
        // We create the status bar
        this.statusBar = new StatusBar(this, 0);
        // We create the player
        this.player = new Player(this);
        // We create the resources
        this.candies = new Candies(this, "gameCandies");
        this.lollipops = new Lollipops(this, "gameLollipops");
        this.chocolateBars = new ChocolateBars(this, "gameChocolateBars");
        this.painsAuChocolat = new PainsAuChocolat(this, "gamePainsAuChocolat");
        this.candiesEaten = new CandiesEaten(this, "gameCandiesEaten");
        this.candiesThrown = new CandiesThrown(this, "gameCandiesThrown");
        // We update the status bar
        this.updateStatusBar();
        // We launch timeouts & intervals methods
        this.oneSecondIntervalId = window.setInterval(this.oneSecondMethod.bind(this), 1000);
        window.setTimeout(this.questMethod.bind(this), 100);
    }
    // Public methods
    Game.prototype.addHotkey = function (hotkey) {
        this.hotkeys[hotkey.getKeyString()] = hotkey;
    };
    Game.prototype.addSpecialHotkey = function (hotkey) {
        this.specialHotkeys.push(hotkey);
    };
    Game.prototype.applyInvertedColorsToCss = function () {
        if (Saving.loadBool("gameInvertedColors") == false)
            $('#invertColorsStylesheet').remove();
        else
            $('head').append('<link href="css/invertColors.css" rel="stylesheet" id="invertColorsStylesheet"/>');
    };
    Game.prototype.calcLollipopFarmProduction = function () {
        // Is the production each second ?
        Saving.saveBool("lollipopFarmIsProductionEachSecond", this.isLollipopFarmProductionEachSecond());
        // If we produce x lollipops each second
        if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
            Saving.saveNumber("lollipopFarmProduction", (Saving.loadBool("gridItemPossessedShellPowder") ? 3 : 1) *
                (Saving.loadBool("gridItemPossessedPitchfork") ? 3 : 1) *
                (Saving.loadBool("gridItemPossessedGreenSharkFin") ? 5 : 1) *
                Math.ceil(100 * (1 - Math.exp(-(Saving.loadNumber("lollipopFarmLollipopsPlanted") - 20) / 5000))));
        }
        else {
            switch (Saving.loadNumber("lollipopFarmLollipopsPlanted")) {
                case 1:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 8);
                    break;
                case 2:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 5);
                    break;
                case 3:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 2);
                    break;
                case 4:
                    Saving.saveNumber("lollipopFarmProduction", 3600);
                    break;
                case 5:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 40);
                    break;
                case 6:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 25);
                    break;
                case 7:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 12);
                    break;
                case 8:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 8);
                    break;
                case 9:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 5);
                    break;
                case 10:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 2);
                    break;
                case 11:
                    Saving.saveNumber("lollipopFarmProduction", 60);
                    break;
                case 12:
                    Saving.saveNumber("lollipopFarmProduction", 52);
                    break;
                case 13:
                    Saving.saveNumber("lollipopFarmProduction", 42);
                    break;
                case 14:
                    Saving.saveNumber("lollipopFarmProduction", 30);
                    break;
                case 15:
                    Saving.saveNumber("lollipopFarmProduction", 16);
                    break;
                case 16:
                    Saving.saveNumber("lollipopFarmProduction", 8);
                    break;
                case 17:
                    Saving.saveNumber("lollipopFarmProduction", 5);
                    break;
                case 18:
                    Saving.saveNumber("lollipopFarmProduction", 4);
                    break;
                case 19:
                    Saving.saveNumber("lollipopFarmProduction", 3);
                    break;
                case 20:
                    Saving.saveNumber("lollipopFarmProduction", 2);
                    break;
            }
        }
    };
    Game.prototype.canStartQuest = function () {
        if (this.player.getHp() == 0)
            return false;
        return true;
    };
    Game.prototype.clearAllIntervals = function () {
        clearInterval(this.oneSecondIntervalId);
    };
    Game.prototype.disableLocalAutosave = function () {
        this.localAutosaveEnabled = false;
        this.localAutosaveSlot = null;
    };
    Game.prototype.emptyAndFillSelectedEqItemsArray = function () {
        // Empty
        this.selectedEqItems = {};
        // Fill
        if (Saving.loadString("gameWeaponSelected") != "inventorySpecialNothingWeapon")
            this.selectedEqItems["weapon"] = this.weapons[Saving.loadString("gameWeaponSelected")];
        if (Saving.loadString("gameHatSelected") != "inventorySpecialNothingHat")
            this.selectedEqItems["hat"] = this.hats[Saving.loadString("gameHatSelected")];
        if (Saving.loadString("gameBodyArmourSelected") != "inventorySpecialNothingBodyArmour")
            this.selectedEqItems["bodyArmour"] = this.bodyArmours[Saving.loadString("gameBodyArmourSelected")];
        if (Saving.loadString("gameGlovesSelected") != "inventorySpecialNothingGloves")
            this.selectedEqItems["gloves"] = this.gloves[Saving.loadString("gameGlovesSelected")];
        if (Saving.loadString("gameBootsSelected") != "inventorySpecialNothingBoots")
            this.selectedEqItems["boots"] = this.boots[Saving.loadString("gameBootsSelected")];
    };
    Game.prototype.enableLocalAutosave = function (localAutosaveSlot) {
        this.localAutosaveEnabled = true;
        this.localAutosaveSlot = localAutosaveSlot;
        this.setDefaultLocalAutosaveTime();
    };
    Game.prototype.gainItem = function (itemSavingName) {
        Saving.saveBool(itemSavingName, true);
        this.player.reCalcMaxHp(); // We re calc the player max hp just in case
        this.calcLollipopFarmProduction(); // Idem for the farm production
    };
    Game.prototype.getEqItemFromEqItemType = function (savingName, type) {
        switch (type) {
            case EqItemType.WEAPON:
                return this.weapons[savingName];
                break;
            case EqItemType.HAT:
                return this.hats[savingName];
                break;
            case EqItemType.BODYARMOUR:
                return this.bodyArmours[savingName];
                break;
            case EqItemType.GLOVES:
                return this.gloves[savingName];
                break;
            case EqItemType.BOOTS:
                return this.boots[savingName];
                break;
        }
    };
    Game.prototype.isEquipped = function (type, savingName) {
        if (this.selectedEqItems[type] == undefined || this.selectedEqItems[type] == null)
            return false;
        else
            return (this.selectedEqItems[type].getSavingName() == savingName);
    };
    Game.prototype.isLollipopFarmProductionEachSecond = function () {
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 20) {
            return true;
        }
        return false;
    };
    Game.prototype.load = function () {
        // Resources
        this.candies.load();
        this.lollipops.load();
        this.chocolateBars.load();
        this.painsAuChocolat.load();
        this.candiesEaten.load();
        this.candiesThrown.load();
        this.candiesUsedToRequestFeatures.load();
        this.candiesInCauldron.load();
        this.lollipopsInCauldron.load();
        // Handle inverted colors (we have to change the css now depending on the gameInvertedColors bool from the Saving module)
        this.applyInvertedColorsToCss();
    };
    Game.prototype.postLoad = function () {
        // We re calc the player hp
        this.player.reCalcMaxHp();
        // We update the status bar
        this.updateStatusBar(true);
        // Select correct items
        this.emptyAndFillSelectedEqItemsArray();
        // We go to the candy box
        this.goToCandyBox();
        // And we set the saved place (the village)
        this.savedPlace = new Village(this);
    };
    Game.prototype.resetPlayer = function () {
        // Save some important things
        var hp = this.player.getHp();
        var maxHp = this.player.getMaxHp();
        // Re-create the player
        this.player = new Player(this);
        // Restore the important things saved
        this.player.setHp(hp);
        this.player.setMaxHp(maxHp);
    };
    Game.prototype.resetSpecialHotkeys = function () {
        this.specialHotkeys = [];
    };
    Game.prototype.save = function () {
        // Resources
        this.candies.save();
        this.lollipops.save();
        this.chocolateBars.save();
        this.painsAuChocolat.save();
        this.candiesEaten.save();
        this.candiesThrown.save();
        this.candiesUsedToRequestFeatures.save();
        this.candiesInCauldron.save();
        this.lollipopsInCauldron.save();
    };
    Game.prototype.setPlace = function (place) {
        // If the current place isn't null, we warn it that we're going to stop displaying it
        if (this.place != null) {
            this.place.willStopBeingDisplayed();
            this.resetHotkeys();
            // If we didn't save this place we're not displaying anymore
            if (this.savedPlace == null) {
                // It means we're closing it actually, so we tell it that we're closing it
                this.place.willBeClosed();
            }
        }
        // Set the place
        this.place = place;
        // Callbacks
        this.resetResourcesCallbacks();
        this.place.willBeDisplayed();
        // Display the place for the first time
        this.displayPlace();
    };
    Game.prototype.unequipIfEquipped = function (savingName, type) {
        switch (type) {
            case EqItemType.WEAPON:
                if (this.selectedEqItems["weapon"] != null && this.selectedEqItems["weapon"].getSavingName() == savingName)
                    Saving.saveString("gameWeaponSelected", "inventorySpecialNothingWeapon");
                break;
            case EqItemType.HAT:
                if (this.selectedEqItems["hat"] != null && this.selectedEqItems["hat"].getSavingName() == savingName)
                    Saving.saveString("gameHatSelected", "inventorySpecialNothingHat");
                break;
            case EqItemType.BODYARMOUR:
                if (this.selectedEqItems["bodyArmour"] != null && this.selectedEqItems["bodyArmour"].getSavingName() == savingName)
                    Saving.saveString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
                break;
            case EqItemType.GLOVES:
                if (this.selectedEqItems["gloves"] != null && this.selectedEqItems["gloves"].getSavingName() == savingName)
                    Saving.saveString("gameGlovesSelected", "inventorySpecialNothingGloves");
                break;
            case EqItemType.BOOTS:
                if (this.selectedEqItems["boots"] != null && this.selectedEqItems["boots"].getSavingName() == savingName)
                    Saving.saveString("gameBootsSelected", "inventorySpecialNothingBoots");
                break;
        }
        this.emptyAndFillSelectedEqItemsArray();
    };
    Game.prototype.updatePlace = function () {
        this.displayPlace();
    };
    Game.prototype.updateStatusBar = function (reAdd) {
        if (reAdd === void 0) { reAdd = false; }
        if (reAdd)
            this.statusBar.deleteAndReAddEverything();
        this.statusBar.updateAll();
        this.statusBarLocation.render(this.statusBar.getRenderArea());
    };
    // "go to" methods
    Game.prototype.goToCandyBox = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new CandyBox(this));
    };
    Game.prototype.goToCastle = function () {
        this.setPlace(new Castle(this));
    };
    Game.prototype.goToCastleEntrance = function () {
        this.setPlace(new CastleEntrance(this));
    };
    Game.prototype.goToCauldron = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Cauldron(this));
    };
    Game.prototype.goToCfg = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Cfg(this));
    };
    Game.prototype.goToInsideFortress = function () {
        this.setPlace(new InsideFortress(this));
    };
    Game.prototype.goToInsideYourBox = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new InsideYourBox(this));
    };
    Game.prototype.goToInventory = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Inventory(this));
    };
    Game.prototype.goToLighthouse = function () {
        this.setPlace(new Lighthouse(this));
    };
    Game.prototype.goToLollipopFarm = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new LollipopFarm(this));
    };
    Game.prototype.goToMainMap = function () {
        this.setPlace(new MainMap(this));
    };
    Game.prototype.goToMap = function () {
        this.setPlaceFromSavedMapPlace();
    };
    Game.prototype.goToSave = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Save(this));
    };
    Game.prototype.goToSorceressHut = function () {
        this.setPlace(new SorceressHut(this));
    };
    Game.prototype.goToTheArena = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new TheArena(this));
    };
    Game.prototype.goToTheCave = function () {
        this.setPlace(new TheCave(this));
    };
    Game.prototype.goToTheComputer = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new TheComputer(this));
    };
    Game.prototype.goToVillage = function () {
        this.setPlace(new Village(this));
    };
    Game.prototype.goToYourself = function () {
        this.setPlace(new Yourself(this));
    };
    // Public getters
    Game.prototype.getBodyArmours = function () {
        return this.bodyArmours;
    };
    Game.prototype.getBoots = function () {
        return this.boots;
    };
    Game.prototype.getCandies = function () {
        return this.candies;
    };
    Game.prototype.getCandiesEaten = function () {
        return this.candiesEaten;
    };
    Game.prototype.getCandiesInCauldron = function () {
        return this.candiesInCauldron;
    };
    Game.prototype.getCandiesThrown = function () {
        return this.candiesThrown;
    };
    Game.prototype.getCandiesUsedToRequestFeatures = function () {
        return this.candiesUsedToRequestFeatures;
    };
    Game.prototype.getChocolateBars = function () {
        return this.chocolateBars;
    };
    Game.prototype.getGloves = function () {
        return this.gloves;
    };
    Game.prototype.getHats = function () {
        return this.hats;
    };
    Game.prototype.getHotkeys = function () {
        return this.hotkeys;
    };
    Game.prototype.getGridItems = function () {
        return this.gridItems;
    };
    Game.prototype.getIsStatusBarAllowedToUseTheNKey = function () {
        return this.isStatusBarAllowedToUseTheNKey;
    };
    Game.prototype.getLocalAutosaveEnabled = function () {
        return this.localAutosaveEnabled;
    };
    Game.prototype.getLocalAutosaveSlot = function () {
        return this.localAutosaveSlot;
    };
    Game.prototype.getLocalAutosaveTime = function () {
        return this.localAutosaveTime;
    };
    Game.prototype.getLollipops = function () {
        return this.lollipops;
    };
    Game.prototype.getLollipopsInCauldron = function () {
        return this.lollipopsInCauldron;
    };
    Game.prototype.getPainsAuChocolat = function () {
        return this.painsAuChocolat;
    };
    Game.prototype.getQuestCallbackCollection = function () {
        return this.questCallbackCollection;
    };
    Game.prototype.getQuestLog = function () {
        return this.questLog;
    };
    Game.prototype.getQuestSlowedDown = function () {
        return this.questSlowedDown;
    };
    Game.prototype.getQuestSpeedUp = function () {
        return this.questSpeedUp;
    };
    Game.prototype.getOneSecondCallbackCollection = function () {
        return this.oneSecondCallbackCollection;
    };
    Game.prototype.getPlayer = function () {
        return this.player;
    };
    Game.prototype.getMainContentLocation = function () {
        return this.mainContentLocation;
    };
    Game.prototype.getSelectedEqItems = function () {
        return this.selectedEqItems;
    };
    Game.prototype.getSpecialHotkeys = function () {
        return this.specialHotkeys;
    };
    Game.prototype.getStatusBar = function () {
        return this.statusBar;
    };
    Game.prototype.getWeapons = function () {
        return this.weapons;
    };
    Game.prototype.getWeAreQuesting = function () {
        return this.weAreQuesting;
    };
    // Public setters
    Game.prototype.setIsStatusBarAllowedToUseTheNKey = function (isStatusBarAllowedToUseTheNKey) {
        this.isStatusBarAllowedToUseTheNKey = isStatusBarAllowedToUseTheNKey;
    };
    Game.prototype.setQuestSlowedDown = function (questSlowedDown) {
        this.questSlowedDown = questSlowedDown;
    };
    Game.prototype.setQuestSpeedUp = function (questSpeedUp) {
        this.questSpeedUp = questSpeedUp;
    };
    Game.prototype.setWeAreQuesting = function (weAreQuesting) {
        this.weAreQuesting = weAreQuesting;
    };
    // Private methods
    Game.prototype.addEqItem = function (eqItem, array) {
        array[eqItem.getSavingName()] = eqItem;
    };
    Game.prototype.addGridItem = function (gridItem) {
        this.gridItems[gridItem.getSavingName()] = gridItem;
    };
    Game.prototype.createEqItems = function () {
        // Create weapons
        this.addEqItem(new WoodenSword(), this.weapons);
        this.addEqItem(new IronAxe(), this.weapons);
        this.addEqItem(new PolishedSilverSword(), this.weapons);
        this.addEqItem(new TrollBludgeon(), this.weapons);
        this.addEqItem(new MonkeyWizardStaff(), this.weapons);
        this.addEqItem(new EnchantedMonkeyWizardStaff(), this.weapons);
        this.addEqItem(new TribalSpear(), this.weapons);
        this.addEqItem(new SummoningTribalSpear(), this.weapons);
        this.addEqItem(new GiantSpoon(), this.weapons);
        this.addEqItem(new Scythe(), this.weapons);
        this.addEqItem(new GiantSpoonOfDoom(), this.weapons);
        // Create hats
        this.addEqItem(new OctopusKingCrown(), this.hats);
        this.addEqItem(new OctopusKingCrownWithJaspers(), this.hats);
        this.addEqItem(new OctopusKingCrownWithObsidian(), this.hats);
        this.addEqItem(new MerchantHat(), this.hats);
        this.addEqItem(new SorceressHat(), this.hats);
        // Create body armours
        this.addEqItem(new LightweightBodyArmour(), this.bodyArmours);
        this.addEqItem(new KnightBodyArmour(), this.bodyArmours);
        this.addEqItem(new EnchantedKnightBodyArmour(), this.bodyArmours);
        // Create gloves
        this.addEqItem(new LeatherGloves(), this.gloves);
        this.addEqItem(new RedEnchantedGloves(), this.gloves);
        this.addEqItem(new PinkEnchantedGloves(), this.gloves);
        // Create boots
        this.addEqItem(new LeatherBoots(), this.boots);
        this.addEqItem(new RocketBoots(), this.boots);
        this.addEqItem(new BootsOfIntrospection(), this.boots);
    };
    Game.prototype.createGridItems = function () {
        // First line
        this.addGridItem(new GridItem("gridItemPossessedMainMap", "gridItemMainMapName", "gridItemMainMapDescription", "gridItems/mainMap", new Pos(0, 0)));
        this.addGridItem(new GridItem("gridItemPossessedTimeRing", "gridItemTimeRingName", "gridItemTimeRingDescription", "gridItems/timeRing", new Pos(1, 0)));
        this.addGridItem(new GridItem("gridItemPossessedThirdHouseKey", "gridItemThirdHouseKeyName", "gridItemThirdHouseKeyDescription", "gridItems/thirdHouseKey", new Pos(2, 0)));
        this.addGridItem(new GridItem("gridItemPossessedBeginnersGrimoire", "gridItemBeginnersGrimoireName", "gridItemBeginnersGrimoireDescription", "gridItems/beginnersGrimoire", new Pos(3, 0)));
        // Second line
        this.addGridItem(new Feather("gridItemPossessedFeather", "gridItemFeatherName", "gridItemFeatherDescription", "gridItems/feather", new Pos(0, 1)));
        this.addGridItem(new GridItem("gridItemPossessedPogoStick", "gridItemPogoStickName", "gridItemPogoStickDescription", "gridItems/pogoStick", new Pos(1, 1)));
        this.addGridItem(new GridItem("gridItemPossessedHeartPlug", "gridItemHeartPlugName", "gridItemHeartPlugDescription", "gridItems/heartPlug", new Pos(2, 1)));
        this.addGridItem(new GridItem("gridItemPossessedAdvancedGrimoire", "gridItemAdvancedGrimoireName", "gridItemAdvancedGrimoireDescription", "gridItems/advancedGrimoire", new Pos(3, 1)));
        // Third line
        this.addGridItem(new GridItem("gridItemPossessedSponge", "gridItemSpongeName", "gridItemSpongeDescription", "gridItems/sponge", new Pos(0, 2)));
        this.addGridItem(new GridItem("gridItemPossessedShellPowder", "gridItemShellPowderName", "gridItemShellPowderDescription", "gridItems/shellPowder", new Pos(1, 2)));
        this.addGridItem(new GridItem("gridItemPossessedRedSharkFin", "gridItemRedSharkFinName", "gridItemRedSharkFinDescription", "gridItems/redSharkFin", new Pos(2, 2)));
        this.addGridItem(new GridItem("gridItemPossessedBlackMagicGrimoire", "gridItemBlackMagicGrimoireName", "gridItemBlackMagicGrimoireDescription", "gridItems/blackMagicGrimoire", new Pos(3, 2)));
        // Fourth line
        this.addGridItem(new GridItem("gridItemPossessedGreenSharkFin", "gridItemGreenSharkFinName", "gridItemGreenSharkFinDescription", "gridItems/greenSharkFin", new Pos(0, 3)));
        this.addGridItem(new GridItem("gridItemPossessedPurpleSharkFin", "gridItemPurpleSharkFinName", "gridItemPurpleSharkFinDescription", "gridItems/purpleSharkFin", new Pos(1, 3)));
        this.addGridItem(new GridItem("gridItemPossessedHeartPendant", "gridItemHeartPendantName", "gridItemHeartPendantDescription", "gridItems/heartPendant", new Pos(2, 3)));
        this.addGridItem(new GridItem("gridItemPossessedFortressKey", "gridItemFortressKeyName", "gridItemFortressKeyDescription", "gridItems/fortressKey", new Pos(3, 3)));
        // Fifth line
        this.addGridItem(new UnicornHorn("gridItemPossessedUnicornHorn", "gridItemUnicornHornName", "gridItemUnicornHornDescription", "gridItems/unicornHorn", new Pos(0, 4)));
        this.addGridItem(new XinopherydonClaw("gridItemPossessedXinopherydonClaw", "gridItemXinopherydonClawName", "gridItemXinopherydonClawDescription", "gridItems/xinopherydonClaw", new Pos(1, 4)));
        this.addGridItem(new GridItem("gridItemPossessedPitchfork", "gridItemPitchforkName", "gridItemPitchforkDescription", "gridItems/pitchfork", new Pos(2, 4)));
        this.addGridItem(new GridItem("gridItemPossessedTalkingCandy", "gridItemTalkingCandyName", "gridItemTalkingCandyDescription", "gridItems/talkingCandy", new Pos(3, 4)));
        // Sixth line
        this.addGridItem(new GridItem("gridItemPossessedP", "gridItemPName", "gridItemPDescription", "gridItems/p", new Pos(0, 5)));
        this.addGridItem(new GridItem("gridItemPossessedL", "gridItemLName", "gridItemLDescription", "gridItems/l", new Pos(1, 5)));
        this.addGridItem(new GridItem("gridItemPossessedA", "gridItemAName", "gridItemADescription", "gridItems/a", new Pos(2, 5)));
        this.addGridItem(new GridItem("gridItemPossessedY", "gridItemYName", "gridItemYDescription", "gridItems/y", new Pos(3, 5)));
    };
    Game.prototype.displayArea = function (renderArea, scrolling, gap, defaultScroll) {
        if (scrolling === void 0) { scrolling = false; }
        if (gap === void 0) { gap = 0; }
        if (defaultScroll === void 0) { defaultScroll = 0; }
        this.mainContentLocation.render(renderArea);
        this.mainContentLocation.setScrolling(scrolling, defaultScroll);
        if (scrolling == false)
            this.mainContentLocation.setContentGap(gap);
        else
            this.mainContentLocation.setContentGap(0);
    };
    Game.prototype.displayPlace = function () {
        this.displayArea(this.place.getRenderArea(), this.place.getScrolling(), this.place.getGap(), this.place.getDefaultScroll());
    };
    Game.prototype.handleCandiesProduction = function () {
        this.candies.add(Saving.loadNumber("lollipopFarmCurrentCandiesProduction"));
    };
    Game.prototype.handleLollipopProduction = function () {
        // If at least one lollipop is planted
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 0) {
            // If the production is each second
            if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
                // We just add the production as lollipops
                this.lollipops.add(Saving.loadNumber("lollipopFarmProduction"));
            }
            else {
                // If it's time for a new production
                if (Saving.loadNumber("lollipopFarmTimeSinceLastProduction") >= Saving.loadNumber("lollipopFarmProduction") - 1) {
                    // We reset the time
                    Saving.saveNumber("lollipopFarmTimeSinceLastProduction", 0);
                    // We add one lollipop
                    this.lollipops.add(1);
                }
                else {
                    // We increase the time
                    Saving.saveNumber("lollipopFarmTimeSinceLastProduction", Saving.loadNumber("lollipopFarmTimeSinceLastProduction") + 1);
                }
            }
        }
    };
    Game.prototype.handlePondConversion = function () {
        // Variables
        var conversionAmount;
        // If the conversion is activated
        if (Saving.loadBool("lollipopFarmPondFeedingLolligators")) {
            // Set the conversion amount
            conversionAmount = Saving.loadNumber("lollipopFarmPondConversionRate");
            // If we don't have enough candies, lower this conversion rate
            if (this.candies.getCurrent() < conversionAmount)
                conversionAmount = this.candies.getCurrent();
            // If the conversionAmount is > 0, we convert
            if (conversionAmount > 0) {
                this.candies.add(-conversionAmount);
                this.lollipops.add(conversionAmount);
            }
        }
    };
    Game.prototype.localAutosave = function () {
        // If local autosave is enabled and there's a local auto save slot and there's a local autosave time
        if (this.localAutosaveEnabled == true && this.localAutosaveSlot != null && this.localAutosaveTime != null) {
            // If it's time to save
            if (this.localAutosaveTime <= 0) {
                // We save
                Saving.save(this, MainLoadingType.LOCAL, this.localAutosaveSlot);
                // We reset the time
                this.setDefaultLocalAutosaveTime();
            }
            else
                this.localAutosaveTime -= 1;
        }
    };
    Game.prototype.questMethod = function () {
        // Re set the timeout, depending on if the time is slowed down or not
        window.setTimeout(this.questMethod.bind(this), ((this.questSlowedDown && this.weAreQuesting) ? 200 : 100 + this.getQuestSpeedUp()));
        // Special place callbacks
        this.questCallbackCollection.fire();
    };
    Game.prototype.oneSecondMethod = function () {
        // Our methods
        this.player.magicHealthRegain();
        this.handleCandiesProduction();
        this.handleLollipopProduction();
        this.handlePondConversion();
        this.localAutosave();
        // Special place callbacks
        this.oneSecondCallbackCollection.fire();
    };
    Game.prototype.resetHotkeys = function () {
        this.hotkeys = {};
    };
    Game.prototype.resetResourcesCallbacks = function () {
        // Reset status bar resources callbacks
        this.candies.getCallbackCollection().reset();
        this.lollipops.getCallbackCollection().reset();
        // Reset other resources callbacks
        this.candiesEaten.getCallbackCollection().reset();
        this.candiesThrown.getCallbackCollection().reset();
        // Reset interval callbacks
        this.oneSecondCallbackCollection.reset();
        this.questCallbackCollection.reset();
    };
    Game.prototype.saveCurrentMapPlace = function () {
        if (this.savedPlace == null)
            this.savedPlace = this.place;
    };
    Game.prototype.setDefaultLocalAutosaveTime = function () {
        this.localAutosaveTime = 600;
    };
    Game.prototype.setPlaceFromSavedMapPlace = function () {
        // If there's a saved place
        if (this.savedPlace != null) {
            this.setPlace(this.savedPlace); // We set the saved place as the current place
            this.savedPlace = null; // There's no saved place anymore
        }
    };
    return Game;
})();
///<reference path="QuestEntity.ts"/>
var GiantNougatMonster = (function (_super) {
    __extends(GiantNougatMonster, _super);
    // Constructor
    function GiantNougatMonster(quest, pos) {
        _super.call(this, quest, pos, new Naming("The giant nougat monster", "the giant nougat monster"), new RenderArea(15, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(1, 0), new Pos(12, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(15, 2)), new CollisionBox(this, new Pos(1, 3), new Pos(12, 1))), new QuestEntityMovement());
        // Set the default step
        this.step = GiantNougatMonsterStep.ASLEEP;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(2000);
        this.setHp(2000);
        // Set the ascii art and the transparent character
        this.reDrawAscii();
        this.setTransparency(new RenderTransparency(" ", "%"));
    }
    // update()
    GiantNougatMonster.prototype.update = function () {
        // Do something different depending on the current step
        switch (this.step) {
            case GiantNougatMonsterStep.ASLEEP:
                // If we have less then 1577 hp (1577 was the number of bytes of the wikipedia article "Nougat" on the fifth of november, 2005 according to the article revision history. See here : https://en.wikipedia.org/w/index.php?title=Nougat&oldid=27465563)
                if (this.getHp() < 1577) {
                    // We go to awake mode
                    this.step = GiantNougatMonsterStep.AWAKE;
                    this.reDrawAscii(); // Re draw the ascii art
                    this.addWeapon(); // Add the weapon
                }
                break;
            case GiantNougatMonsterStep.AWAKE:
                // If we have less than 500 hp
                if (this.getHp() < 500) {
                    // We go to angry mode
                    this.step = GiantNougatMonsterStep.ANGRY;
                    this.reDrawAscii(); // Re draw the ascii art
                }
                // Go towards the player (speed : 1)
                this.goTowards(this.getGlobalPosition().plus(new Pos(6, 2)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(1, 0));
                break;
            case GiantNougatMonsterStep.ANGRY:
                // Go towards the player (speed : 3)
                this.goTowards(this.getGlobalPosition().plus(new Pos(6, 2)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(3, 0));
                break;
        }
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    GiantNougatMonster.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(Random.upTo(123456)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    GiantNougatMonster.prototype.addWeapon = function () {
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Nougat", "nougat"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(17, 6))), 3000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(20, 40);
    };
    GiantNougatMonster.prototype.reDrawAscii = function () {
        // Draw a different ascii art depending on the step
        switch (this.step) {
            case GiantNougatMonsterStep.ASLEEP:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monster"));
                break;
            case GiantNougatMonsterStep.AWAKE:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monsterAwake"));
                break;
            case GiantNougatMonsterStep.ANGRY:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monsterAngry"));
                break;
        }
    };
    return GiantNougatMonster;
})(QuestEntity);
///<reference path="Quest.ts"/>
var GiantNougatMonsterQuest = (function (_super) {
    __extends(GiantNougatMonsterQuest, _super);
    // Constructor
    function GiantNougatMonsterQuest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 19));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the monster
        this.addMonster();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You attack the giant nougat monster. It seems to be asleep."));
    }
    // Public methods
    GiantNougatMonsterQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    GiantNougatMonsterQuest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You killed the giant nougat monster and gained access to the tower!"));
            Saving.saveBool("castleKilledNougatMonster", true);
        }
        else
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed."));
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    GiantNougatMonsterQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    GiantNougatMonsterQuest.prototype.addMonster = function () {
        this.giantNougatMonster = new GiantNougatMonster(this, new Pos(78, 16));
        this.giantNougatMonster.setHealthBar(new QuestEntityHealthBar(this.giantNougatMonster, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.giantNougatMonster);
    };
    GiantNougatMonsterQuest.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(-20, 20));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(140, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    GiantNougatMonsterQuest.prototype.thePlayerWon = function () {
        if (this.giantNougatMonster.shouldDie())
            return true;
        return false;
    };
    return GiantNougatMonsterQuest;
})(Quest);
var GiantNougatMonsterStep;
(function (GiantNougatMonsterStep) {
    GiantNougatMonsterStep[GiantNougatMonsterStep["ASLEEP"] = 0] = "ASLEEP";
    GiantNougatMonsterStep[GiantNougatMonsterStep["AWAKE"] = 1] = "AWAKE";
    GiantNougatMonsterStep[GiantNougatMonsterStep["ANGRY"] = 2] = "ANGRY";
})(GiantNougatMonsterStep || (GiantNougatMonsterStep = {}));
///<reference path="EqItem.ts"/>
var GiantSpoon = (function (_super) {
    __extends(GiantSpoon, _super);
    // Constructor
    function GiantSpoon() {
        _super.call(this, "eqItemWeaponGiantSpoon", "eqItemWeaponGiantSpoonName", "eqItemWeaponGiantSpoonDescription", "eqItems/weapons/giantSpoon");
    }
    // Public getters
    GiantSpoon.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A giant spoon", "a giant spoon"), player.getClassicCollisionBoxCollection(), 70);
        qew.getCloseCombatDelay().setFixedDelay(7, 0);
        return qew;
    };
    return GiantSpoon;
})(EqItem);
///<reference path="EqItem.ts"/>
var GiantSpoonOfDoom = (function (_super) {
    __extends(GiantSpoonOfDoom, _super);
    // Constructor
    function GiantSpoonOfDoom() {
        _super.call(this, "eqItemWeaponGiantSpoonOfDoom", "eqItemWeaponGiantSpoonOfDoomName", "eqItemWeaponGiantSpoonOfDoomDescription", "eqItems/weapons/giantSpoonOfDoom");
    }
    // Public getters
    GiantSpoonOfDoom.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The giant Spoon of Doom", "the giant Spoon of Doom"), player.getClassicCollisionBoxCollection(), 315);
        qew.getCloseCombatDelay().setFixedDelay(14, 0);
        return qew;
    };
    return GiantSpoonOfDoom;
})(EqItem);
///<reference path="Quest.ts"/>
var Hell = (function (_super) {
    __extends(Hell, _super);
    // Constructor
    function Hell(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(150, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 23));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the floor
        this.addFloor(0, 20);
        // Add the lava entities
        this.addLava(new Pos(53, 27), new Pos(20, 2));
        this.addLava(new Pos(92, 27), new Pos(16, 2));
        // Add the devil
        this.addDevil(new Pos(130, 2));
        // Add Camazotz
        this.addCamazotz(new Pos(Random.between(70, 100), 2));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter Hell."));
    }
    // Public methods
    Hell.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(20, 21));
    };
    Hell.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Hell.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat the devil itself!"));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in Hell. Your soul will wander here for all eternity."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Hell.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawBackground(0, 20);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Hell.prototype.addCamazotz = function (pos) {
        var camazotz;
        camazotz = new Camazotz(this, pos);
        camazotz.setHealthBar(new QuestEntityHealthBar(camazotz, new Pos(22, 1), new Pos(0, 0)));
        this.addEntity(camazotz);
    };
    Hell.prototype.addDevil = function (pos) {
        this.devil = new Devil(this, pos, 2, 19);
        this.devil.setHealthBar(new QuestEntityHealthBar(this.devil, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.devil);
    };
    Hell.prototype.addFloor = function (x, y) {
        // Create the wall entity
        var wall = new Wall(this, new Pos(x, y));
        // Add the floor
        wall.addBox(new Pos(0, 4), new Pos(53, 6));
        wall.addBox(new Pos(73, 4), new Pos(19, 6));
        wall.addBox(new Pos(108, 4), new Pos(42, 6));
        wall.addBox(new Pos(0, 9), new Pos(150, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    Hell.prototype.addLava = function (pos, size) {
        this.addEntity(new Lava(this, pos, size));
    };
    Hell.prototype.drawBackground = function (x, y) {
        // Draw the ascii
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/background"), this.getRealQuestPosition().x + x, this.getRealQuestPosition().y + y);
        // Add the red color for the first lava pit
        this.drawLava(x + 55, x + 71, y + 4);
        this.drawLava(x + 54, x + 72, y + 5);
        this.drawLava(x + 53, x + 73, y + 6);
        this.drawLava(x + 52, x + 74, y + 7);
        this.drawLava(x + 51, x + 75, y + 8);
        this.drawLava(x + 51, x + 75, y + 9);
        // Same thing for the second pit
        this.drawLava(x + 94, x + 106, y + 4);
        this.drawLava(x + 93, x + 107, y + 5);
        this.drawLava(x + 92, x + 108, y + 6);
        this.drawLava(x + 91, x + 109, y + 7);
        this.drawLava(x + 90, x + 110, y + 8);
        this.drawLava(x + 90, x + 110, y + 9);
    };
    Hell.prototype.drawLava = function (x1, x2, y) {
        this.getRenderArea().addBackgroundColor(this.getRealQuestPosition().x + x1, this.getRealQuestPosition().x + x2, this.getRealQuestPosition().y + y, new Color(ColorType.HELL_RED_LAVA));
    };
    Hell.prototype.thePlayerWon = function () {
        // If the devil is dead, we return true
        if (this.devil.shouldDie() == true)
            return true;
        // Else we return false
        return false;
    };
    return Hell;
})(Quest);
var Hotkey = (function () {
    // Constructor
    function Hotkey(keyString, callbackCollection) {
        this.pressed = false; // Is this hotkey pressed ?
        // Set the key string
        this.keyString = keyString;
        // Handle special keys
        switch (this.keyString) {
            case "up":
                this.key = 38;
                break;
            case "down":
                this.key = 40;
                break;
            case "left":
                this.key = 37;
                break;
            case "right":
                this.key = 39;
                break;
            case "space":
                this.key = 32;
                break;
            case "enter":
                this.key = 13;
                break;
            case "delete":
                this.key = 8;
                break;
            case "numpad0":
                this.key = 96;
                break;
            case "numpad1":
                this.key = 97;
                break;
            case "numpad2":
                this.key = 98;
                break;
            case "numpad3":
                this.key = 99;
                break;
            case "numpad4":
                this.key = 100;
                break;
            case "numpad5":
                this.key = 101;
                break;
            case "numpad6":
                this.key = 102;
                break;
            case "numpad7":
                this.key = 103;
                break;
            case "numpad8":
                this.key = 104;
                break;
            case "numpad9":
                this.key = 105;
                break;
            default:
                this.key = this.keyString.toUpperCase().charCodeAt(0);
                break; // We convert to upper case to please our great jQuery master
        }
        this.callbackCollection = callbackCollection;
    }
    // Public getters
    Hotkey.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    Hotkey.prototype.getKey = function () {
        return this.key;
    };
    Hotkey.prototype.getKeyString = function () {
        return this.keyString;
    };
    Hotkey.prototype.getPressed = function () {
        return this.pressed;
    };
    // Public setters
    Hotkey.prototype.setPressed = function (pressed) {
        this.pressed = pressed;
    };
    return Hotkey;
})();
///<reference path="Place.ts"/>
var InsideFortress = (function (_super) {
    __extends(InsideFortress, _super);
    // Constructor
    function InsideFortress(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/fortress/inside"), 0, 4);
        this.update();
    }
    // getRenderArea()
    InsideFortress.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    InsideFortress.prototype.addFirstDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideFirstDoorButton", x + 11, x + 14, y, x + 7, x + 14, y + 1, x + 3, x + 14, y + 2, x, x + 14, y + 3, x, x + 14, y + 4, x, x + 14, y + 5, x, x + 14, y + 6, x, x + 14, y + 7, x, x + 14, y + 8, x, x + 14, y + 9, x, x + 14, y + 10, x, x + 14, y + 11, x, x + 14, y + 12, x, x + 14, y + 13, x, x + 14, y + 14, x, x + 14, y + 15, x, x + 14, y + 16, x, x + 14, y + 17, x, x + 10, y + 18, x, x + 6, y + 19, x, x + 2, y + 20, x, x + 1, y + 21);
        // Add the link
        this.renderArea.addLinkCall(".fortressInsideFirstDoorButton", new CallbackCollection(this.goToFirstRoom.bind(this)));
    };
    InsideFortress.prototype.addSecondDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideSecondDoorButton", x, x + 15, y, x, x + 15, y + 1, x, x + 15, y + 2, x, x + 15, y + 3, x, x + 15, y + 4, x, x + 15, y + 5, x, x + 15, y + 6, x, x + 15, y + 7, x, x + 15, y + 8, x, x + 15, y + 9, x, x + 15, y + 10, x, x + 15, y + 11, x, x + 15, y + 12, x, x + 15, y + 13, x, x + 15, y + 14, x, x + 15, y + 15, x, x + 15, y + 16, x, x + 15, y + 17);
        // Add the link
        this.renderArea.addLinkCall(".fortressInsideSecondDoorButton", new CallbackCollection(this.goToSecondRoom.bind(this)));
    };
    InsideFortress.prototype.addThirdDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideThirdDoorButton", x, x + 3, y, x, x + 7, y + 1, x, x + 11, y + 2, x, x + 14, y + 3, x, x + 14, y + 4, x, x + 14, y + 5, x, x + 14, y + 6, x, x + 14, y + 7, x, x + 14, y + 8, x, x + 14, y + 9, x, x + 14, y + 10, x, x + 14, y + 11, x, x + 14, y + 12, x, x + 14, y + 13, x, x + 14, y + 14, x, x + 14, y + 15, x, x + 14, y + 16, x, x + 14, y + 17, x + 4, x + 14, y + 18, x + 8, x + 14, y + 19, x + 12, x + 14, y + 20, x + 13, x + 14, y + 21);
        // Add the link
        this.renderArea.addLinkCall(".fortressInsideThirdDoorButton", new CallbackCollection(this.goToThirdRoom.bind(this)));
    };
    InsideFortress.prototype.goToFirstRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom1(this.getGame()));
    };
    InsideFortress.prototype.goToSecondRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom2(this.getGame()));
    };
    InsideFortress.prototype.goToThirdRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom3(this.getGame()));
    };
    InsideFortress.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "insideFortressBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/fortress/inside"), 0, 3);
        // Add the text
        this.renderArea.drawString(Database.getText("fortressInsideText0"), 22, 29);
        this.renderArea.drawString(Database.getText("fortressInsideText1"), 22, 30);
        this.renderArea.drawString(Database.getText("fortressInsideText2"), 22, 31);
        // Add the translated text
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText0"), 22, 33, true);
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText1"), 22, 34, true);
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText2"), 22, 35, true);
        // Add the doors buttons
        this.addFirstDoorButton(8, 10);
        this.addSecondDoorButton(42, 8);
        this.addThirdDoorButton(78, 10);
    };
    return InsideFortress;
})(Place);
///<reference path="Place.ts"/>
var InsideYourBox = (function (_super) {
    __extends(InsideYourBox, _super);
    // Constructor
    function InsideYourBox(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The sweets
        this.sweets = [];
        // Launch the interval
        this.intervalID = setInterval(this.actionInterval.bind(this), 100);
        // Resize and update
        this.renderArea.resize(100, 40);
        this.update();
    }
    // getRenderArea()
    InsideYourBox.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    InsideYourBox.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.intervalID);
    };
    // Private methods
    InsideYourBox.prototype.actionInterval = function () {
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    InsideYourBox.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Add a sweet
        this.sweets.push(new InsideYourBoxSweet());
        // Update the sweets and delete the one which need to be deleted
        for (var i = 0; i < this.sweets.length; i++) {
            if (this.sweets[i].update()) {
                this.sweets.splice(i, 1);
                i--;
            }
        }
        // Draw the sweets
        for (var i = 0; i < this.sweets.length; i++) {
            this.sweets[i].draw(this.renderArea);
        }
        // Draw the text
        this.renderArea.drawArray(Database.getAscii("general/insideYourBox/text"), 0, 5, new RenderTransparency(" ", "%"));
    };
    return InsideYourBox;
})(Place);
var InsideYourBoxSweet = (function () {
    // Constructor
    function InsideYourBoxSweet() {
        // Set the ascii art name
        this.asciiArt = "general/insideYourBox/" + Random.between(0, 10);
        // Set the position
        this.pos = new Pos(-Database.getAsciiWidth(this.asciiArt) + Random.between(0, 99 + Database.getAsciiWidth(this.asciiArt)), -Database.getAsciiHeight(this.asciiArt));
        // Set the speed
        this.speed = Random.between(1, 3);
    }
    // Public methods
    InsideYourBoxSweet.prototype.draw = function (renderArea) {
        // Draw the ascii art at the right position
        renderArea.drawArray(Database.getAscii(this.asciiArt), this.pos.x, this.pos.y);
    };
    InsideYourBoxSweet.prototype.update = function () {
        // If we're out of the screen, we return true
        if (this.pos.y >= 40)
            return true;
        // Increase the speed
        this.speed += 0.3;
        // Increase the position
        this.pos.y += Math.floor(this.speed);
    };
    return InsideYourBoxSweet;
})();
///<reference path="Place.ts"/>
var Inventory = (function (_super) {
    __extends(Inventory, _super);
    // Constructor
    function Inventory(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Resize the area
        this.renderArea.resize(99, 136);
        // Update
        this.update();
    }
    // Public methods
    Inventory.prototype.update = function () {
        // yGap, can increase depending on the stats panel
        var yGap = 0;
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the inventory top
        this.renderArea.drawArray(Database.getAscii("general/inventoryTop"));
        // Draw equipment
        this.drawEquipment();
        // Draw statistics
        yGap += this.drawStats(0, 52);
        // Draw the inventory bottom
        this.renderArea.drawArray(Database.getAscii("general/inventoryBottom"), 0, 55 + yGap);
        // Draw items
        this.drawGridItems(4, 57 + yGap);
    };
    // getRenderArea()
    Inventory.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Inventory.prototype.createArrayFromEqItemsArrayForRenderAreaList = function (eqItemsArray, nothingId) {
        // Create the array
        var arr = [];
        // Add the "Nothing" item
        arr.push(nothingId);
        arr.push(Database.getText("inventorySpecialNothingEqItem") + (Database.getTranslatedText("inventorySpecialNothingEqItem") == "" ? "" : " (" + Database.getTranslatedText("inventorySpecialNothingEqItem") + ")"));
        // Fill the array with eqItems
        for (var savingName in eqItemsArray) {
            if (eqItemsArray[savingName].isPossessed()) {
                arr.push(savingName);
                arr.push(Database.getText(eqItemsArray[savingName].getDatabaseName()) + (Database.getTranslatedText(eqItemsArray[savingName].getDatabaseName()) == "" ? "" : " (" + Database.getTranslatedText(eqItemsArray[savingName].getDatabaseName()) + ")"));
            }
        }
        // Return the array
        return arr;
    };
    Inventory.prototype.disableAllLists = function () {
        $("#inventoryWeaponsList").prop("disabled", true);
        $("#inventoryHatsList").prop("disabled", true);
        $("#inventoryBodyArmoursList").prop("disabled", true);
        $("#inventoryGlovesList").prop("disabled", true);
        $("#inventoryBootsList").prop("disabled", true);
    };
    Inventory.prototype.drawEqItem = function (eqItem, pos, size) {
        // If the eqItem isn't null
        if (eqItem != null) {
            this.renderArea.drawArray(Database.getAscii(eqItem.getAscii()), Math.floor(pos.x + size.x / 2 - Database.getAsciiWidth(eqItem.getAscii()) / 2), Math.floor(pos.y + size.y / 2 - Database.getAsciiHeight(eqItem.getAscii()) / 2), null, eqItem.getSavingName() + "OnHover");
            // Add the tooltip
            this.renderArea.addTooltip(eqItem.getSavingName() + "Tooltip", Database.getText(eqItem.getDatabaseDescriptionName()) + (Database.getTranslatedText(eqItem.getDatabaseDescriptionName()) != "" ? "<br/><br/><i>" + Database.getTranslatedText(eqItem.getDatabaseDescriptionName()) + "</i>" : ""));
            // Add the link
            this.renderArea.addLinkOnHoverShowTooltip("." + eqItem.getSavingName() + "OnHover", "." + eqItem.getSavingName() + "Tooltip");
        }
    };
    Inventory.prototype.drawEquipment = function () {
        // Add backgrounds and lists
        var arr;
        // Weapon
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getWeapons(), "inventorySpecialNothingWeapon");
        if (arr.length > 2)
            this.renderArea.addList(8, 38, 15, "inventoryWeaponsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        // Hat
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getHats(), "inventorySpecialNothingHat");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryHat"), 59, 12);
            this.renderArea.addList(61, 93, 14, "inventoryHatsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Body armour
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getBodyArmours(), "inventorySpecialNothingBodyArmour");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryBodyArmour"), 59, 25);
            this.renderArea.addList(61, 78, 27, "inventoryBodyArmoursList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Gloves
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getGloves(), "inventorySpecialNothingGloves");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryGloves"), 82, 25);
            this.renderArea.addList(84, 93, 27, "inventoryGlovesList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Boots
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getBoots(), "inventorySpecialNothingBoots");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryBoots"), 59, 38);
            this.renderArea.addList(61, 93, 40, "inventoryBootsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Add links which will call callbacks after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightEqItems.bind(this))); // Select the right items
        if (this.getGame().getWeAreQuesting() == true)
            this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.disableAllLists.bind(this))); // Disable all the lists
        // Draw the eqItems
        this.drawEqItem(this.getGame().getSelectedEqItems()["weapon"], new Pos(7, 16), new Pos(32, 33));
        this.drawEqItem(this.getGame().getSelectedEqItems()["hat"], new Pos(60, 16), new Pos(34, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["bodyArmour"], new Pos(60, 28), new Pos(19, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["gloves"], new Pos(83, 28), new Pos(11, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["boots"], new Pos(60, 41), new Pos(34, 8));
    };
    Inventory.prototype.drawGridItem = function (gridItem, x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii(gridItem.getAscii()), x + gridItem.getPosition().x * 23 + Math.floor(23 / 2 - Database.getAsciiWidth(gridItem.getAscii()) / 2), y + gridItem.getPosition().y * 12 + Math.floor(11 / 2 - Database.getAsciiHeight(gridItem.getAscii()) / 2), null, gridItem.getSavingName() + "OnHover");
        // Add the tooltip
        this.renderArea.addTooltip(gridItem.getSavingName() + "Tooltip", "<b>" + Database.getText(gridItem.getDatabaseName()) + "</b><br/>" + Database.getText(gridItem.getDatabaseDescriptionName()) + (Database.getTranslatedText(gridItem.getDatabaseDescriptionName()) != "" ? "<br/><br/><i><b>" + Database.getTranslatedText(gridItem.getDatabaseName()) + "</b><br/>" + Database.getTranslatedText(gridItem.getDatabaseDescriptionName()) + "</i>" : ""));
        // Add the link
        this.renderArea.addLinkOnHoverShowTooltip("." + gridItem.getSavingName() + "OnHover", "." + gridItem.getSavingName() + "Tooltip");
    };
    Inventory.prototype.drawGridItems = function (x, y) {
        for (var savingName in this.getGame().getGridItems()) {
            // If we possess this item, we draw it
            if (this.getGame().getGridItems()[savingName].isPossessed())
                this.drawGridItem(this.getGame().getGridItems()[savingName], x, y);
        }
    };
    Inventory.prototype.drawStats = function (x, y) {
        // Set the additional damage text
        var additionalDamageText;
        if (Saving.loadBool("gridItemPossessedXinopherydonClaw") && (this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSavingName() == "eqItemBodyArmoursEnchantedKnightBodyArmour"))
            additionalDamageText = "";
        else if (Saving.loadBool("gridItemPossessedXinopherydonClaw"))
            additionalDamageText = " x 2";
        else if ((this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSavingName() == "eqItemBodyArmoursEnchantedKnightBodyArmour"))
            additionalDamageText = " / 2";
        else
            additionalDamageText = "";
        // This array will contain the special abilities
        var specialAbilities = [];
        // First line
        this.renderArea.drawString(this.getGame().getPlayer().getMaxHp().toString(), x + 16, y); // player's maximum HP
        this.renderArea.drawString(this.getGame().getPlayer().getQuestEntityWeapon().getRealDamageText() + additionalDamageText, x + 43, y); // weapon damage
        this.renderArea.drawString(this.getGame().getPlayer().getQuestEntityWeapon().getSpeedText(), x + 71, y); // weapon speed
        // Fill the special abilities array with grid items abilities
        for (var savingName in this.getGame().getGridItems()) {
            // If we possess this item
            if (this.getGame().getGridItems()[savingName].isPossessed()) {
                // If it has a special ability, we add it
                if (this.getGame().getGridItems()[savingName].getSpecialAbility() != null)
                    specialAbilities.push(this.getGame().getGridItems()[savingName].getSpecialAbility());
            }
        }
        // Fill the special abilities array with eq items abilities
        if (this.getGame().getSelectedEqItems()["weapon"] != null && this.getGame().getSelectedEqItems()["weapon"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["weapon"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["hat"] != null && this.getGame().getSelectedEqItems()["hat"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["hat"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["bodyArmour"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["gloves"] != null && this.getGame().getSelectedEqItems()["gloves"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["gloves"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["boots"] != null && this.getGame().getSelectedEqItems()["boots"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["boots"].getSpecialAbility());
        // Fill the special abilities with gifts
        if (Saving.loadNumber("gameGiftPower") > 0) {
            specialAbilities.push("GIFT : your attacks are " + (Saving.loadNumber("gameGiftPower") * 20).toString() + "% more powerful.");
        }
        if (Saving.loadNumber("gameGiftHealth") > 0) {
            specialAbilities.push("GIFT : you have " + (Saving.loadNumber("gameGiftHealth") * 20).toString() + "% more health points.");
        }
        if (Saving.loadNumber("gameGiftMagic") > 0) {
            specialAbilities.push("GIFT : the spell and potion countdowns are reduced by " + (Saving.loadNumber("gameGiftMagic") * 15) + "%.");
        }
        // If the special abilities array is empty, add the "no special ability" text
        if (specialAbilities.length == 0)
            specialAbilities.push("You have no special ability.");
        // Draw the special abilities
        for (var i = 0; i < specialAbilities.length; i++) {
            // If it's not the first one, we draw the background
            if (i != 0) {
                this.renderArea.drawArray(Database.getAscii("general/specialAbilityBackground"), x, y + 2 + i);
            }
            // We draw the special ability
            this.renderArea.drawString(specialAbilities[i], x + 7, y + 2 + i);
        }
        // We return the height added by the drawing of the special abilities
        return specialAbilities.length - 1;
    };
    Inventory.prototype.selectedEqItem = function () {
        // Set the eqItems
        if ($("#inventoryWeaponsList").length)
            Saving.saveString("gameWeaponSelected", $("#inventoryWeaponsList").find(":selected").attr("id"));
        else
            Saving.saveString("gameWeaponSelected", "inventorySpecialNothingWeapon");
        if ($("#inventoryHatsList").length)
            Saving.saveString("gameHatSelected", $("#inventoryHatsList").find(":selected").attr("id"));
        else
            Saving.saveString("gameHatSelected", "inventorySpecialNothingHat");
        if ($("#inventoryBodyArmoursList").length)
            Saving.saveString("gameBodyArmourSelected", $("#inventoryBodyArmoursList").find(":selected").attr("id"));
        else
            Saving.saveString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
        if ($("#inventoryGlovesList").length)
            Saving.saveString("gameGlovesSelected", $("#inventoryGlovesList").find(":selected").attr("id"));
        else
            Saving.saveString("gameGlovesSelected", "inventorySpecialNothingGloves");
        if ($("#inventoryBootsList").length)
            Saving.saveString("gameBootsSelected", $("#inventoryBootsList").find(":selected").attr("id"));
        else
            Saving.saveString("gameBootsSelected", "inventorySpecialNothingBoots");
        // Fill the selected eqItems array
        this.getGame().emptyAndFillSelectedEqItemsArray();
        // Re calculate the player max hp, because it may have changed
        this.getGame().getPlayer().reCalcMaxHp();
        // Update inventory
        this.update();
        this.getGame().updatePlace();
    };
    Inventory.prototype.selectRightEqItems = function () {
        // We select the right eqItems
        $("#" + Saving.loadString("gameWeaponSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameHatSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameBodyArmourSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameGlovesSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameBootsSelected")).prop('selected', true);
    };
    return Inventory;
})(Place);
///<reference path="EqItem.ts"/>
var IronAxe = (function (_super) {
    __extends(IronAxe, _super);
    // Constructor
    function IronAxe() {
        _super.call(this, "eqItemWeaponIronAxe", "eqItemWeaponIronAxeName", "eqItemWeaponIronAxeDescription", "eqItems/weapons/ironAxe");
    }
    // Public getters
    IronAxe.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("An iron axe", "an iron axe"), player.getClassicCollisionBoxCollection(), 3);
        qew.getCloseCombatDelay().setFixedDelay(3, 0);
        return qew;
    };
    return IronAxe;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var JellyFish = (function (_super) {
    __extends(JellyFish, _super);
    // Constructor
    function JellyFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A jellyfish", "a jellyfish"), new RenderArea(6, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(6, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 4), new Pos(4, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(42);
        this.setHp(42);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/jellyFish"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Poisoned tentacles", "poisoned tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 7))), 2));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    // Public methods
    JellyFish.prototype.update = function () {
        // We follow the player
        this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 3);
        // We call the mother update method
        _super.prototype.update.call(this);
    };
    // willDie()
    JellyFish.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(120), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return JellyFish;
})(QuestEntity);
var Keyboard;
(function (Keyboard) {
    // The game
    var game;
    function setGame(gameGiven) {
        game = gameGiven;
    }
    Keyboard.setGame = setGame;
    function execute() {
        // Handle keydown events
        $(document).keydown(function (event) {
            // Can we use hotkeys ?
            var canUseHotkeys = getCanUseHotkeys();
            // Handle hotkeys
            for (var keyString in game.getHotkeys()) {
                if (event.which == game.getHotkeys()[keyString].getKey()) {
                    game.getHotkeys()[keyString].setPressed(true);
                    if (canUseHotkeys) {
                        if (game.getHotkeys()[keyString].getCallbackCollection() != null)
                            game.getHotkeys()[keyString].getCallbackCollection().fire();
                        event.preventDefault();
                        return false;
                    }
                }
            }
            // Handle special hotkeys
            if (canUseHotkeys) {
                for (var i = 0; i < game.getSpecialHotkeys().length; i++) {
                    if (event.which == game.getSpecialHotkeys()[i].getKey()) {
                        if (game.getSpecialHotkeys()[i].getCallbackCollection() != null)
                            game.getSpecialHotkeys()[i].getCallbackCollection().fire();
                        event.preventDefault();
                        return false;
                    }
                }
            }
        });
        // Handle keyup events
        $(document).keyup(function (event) {
            // Handle hotkeys
            for (var keyString in game.getHotkeys()) {
                if (event.which == game.getHotkeys()[keyString].getKey()) {
                    game.getHotkeys()[keyString].setPressed(false);
                }
            }
        });
    }
    Keyboard.execute = execute;
    function getCanUseHotkeys() {
        if ($(':focus').hasClass("noHotkeys"))
            return false;
        return true;
    }
    function isKeyPressed(keyString) {
        return game.getHotkeys()[keyString].getPressed();
    }
    Keyboard.isKeyPressed = isKeyPressed;
})(Keyboard || (Keyboard = {}));
///<reference path="QuestEntity.ts"/>
var Knight = (function (_super) {
    __extends(Knight, _super);
    // Constructor
    function Knight(quest, pos) {
        _super.call(this, quest, pos, new Naming("A knight", "a knight"), new RenderArea(15, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(3, 1), new Pos(1, 1)), new CollisionBox(this, new Pos(6, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(13, 1)), new CollisionBox(this, new Pos(3, 4), new Pos(9, 1)), new CollisionBox(this, new Pos(4, 5), new Pos(2, 1)), new CollisionBox(this, new Pos(9, 5), new Pos(2, 1))), new QuestEntityMovement(new Pos(0, 0)));
        // Default movement related variables values
        this.moving = false;
        this.currentAsciiNumber = 1;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(150);
        this.setHp(150);
        // Set the ascii art and the transparent character
        this.reDrawAscii();
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A sword", "a sword"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(17, 7))), 70));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(8);
    }
    // update()
    Knight.prototype.update = function () {
        // If we're not moving
        if (this.moving == false) {
            // If we're able to move now
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(-3, 0)))) {
                this.moving = true; // We move
                this.getQuestEntityMovement().setOffset(new Pos(-3, 0)); // The movement
            }
        }
        else {
            // If we're not able to move anymore
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(-3, 0))) == false) {
                this.moving = false; // We stop moving
                this.getQuestEntityMovement().setOffset(new Pos(0, 0)); // The movement
                this.currentAsciiNumber = 1; // currentAsciiNumber
                this.reDrawAscii();
            }
            else {
                // Change the currentAsciiNumber
                this.currentAsciiNumber += 1;
                if (this.currentAsciiNumber > 5)
                    this.currentAsciiNumber = 1;
                this.reDrawAscii();
            }
        }
        // Call the mother class update
        _super.prototype.update.call(this);
    };
    // willDie()
    Knight.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(800 + Random.upTo(15) * 100), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        if (Random.oneChanceOutOf(5))
            this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemBodyArmoursKnightBodyArmour", "You found a body armour on a knight", "You gain a knight body armour"));
    };
    // Private methods
    Knight.prototype.reDrawAscii = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/knight" + this.currentAsciiNumber.toString()));
    };
    return Knight;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var KnightBodyArmour = (function (_super) {
    __extends(KnightBodyArmour, _super);
    // Constructor
    function KnightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursKnightBodyArmour", "eqItemBodyArmoursKnightBodyArmourName", "eqItemBodyArmoursKnightBodyArmourDescription", "eqItems/bodyArmours/knightBodyArmour");
    }
    // Special ability
    KnightBodyArmour.prototype.getSpecialAbility = function () {
        return "Damage taken reduced by 30% (knight body armour)";
    };
    // inflictDamage()
    KnightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 30 / 100);
    };
    return KnightBodyArmour;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Lava = (function (_super) {
    __extends(Lava, _super);
    // Constructor
    function Lava(quest, globalPosition, size) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Lava", "lava"));
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Fire", "fire"), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), size)), 1000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    return Lava;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var LeatherBoots = (function (_super) {
    __extends(LeatherBoots, _super);
    // Constructor
    function LeatherBoots() {
        _super.call(this, "eqItemBootsLeatherBoots", "eqItemBootsLeatherBootsName", "eqItemBootsLeatherBootsDescription", "eqItems/boots/leatherBoots");
    }
    return LeatherBoots;
})(EqItem);
///<reference path="EqItem.ts"/>
var LeatherGloves = (function (_super) {
    __extends(LeatherGloves, _super);
    // Constructor
    function LeatherGloves() {
        _super.call(this, "eqItemGlovesLeatherGloves", "eqItemGlovesLeatherGlovesName", "eqItemGlovesLeatherGlovesDescription", "eqItems/gloves/leatherGloves");
    }
    return LeatherGloves;
})(EqItem);
///<reference path="Place.ts"/>
Saving.registerBool("lighthousePuzzleDone", false);
var Lighthouse = (function (_super) {
    __extends(Lighthouse, _super);
    // Constructor
    function Lighthouse(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Selected question id
        this.selectedQuestionId = "lighthouseQuestionWho";
        // Speech id
        this.speechId = null;
        // Show the puzzle?
        this.showPuzzle = false;
        // The puzzle
        this.puzzle = null;
        // We create the questions array
        this.createQuestionsArray();
        // We resize and update
        this.renderArea.resizeFromArray(Database.getAscii("places/lighthouse/lighthouse"), 0, 4); // 4 in order to add a space below the lighthouse, so that it looks nicer
        this.update();
    }
    // getRenderArea()
    Lighthouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Public methods
    Lighthouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "lighthouseBackToTheMapButton");
        // Draw the lighthouse
        this.renderArea.drawArray(Database.getAscii("places/lighthouse/lighthouse"), 0, 3);
        // Add the questions list
        this.renderArea.addList(1, 55, 7, "lighthouseQuestionsList", new CallbackCollection(this.questionSelected.bind(this)), this.questionsArray);
        // Add the ask button and the link
        this.renderArea.addAsciiRealButton(Database.getText("lighthouseAskButton"), 5, 10, "lighthouseAskButton", Database.getTranslatedText("lighthouseAskButton"));
        this.renderArea.addLinkCall(".lighthouseAskButton", new CallbackCollection(this.ask.bind(this)));
        // Draw the speech if there's a speech id
        if (this.speechId != null) {
            this.renderArea.drawSpeech(Database.getText(this.speechId), 17, 75, 99, "lighthouseSpeech", Database.getTranslatedText(this.speechId));
        }
        // If we should show the puzzle
        if (this.showPuzzle) {
            // Create the puzzle if it's not done yet
            if (this.puzzle == null)
                this.puzzle = new LighthousePuzzle(this);
            // Draw it
            this.puzzle.draw(this.renderArea, new Pos(2, 12));
            // Add the reset button
            this.renderArea.addAsciiRealButton(Database.getText("lighthousePuzzleResetButton"), 2, 34, "lighthousePuzzleResetButton", Database.getTranslatedText("lighthousePuzzleResetButton"));
            this.renderArea.addLinkCall(".lighthousePuzzleResetButton", new CallbackCollection(this.resetPuzzle.bind(this)));
        }
        // Add the link which will call the selectRightQuestion method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightQuestion.bind(this)));
    };
    // Public getters
    Lighthouse.prototype.getPuzzle = function () {
        return this.puzzle;
    };
    // Public setters
    Lighthouse.prototype.setSpeechId = function (speechId) {
        this.speechId = speechId;
    };
    // Private methods
    Lighthouse.prototype.addQuestion = function (id, text, translatedText) {
        if (translatedText === void 0) { translatedText = null; }
        this.questionsArray.push(id);
        if (translatedText == null)
            this.questionsArray.push(text);
        else
            this.questionsArray.push(text + (translatedText != "" ? " (" + translatedText + ")" : ""));
    };
    Lighthouse.prototype.ask = function () {
        this.speechId = this.selectedQuestionId + "Speech";
        if (this.selectedQuestionId == "lighthouseQuestionDragon")
            this.showPuzzle = true;
        else
            this.showPuzzle = false;
        this.update();
        this.getGame().updatePlace();
    };
    Lighthouse.prototype.createQuestionsArray = function () {
        // We empty the array
        this.questionsArray = [];
        // Add the first basic questions
        this.addQuestion("lighthouseQuestionWho", Database.getText("lighthouseQuestionWho"), Database.getTranslatedText("lighthouseQuestionWho"));
        this.addQuestion("lighthouseQuestionWhat", Database.getText("lighthouseQuestionWhat"), Database.getTranslatedText("lighthouseQuestionWhat"));
        this.addQuestion("lighthouseQuestionWhyEatCandies", Database.getText("lighthouseQuestionWhyEatCandies"), Database.getTranslatedText("lighthouseQuestionWhyEatCandies"));
        this.addQuestion("lighthouseQuestionCandyBox", Database.getText("lighthouseQuestionCandyBox"), Database.getTranslatedText("lighthouseQuestionCandyBox"));
        // Add the question about the dragon is we unlocked it
        if (Saving.loadBool("dragonUnlockedCyclops")) {
            this.addQuestion("lighthouseQuestionDragon", Database.getText("lighthouseQuestionDragon"), Database.getTranslatedText("lighthouseQuestionDragon"));
        }
    };
    Lighthouse.prototype.questionSelected = function () {
        // Get the selected language id
        this.selectedQuestionId = $("#lighthouseQuestionsList").find(":selected").attr("id");
        // Update the ligthouse
        this.update();
        this.getGame().updatePlace();
    };
    Lighthouse.prototype.resetPuzzle = function () {
        // Re create the puzzle
        this.puzzle = new LighthousePuzzle(this);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Lighthouse.prototype.selectRightQuestion = function () {
        // We select the right question
        $("#" + this.selectedQuestionId).prop('selected', true);
    };
    return Lighthouse;
})(Place);
var LighthousePuzzle = (function () {
    // Constructor
    function LighthousePuzzle(lighthouse) {
        // Create the parts
        this.createParts(lighthouse);
    }
    // Public methods
    LighthousePuzzle.prototype.draw = function (renderArea, pos) {
        for (var i = 0; i < 7; i++) {
            for (var j = 4; j >= 0; j--) {
                if (this.parts[i][j] != null)
                    this.parts[i][j].draw(renderArea, pos.plus(new Pos(i * 7, j * 4)));
            }
        }
    };
    // Public getters
    LighthousePuzzle.prototype.getParts = function () {
        return this.parts;
    };
    // Private methods
    LighthousePuzzle.prototype.createParts = function (lighthouse) {
        this.parts = [];
        // Add the arrays inside the arrays, and set each part to null
        for (var i = 0; i < 7; i++) {
            this.parts[i] = [];
            for (var j = 0; j < 5; j++) {
                this.parts[i][j] = null;
            }
        }
        // Add the central part, the first shown at first
        // It will allow use to show up to three other parts around
        this.parts[3][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_AROUND, 3, new Pos(3, 2), true);
        // Add the show right, show below move below to the right and show above parts
        this.parts[3][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(3, 1), false); // above the central part
        this.parts[4][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(4, 1), false); // top right corner of the central part
        this.parts[4][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT, 5, new Pos(4, 2), false); // on the right of the central part
        this.parts[3][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(3, 3), false); // below the central part
        // Add the lives part
        this.parts[5][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(5, 2), false);
        // Add the show below
        this.parts[4][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(4, 3), false);
        // Add the cool path
        this.parts[3][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT_RIGHT, 2, new Pos(3, 4), false);
        this.parts[4][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(4, 4), false);
        this.parts[5][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(5, 4), false);
        this.parts[6][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(6, 4), false);
        this.parts[0][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 3), false);
        this.parts[6][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(6, 2), false);
        this.parts[6][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(6, 1), false);
        // Add the lives part at the end of the cool path
        this.parts[5][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(5, 1), false);
        // Add the path to the second move below line to the right
        this.parts[2][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(2, 4), false);
        this.parts[1][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(1, 4), false);
        this.parts[0][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT, 0, new Pos(0, 4), false);
        // And the end (9 parts allowing us to give life to the ? ?)
        this.parts[0][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(0, 0), false);
        this.parts[0][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 1), false);
        this.parts[0][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 2), false);
        this.parts[1][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 0, new Pos(1, 0), false);
        this.parts[1][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE, 0, new Pos(1, 1), false);
        this.parts[1][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(1, 2), false);
        this.parts[2][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(2, 0), false);
        this.parts[2][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(2, 1), false);
        this.parts[2][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(2, 2), false);
        // Add three useless parts to fill the blanks
        this.parts[3][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(3, 0), false);
        this.parts[4][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(4, 0), false);
        this.parts[5][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(5, 0), false);
        this.parts[6][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.WHAT, 0, new Pos(6, 0), true);
        // Add some more useless parts to fill the blanks
        this.parts[1][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(1, 3), false);
        this.parts[2][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.NOTHING_HERE, 0, new Pos(2, 3), false);
        this.parts[5][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(5, 3), false);
        this.parts[6][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(6, 3), false);
    };
    return LighthousePuzzle;
})();
var LighthousePuzzlePart = (function () {
    // Constructor
    function LighthousePuzzlePart(lighthouse, type, lives, arrayPos, shown) {
        if (shown === void 0) { shown = false; }
        // Set from parameters
        this.lighthouse = lighthouse;
        this.type = type;
        this.lives = lives;
        this.arrayPos = arrayPos;
        this.shown = shown;
    }
    // Public methods
    LighthousePuzzlePart.prototype.addLives = function (howMany) {
        this.lives += howMany;
        if (this.lives > 5)
            this.lives = 5;
    };
    LighthousePuzzlePart.prototype.draw = function (renderArea, pos) {
        // If the part is shown already
        if (this.shown) {
            // Draw something different depending on the type
            switch (this.type) {
                case LighthousePuzzlePartType.BLANK:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/blankPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_AROUND:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showAroundPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_LEFT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showLeft"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_BELOW:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showBelow"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_ABOVE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showAbove"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_LEFT_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showLeftRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/moveBelowLineToTheRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/moveLeftLineAbove"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.LIVES:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/livesPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.WHAT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/whatPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.NOTHING_HERE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/nothingHerePart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.STONE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/stonePart"), pos.x, pos.y);
                    break;
            }
            // Draw the lives, depending on the type
            switch (this.type) {
                // By default, we draw the lives
                default:
                    renderArea.drawHorizontalLine("#", pos.x + 1, pos.x + 1 + this.lives, pos.y + 1);
                    break;
            }
            // Add a button if we have enough lives
            if (this.lives > 0) {
                // Buttons
                for (var i = 0; i < 4; i++) {
                    renderArea.addAsciiButton(pos.x + 1, pos.x + 6, pos.y + 1 + i, "lighthousePuzzlePart" + pos.x.toString() + "_" + pos.y.toString());
                }
                // The link
                renderArea.addLinkCall(".lighthousePuzzlePart" + pos.x.toString() + "_" + pos.y.toString(), new CallbackCollection(this.clicked.bind(this)));
            }
        }
    };
    // Public getters
    LighthousePuzzlePart.prototype.getLives = function () {
        return this.lives;
    };
    LighthousePuzzlePart.prototype.getShown = function () {
        return this.shown;
    };
    // Public setters
    LighthousePuzzlePart.prototype.setArrayPos = function (arrayPos) {
        this.arrayPos = arrayPos;
    };
    LighthousePuzzlePart.prototype.setShown = function (shown) {
        this.shown = shown;
    };
    // Private methods
    LighthousePuzzlePart.prototype.clicked = function () {
        // Create a temporary part, used later
        var tempPart;
        // Do something different depending on the type
        switch (this.type) {
            case LighthousePuzzlePartType.SHOW_AROUND:
                // If we can show the part above, we show it
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].setShown(true);
                else if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                else if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].setShown(true);
                else if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_LEFT:
                // If we can show the part on the left, we show it
                if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_BELOW:
                // If we can show the part below, we show it
                if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_ABOVE:
                // If we can show the part above, we show it
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_RIGHT:
                // If we can show the part on the right, we show it
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT:
                if (this.arrayPos.y < 4) {
                    tempPart = this.lighthouse.getPuzzle().getParts()[6][this.arrayPos.y + 1];
                    for (var i = 6; i > 0; i--) {
                        this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1] = this.lighthouse.getPuzzle().getParts()[i - 1][this.arrayPos.y + 1];
                        if (this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1] != null)
                            this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1].setArrayPos(new Pos(i, this.arrayPos.y + 1));
                    }
                    this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1] = tempPart;
                    if (this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1] != null)
                        this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1].setArrayPos(new Pos(0, this.arrayPos.y + 1));
                }
                break;
            case LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE:
                if (this.arrayPos.x > 0) {
                    tempPart = this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][0];
                    for (var i = 0; i <= 3; i++) {
                        this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i] = this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i + 1];
                        if (this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i] != null)
                            this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i].setArrayPos(new Pos(this.arrayPos.x - 1, i));
                    }
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4] = tempPart;
                    if (this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4] != null)
                        this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4].setArrayPos(new Pos(this.arrayPos.x - 1, 4));
                }
                break;
            case LighthousePuzzlePartType.LIVES:
                // If we can increase the lives of the part above, we show it
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].addLives(1);
                // If we can increase the lives of the part on the right, we show it
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].addLives(1);
                // If we can increase the lives of the part below, we show it
                if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].addLives(1);
                // If we can increase the lives of the part on the left, we show it
                if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].addLives(1);
                break;
            case LighthousePuzzlePartType.SHOW_LEFT_RIGHT:
                // If we can show the part on the right, we show it
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                else if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.WHAT:
                // Change the type
                this.type = LighthousePuzzlePartType.STONE;
                // If we didn't have the stone before
                if (Saving.loadBool("gridItemPossessedP") == false) {
                    // Get the stone
                    this.lighthouse.getGame().gainItem("gridItemPossessedP");
                    // Change the speech
                    this.lighthouse.setSpeechId("lighthouseFoundStone");
                }
                else {
                    // Change the speech
                    this.lighthouse.setSpeechId("lighthouseFoundStoneAgain");
                }
                break;
        }
        // Decrease our lives
        this.lives -= 1;
        // Update the lighthouse
        this.lighthouse.update();
        this.lighthouse.getGame().updatePlace();
    };
    return LighthousePuzzlePart;
})();
var LighthousePuzzlePartType;
(function (LighthousePuzzlePartType) {
    LighthousePuzzlePartType[LighthousePuzzlePartType["BLANK"] = 0] = "BLANK";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_AROUND"] = 1] = "SHOW_AROUND";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_LEFT"] = 2] = "SHOW_LEFT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_BELOW"] = 3] = "SHOW_BELOW";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_ABOVE"] = 4] = "SHOW_ABOVE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_RIGHT"] = 5] = "SHOW_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["MOVE_BELOW_LINE_TO_THE_RIGHT"] = 6] = "MOVE_BELOW_LINE_TO_THE_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["MOVE_LEFT_LINE_ABOVE"] = 7] = "MOVE_LEFT_LINE_ABOVE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["LIVES"] = 8] = "LIVES";
    LighthousePuzzlePartType[LighthousePuzzlePartType["NOTHING_HERE"] = 9] = "NOTHING_HERE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["WHAT"] = 10] = "WHAT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_LEFT_RIGHT"] = 11] = "SHOW_LEFT_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["STONE"] = 12] = "STONE";
})(LighthousePuzzlePartType || (LighthousePuzzlePartType = {}));
///<reference path="EqItem.ts"/>
var LightweightBodyArmour = (function (_super) {
    __extends(LightweightBodyArmour, _super);
    // Constructor
    function LightweightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursLightweightBodyArmour", "eqItemBodyArmoursLightweightBodyArmourName", "eqItemBodyArmoursLightweightBodyArmourDescription", "eqItems/bodyArmours/lightweightBodyArmour");
    }
    // Special ability
    LightweightBodyArmour.prototype.getSpecialAbility = function () {
        return "Damage taken reduced by 15% (lightweight body armour)";
    };
    // inflictDamage()
    LightweightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 15 / 100);
    };
    return LightweightBodyArmour;
})(EqItem);
var LocalSaving;
(function (LocalSaving) {
    // Public functions
    function getSlotSummaryAsString(slotId) {
        // If there's no save on this slot
        if (loadString(slotId) == null) {
            return "empty";
        }
        else {
            return loadString(slotId) + ", candies : " + loadString(slotId + ".gameCandiesCurrent");
        }
    }
    LocalSaving.getSlotSummaryAsString = getSlotSummaryAsString;
    function load(slotId) {
        // If this sot doesn't seem to exist, we return false
        if (loadString(slotId) == null)
            return false;
        // Load bools
        for (var str in Saving.getAllBools()) {
            Saving.saveBool(str, this.loadBool(slotId + "." + str));
        }
        // Load numbers
        for (var str in Saving.getAllNumbers()) {
            Saving.saveNumber(str, this.loadNumber(slotId + "." + str));
        }
        // Load strings
        for (var str in Saving.getAllStrings()) {
            Saving.saveString(str, this.loadString(slotId + "." + str));
        }
        // No error, return true
        return true;
    }
    LocalSaving.load = load;
    function save(slotId) {
        try {
            // Set the date on the slotId localStorage item
            localStorage.setItem(slotId, getDateAsString());
            // Save bools
            for (var str in Saving.getAllBools()) {
                localStorage.setItem(slotId + "." + str, Saving.boolToString(Saving.getAllBools()[str]));
            }
            // Save numbers
            for (var str in Saving.getAllNumbers()) {
                localStorage.setItem(slotId + "." + str, Saving.numberToString(Saving.getAllNumbers()[str]));
            }
            // Save strings
            for (var str in Saving.getAllStrings()) {
                localStorage.setItem(slotId + "." + str, Saving.getAllStrings()[str]);
            }
        }
        catch (e) {
            if (e == DOMException.QUOTA_EXCEEDED_ERR) {
                console.log("Quota exceeded error : we're trying to save some data through HTML5's web storage, but we don't have enough space to save what we want.");
            }
            // We return false, since there was an error
            return false;
        }
        // No error, return true
        return true;
    }
    LocalSaving.save = save;
    function supportsLocalSaving() {
        if ('localStorage' in window && window['localStorage'] !== null)
            return true;
        return false;
    }
    LocalSaving.supportsLocalSaving = supportsLocalSaving;
    // Private functions
    function getDateAsString() {
        var currentdate = new Date();
        return (currentdate.getDate() < 10 ? "0" : "") // 0 before day
            + currentdate.getDate() // Day
            + "/"
            + (currentdate.getMonth() + 1 < 10 ? "0" : "") // 0 before month
            + (currentdate.getMonth() + 1) // month
            + "/"
            + currentdate.getFullYear() // year
            + " @ "
            + (currentdate.getHours() < 10 ? "0" : "") // 0 before hours
            + currentdate.getHours() // hour
            + ":"
            + (currentdate.getMinutes() < 10 ? "0" : "") // 0 before minutes
            + currentdate.getMinutes() // minutes
            + ":"
            + (currentdate.getSeconds() < 10 ? "0" : "") // 0 before seconds
            + currentdate.getSeconds(); // seconds
    }
    function loadBool(key) {
        return Saving.stringToBool(localStorage.getItem(key));
    }
    LocalSaving.loadBool = loadBool;
    function loadNumber(key) {
        return Saving.stringToNumber(localStorage.getItem(key));
    }
    LocalSaving.loadNumber = loadNumber;
    function loadString(key) {
        return localStorage.getItem(key);
    }
    LocalSaving.loadString = loadString;
})(LocalSaving || (LocalSaving = {}));
///<reference path="Place.ts"/>
// Buttons unlocked
Saving.registerBool("lollipopFarmPlant1LollipopButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant10LollipopsButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant100LollipopsButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant1000LollipopsButtonUnlocked", false);
// How many lollipops planted ?
Saving.registerNumber("lollipopFarmLollipopsPlanted", 0);
// The production
Saving.registerNumber("lollipopFarmTimeSinceLastProduction", 0);
Saving.registerBool("lollipopFarmIsProductionEachSecond", false);
Saving.registerNumber("lollipopFarmProduction", 0);
// The mill
Saving.registerBool("lollipopFarmConstructMillButtonUnlocked", false);
Saving.registerBool("lollipopFarmMillConstructed", false);
// The pond
Saving.registerBool("lollipopFarmDigPondButtonUnlocked", false);
Saving.registerBool("lollipopFarmPondDug", false);
Saving.registerNumber("lollipopFarmPondHowManyLolligators", 0);
Saving.registerBool("lollipopFarmPondFeedingLolligators", false);
Saving.registerNumber("lollipopFarmPondConversionRate", 0);
// The candies production
Saving.registerNumber("lollipopFarmPreviousCandiesProduction", 1);
Saving.registerNumber("lollipopFarmCurrentCandiesProduction", 1);
var LollipopFarm = (function (_super) {
    __extends(LollipopFarm, _super);
    // Constructor
    function LollipopFarm(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Pond lines
        this.pondLines = [];
        // Pond lolligators
        this.pondLolligators = [];
        // Resize the area
        this.renderArea.resizeFromArray(Database.getAscii("places/lollipopFarm/lollipopFarm"), 0, 12);
        // Update
        this.update();
        // Add pond lines to the pond lines array
        this.addPondLine(new PondLine(8, 37)); // first line, index 0 but at y position 3 on the pond
        this.addPondLine(new PondLine(9, 38)); // second line, index 1, y position 4
        this.addPondLine(new PondLine(9, 40)); // etc
        this.addPondLine(new PondLine(8, 43));
        this.addPondLine(new PondLine(8, 46));
        this.addPondLine(new PondLine(3, 47));
        this.addPondLine(new PondLine(4, 48));
        this.addPondLine(new PondLine(9, 45));
        this.addPondLine(new PondLine(12, 44));
    }
    // Public methods
    LollipopFarm.prototype.willBeDisplayed = function () {
        // We check lollipops
        this.checkLollipops();
        // We add the lollipops callback
        this.getGame().getLollipops().getCallbackCollection().addCallback(this.checkLollipops.bind(this));
        // We add the one second callback for the pond
        this.getGame().getOneSecondCallbackCollection().addCallback(this.handlePond.bind(this));
    };
    // getRenderArea()
    LollipopFarm.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    LollipopFarm.prototype.addPondLine = function (pondLine) {
        this.pondLines.push(pondLine);
    };
    LollipopFarm.prototype.addPondLolligator = function (pondLolligator) {
        this.pondLolligators.push(pondLolligator);
    };
    LollipopFarm.prototype.beginFeedingLolligators = function () {
        // We set the bool
        Saving.saveBool("lollipopFarmPondFeedingLolligators", true);
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    LollipopFarm.prototype.buyLolligator = function () {
        if (this.getGame().getCandies().getCurrent() >= 1200) {
            this.getGame().getCandies().add(-1200);
            // Update the number of lolligators
            Saving.saveNumber("lollipopFarmPondHowManyLolligators", Saving.loadNumber("lollipopFarmPondHowManyLolligators") + 1);
            // Update the conversion rate
            this.updatePondConversionRate();
            // Update the place
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.checkLollipops = function () {
        // We possibly unlock some buttons used for planting lollipops
        if (Saving.loadBool("lollipopFarmPlant1LollipopButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 1) {
            Saving.saveBool("lollipopFarmPlant1LollipopButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 10) {
            Saving.saveBool("lollipopFarmPlant10LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant100LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 100) {
            Saving.saveBool("lollipopFarmPlant100LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant1000LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 1000) {
            Saving.saveBool("lollipopFarmPlant1000LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        // We possibly unlock the button used to construct the mill
        if (Saving.loadBool("lollipopFarmConstructMillButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 10000) {
            Saving.saveBool("lollipopFarmConstructMillButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        // We possibly unlock the button used to dig the pond
        if (Saving.loadBool("lollipopFarmDigPondButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 100000) {
            Saving.saveBool("lollipopFarmDigPondButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.constructMill = function () {
        if (this.getGame().getLollipops().getCurrent() >= 10000) {
            this.getGame().getLollipops().add(-10000);
            Saving.saveBool("lollipopFarmMillConstructed", true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.digPond = function () {
        if (this.getGame().getLollipops().getCurrent() >= 100000) {
            this.getGame().getLollipops().add(-100000);
            Saving.saveBool("lollipopFarmPondDug", true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.drawFieldStuff = function (x, y) {
        // A variable useful later
        var plantingButtonsXPos;
        // How many lollipops planted
        this.renderArea.drawString("Lollipops planted : " + Algo.numberToStringButNicely(Saving.loadNumber("lollipopFarmLollipopsPlanted")), x, y);
        // Button(s) to plant lollipops
        // If the first button is unlocked but not the second
        if (Saving.loadBool("lollipopFarmPlant1LollipopButtonUnlocked") == true && Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == false) {
            this.renderArea.addAsciiRealButton("Plant 1 lollipop", x, y + 2, "lollipopFarmPlant1LollipopButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant1LollipopButton", new CallbackCollection(this.plantLollipops.bind(this, 1)));
        }
        else if (Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == true) {
            // We set the x position to 0
            plantingButtonsXPos = 0;
            // We draw the first text
            this.renderArea.drawString("Plant", x, y + 2);
            plantingButtonsXPos += 6;
            // We add the button to plant 1
            this.renderArea.addAsciiRealButton("1", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant1LollipopButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant1LollipopButton", new CallbackCollection(this.plantLollipops.bind(this, 1)));
            plantingButtonsXPos += 2;
            // We add the button to plant 10
            this.renderArea.addAsciiRealButton("10", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant10LollipopsButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant10LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 10)));
            plantingButtonsXPos += 3;
            // We possibly add the button to plant 100
            if (Saving.loadBool("lollipopFarmPlant100LollipopsButtonUnlocked") == true) {
                this.renderArea.addAsciiRealButton("100", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant100LollipopsButton");
                this.renderArea.addLinkCall(".lollipopFarmPlant100LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 100)));
                plantingButtonsXPos += 4;
            }
            // We possibly add the button to plant 100
            if (Saving.loadBool("lollipopFarmPlant1000LollipopsButtonUnlocked") == true) {
                this.renderArea.addAsciiRealButton("1000", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant1000LollipopsButton");
                this.renderArea.addLinkCall(".lollipopFarmPlant1000LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 1000)));
                plantingButtonsXPos += 5;
            }
            // We add the final text
            this.renderArea.drawString("lollipops", x + plantingButtonsXPos, y + 2);
        }
        // The production
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 0) {
            this.renderArea.drawString("Production : " + this.getProductionAsString(), x, y + 4);
        }
    };
    LollipopFarm.prototype.drawMillStuff = function (x, y) {
        // Button to construct the mill (show if the button is unlocked and the mill isn't constructed yet)
        if (Saving.loadBool("lollipopFarmConstructMillButtonUnlocked") == true && Saving.loadBool("lollipopFarmMillConstructed") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmConstructMill"), x + 30, y + 2, "lollipopFarmConstructMillButton", Database.getTranslatedText("lollipopFarmConstructMill"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmConstructMillButton", new CallbackCollection(this.constructMill.bind(this)));
        }
        // If the mill is constructed
        if (Saving.loadBool("lollipopFarmMillConstructed") == true) {
            // Draw the mill ascii art
            this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/mill"), x, y);
            // Draw the button to feed the mill
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmFeedMill") + " (" + Algo.numberToStringButNicely(this.getNumberOfLollipopsToFeedTheMill()) + " lollipops)", x + 30, y, "lollipopFarmFeedMillButton", Database.getTranslatedText("lollipopFarmFeedMill"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmFeedMillButton", new CallbackCollection(this.feedMill.bind(this)));
            // Draw the current candies production if it's different from one
            if (Saving.loadNumber("lollipopFarmCurrentCandiesProduction") != 1) {
                this.renderArea.drawString(Database.getText("lollipopFarmCurrentCandiesProduction") + " : " + Saving.loadNumber("lollipopFarmCurrentCandiesProduction").toString() + " each second", x + 30, y + 3);
                this.renderArea.drawString(Database.getTranslatedText("lollipopFarmCurrentCandiesProduction"), x + 30, y + 4, true);
            }
        }
    };
    LollipopFarm.prototype.drawPondStuff = function (x, y) {
        // Y position used because some things need to be moved when the player uses a non-english language
        var yPos;
        // Button to dig the pond (show if the button is unlocked and the pond isn't constructed yet)
        if (Saving.loadBool("lollipopFarmDigPondButtonUnlocked") == true && Saving.loadBool("lollipopFarmPondDug") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmDigPond"), x + 10, y + 2, "lollipopFarmDigPondButton", Database.getTranslatedText("lollipopFarmDigPond"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmDigPondButton", new CallbackCollection(this.digPond.bind(this)));
        }
        // If the pond is constructed
        if (Saving.loadBool("lollipopFarmPondDug") == true) {
            // Init the y position
            yPos = y;
            // Draw the pond ascii art
            this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/pond"), x, yPos, new RenderTransparency(" "));
            // Draw the lolligators
            yPos += 3;
            for (var i = 0; i < this.pondLolligators.length; i++) {
                this.pondLolligators[i].draw(this.renderArea, x, yPos);
            }
            // Add the button to buy a lolligator
            yPos += 13;
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmBuyLolligator"), x, yPos, "lollipopFarmBuyLolligatorButton", Database.getTranslatedText("lollipopFarmBuyLolligator"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmBuyLolligatorButton", new CallbackCollection(this.buyLolligator.bind(this)));
            // Add 1 to yPos if translated
            if (Database.isTranslated())
                yPos += 1;
            // If we have at least one lolligator
            if (Saving.loadNumber("lollipopFarmPondHowManyLolligators") > 0) {
                // Draw how many lolligators we have (if we have at least one)
                yPos += 2;
                this.renderArea.drawString("There " + (Saving.loadNumber("lollipopFarmPondHowManyLolligators") > 1 ? "are" : "is") + " " + Algo.pluralFormat(Saving.loadNumber("lollipopFarmPondHowManyLolligators"), " lolligator", " lolligators") + " in the pond.", x, yPos);
                // Draw the checkbox to feed the lolligators
                yPos += 2;
                this.renderArea.addCheckbox(x, yPos, new CallbackCollection(this.beginFeedingLolligators.bind(this)), new CallbackCollection(this.stopFeedingLolligators.bind(this)), "lollipopFarmPondCheckbox", Saving.loadBool("lollipopFarmPondFeedingLolligators"));
                if (Saving.loadNumber("lollipopFarmPondHowManyLolligators") == 1)
                    this.renderArea.drawString("Feed it with candies", x + 3, yPos);
                else
                    this.renderArea.drawString("Feed them with candies", x + 4, yPos);
                // If we're feeding lolligators
                if (Saving.loadBool("lollipopFarmPondFeedingLolligators")) {
                    // Draw the conversion text
                    yPos += 2;
                    this.renderArea.drawString(Database.getText("lollipopFarmLolligatorsConversionText"), x, yPos);
                    if (Database.isTranslated()) {
                        yPos += 1;
                        this.renderArea.drawString(Database.getTranslatedText("lollipopFarmLolligatorsConversionText"), x, yPos, true);
                    }
                    // Draw the conversion rate
                    yPos += 1;
                    this.renderArea.drawString("Conversion rate : " + Saving.loadNumber("lollipopFarmPondConversionRate") + "/sec", x, yPos);
                }
            }
        }
    };
    LollipopFarm.prototype.feedMill = function () {
        if (this.getGame().getLollipops().getCurrent() >= this.getNumberOfLollipopsToFeedTheMill()) {
            // Pay the lollipops
            this.getGame().getLollipops().add(-this.getNumberOfLollipopsToFeedTheMill());
            // Increase the candies production step
            var oldCurrent = Saving.loadNumber("lollipopFarmCurrentCandiesProduction");
            Saving.saveNumber("lollipopFarmCurrentCandiesProduction", Saving.loadNumber("lollipopFarmCurrentCandiesProduction") + Saving.loadNumber("lollipopFarmPreviousCandiesProduction"));
            Saving.saveNumber("lollipopFarmPreviousCandiesProduction", oldCurrent);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.getNumberOfLollipopsToFeedTheMill = function () {
        return Math.pow(Saving.loadNumber("lollipopFarmCurrentCandiesProduction") * 120, 2);
    };
    LollipopFarm.prototype.getProductionAsString = function () {
        // We create the string
        var str;
        // If we produce x lollipops each second
        if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
            str = Algo.pluralFormat(Saving.loadNumber("lollipopFarmProduction"), " lollipop", " lollipops") + " each second";
        }
        else {
            str = "1 lollipop every ";
            // If the production is every hour
            if (Saving.loadNumber("lollipopFarmProduction") >= 3600) {
                if (Math.floor(Saving.loadNumber("lollipopFarmProduction") / 3600) == 1)
                    str += "hour";
                else
                    str += Math.floor(Saving.loadNumber("lollipopFarmProduction") / 3600).toString() + " hours";
            }
            else if (Saving.loadNumber("lollipopFarmProduction") >= 60) {
                if (Math.floor(Saving.loadNumber("lollipopFarmProduction") / 60) == 1)
                    str += "minute";
                else
                    str += Math.floor(Saving.loadNumber("lollipopFarmProduction") / 60).toString() + " minutes";
            }
            else {
                if (Saving.loadNumber("lollipopFarmProduction") == 1)
                    str += "second";
                else
                    str += Saving.loadNumber("lollipopFarmProduction").toString() + " seconds";
            }
        }
        // We return the string
        return str;
    };
    LollipopFarm.prototype.handlePond = function () {
        // Used later
        var lineIndex;
        // If the pond is dug
        if (Saving.loadBool("lollipopFarmPondDug") == true) {
            // Move all the lolligators
            for (var i = 0; i < this.pondLolligators.length; i++) {
                this.pondLolligators[i].move();
            }
            // Delete lolligators which need to be deleted
            for (var i = 0; i < this.pondLolligators.length; i++) {
                // If this lolligator should be deleted, then we delete it
                if (this.pondLolligators[i].shouldBeDeleted()) {
                    // Warn that it will be deleted
                    this.pondLolligators[i].willBeDeleted();
                    // Delete it
                    this.pondLolligators.splice(i, 1);
                    // Reduce i
                    i--;
                }
            }
            // Possibly add a lolligator if there wouldn't be more lolligators than we actually have (the more lollipops we have the more chance there is that one will be added)
            if (Random.oneChanceOutOf(Math.ceil(20 * (1 / Saving.loadNumber("lollipopFarmPondHowManyLolligators")))) && this.pondLolligators.length < Saving.loadNumber("lollipopFarmPondHowManyLolligators")) {
                // Choose a line
                lineIndex = Random.between(0, this.pondLines.length - 1);
                // If the line isn't used and the line above (if there is one) isn't used either
                if (this.pondLines[lineIndex].getIsUsed() == false && (lineIndex == 0 || this.pondLines[lineIndex - 1].getIsUsed() == false)) {
                    // Add a lolligator here
                    this.addPondLolligator(new PondLolligator(this.pondLines, lineIndex));
                }
            }
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.plantLollipops = function (howMany) {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= howMany) {
            this.getGame().getLollipops().add(-howMany);
            Saving.saveNumber("lollipopFarmLollipopsPlanted", Saving.loadNumber("lollipopFarmLollipopsPlanted") + howMany);
            this.getGame().calcLollipopFarmProduction();
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.stopFeedingLolligators = function () {
        // We set the bool
        Saving.saveBool("lollipopFarmPondFeedingLolligators", false);
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    LollipopFarm.prototype.update = function () {
        // Reset
        this.renderArea.resetAllButSize();
        // Draw the farm
        this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/lollipopFarm"), 0, 5);
        // Draw the field stuff
        this.drawFieldStuff(1, 34);
        // Draw the mill stuff
        this.drawMillStuff(7, 0);
        // Draw the pond stuff
        this.drawPondStuff(50, 14);
    };
    LollipopFarm.prototype.updatePondConversionRate = function () {
        Saving.saveNumber("lollipopFarmPondConversionRate", Math.ceil(Saving.loadNumber("lollipopFarmPondHowManyLolligators") * 3 + Math.pow(1.3, Saving.loadNumber("lollipopFarmPondHowManyLolligators"))));
    };
    return LollipopFarm;
})(Place);
///<reference path="StatusBarResource.ts"/>
var Lollipops = (function (_super) {
    __extends(Lollipops, _super);
    // Constructor
    function Lollipops(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    Lollipops.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative lollipops?!";
        else if (n == 1)
            return "You have 1 lollipop";
        else
            base = Algo.numberToStringButNicely(n);
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 10) {
            suffix = " lollipops";
            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 3)
            suffix = " lp";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        return prefix + base + suffix;
    };
    return Lollipops;
})(StatusBarResource);
///<reference path="Place.ts"/>
Saving.registerBool("lonelyHouseOpenBoxDone", false);
Saving.registerBool("lonelyHouseShakeBoxDone", false);
Saving.registerBool("lonelyHouseBreakLockDone", false);
Saving.registerBool("lonelyHouseKickBoxDone", false);
Saving.registerBool("lonelyHouseAskTheBoxToOpenItselfDone", false);
Saving.registerBool("lonelyHouseLureTheBoxWithACandyDone", false);
Saving.registerBool("lonelyHouseTakeTheBoxDone", false);
var LonelyHouse = (function (_super) {
    __extends(LonelyHouse, _super);
    // Constructor
    function LonelyHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    LonelyHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    LonelyHouse.prototype.askTheBoxToOpenItself = function () {
        Saving.saveBool("lonelyHouseAskTheBoxToOpenItselfDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.breakLock = function () {
        Saving.saveBool("lonelyHouseBreakLockDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.kickBox = function () {
        Saving.saveBool("lonelyHouseKickBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.lureTheBoxWithACandy = function () {
        Saving.saveBool("lonelyHouseLureTheBoxWithACandyDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.openBox = function () {
        Saving.saveBool("lonelyHouseOpenBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.shakeBox = function () {
        Saving.saveBool("lonelyHouseShakeBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.takeTheBox = function () {
        // Change the bool
        Saving.saveBool("lonelyHouseTakeTheBoxDone", true);
        // We update
        this.update();
        // Select the candy box tab
        this.getGame().getStatusBar().selectTabByType(StatusBarTabType.CANDY_BOX);
        // Go to the candy box
        this.getGame().goToCandyBox();
    };
    LonelyHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "lonelyHouseBackToTheMapButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/lonelyHouse"), 0, 3);
        // Draw the box
        if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
            this.renderArea.drawArray(Database.getAscii("general/box"), 54, 9);
        }
        // Add the buttons or texts
        if (Saving.loadBool("lonelyHouseOpenBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseOpenBox"), 4, 4, "lonelyHouseOpenBoxButton", Database.getTranslatedText("lonelyHouseOpenBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseOpenBoxButton", new CallbackCollection(this.openBox.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseOpenBoxResult"), 4, 4);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseOpenBoxResult"), 4, 5, true);
        }
        if (Saving.loadBool("lonelyHouseShakeBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseShakeBox"), 4, 8, "lonelyHouseShakeBoxButton", Database.getTranslatedText("lonelyHouseShakeBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseShakeBoxButton", new CallbackCollection(this.shakeBox.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseShakeBoxResult"), 4, 8);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseShakeBoxResult"), 4, 9, true);
        }
        if (Saving.loadBool("lonelyHouseBreakLockDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseBreakLock"), 4, 12, "lonelyHouseBreakLockButton", Database.getTranslatedText("lonelyHouseBreakLock"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseBreakLockButton", new CallbackCollection(this.breakLock.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseBreakLockResult"), 4, 12);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseBreakLockResult"), 4, 13, true);
        }
        if (Saving.loadBool("lonelyHouseKickBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseKickBox"), 4, 16, "lonelyHouseKickBoxButton", Database.getTranslatedText("lonelyHouseKickBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseKickBoxButton", new CallbackCollection(this.kickBox.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseKickBoxResult"), 4, 16);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseKickBoxResult"), 4, 17, true);
        }
        if (Saving.loadBool("lonelyHouseAskTheBoxToOpenItselfDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseAskTheBoxToOpenItself"), 4, 20, "lonelyHouseAskTheBoxToOpenItselfButton", Database.getTranslatedText("lonelyHouseAskTheBoxToOpenItself"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseAskTheBoxToOpenItselfButton", new CallbackCollection(this.askTheBoxToOpenItself.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseAskTheBoxToOpenItselfResult"), 4, 20);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseAskTheBoxToOpenItselfResult"), 4, 21, true);
        }
        if (Saving.loadBool("lonelyHouseLureTheBoxWithACandyDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseLureTheBoxWithACandy"), 4, 24, "lonelyHouseLureTheBoxWithACandyButton", Database.getTranslatedText("lonelyHouseLureTheBoxWithACandy"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseLureTheBoxWithACandyButton", new CallbackCollection(this.lureTheBoxWithACandy.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseLureTheBoxWithACandyResult"), 4, 24);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseLureTheBoxWithACandyResult"), 4, 25, true);
        }
        // Final button
        if (Saving.loadBool("lonelyHouseOpenBoxDone") &&
            Saving.loadBool("lonelyHouseShakeBoxDone") &&
            Saving.loadBool("lonelyHouseBreakLockDone") &&
            Saving.loadBool("lonelyHouseKickBoxDone") &&
            Saving.loadBool("lonelyHouseAskTheBoxToOpenItselfDone") &&
            Saving.loadBool("lonelyHouseLureTheBoxWithACandyDone")) {
            if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
                this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseTakeTheBox"), 6, 35, "lonelyHouseTakeTheBoxButton", Database.getTranslatedText("lonelyHouseTakeTheBox"), true, -1, null, false);
                this.getRenderArea().addLinkCall(".lonelyHouseTakeTheBoxButton", new CallbackCollection(this.takeTheBox.bind(this)));
            }
            else {
                this.getRenderArea().drawString(Database.getText("lonelyHouseTakeTheBoxResult"), 6, 35);
                this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseTakeTheBoxResult"), 6, 36, true);
            }
        }
    };
    return LonelyHouse;
})(Place);
///<reference path="QuestEntity.ts"/>
var LostTribeWarrior = (function (_super) {
    __extends(LostTribeWarrior, _super);
    // Constructor
    function LostTribeWarrior(quest, pos, watchedAreaPosition, watchedAreaPosition2) {
        _super.call(this, quest, pos, new Naming("A lost tribe warrior", "a lost tribe warrior"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(4, 3))), new QuestEntityMovement());
        // Create the watched area
        this.watchedAreaPosition = watchedAreaPosition;
        this.watchedAreaPosition2 = watchedAreaPosition2;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(200);
        this.setHp(200);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theHole/lostTribeWarrior"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A tribal spear", "a tribal spear"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 80));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(1, 2);
    }
    // update()
    LostTribeWarrior.prototype.update = function () {
        _super.prototype.update.call(this);
        // If the player is inside the watched area
        if (this.playerInsideWatchedArea()) {
            // We go towards the player
            this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter());
        }
        else {
            // We heal ourselves
            this.heal(1);
        }
    };
    // willDie()
    LostTribeWarrior.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(3000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The tribal spear
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponTribalSpear", "You found a tribal spear.", "You gain a tribal spear."));
    };
    // Private methods
    LostTribeWarrior.prototype.playerInsideWatchedArea = function () {
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.watchedAreaPosition.x)
            return false;
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x > this.watchedAreaPosition2.x)
            return false;
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y < this.watchedAreaPosition.y)
            return false;
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y > this.watchedAreaPosition2.y)
            return false;
        // Else, the player is inside : return true
        return true;
    };
    return LostTribeWarrior;
})(QuestEntity);
var MainLoadingType;
(function (MainLoadingType) {
    MainLoadingType[MainLoadingType["NONE"] = 0] = "NONE";
    MainLoadingType[MainLoadingType["LOCAL"] = 1] = "LOCAL";
    MainLoadingType[MainLoadingType["FILE"] = 2] = "FILE";
})(MainLoadingType || (MainLoadingType = {}));
///<reference path="Place.ts"/>
// The default scroll
Saving.registerNumber("mainMapDefaultScroll", 400);
// Various steps
Saving.registerBool("mainMapDoneDesert", false);
Saving.registerBool("mainMapDoneBridge", false);
Saving.registerBool("mainMapDoneCaveEntrance", false);
Saving.registerBool("mainMapDonePier", false);
Saving.registerBool("mainMapDoneForest", false);
Saving.registerBool("mainMapDoneCastleEntrance", false);
var MainMap = (function (_super) {
    __extends(MainMap, _super);
    // Constructor
    function MainMap(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.load();
    }
    // willStopBeingDisplayed()
    MainMap.prototype.willStopBeingDisplayed = function () {
        Saving.saveNumber("mainMapDefaultScroll", this.getGame().getMainContentLocation().getScroll());
    };
    // Public getters
    MainMap.prototype.getDefaultScroll = function () {
        return Saving.loadNumber("mainMapDefaultScroll");
    };
    MainMap.prototype.getScrolling = function () {
        return true; // Scrolling is enabled
    };
    MainMap.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    MainMap.prototype.load = function () {
        // We erase the map
        this.renderArea.resetAllButSize();
        // We load the map itself
        this.renderArea.resizeFromArray(Database.getAscii("maps/map"));
        this.renderArea.drawArray(Database.getAscii("maps/map"));
        // We add various locations
        this.loadATree(143, 26);
        if (Saving.loadBool("gridItemPossessedFortressKey"))
            this.loadFortress(117, 39);
        this.loadTheDesert(114, 42);
        this.loadVillage(150, 36);
        this.loadLonelyHouse(159, 23);
        if (Saving.loadBool("TheCavePattern_TreasureMapSawMap") == true && Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false)
            this.loadTreasure(163, 29);
        if (Saving.loadBool("mainMapDoneDesert")) {
            this.loadFarm(115, 57);
            this.loadBridge(99, 61);
            this.loadCaveEntrance(52, 57);
            this.loadWishingWell(55, 66);
            if (Saving.loadBool("gridItemPossessedPogoStick") == false)
                this.loadMoutains(71, 52);
        }
        if (Saving.loadBool("mainMapDoneBridge"))
            this.loadSorceressHut(95, 68);
        if (Saving.loadBool("mainMapDoneCaveEntrance")) {
            this.loadPier(44, 33);
            this.loadForest(58, 30);
        }
        if (Saving.loadBool("mainMapDonePier")) {
            this.loadLighthouse(38, 16);
        }
        if (Saving.loadBool("mainMapDoneForest")) {
            this.loadCastleEntrance(88, 25);
            this.loadTheHole(126, 25);
        }
        if (Saving.loadBool("mainMapDoneCastleEntrance")) {
            this.loadCastle(87, 17);
        }
        if (Saving.loadBool("dragonDone")) {
            this.loadDragon(92, 11);
        }
    };
    // Private "go to" methods
    MainMap.prototype.goToATree = function () {
        this.getGame().setPlace(new ATree(this.getGame()));
    };
    MainMap.prototype.goToBridge = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new Bridge(this.getGame()));
    };
    MainMap.prototype.goToCastle = function () {
        this.getGame().goToCastle();
    };
    MainMap.prototype.goToDragon = function () {
        this.getGame().setPlace(new Dragon(this.getGame()));
    };
    MainMap.prototype.goToFarm = function () {
        Saving.saveBool("statusBarUnlockedLollipopFarm", true); // We unlock the farm tab
        this.getGame().updateStatusBar(true); // We update the status bar
        this.getGame().getStatusBar().selectTabByType(StatusBarTabType.FARM); // We select the farm tab
        this.getGame().goToLollipopFarm(); // We show the farm
    };
    MainMap.prototype.goToForest = function () {
        this.getGame().setPlace(new Forest(this.getGame()));
    };
    MainMap.prototype.goToFortress = function () {
        this.getGame().goToInsideFortress();
    };
    MainMap.prototype.goToLighthouse = function () {
        this.getGame().goToLighthouse();
    };
    MainMap.prototype.goToLonelyHouse = function () {
        this.getGame().setPlace(new LonelyHouse(this.getGame()));
    };
    MainMap.prototype.goToMoutains = function () {
        this.getGame().setPlace(new Moutains(this.getGame()));
    };
    MainMap.prototype.goToPier = function () {
        this.getGame().setPlace(new Pier(this.getGame()));
    };
    MainMap.prototype.goToSorceressHut = function () {
        this.getGame().goToSorceressHut();
    };
    MainMap.prototype.goToTheCave = function () {
        this.getGame().goToTheCave();
    };
    MainMap.prototype.goToTheDesert = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new Desert(this.getGame()));
    };
    MainMap.prototype.goToTheHole = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new OutsideTheHole(this.getGame()));
    };
    MainMap.prototype.goToTreasure = function () {
        this.getGame().setPlace(new Treasure(this.getGame()));
    };
    MainMap.prototype.goToWishingWell = function () {
        this.getGame().setPlace(new WishingWell(this.getGame()));
    };
    // Private "load" methods
    MainMap.prototype.loadATree = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapATreeButton", x + 2, x + 5, y, x + 1, x + 6, y + 1, x, x + 7, y + 2, x + 2, x + 5, y + 3, x + 2, x + 5, y + 4);
        // Comments
        this.renderArea.addFullComment(x - 2, y + 3, Database.getText("mapATreeComment"), Database.getTranslatedText("mapATreeComment"), "mapATreeComment");
        // Interactions
        this.renderArea.addLinkOver(".mapATreeButton, .mapATreeComment", ".mapATreeComment");
        this.renderArea.addLinkCall(".mapATreeButton, .mapATreeComment", new CallbackCollection(this.goToATree.bind(this)));
    };
    MainMap.prototype.loadBridge = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapBridgeButton", x, x + 3, y, x, x + 3, y + 1, x, x + 3, y + 2, x, x + 3, y + 3, x, x + 3, y + 4, x, x + 3, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 2, Database.getText("mapBridgeComment"), Database.getTranslatedText("mapBridgeComment"), "mapBridgeComment");
        // Interactions
        this.renderArea.addLinkOver(".mapBridgeButton, .mapBridgeComment", ".mapBridgeComment");
        this.renderArea.addLinkCall(".mapBridgeButton, .mapBridgeComment", new CallbackCollection(this.goToBridge.bind(this)));
    };
    MainMap.prototype.loadCastle = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCastleButton", x + 2, x + 4, y, x + 17, x + 19, y, x + 1, x + 3, y + 1, x + 16, x + 18, y + 1, x, x + 4, y + 2, x + 15, x + 19, y + 2, x, x + 4, y + 3, x + 15, x + 19, y + 3, x, x + 19, y + 4, x, x + 19, y + 5, x, x + 19, y + 6);
        // Comments
        this.renderArea.addFullComment(x + 25, y + 4, Database.getText("mapCastleComment"), Database.getTranslatedText("mapCastleComment"), "mapCastleComment");
        // Interactions
        this.renderArea.addLinkOver(".mapCastleButton, .mapCastleComment", ".mapCastleComment");
        this.renderArea.addLinkCall(".mapCastleButton, .mapCastleComment", new CallbackCollection(this.goToCastle.bind(this)));
    };
    MainMap.prototype.loadCastleEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCastleEntranceButton", x + 6, x + 11, y, x + 6, x + 11, y + 1, x, x + 17, y + 2, x, x + 17, y + 3);
        // Comments
        this.renderArea.addFullComment(x + 9, y + 4, Database.getText("mapCastleEntranceComment"), Database.getTranslatedText("mapCastleEntranceComment"), "mapCastleEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".mapCastleEntranceButton, .mapCastleEntranceComment", ".mapCastleEntranceComment");
        this.renderArea.addLinkCall(".mapCastleEntranceButton, .mapCastleEntranceComment", new CallbackCollection(this.getGame().goToCastleEntrance.bind(this.getGame())));
    };
    MainMap.prototype.loadCaveEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCaveEntranceButton", x, x + 5, y);
        // Comments
        this.renderArea.addFullComment(x + 3, y + 1, Database.getText("mapCaveEntranceComment"), Database.getTranslatedText("mapCaveEntranceComment"), "mapCaveEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".mapCaveEntranceButton, .mapCaveEntranceComment", ".mapCaveEntranceComment");
        this.renderArea.addLinkCall(".mapCaveEntranceButton, .mapCaveEntranceComment", new CallbackCollection(this.goToTheCave.bind(this)));
    };
    MainMap.prototype.loadDragon = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapDragonButton", x + 5, x + 10, y, x + 4, x + 10, y + 1, x + 3, x + 7, y + 2, x + 2, x + 7, y + 3, x + 2, x + 7, y + 4, x + 1, x + 8, y + 5, x + 1, x + 8, y + 6, x + 1, x + 8, y + 7, x, x + 9, y + 8, x, x + 9, y + 9);
        // Comments
        this.renderArea.addFullComment(x + 5, y - 2, Database.getText("mapDragonComment"), Database.getTranslatedText("mapDragonComment"), "mapDragonComment");
        // Interactions
        this.renderArea.addLinkOver(".mapDragonButton, .mapDragonComment", ".mapDragonComment");
        this.renderArea.addLinkCall(".mapDragonButton, .mapDragonComment", new CallbackCollection(this.goToDragon.bind(this)));
    };
    MainMap.prototype.loadFarm = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapFarmButton", x + 5, x + 15, y, x + 5, x + 15, y + 1, x + 6, x + 16, y + 2, x + 6, x + 16, y + 3, x, x + 16, y + 3, x, x + 16, y + 4, x, x + 16, y + 5, x, x + 16, y + 6, x, x + 16, y + 7, x, x + 16, y + 8, x, x + 16, y + 9, x + 6, x + 16, y + 10);
        // Comments
        this.renderArea.addFullComment(x + 16, y + 5, Database.getText("mapFarmComment"), Database.getTranslatedText("mapFarmComment"), "mapFarmComment");
        // Interactions
        this.renderArea.addLinkOver(".mapFarmButton, .mapFarmComment", ".mapFarmComment");
        this.renderArea.addLinkCall(".mapFarmButton, .mapFarmComment", new CallbackCollection(this.goToFarm.bind(this)));
    };
    MainMap.prototype.loadForest = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapForestButton", x + 9, x + 11, y, x + 3, x + 12, y + 1, x + 2, x + 25, y + 2, x + 3, x + 43, y + 3, x + 1, x + 44, y + 4, x + 54, x + 56, y + 4, x, x + 47, y + 5, x + 53, x + 57, y + 5, x + 1, x + 56, y + 6, x + 2, x + 53, y + 7, x + 3, x + 52, y + 8, x + 7, x + 49, y + 9, x + 8, x + 48, y + 10, x + 17, x + 46, y + 11, x + 16, x + 45, y + 12, x + 17, x + 34, y + 13, x + 21, x + 35, y + 14, x + 23, x + 34, y + 15, x + 24, x + 25, y + 16);
        // Comments
        this.renderArea.addFullComment(x + 25, y + 7, Database.getText("mapForestComment"), Database.getTranslatedText("mapForestComment"), "mapForestComment");
        // Interactions
        this.renderArea.addLinkOver(".mapForestButton, .mapForestComment", ".mapForestComment");
        this.renderArea.addLinkCall(".mapForestButton, .mapForestComment", new CallbackCollection(this.goToForest.bind(this)));
    };
    MainMap.prototype.loadFortress = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapFortressButton", x + 1, x + 3, y, x + 10, x + 12, y, x, x + 4, y + 1, x + 9, x + 13, y + 1, x, x + 13, y + 2, x, x + 13, y + 3, x, x + 13, y + 4);
        // Comments
        this.renderArea.addFullComment(x + 7, y + 2, Database.getText("mapFortressComment"), Database.getTranslatedText("mapFortressComment"), "mapFortressComment");
        // Interactions
        this.renderArea.addLinkOver(".mapFortressButton, .mapFortressComment", ".mapFortressComment");
        this.renderArea.addLinkCall(".mapFortressButton, .mapFortressComment", new CallbackCollection(this.goToFortress.bind(this)));
    };
    MainMap.prototype.loadLighthouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapLighthouseButton", x + 1, x + 4, y, x, x + 5, y + 1, x, x + 5, y + 2, x, x + 5, y + 3, x, x + 5, y + 4, x, x + 5, y + 5, x, x + 5, y + 6, x, x + 5, y + 7, x, x + 5, y + 8, x, x + 5, y + 9);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapLighthouseComment"), Database.getTranslatedText("mapLighthouseComment"), "mapLighthouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapLighthouseButton, .mapLighthouseComment", ".mapLighthouseComment");
        this.renderArea.addLinkCall(".mapLighthouseButton, .mapLighthouseComment", new CallbackCollection(this.goToLighthouse.bind(this)));
    };
    MainMap.prototype.loadLonelyHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapLonelyHouseButton", x, x + 3, y, x, x + 3, y + 1);
        // Comments
        this.renderArea.addFullComment(x + 1, y - 3, Database.getText("mapLonelyHouseComment"), Database.getTranslatedText("mapLonelyHouseComment"), "mapLonelyHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapLonelyHouseButton, .mapLonelyHouseComment", ".mapLonelyHouseComment");
        this.renderArea.addLinkCall(".mapLonelyHouseButton, .mapLonelyHouseComment", new CallbackCollection(this.goToLonelyHouse.bind(this)));
    };
    MainMap.prototype.loadMoutains = function (x, y) {
        // The "*" show that there's a pogo stick here
        this.renderArea.drawString("*", 71, 52);
        // Button
        this.renderArea.addMultipleAsciiButtons("mapMoutainsButton", x, x + 1, y);
        // Interactions
        this.renderArea.addLinkOver(".mapMoutainsButton, .mapMoutainsComment", ".mapMoutainsComment");
        this.renderArea.addLinkCall(".mapMoutainsButton, .mapMoutainsComment", new CallbackCollection(this.goToMoutains.bind(this)));
    };
    MainMap.prototype.loadPier = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapPierButton", x + 1, x + 3, y, x + 2, x + 3, y + 1, x, x + 7, y + 2, x + 4, x + 7, y + 3);
        // Comments
        this.renderArea.addFullComment(x + 4, y + 4, Database.getText("mapPierComment"), Database.getTranslatedText("mapPierComment"), "mapPierComment");
        // Interactions
        this.renderArea.addLinkOver(".mapPierButton, .mapPierComment", ".mapPierComment");
        this.renderArea.addLinkCall(".mapPierButton, .mapPierComment", new CallbackCollection(this.goToPier.bind(this)));
    };
    MainMap.prototype.loadSorceressHut = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapSorceressHutButton", x, x + 3, y, x, x + 3, y + 1);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapSorceressHutComment"), Database.getTranslatedText("mapSorceressHutComment"), "mapSorceressHutComment");
        // Interactions
        this.renderArea.addLinkOver(".mapSorceressHutButton, .mapSorceressHutComment", ".mapSorceressHutComment");
        this.renderArea.addLinkCall(".mapSorceressHutButton, .mapSorceressHutComment", new CallbackCollection(this.goToSorceressHut.bind(this)));
    };
    MainMap.prototype.loadTheDesert = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapTheDesertButton", x, x + 29, y + 2, x, x + 29, y + 3, x, x + 29, y + 4, x, x + 29, y + 5, x, x + 29, y + 6, x, x + 29, y + 7, x, x + 28, y + 8, x, x + 27, y + 9, x + 1, x + 26, y + 10, x + 2, x + 25, y + 11);
        // Comments
        this.renderArea.addFullComment(x + 14, y + 6, Database.getText("mapTheDesertComment"), Database.getTranslatedText("mapTheDesertComment"), "mapTheDesertComment");
        // Interactions
        this.renderArea.addLinkOver(".mapTheDesertButton, .mapTheDesertComment", ".mapTheDesertComment");
        this.renderArea.addLinkCall(".mapTheDesertButton, .mapTheDesertComment", new CallbackCollection(this.goToTheDesert.bind(this)));
    };
    MainMap.prototype.loadTheHole = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapTheHoleButton", x + 1, x + 4, y, x + 1, x + 3, y + 1);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapTheHoleComment"), Database.getTranslatedText("mapTheHoleComment"), "mapTheHoleComment");
        // Interactions
        this.renderArea.addLinkOver(".mapTheHoleButton, .mapTheHoleComment", ".mapTheHoleComment");
        this.renderArea.addLinkCall(".mapTheHoleButton, .mapTheHoleComment", new CallbackCollection(this.goToTheHole.bind(this)));
    };
    MainMap.prototype.loadTreasure = function (x, y) {
        // The button
        this.renderArea.addAsciiNinjaButton(x, x + 3, y, "mapTreasureButton");
        // Interactions
        this.renderArea.addLinkCall(".mapTreasureButton", new CallbackCollection(this.goToTreasure.bind(this)));
    };
    MainMap.prototype.loadVillage = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageButton", x + 11, x + 19, y, x + 7, x + 19, y + 1, x + 4, x + 21, y + 2, x, x + 21, y + 3, x, x + 18, y + 4, x + 4, x + 18, y + 5, x + 8, x + 11, y + 6);
        // Comments
        this.renderArea.addFullComment(x + 11, y + 3, Database.getText("mapVillageComment"), Database.getTranslatedText("mapVillageComment"), "mapVillageComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageButton, .mapVillageComment", ".mapVillageComment");
        this.renderArea.addLinkCall(".mapVillageButton, .mapVillageComment", new CallbackCollection(this.getGame().goToVillage.bind(this.getGame())));
    };
    MainMap.prototype.loadWishingWell = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapWishingWellButton", x, x + 3, y);
        // Comments
        this.renderArea.addFullComment(x + 1, y + 1, Database.getText("mapWishingWellComment"), Database.getTranslatedText("mapWishingWellComment"), "mapWishingWellComment");
        // Interactions
        this.renderArea.addLinkOver(".mapWishingWellButton, .mapWishingWellComment", ".mapWishingWellComment");
        this.renderArea.addLinkCall(".mapWishingWellButton, .mapWishingWellComment", new CallbackCollection(this.goToWishingWell.bind(this)));
    };
    return MainMap;
})(Place);
///<reference path="QuestEntity.ts"/>
var MediumFish = (function (_super) {
    __extends(MediumFish, _super);
    // Constructor
    function MediumFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A fish", "a fish"), new RenderArea(8, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(1, 1), new Pos(7, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(8, 1)), new CollisionBox(this, new Pos(1, 3), new Pos(7, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(30);
        this.setHp(30);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/mediumFish"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fins", "its fins"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(10, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(4);
    }
    // willDie()
    MediumFish.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(15), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return MediumFish;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var MerchantHat = (function (_super) {
    __extends(MerchantHat, _super);
    // Constructor
    function MerchantHat() {
        _super.call(this, "eqItemHatMerchantHat", "eqItemHatMerchantHatName", "eqItemHatMerchantHatDescription", "eqItems/hats/merchantHat");
    }
    // Special ability
    MerchantHat.prototype.getSpecialAbility = function () {
        return "Multiplies the number of candies found in quests by 7 (merchant hat).";
    };
    // Candies found * 7
    MerchantHat.prototype.foundCandies = function (player, quest, howMany) {
        return howMany * 7;
    };
    return MerchantHat;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var MiniShark = (function (_super) {
    __extends(MiniShark, _super);
    // Constructor
    function MiniShark(quest, pos) {
        _super.call(this, quest, pos, new Naming("A dangerous fish", "a dangerous fish"), new RenderArea(19, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(8, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(17, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(5, 2), new Pos(14, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(17, 1)), new CollisionBox(this, new Pos(0, 4), new Pos(12, 1)), new CollisionBox(this, new Pos(18, 4), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(70);
        this.setHp(70);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/miniShark"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its teeth", "its teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(21, 7))), 8));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // willDie()
    MiniShark.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(50 + 10 * Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return MiniShark;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var MonkeyWizard = (function (_super) {
    __extends(MonkeyWizard, _super);
    // Constructor
    function MonkeyWizard(quest, pos) {
        _super.call(this, quest, pos, new Naming("A monkey wizard", "a monkey wizard"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(3, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(4, 1))), new QuestEntityMovement());
        // Set the timers
        this.timer = 0;
        this.bigTimer = 0;
        // At first we're going left
        this.goingLeft = true;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(300);
        this.setHp(300);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/monkeyWizard/monkeyWizard"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its staff", "its staff"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // update()
    MonkeyWizard.prototype.update = function () {
        _super.prototype.update.call(this);
        // Is the monkey angry?
        var angry = (this.getHp() < 70 ? true : false);
        // Store the player position
        var playerPos = this.getQuest().getGame().getPlayer().getGlobalPosition();
        // Handle the timer
        if (this.timer < 80)
            this.timer += 1;
        else
            this.timer = 0;
        // Handle the big timer
        if (this.bigTimer < 350)
            this.bigTimer += 1;
        else
            this.bigTimer = 0;
        // Cast spells depending on the timer
        if (this.timer == 80 ||
            this.timer == 12 ||
            this.timer == 24 ||
            this.timer == 36 ||
            this.timer == 48 ||
            (angry && this.timer == 6) ||
            (angry && this.timer == 18) ||
            (angry && this.timer == 30) ||
            (angry && this.timer == 42) ||
            (angry && this.timer == 54)) {
            this.castSpell(false); // Not stored
        }
        else if (this.timer == 60 || this.timer == 64 || this.timer == 68 || this.timer == 72 || this.timer == 76 && this.bigTimer < 300) {
            this.castSpell(true); // Stored
        }
        // If the player is near us (< 9) horizontally
        if (Math.abs(playerPos.x - this.getGlobalPosition().x) < 9) {
            // We jump (hoping to jump above the player)
            this.jump3();
        }
        // If the player is even more near us (< 15) horizontally
        if (Math.abs(playerPos.x - this.getGlobalPosition().x) < 15) {
            // If we're going left
            if (this.goingLeft) {
                // If we're on the right of the quest
                if (this.getGlobalPosition().x > 25)
                    this.goLeft();
                else {
                    this.goRight();
                    this.goingLeft = false;
                }
            }
            else {
                // If the player is on the left
                if (playerPos.x < this.getGlobalPosition().x) {
                    // If we're on the left side of the quest
                    if (this.getGlobalPosition().x < 75)
                        this.goRight();
                    else {
                        this.goLeft();
                        this.goingLeft = true;
                    }
                }
                else if (this.getGlobalPosition().x > 25) {
                    // We go left
                    this.goLeft();
                }
                else
                    this.dontMove();
            }
        }
        else
            this.dontMove();
    };
    // willDie()
    MonkeyWizard.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The monkey wizard staff
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponMonkeyWizardStaff", "You found a staff.", "You gain the monkey wizard staff."));
    };
    // Private methods
    MonkeyWizard.prototype.castSpell = function (stored) {
        var ball = new MonkeyWizardMagicalPurpleBall(this.getQuest(), this.getGlobalPosition().plus(new Pos(3, 0)), new Naming("An magical purple ball", "a magical purple ball"), (stored ? new Color(ColorType.MONKEY_WIZARD_BALL_STORED) : new Color(ColorType.MONKEY_WIZARD_BALL)), new Pos(2, 1), 15, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("An magical purple ball", "a magical purple ball")), (stored ? 350 - this.bigTimer : null));
        // If we're not going to be stored
        if (stored == false) {
            // Target the player
            ball.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer());
        }
        else {
            // Target the roof
            ball.setTargetTypeTargetPosition(new Pos(Random.between(1, 99), Random.between(4, 9)));
        }
        // Add it to the quest
        this.getQuest().addEntity(ball);
    };
    MonkeyWizard.prototype.dontMove = function () {
        this.getQuestEntityMovement().setOffset(new Pos(0, 0));
    };
    MonkeyWizard.prototype.goLeft = function () {
        this.getQuestEntityMovement().setOffset(new Pos(-1, 0));
    };
    MonkeyWizard.prototype.goRight = function () {
        this.getQuestEntityMovement().setOffset(new Pos(1, 0));
    };
    MonkeyWizard.prototype.jump3 = function () {
        this.jump(3);
    };
    return MonkeyWizard;
})(QuestEntity);
///<reference path="Fireball.ts"/>
var MonkeyWizardMagicalPurpleBall = (function (_super) {
    __extends(MonkeyWizardMagicalPurpleBall, _super);
    // Constructor
    function MonkeyWizardMagicalPurpleBall(quest, pos, naming, color, size, damage, questEntityDamageReason, timer) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming, color, size, damage, questEntityDamageReason);
        // Set the timer
        this.timer = timer;
    }
    // Public methods
    MonkeyWizardMagicalPurpleBall.prototype.update = function () {
        // If the timer isn't null (which means we should be stored and then go down)
        if (this.timer != null) {
            // If the timer is > 0, decrease it
            if (this.timer > 0)
                this.timer -= 1;
            else {
                this.timer = null; // No more timer
                this.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer());
            }
        }
        // Call the fireball update method
        _super.prototype.update.call(this);
    };
    return MonkeyWizardMagicalPurpleBall;
})(Fireball);
///<reference path="Quest.ts"/>
var MonkeyWizardQuest = (function (_super) {
    __extends(MonkeyWizardQuest, _super);
    // Constructor
    function MonkeyWizardQuest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the roof and the floor
        this.addRoofAndFloor();
        // Add the monkey wizard
        this.addMonkeyWizard(new Pos(88, 16));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You challenged the monkey wizard. Let the fight begin!"));
    }
    // Public methods
    MonkeyWizardQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    MonkeyWizardQuest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You continue to explore the cave."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    MonkeyWizardQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/monkeyWizard/roof"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToTheCave.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    MonkeyWizardQuest.prototype.addMonkeyWizard = function (pos) {
        var monkey = new MonkeyWizard(this, pos);
        monkey.setHealthBar(new QuestEntityHealthBar(monkey, new Pos(100, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(monkey);
    };
    MonkeyWizardQuest.prototype.addRoofAndFloor = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the roof
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(7, 1));
        wall.addBox(new Pos(18, 2), new Pos(50, 1));
        wall.addBox(new Pos(71, 2), new Pos(29, 1));
        wall.addBox(new Pos(0, 3), new Pos(2, 1));
        wall.addBox(new Pos(24, 3), new Pos(21, 1));
        wall.addBox(new Pos(83, 3), new Pos(17, 1));
        wall.addBox(new Pos(0, 4), new Pos(1, 1));
        wall.addBox(new Pos(99, 4), new Pos(1, 1));
        // Add the floor
        wall.addBox(new Pos(-20, 20), new Pos(120, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    return MonkeyWizardQuest;
})(Quest);
///<reference path="MonkeyWizardStaffMotherClass.ts"/>
var MonkeyWizardStaff = (function (_super) {
    __extends(MonkeyWizardStaff, _super);
    // Constructor
    function MonkeyWizardStaff() {
        _super.call(this, "eqItemWeaponMonkeyWizardStaff", "eqItemWeaponMonkeyWizardStaffName", "eqItemWeaponMonkeyWizardStaffDescription", "eqItems/weapons/monkeyWizardStaff");
        // Set the timer
        this.timer = 0;
    }
    // Public getters
    MonkeyWizardStaff.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The monkey wizard staff", "the monkey wizard staff"), player.getClassicCollisionBoxCollection(), 2);
        qew.getCloseCombatDelay().setFixedDelay(1);
        return qew;
    };
    // update()
    MonkeyWizardStaff.prototype.update = function (player, quest) {
        // Handle the timer
        if (this.timer < 10)
            this.timer += 1;
        else {
            this.timer = 0;
            var ent = this.getRandomEnemy(player, quest);
            if (ent != null)
                this.castPurpleBall(player, quest, ent);
        }
    };
    return MonkeyWizardStaff;
})(MonkeyWizardStaffMotherClass);
///<reference path="QuestEntity.ts"/>
var Monster = (function (_super) {
    __extends(Monster, _super);
    // Constructor
    function Monster(quest, globalPosition) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("The monster", "the monster"), new RenderArea(13, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(13, 1)), new CollisionBox(this, new Pos(1, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(2, 0), new Pos(9, 1)), new CollisionBox(this, new Pos(3, 0), new Pos(7, 1))), new QuestEntityMovement());
        // At first, no egg was destroyed
        this.anEggWasDestroyed = false;
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/monster"));
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("??", "??"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(15, 6))), 10000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    // update()
    Monster.prototype.update = function () {
        // If no egg was destroyed, we go towards the player but we stay on the roof
        if (this.anEggWasDestroyed == false) {
            this.goTowards(this.getGlobalPosition().plus(new Pos(6, 4)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(2, 0), true);
        }
        else {
            this.goTowards(this.getGlobalPosition().plus(new Pos(6, 4)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(4, 4));
        }
        // Call the mother classe update
        _super.prototype.update.call(this);
    };
    // Public methods
    Monster.prototype.eggDestroyed = function () {
        this.anEggWasDestroyed = true;
    };
    return Monster;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Mosquito = (function (_super) {
    __extends(Mosquito, _super);
    // Constructor
    function Mosquito(quest, pos, groundYPosition) {
        _super.call(this, quest, pos, new Naming("A forest mosquito", "a forest mosquito"), new RenderArea(1, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1))), new QuestEntityMovement());
        // Set the ground y position from the value given in parameter
        this.groundYPosition = groundYPosition;
        // Set the perfect position above the ground
        this.perfectYPositionAboveGround = Random.between(8, 13);
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1);
        this.setHp(1);
        // Set the ascii art (well, it's actually just a ".")
        this.getRenderArea().drawString(".");
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A proboscis", "a proboscis"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(3, 3))), 12));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setOnceThenWaitDelay(20);
    }
    // update()
    Mosquito.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)));
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)));
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return Mosquito;
})(QuestEntity);
///<reference path="Place.ts"/>
var Moutains = (function (_super) {
    __extends(Moutains, _super);
    // Constructor
    function Moutains(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/mountains"), 0, 10);
        this.update();
    }
    // getRenderArea()
    Moutains.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Moutains.prototype.getPogoStick = function () {
        // Get the pogo stick
        this.getGame().gainItem("gridItemPossessedPogoStick");
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Moutains.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "mountainsBackToTheMapButton");
        // Draw the moutains
        this.renderArea.drawArray(Database.getAscii("places/mountains"), 0, 3);
        // If we didn't get the pogo stick yet
        if (Saving.loadBool("gridItemPossessedPogoStick") == false) {
            // Add the "*" showing that there's a pogo stick here
            this.renderArea.drawString("*", 52, 11);
            // Draw the text
            this.renderArea.drawString(Database.getText("mountainsText0"), 19, 22);
            this.renderArea.drawString(Database.getText("mountainsText1"), 19, 23);
            // Add the button
            this.renderArea.addAsciiRealButton(Database.getText("mountainsTextButton"), 19, 25, "mountainsClimbButton", Database.getTranslatedText("mountainsTextButton"));
            this.renderArea.addLinkCall(".mountainsClimbButton", new CallbackCollection(this.getPogoStick.bind(this)));
            // Draw the translated text
            this.renderArea.drawString(Database.getTranslatedText("mountainsText0"), 19, 27, true);
            this.renderArea.drawString(Database.getTranslatedText("mountainsText1"), 19, 28, true);
        }
        else {
            this.renderArea.drawString(Database.getText("mountainsTextAfter"), 19, 22);
            this.renderArea.drawString(Database.getTranslatedText("mountainsTextAfter"), 19, 24, true);
        }
    };
    return Moutains;
})(Place);
var Naming = (function () {
    // Constructor
    function Naming(beginning, anywhere) {
        if (anywhere === void 0) { anywhere = null; }
        this.beginning = beginning;
        if (anywhere != null)
            this.anywhere = anywhere;
        else
            this.anywhere = this.beginning;
    }
    // Public getters
    Naming.prototype.getAnywhere = function () {
        return this.anywhere;
    };
    Naming.prototype.getBeginning = function () {
        return this.beginning;
    };
    return Naming;
})();
///<reference path="QuestEntitySpell.ts"/>
var ObsidianBrick = (function (_super) {
    __extends(ObsidianBrick, _super);
    // Constructor
    function ObsidianBrick(quest, pos, hp) {
        _super.call(this, quest, pos, new Naming("An obsidian brick", "an obsidian brick"), null, new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(2, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(hp);
        this.setHp(hp);
        // Add the color
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(0, 0), new Pos(2, 1), new Color(ColorType.PLAYER_OBSIDIAN_BRICK)));
    }
    return ObsidianBrick;
})(QuestEntitySpell);
///<reference path="QuestEntity.ts"/>
var OctopusKing = (function (_super) {
    __extends(OctopusKing, _super);
    // Constructor
    function OctopusKing(quest, pos) {
        _super.call(this, quest, pos, new Naming("The Octopus King", "the Octopus King"), new RenderArea(6, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(6, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(380);
        this.setHp(380);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/octopusKing"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its tentacles", "its tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 6))), 16));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // update()
    OctopusKing.prototype.update = function () {
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition(), 0, new Pos(1, 0));
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    OctopusKing.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(4000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The monkey wizard staff
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemHatOctopusKingCrown", "You found the Octopus King crown.", "You gain the Octopus King crown."));
    };
    return OctopusKing;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var OctopusKingCrown = (function (_super) {
    __extends(OctopusKingCrown, _super);
    // Constructor
    function OctopusKingCrown() {
        _super.call(this, "eqItemHatOctopusKingCrown", "eqItemHatOctopusKingCrownName", "eqItemHatOctopusKingCrownDescription", "eqItems/hats/octopusKingCrown");
    }
    // Special ability
    OctopusKingCrown.prototype.getSpecialAbility = function () {
        return "You are a lot more confident.";
    };
    return OctopusKingCrown;
})(EqItem);
///<reference path="EqItem.ts"/>
var OctopusKingCrownWithJaspers = (function (_super) {
    __extends(OctopusKingCrownWithJaspers, _super);
    // Constructor
    function OctopusKingCrownWithJaspers() {
        _super.call(this, "eqItemHatOctopusKingCrownWithJaspers", "eqItemHatOctopusKingCrownWithJaspersName", "eqItemHatOctopusKingCrownWithJaspersDescription", "eqItems/hats/octopusKingCrownWithJaspers");
        // The timer (to avoid casting fireballs too often..)
        this.currentTimer = 0;
        this.maxTimer = 3;
    }
    // Special ability
    OctopusKingCrownWithJaspers.prototype.getSpecialAbility = function () {
        return "Randomly cast powerful fireballs around you (Octopus King crown with jaspers).";
    };
    // update
    OctopusKingCrownWithJaspers.prototype.update = function (player, quest) {
        this.currentTimer += 1;
        // If the timer is ready
        if (this.currentTimer >= this.maxTimer) {
            // Cast the fireball
            this.castFireball(player, quest);
            // Reset the timer
            this.currentTimer = 0;
        }
    };
    // Private methods
    OctopusKingCrownWithJaspers.prototype.castFireball = function (player, quest) {
        // Create the fireball
        var fireball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("A small fireball", "a small fireball"), new Color(ColorType.RED_ENCHANTED_GLOVES_FIREBALL), new Pos(4, 2), 18, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A fireball", "a fireball")));
        // Set the direction
        fireball.setTargetTypeNoTarget(Algo.getRandomNotImmobileDirectionUpToThisSpeed(1).multiply(new Pos(2, 2)));
        // Add the entity
        quest.addEntity(fireball);
    };
    return OctopusKingCrownWithJaspers;
})(EqItem);
///<reference path="EqItem.ts"/>
var OctopusKingCrownWithObsidian = (function (_super) {
    __extends(OctopusKingCrownWithObsidian, _super);
    // Constructor
    function OctopusKingCrownWithObsidian() {
        _super.call(this, "eqItemHatOctopusKingCrownWithObsidian", "eqItemHatOctopusKingCrownWithObsidianName", "eqItemHatOctopusKingCrownWithObsidianDescription", "eqItems/hats/octopusKingCrownWithObsidian");
        // Reset the timer for the first time
        this.resetTimer();
    }
    // Special ability
    OctopusKingCrownWithObsidian.prototype.getSpecialAbility = function () {
        return "Summon the Octopus King once in a while to help you.";
    };
    // update
    OctopusKingCrownWithObsidian.prototype.update = function (player, quest) {
        this.currentTimer -= 1;
        // If the timer is ready
        if (this.currentTimer <= 0) {
            // Summon the king
            if (this.summonOctopusKing(player, quest)) {
                // If it worked, reset the timer
                this.resetTimer();
            }
        }
    };
    // Private methods
    OctopusKingCrownWithObsidian.prototype.summonOctopusKing = function (player, quest) {
        // Create the king
        var king = new PlayerSummonedOctopusKing(quest, Random.fromPosition(new Pos(quest.getRealQuestSize().x - 1, quest.getRealQuestSize().y - 1)));
        // If we manage to add it, we return true
        if (quest.addEntity(king))
            return true;
        // No king added, we return false
        return false;
    };
    OctopusKingCrownWithObsidian.prototype.resetTimer = function () {
        this.currentTimer = Random.between(60, 120);
    };
    return OctopusKingCrownWithObsidian;
})(EqItem);
///<reference path="Quest.ts"/>
var OctopusKingQuest = (function (_super) {
    __extends(OctopusKingQuest, _super);
    // Constructor
    function OctopusKingQuest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the roof and the floor
        this.addRoofAndFloor();
        // Add the monkey wizard
        this.addOctopusKing(new Pos(88, 16));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You challenged the Octopus King. Let the fight begin!"));
    }
    // Public methods
    OctopusKingQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    OctopusKingQuest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You continue to explore the cave."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    OctopusKingQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/roof"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToTheCave.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    OctopusKingQuest.prototype.addOctopusKing = function (pos) {
        var king = new OctopusKing(this, pos);
        king.setHealthBar(new QuestEntityHealthBar(king, new Pos(100, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(king);
    };
    OctopusKingQuest.prototype.addRoofAndFloor = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the roof
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(7, 1));
        wall.addBox(new Pos(18, 2), new Pos(50, 1));
        wall.addBox(new Pos(71, 2), new Pos(29, 1));
        wall.addBox(new Pos(0, 3), new Pos(2, 1));
        wall.addBox(new Pos(24, 3), new Pos(21, 1));
        wall.addBox(new Pos(83, 3), new Pos(17, 1));
        wall.addBox(new Pos(0, 4), new Pos(1, 1));
        wall.addBox(new Pos(99, 4), new Pos(1, 1));
        // Add the floor
        wall.addBox(new Pos(-20, 20), new Pos(120, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    return OctopusKingQuest;
})(Quest);
///<reference path="Place.ts"/>
var OutsideTheHole = (function (_super) {
    __extends(OutsideTheHole, _super);
    // Constructor
    function OutsideTheHole(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/outsideTheHole"), 0, 4);
        this.update();
    }
    // getRenderArea()
    OutsideTheHole.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods 
    OutsideTheHole.prototype.jump = function () {
        this.getGame().setPlace(new TheHole(this.getGame()));
    };
    OutsideTheHole.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theHoleBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/outsideTheHole"), 0, 3);
        // Add the button to jump in the hole
        this.renderArea.addAsciiRealButton(Database.getText("outsideTheHoleButton"), 34, 23, "outsideTheHoleButton", Database.getTranslatedText("outsideTheHoleButton"), true);
        this.renderArea.addLinkCall(".outsideTheHoleButton", new CallbackCollection(this.jump.bind(this)));
    };
    return OutsideTheHole;
})(Place);
///<reference path="StatusBarResource.ts"/>
var PainsAuChocolat = (function (_super) {
    __extends(PainsAuChocolat, _super);
    // Constructor
    function PainsAuChocolat(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    PainsAuChocolat.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative pains au chocolat?!";
        else if (n == 1)
            return "-> 1 pain au chocolat";
        else
            base = Algo.numberToStringButNicely(n);
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 18) {
            suffix = " pains au chocolat";
            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 3)
            suffix = " pc";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        return prefix + base + suffix;
    };
    return PainsAuChocolat;
})(StatusBarResource);
///<reference path="Place.ts"/>
var Pier = (function (_super) {
    __extends(Pier, _super);
    // Constructor
    function Pier(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/pier"), 0, 6);
        this.update();
    }
    // getRenderArea()
    Pier.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Pier.prototype.addLighthouseButton = function (x, y) {
        this.renderArea.addAsciiRealButton(Database.getText("pierLighthouseButton"), x, y, "pierLighthouseButton", Database.getTranslatedText("pierLighthouseButton"), true);
        this.renderArea.addLinkCall(".pierLighthouseButton", new CallbackCollection(this.clickedOnLighthouseButton.bind(this), this.getGame().goToLighthouse.bind(this.getGame())));
    };
    Pier.prototype.addTheSeaButton = function (x, y) {
        this.renderArea.addAsciiRealButton(Database.getText("pierTheSeaButton"), x, y, "pierTheSeaButton", Database.getTranslatedText("pierTheSeaButton"), true);
        this.renderArea.addLinkCall(".pierTheSeaButton", new CallbackCollection(this.goToTheSea.bind(this)));
    };
    Pier.prototype.clickedOnLighthouseButton = function () {
        Saving.saveBool("mainMapDonePier", true);
    };
    Pier.prototype.goToTheSea = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new TheSea(this.getGame()));
    };
    Pier.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "thePierBackToTheMapButton");
        // Draw the pier
        this.renderArea.drawArray(Database.getAscii("places/pier"), 0, 3);
        // Add the button to go to the lighthouse
        this.addLighthouseButton(3, 27);
        // Add the button to jump into the sea
        this.addTheSeaButton(52, 9);
    };
    return Pier;
})(Place);
///<reference path="EqItem.ts"/>
var PinkEnchantedGloves = (function (_super) {
    __extends(PinkEnchantedGloves, _super);
    // Constructor
    function PinkEnchantedGloves() {
        _super.call(this, "eqItemGlovesPinkEnchantedGloves", "eqItemGlovesPinkEnchantedGlovesName", "eqItemGlovesPinkEnchantedGlovesDescription", "eqItems/gloves/pinkEnchantedGloves");
    }
    // Special ability
    PinkEnchantedGloves.prototype.getSpecialAbility = function () {
        return "Slowly regain your health points in quests (pink enchanted gloves).";
    };
    // update
    PinkEnchantedGloves.prototype.update = function (player, quest) {
        player.heal(1);
    };
    return PinkEnchantedGloves;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Plant = (function (_super) {
    __extends(Plant, _super);
    // Constructor
    function Plant(quest, leftDownCornerPosition, minPlantNumber, maxPlantNumber) {
        // Set the ascii art name
        var asciiArtName = "places/quests/theSea/plant" + Random.between(minPlantNumber, maxPlantNumber).toString();
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight(asciiArtName) + 1));
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A plant", "a plant"), new RenderArea());
        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii(asciiArtName));
        this.getRenderArea().drawArray(Database.getAscii(asciiArtName));
        // Set different transparency settings depending on the ascii art
        if (asciiArtName == "places/quests/theSea/plant0" || asciiArtName == "places/quests/theSea/plant8" || asciiArtName == "places/quests/theSea/plant9" || asciiArtName == "places/quests/theSea/plant10") {
            this.setTransparency(new RenderTransparency(" ", "%"));
        }
        else {
            this.setTransparency(new RenderTransparency(" "));
        }
    }
    return Plant;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
// Register our hp
Saving.registerNumber("playerHp", 100);
var Player = (function (_super) {
    __extends(Player, _super);
    // Constructor
    function Player(game) {
        _super.call(this, null, new Pos(0, 0), new Naming("You", "you"));
        // Set the game
        this.game = game;
        // Set destructible
        this.setDestructible(true);
    }
    // Public methods
    Player.prototype.beginBerserk = function (duration) {
        // Call the mother class method
        if (_super.prototype.beginBerserk.call(this, duration)) {
            // Update the render area
            this.drawOnRenderArea();
            // Return true
            return true;
        }
        // We didn't become a turtle : return false
        return false;
    };
    Player.prototype.beginTurtle = function (duration) {
        // Call the mother class method
        if (_super.prototype.beginTurtle.call(this, duration)) {
            // Update the render area
            this.drawOnRenderArea();
            // Return true
            return true;
        }
        // We didn't become a turtle : return false
        return false;
    };
    Player.prototype.canJumpInMidAir = function () {
        // If we have the rocket boots, we can!
        if (this.game.isEquipped("boots", "eqItemBootsRocketBoots"))
            return true;
        return false;
    };
    Player.prototype.checkCollision = function (pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // If our mother class detects a collision, we return true
        if (_super.prototype.checkCollision.call(this, pos) == true)
            return true;
        // We also try collisions with the special player collision boxes
        if (this.collidesWith(this.getQuest().getPlayerCollisionBoxes(), pos))
            return true;
        return false;
    };
    Player.prototype.getCharacterType = function () {
        return this.characterType;
    };
    Player.prototype.getClassicCollisionBoxCollection = function () {
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3)));
                break;
            case PlayerCharacterType.MEDIUM:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(13, 6)));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(3, 3)));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 5)));
                break;
        }
    };
    Player.prototype.getQuestEntityWeapon = function (quest) {
        if (quest === void 0) { quest = null; }
        var qew;
        // If a weapon is equipped, we use the quest entity weapon it provides us
        if (this.game.getSelectedEqItems()["weapon"] != null) {
            qew = this.game.getSelectedEqItems()["weapon"].getQuestEntityWeapon(quest, this);
        }
        else {
            qew = new QuestEntityWeapon(this.getQuest(), this, new Naming("Your fists", "your fists"), this.getClassicCollisionBoxCollection(), 1);
            qew.getCloseCombatDelay().setFixedDelay(6, 0);
        }
        return qew;
    };
    Player.prototype.getSpellCastingPosition = function (facingRight) {
        if (facingRight === void 0) { facingRight = true; }
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(3, -1));
                else
                    return this.getGlobalPosition().plus(new Pos(-1, -1));
                break;
            case PlayerCharacterType.MEDIUM:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(11, 0));
                else
                    return this.getGlobalPosition().plus(new Pos(-1, 0));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(0, -1));
                else
                    return this.getGlobalPosition().plus(new Pos(0, -1));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(6, 0));
                else
                    return this.getGlobalPosition().plus(new Pos(-1, 0));
                break;
        }
    };
    Player.prototype.getThornsPositionsArray = function () {
        // Create the array
        var arr;
        // Fill the array with different positons depending on the character type
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                arr = [new Pos(-6, 0),
                    new Pos(-4, -1),
                    new Pos(-2, -2),
                    new Pos(1, -2),
                    new Pos(3, -1),
                    new Pos(5, 0),
                    new Pos(3, 1),
                    new Pos(1, 2),
                    new Pos(-2, 2),
                    new Pos(-4, 1)
                ];
                break;
            case PlayerCharacterType.MEDIUM:
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                arr = [new Pos(11, -2),
                    new Pos(12, -1),
                    new Pos(13, 0),
                    new Pos(13, 1),
                    new Pos(13, 2),
                    new Pos(12, 3),
                    new Pos(11, 4)
                ];
                break;
        }
        // Return the array
        return arr;
    };
    Player.prototype.hit = function (questEntity, damage, reason) {
        for (var savingName in this.game.getSelectedEqItems()) {
            damage = this.game.getSelectedEqItems()[savingName].hit(this, this.getQuest(), questEntity, damage, reason);
        }
        for (var savingName in this.game.getGridItems()) {
            if (Saving.loadBool(savingName))
                damage = this.game.getGridItems()[savingName].hit(this, this.getQuest(), questEntity, damage, reason);
        }
        // Gift of power
        if (Saving.loadNumber("gameGiftPower") > 0) {
            damage = Math.ceil(damage + damage * (Saving.loadNumber("gameGiftPower") / 5));
        }
        _super.prototype.hit.call(this, questEntity, damage, reason);
    };
    Player.prototype.inflictDamage = function (damage, reason) {
        for (var savingName in this.game.getSelectedEqItems()) {
            damage = this.game.getSelectedEqItems()[savingName].inflictDamage(this, this.getQuest(), damage, reason);
        }
        _super.prototype.inflictDamage.call(this, damage, reason);
    };
    Player.prototype.load = function () {
        this.setHp(Saving.loadNumber("playerHp"));
    };
    Player.prototype.loadCandyBoxCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.CANDYBOX;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(3, 1));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))));
        // Transparency
        this.setTransparency(null);
    };
    Player.prototype.loadCandyBoxSqueezedCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.CANDYBOX_SQUEEZED;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(1, 1));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1))));
        // Transparency
        this.setTransparency(null);
    };
    Player.prototype.loadCharacter = function (quest) {
        // Set the quest
        this.setQuest(quest);
        // Add the quest entity weapon
        this.addQuestEntityWeapon(this.getQuestEntityWeapon(this.getQuest()));
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
    };
    Player.prototype.loadMediumCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.MEDIUM;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(11, 4));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(7, 1)), new CollisionBox(this, new Pos(4, 3), new Pos(3, 1))));
        // Transparent character
        this.setTransparency(new RenderTransparency(" ", "%"));
    };
    Player.prototype.loadMediumSqueezedCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.MEDIUM_SQUEEZED;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(6, 3));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(2, 1))));
        // Transparent character
        this.setTransparency(new RenderTransparency(" ", "%"));
    };
    Player.prototype.magicHealthRegain = function () {
        // If we're not questing
        if (this.game.getWeAreQuesting() == false) {
            var hpBonus = Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 400000000)) * 500);
            if (hpBonus < 1)
                hpBonus = 1; // We need to gain at least one hp each second
            this.setHp(this.getHp() + hpBonus);
        }
    };
    Player.prototype.move = function (pos, force) {
        if (force === void 0) { force = false; }
        // Position
        var posToUse = pos.copy();
        // If we are wearing the boots of introspection and we would collide by going below, we don't move horizontally and the movement isn't forced
        if (posToUse.x != 0 && this.game.isEquipped("boots", "eqItemBootsBootsOfIntrospection") && this.checkCollision(new Pos(0, 1)) == true && force == false)
            posToUse.x = 0;
        return _super.prototype.move.call(this, posToUse, force);
    };
    Player.prototype.moveWormsLike = function (pos) {
        // Position
        var posToUse = pos.copy();
        // If we are wearing the boots of introspection and we would collide by going below, we don't move horizontally
        if (posToUse.x != 0 && this.game.isEquipped("boots", "eqItemBootsBootsOfIntrospection") && this.checkCollision(new Pos(0, 1)) == true)
            posToUse.x = 0;
        return _super.prototype.moveWormsLike.call(this, posToUse);
    };
    Player.prototype.reCalcMaxHp = function () {
        // Base maximum hp : 100
        var maxHp = 100;
        // We add to the base, depending on how much candies eaten, if we're not playing in hard mode
        if (Saving.loadString("gameGameMode") != "hard") {
            maxHp += Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 3000)) * 100) + Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 400000)) * 800);
        }
        // We add 300 if we have the heart pendant
        if (Saving.loadBool("gridItemPossessedHeartPendant"))
            maxHp += 300;
        // We add 20% if we have the heart plug
        if (Saving.loadBool("gridItemPossessedHeartPlug"))
            maxHp = Math.ceil(maxHp * 1.2);
        // Health gift
        if (Saving.loadNumber("gameGiftHealth") > 0) {
            maxHp = maxHp + maxHp * (Saving.loadNumber("gameGiftHealth") / 5);
        }
        // We finally set the value we calculated
        this.setMaxHp(maxHp);
        // We update the status bar
        this.game.updateStatusBar();
    };
    Player.prototype.save = function () {
        Saving.saveNumber("playerHp", this.getHp());
    };
    Player.prototype.shouldDie = function () {
        // We use the method of our mother class PLUS we're also dead if out of area
        if (_super.prototype.shouldDie.call(this) || this.getOutOfArea())
            return true;
        return false;
    };
    Player.prototype.squeeze = function () {
        // Do different things depending on the current character type
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                // We squeeze
                this.loadCandyBoxSqueezedCharacter(this.getQuest(), false);
                this.move(new Pos(1, 0), true);
                // We add a message to the log
                this.game.getQuestLog().addMessage(new QuestLogMessage("You squeezed!"));
                break;
            case PlayerCharacterType.MEDIUM:
                // We squeeze
                this.loadMediumSqueezedCharacter(this.getQuest(), false);
                this.move(new Pos(2, 1), true);
                // We add a message to the log
                this.game.getQuestLog().addMessage(new QuestLogMessage("You squeezed!"));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                // We unsqueeze
                this.loadCandyBoxCharacter(this.getQuest(), false);
                this.move(new Pos(-1, 0), true);
                // If there's a collision
                if (this.checkCollision()) {
                    // We squeeze again
                    this.loadCandyBoxSqueezedCharacter(this.getQuest(), false);
                    this.move(new Pos(1, 0), true);
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You can't unsqueeze because there isn't enough space."));
                }
                else {
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You unsqueezed!"));
                }
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                // We unsqueeze
                this.loadMediumCharacter(this.getQuest(), false);
                this.move(new Pos(-2, -1), true);
                // If there's a collision
                if (this.checkCollision()) {
                    // We squeeze again
                    this.loadMediumSqueezedCharacter(this.getQuest(), false);
                    this.move(new Pos(2, 1), true);
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You can't unsqueeze because there isn't enough space."));
                }
                else {
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You unsqueezed!"));
                }
                break;
        }
    };
    Player.prototype.stopBerserk = function () {
        // Mother class method
        _super.prototype.stopBerserk.call(this);
        // Update the render area
        this.drawOnRenderArea();
    };
    Player.prototype.stopTurtle = function () {
        // Mother class method
        _super.prototype.stopTurtle.call(this);
        // Update the render area
        this.drawOnRenderArea();
    };
    Player.prototype.update = function () {
        for (var savingName in this.game.getSelectedEqItems()) {
            this.game.getSelectedEqItems()[savingName].update(this, this.getQuest());
        }
        for (var savingName in this.game.getGridItems()) {
            if (Saving.loadBool(savingName))
                this.game.getGridItems()[savingName].update(this, this.getQuest());
        }
        _super.prototype.update.call(this);
    };
    // Public setters : they must be public, because sometimes we have to set these things (at loading for example)
    Player.prototype.setHp = function (hp) {
        _super.prototype.setHp.call(this, hp);
        this.game.updateStatusBar();
    };
    Player.prototype.setMaxHp = function (hp) {
        _super.prototype.setMaxHp.call(this, hp);
        this.game.updateStatusBar();
    };
    // Private methods
    Player.prototype.drawOnRenderArea = function () {
        // Erase the render area
        this.getRenderArea().resetAllButSize();
        // Draw depending on the type
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawString("TUR");
                else if (this.getTurtle())
                    this.getRenderArea().drawString("tur");
                else if (this.getBerserk())
                    this.getRenderArea().drawString("O_O");
                else
                    this.getRenderArea().drawString("\\o/");
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawString("T");
                else if (this.getTurtle())
                    this.getRenderArea().drawString("t");
                else if (this.getBerserk())
                    this.getRenderArea().drawString("B");
                else
                    this.getRenderArea().drawString("o");
                break;
            case PlayerCharacterType.MEDIUM:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumTurtleBerserk"));
                else if (this.getTurtle())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumTurtle"));
                else if (this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumBerserk"));
                else
                    this.getRenderArea().drawArray(Database.getAscii("players/medium"));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedTurtleBerserk"));
                else if (this.getTurtle())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedTurtle"));
                else if (this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedBerserk"));
                else
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezed"));
                break;
        }
    };
    return Player;
})(QuestEntity);
///<reference path="QuestEntityWeapon.ts"/>
var PlayerBludgeon = (function (_super) {
    __extends(PlayerBludgeon, _super);
    function PlayerBludgeon() {
        _super.apply(this, arguments);
    }
    // Public methods
    PlayerBludgeon.prototype.getRealDamage = function () {
        return Random.between(12, 16);
    };
    PlayerBludgeon.prototype.getRealDamageText = function () {
        return "12-16";
    };
    return PlayerBludgeon;
})(QuestEntityWeapon);
var PlayerCharacterType;
(function (PlayerCharacterType) {
    PlayerCharacterType[PlayerCharacterType["CANDYBOX"] = 0] = "CANDYBOX";
    PlayerCharacterType[PlayerCharacterType["MEDIUM"] = 1] = "MEDIUM";
    PlayerCharacterType[PlayerCharacterType["CANDYBOX_SQUEEZED"] = 2] = "CANDYBOX_SQUEEZED";
    PlayerCharacterType[PlayerCharacterType["MEDIUM_SQUEEZED"] = 3] = "MEDIUM_SQUEEZED";
})(PlayerCharacterType || (PlayerCharacterType = {}));
///<reference path="QuestEntity.ts"/>
var PlayerCloneCandyBox = (function (_super) {
    __extends(PlayerCloneCandyBox, _super);
    // Constructor
    function PlayerCloneCandyBox(quest, pos) {
        _super.call(this, quest, pos, new Naming("A clone", "a clone"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(quest.getGame().getPlayer().getHp());
        this.setHp(quest.getGame().getPlayer().getHp());
        // Set the ascii art and the transparent character
        this.getRenderArea().drawString("\\o/");
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fists", "its fists"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    return PlayerCloneCandyBox;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var PlayerCloneMedium = (function (_super) {
    __extends(PlayerCloneMedium, _super);
    // Constructor
    function PlayerCloneMedium(quest, pos) {
        _super.call(this, quest, pos, new Naming("A clone", "a clone"), new RenderArea(11, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(7, 1)), new CollisionBox(this, new Pos(4, 3), new Pos(3, 1))), new QuestEntityMovement());
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(quest.getGame().getPlayer().getHp());
        this.setHp(quest.getGame().getPlayer().getHp());
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("players/medium"));
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fists", "its fists"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(13, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    return PlayerCloneMedium;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var PlayerSummonedDemon = (function (_super) {
    __extends(PlayerSummonedDemon, _super);
    // Constructor
    function PlayerSummonedDemon(quest, globalPosition, damage) {
        _super.call(this, quest, globalPosition, new Naming("A demon", "a demon"));
        // Set the damage
        this.damage = damage;
        // Create the damage reason
        this.damageReason = new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL);
        this.damageReason.setQuestEntity(this.getQuest().getGame().getPlayer(), QuestEntityTeam.NATURE);
        this.damageReason.setSpellNaming(this.getRandomNaming());
        // Create the collision box collection
        this.damageCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(8, 4)));
        // Add the demon colors randomly
        this.addRandomQuestEntitySpellColors();
        // Add the quest entity movement
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(3, 0)));
    }
    // Public methods
    PlayerSummonedDemon.prototype.update = function () {
        // Handle damage
        this.handleDamage();
        // Update
        _super.prototype.update.call(this);
    };
    // Private generation methods
    PlayerSummonedDemon.prototype.addRandomQuestEntitySpellColors = function () {
        // Array of 4*4 used to decide of the colors to add
        var arr = [];
        // Fill the array with false values
        for (var i = 0; i < 4; i++) {
            arr.push([]);
            for (var j = 0; j < 4; j++) {
                arr[i].push(false);
            }
        }
        // Fill the array with some true values
        switch (Random.upTo(1)) {
            // Symmetrical demon (vertical symmetry)
            case 0:
                for (var i = 0; i < 2; i++) {
                    for (var j = 0; j < 4; j++) {
                        if (Random.flipACoin()) {
                            arr[i][j] = true;
                            arr[3 - i][j] = true;
                        }
                    }
                }
                break;
            // Symmetrical demon (horizontal symmetry)
            case 1:
                for (var i = 0; i < 4; i++) {
                    for (var j = 0; j < 2; j++) {
                        if (Random.flipACoin()) {
                            arr[i][j] = true;
                            arr[i][3 - j] = true;
                        }
                    }
                }
                break;
        }
        // Add the colors depending on the array's content
        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                // If we should add a color here, we do so
                if (arr[i][j])
                    this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(i * 2, j), new Pos(2, 1), new Color(ColorType.PLAYER_SUMMONED_DEMON, true)));
            }
        }
    };
    PlayerSummonedDemon.prototype.getRandomNaming = function () {
        // The final name in a string
        var finalName = "";
        // How many syllables?
        var howManySyllables;
        if (Random.flipACoin())
            howManySyllables = 3; // a lot of chance
        else if (Random.oneChanceOutOf(10))
            howManySyllables = 4; // small chance
        else if (Random.oneChanceOutOf(10))
            howManySyllables = 1; // small chance
        else
            howManySyllables = 2; // a lot of chance, a but still a little bit less chance then 3 syllables
        // The syllables array
        var syllablesArray = [];
        // Add the syllables to the array
        for (var i = 0; i < howManySyllables; i++) {
            syllablesArray.push(Random.fromArray(["lael", "ezek", "bal", "sen", "zen", "aps", "hir", "ta", "ozn", "eres", "non", "enon", "cesti", "mal", "aser", "oex", "nax", "arir", "nikon", "taor", "rael", "mael", "sael", "epit", "uer", "pod", "ehon", "edeo", "xa"]));
        }
        // Turn the first letter of the firsy syllable into upper case
        syllablesArray[0] = syllablesArray[0].charAt(0).toUpperCase() + syllablesArray[0].slice(1);
        // Create the final name from the syllables
        for (var i = 0; i < syllablesArray.length; i++) {
            finalName += syllablesArray[i];
        }
        // Finally return the naming
        return new Naming("the demon " + finalName);
    };
    // Other private methods
    PlayerSummonedDemon.prototype.handleDamage = function () {
        // We iterate over entities
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            // If it is destructible
            if (this.getQuest().getEntities()[i].getDestructible()) {
                // If it has a collision box collection
                if (this.getQuest().getEntities()[i].getCbc() != null) {
                    // If this collision box collection collides with ours
                    if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.damageCollisionBoxCollection)) {
                        // We inflict the damage
                        this.getQuest().getEntities()[i].inflictDamage(this.damage, this.damageReason);
                    }
                }
            }
        }
    };
    return PlayerSummonedDemon;
})(QuestEntitySpell);
///<reference path="QuestEntity.ts"/>
var PlayerSummonedOctopusKing = (function (_super) {
    __extends(PlayerSummonedOctopusKing, _super);
    // Constructor
    function PlayerSummonedOctopusKing(quest, pos) {
        _super.call(this, quest, pos, new Naming("An Octopus King", "an Octopus King"), new RenderArea(6, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(6, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(380);
        this.setHp(380);
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/octopusKing"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its tentacles", "its tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 6))), 16));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // update()
    PlayerSummonedOctopusKing.prototype.update = function () {
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition(), 0, new Pos(1, 0));
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return PlayerSummonedOctopusKing;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var PlayerSummonedTribeWarrior = (function (_super) {
    __extends(PlayerSummonedTribeWarrior, _super);
    // Constructor
    function PlayerSummonedTribeWarrior(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tribe warrior", "a tribe warrior"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(4, 3))), new QuestEntityMovement());
        // Set gravity and worms like
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(25);
        this.setHp(25);
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theHole/lostTribeWarrior"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A tribal spear", "a tribal spear"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 8));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // update()
    PlayerSummonedTribeWarrior.prototype.update = function () {
        _super.prototype.update.call(this);
    };
    return PlayerSummonedTribeWarrior;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var PolishedSilverSword = (function (_super) {
    __extends(PolishedSilverSword, _super);
    // Constructor
    function PolishedSilverSword() {
        _super.call(this, "eqItemWeaponPolishedSilverSword", "eqItemWeaponPolishedSilverSwordName", "eqItemWeaponPolishedSilverSwordDescription", "eqItems/weapons/polishedSilverSword");
    }
    // Public getters
    PolishedSilverSword.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A polished silver sword", "a polished silver sword"), player.getClassicCollisionBoxCollection(), 7);
        qew.getCloseCombatDelay().setFixedDelay(4, 0);
        return qew;
    };
    return PolishedSilverSword;
})(EqItem);
var PondLine = (function () {
    // Constructor
    function PondLine(x1, x2) {
        // Is the line currently used by a lolligator ?
        this.isUsed = false;
        this.x1 = x1;
        this.x2 = x2;
    }
    // Public getters
    PondLine.prototype.getIsUsed = function () {
        return this.isUsed;
    };
    PondLine.prototype.getX1 = function () {
        return this.x1;
    };
    PondLine.prototype.getX2 = function () {
        return this.x2;
    };
    // Public setters
    PondLine.prototype.setIsUsed = function (isUsed) {
        this.isUsed = isUsed;
    };
    return PondLine;
})();
var PondLolligator = (function () {
    // Constructor
    function PondLolligator(pondLines, pondLineIndex) {
        // Out width
        this.width = 13;
        // Set from the parameters
        this.pondLines = pondLines;
        this.pondLineIndex = pondLineIndex;
        // Set the orientation (randomly)
        this.isLeft = Random.flipACoin();
        // Set the position (depending on the orientation)
        if (this.isLeft == false)
            this.x = this.pondLines[this.pondLineIndex].getX1();
        else
            this.x = this.pondLines[this.pondLineIndex].getX2() - this.width;
        // At first, we're not fully visible
        this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET;
        // Set isUsed for the pond lines we use
        this.setIsUsedForPondLines(true);
    }
    // Public methods
    PondLolligator.prototype.draw = function (renderArea, x, y) {
        renderArea.drawArray(Database.getAscii("places/lollipopFarm/lolligator" + (this.isLeft ? "Left" : "Right") + (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE ? "Full" : "Top")), x + this.x, y + this.pondLineIndex);
    };
    PondLolligator.prototype.move = function () {
        // If the lolligator is facing left, then it goes to the left
        if (this.isLeft) {
            this.x -= 1;
            // If we're not fully visible but we should be
            if (this.visibleType == PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET && this.x + this.width < this.pondLines[this.pondLineIndex].getX2() - 2 && Random.oneChanceOutOf(5))
                this.visibleType = PondLolligatorVisibleType.FULLY_VISIBLE;
            else if (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE && (this.x < this.pondLines[this.pondLineIndex].getX1() + 2 || Random.oneChanceOutOf(2)))
                this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_ANYMORE;
        }
        else {
            this.x += 1;
            // If we're not fully visible but we should be
            if (this.visibleType == PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET && this.x > this.pondLines[this.pondLineIndex].getX1() + 2 && Random.oneChanceOutOf(5))
                this.visibleType = PondLolligatorVisibleType.FULLY_VISIBLE;
            else if (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE && (this.x + this.width > this.pondLines[this.pondLineIndex].getX2() - 2 || Random.oneChanceOutOf(2)))
                this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_ANYMORE;
        }
    };
    // Called to know if the lolligator should be deleted or not
    PondLolligator.prototype.shouldBeDeleted = function () {
        // It depends on the orientation
        if (this.isLeft == false) {
            // If we're too much on the right, return true
            if (this.x + this.width > this.pondLines[this.pondLineIndex].getX2())
                return true;
            return false;
        }
        else {
            // If we're too much on the left, return true
            if (this.x < this.pondLines[this.pondLineIndex].getX1())
                return true;
            return false;
        }
    };
    // Called just before the lolligator is deleted
    PondLolligator.prototype.willBeDeleted = function () {
        this.setIsUsedForPondLines(false);
    };
    // Private setters
    PondLolligator.prototype.setIsUsedForPondLines = function (isUsed) {
        // Set for the line of the lolligator
        this.pondLines[this.pondLineIndex].setIsUsed(isUsed);
        // Set for the line above if there's a line above
        if (this.pondLineIndex > 0)
            this.pondLines[this.pondLineIndex - 1].setIsUsed(isUsed);
    };
    return PondLolligator;
})();
var PondLolligatorVisibleType;
(function (PondLolligatorVisibleType) {
    PondLolligatorVisibleType[PondLolligatorVisibleType["NOT_FULLY_VISIBLE_YET"] = 0] = "NOT_FULLY_VISIBLE_YET";
    PondLolligatorVisibleType[PondLolligatorVisibleType["FULLY_VISIBLE"] = 1] = "FULLY_VISIBLE";
    PondLolligatorVisibleType[PondLolligatorVisibleType["NOT_FULLY_VISIBLE_ANYMORE"] = 2] = "NOT_FULLY_VISIBLE_ANYMORE";
})(PondLolligatorVisibleType || (PondLolligatorVisibleType = {}));
var Pos = (function () {
    // Constructor
    function Pos(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    // Public methods
    Pos.prototype.add = function (pos) {
        this.x += pos.x;
        this.y += pos.y;
    };
    Pos.prototype.copy = function () {
        return new Pos(this.x, this.y);
    };
    Pos.prototype.getDistance = function (pos) {
        return new Pos(this.x - pos.x, this.y - pos.y);
    };
    Pos.prototype.invert = function () {
        var temp = this.x;
        this.x = this.y;
        this.y = temp;
    };
    Pos.prototype.multiply = function (pos) {
        this.x = this.x * pos.x;
        this.y = this.y * pos.y;
        return this;
    };
    Pos.prototype.plus = function (pos) {
        return new Pos(this.x + pos.x, this.y + pos.y);
    };
    return Pos;
})();
var QuestEntityAnimation = (function () {
    // Constructor
    function QuestEntityAnimation(intervalTime, currentTime, currentAsciiIndex) {
        var asciiNames = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            asciiNames[_i - 3] = arguments[_i];
        }
        this.intervalTime = intervalTime;
        this.currentTime = currentTime;
        this.currentAsciiIndex = currentAsciiIndex;
        this.asciiNames = asciiNames;
    }
    // Public methods
    QuestEntityAnimation.prototype.draw = function (renderArea) {
        renderArea.drawArray(Database.getAscii(this.asciiNames[this.currentAsciiIndex]));
    };
    QuestEntityAnimation.prototype.shouldUpdateRenderAreaAtThisFrame = function () {
        return (this.currentTime == this.intervalTime);
    };
    QuestEntityAnimation.prototype.update = function () {
        this.currentTime += 1;
        if (this.currentTime > this.intervalTime) {
            this.currentTime = 0;
            this.currentAsciiIndex += 1;
            if (this.currentAsciiIndex >= this.asciiNames.length)
                this.currentAsciiIndex = 0;
        }
    };
    // Public getters
    QuestEntityAnimation.prototype.getCurrentAsciiIndex = function () {
        return this.currentAsciiIndex;
    };
    return QuestEntityAnimation;
})();
var QuestEntityDamageReason = (function () {
    // Constructor
    function QuestEntityDamageReason(whoType, whatType) {
        // Additional parameters, depeding on the who type
        // NATURE : no parameter
        // ENTITY
        this.questEntity = null;
        this.questEntityTeam = null;
        // Additional parameters, depeding on the what type
        // WEAPON
        this.questEntityWeapon = null;
        // SPELL
        this.spellNaming = null;
        this.whoType = whoType;
        this.whatType = whatType;
    }
    // Public methods
    QuestEntityDamageReason.prototype.getQuestEntityTeam = function () {
        return this.questEntityTeam;
    };
    QuestEntityDamageReason.prototype.getWhatNaming = function () {
        switch (this.whatType) {
            case QuestEntityDamageReasonWhatType.WEAPON:
                return this.questEntityWeapon.getNaming();
                break;
            case QuestEntityDamageReasonWhatType.SPELL:
                return this.spellNaming;
                break;
        }
    };
    QuestEntityDamageReason.prototype.getWhoNaming = function () {
        switch (this.whoType) {
            case QuestEntityDamageReasonWhoType.NATURE:
                return new Naming("Nature", "nature");
                break;
            case QuestEntityDamageReasonWhoType.ENTITY:
                return this.questEntity.getNaming();
                break;
        }
    };
    // Public setters
    QuestEntityDamageReason.prototype.setQuestEntity = function (questEntity, questEntityTeam) {
        if (questEntityTeam === void 0) { questEntityTeam = null; }
        this.questEntity = questEntity;
        if (questEntityTeam == null)
            this.questEntityTeam = questEntity.getTeam();
        else
            this.questEntityTeam = questEntityTeam;
        return this;
    };
    QuestEntityDamageReason.prototype.setQuestEntityWeapon = function (questEntityWeapon) {
        this.questEntityWeapon = questEntityWeapon;
        return this;
    };
    QuestEntityDamageReason.prototype.setSpellNaming = function (naming) {
        this.spellNaming = naming;
        return this;
    };
    return QuestEntityDamageReason;
})();
var QuestEntityDamageReasonWhatType;
(function (QuestEntityDamageReasonWhatType) {
    QuestEntityDamageReasonWhatType[QuestEntityDamageReasonWhatType["WEAPON"] = 0] = "WEAPON";
    QuestEntityDamageReasonWhatType[QuestEntityDamageReasonWhatType["SPELL"] = 1] = "SPELL";
})(QuestEntityDamageReasonWhatType || (QuestEntityDamageReasonWhatType = {}));
var QuestEntityDamageReasonWhoType;
(function (QuestEntityDamageReasonWhoType) {
    QuestEntityDamageReasonWhoType[QuestEntityDamageReasonWhoType["NATURE"] = 0] = "NATURE";
    QuestEntityDamageReasonWhoType[QuestEntityDamageReasonWhoType["ENTITY"] = 1] = "ENTITY";
})(QuestEntityDamageReasonWhoType || (QuestEntityDamageReasonWhoType = {}));
var QuestEntityHealthBar = (function () {
    // Constructor
    function QuestEntityHealthBar(questEntity, barSize, position, // By default, the bar will be above the entity
        positionType, drawEvenIfFull, showText, barType) {
        if (position === void 0) { position = new Pos(0, -1); }
        if (positionType === void 0) { positionType = QuestEntityHealthBarPositionType.RELATIVE; }
        if (drawEvenIfFull === void 0) { drawEvenIfFull = false; }
        if (showText === void 0) { showText = false; }
        if (barType === void 0) { barType = BarType.UNICOLOR_HEALTH; }
        // Create the bar
        this.bar = new Bar(barType);
        // Set the parameters
        this.setBarSize(barSize);
        this.questEntity = questEntity;
        this.position = position;
        this.positionType = positionType;
        this.drawEvenIfFull = drawEvenIfFull;
        this.showText = showText;
        // Update for the first time
        this.update();
    }
    // Public methods
    QuestEntityHealthBar.prototype.draw = function (renderArea) {
        // Draw if we should be drawn
        if (this.shouldBeDrawn) {
            switch (this.positionType) {
                case QuestEntityHealthBarPositionType.FIXED_ON_PAGE:
                    renderArea.drawArea(this.bar, ((this.questEntity.getQuest().getRenderArea().getWidth() - 100) - this.questEntity.getQuest().getGap()) / 2 + this.questEntity.getQuest().getRealQuestPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    break;
                case QuestEntityHealthBarPositionType.FIXED:
                    renderArea.drawArea(this.bar, this.questEntity.getQuest().getRealQuestPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    break;
                case QuestEntityHealthBarPositionType.RELATIVE:
                    if (this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x > 0 &&
                        this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x + this.bar.getWidth() <= renderArea.getWidth() &&
                        this.questEntity.getGlobalPosition().y + this.position.y > 0 &&
                        this.questEntity.getGlobalPosition().y + this.position.y <= this.questEntity.getQuest().getRealQuestSize().y // And at the bottom
                    ) {
                        renderArea.drawArea(this.bar, this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.questEntity.getGlobalPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    }
                    break;
            }
        }
    };
    QuestEntityHealthBar.prototype.update = function () {
        // If we should draw the bar even if full or it isn't full, then we set that we should draw it
        if (this.drawEvenIfFull || this.questEntity.getHp() / this.questEntity.getMaxHp() != 1) {
            this.shouldBeDrawn = true;
        }
        else
            this.shouldBeDrawn = false;
        // Update the bar only if it should be draw
        if (this.shouldBeDrawn) {
            // If we don't have to show text
            if (this.showText == false)
                this.bar.update(this.questEntity.getHp() / this.questEntity.getMaxHp(), this.questEntity.getHp().toString());
            else
                this.bar.update(this.questEntity.getHp() / this.questEntity.getMaxHp(), this.questEntity.getNaming().getBeginning() + " : " + this.questEntity.getHp().toString() + "/" + this.questEntity.getMaxHp().toString());
        }
    };
    // Public setters
    QuestEntityHealthBar.prototype.setBarSize = function (barSize) {
        this.barSize = barSize;
        this.bar.resize(this.barSize.x, this.barSize.y);
    };
    QuestEntityHealthBar.prototype.setDrawEvenIfFull = function (value) {
        this.drawEvenIfFull = value;
    };
    return QuestEntityHealthBar;
})();
var QuestEntityHealthBarPositionType;
(function (QuestEntityHealthBarPositionType) {
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["RELATIVE"] = 0] = "RELATIVE";
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["FIXED"] = 1] = "FIXED";
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["FIXED_ON_PAGE"] = 2] = "FIXED_ON_PAGE"; // The position of the bar is fixd in the quest and not affected by scrolling
})(QuestEntityHealthBarPositionType || (QuestEntityHealthBarPositionType = {}));
var QuestEntityMovement = (function () {
    // Constructor
    function QuestEntityMovement(offset, intervalTime, currentTime) {
        if (offset === void 0) { offset = new Pos(0, 0); }
        if (intervalTime === void 0) { intervalTime = 0; }
        if (currentTime === void 0) { currentTime = 0; }
        // Special bools
        this.gravity = false; // If true, then the entity which has this movement is affected by gravity
        this.wormsLike = false; // If true, then the entity which has this movement will move like a worms (in the Team 17 games) : it can climb steps of one character and don't "fall" if the go down of just one character
        this.offset = offset;
        this.intervalTime = intervalTime;
        this.currentTime = currentTime;
    }
    // Public methods
    QuestEntityMovement.prototype.shouldMoveAtThisFrame = function () {
        return (this.currentTime == this.intervalTime);
    };
    QuestEntityMovement.prototype.update = function () {
        this.currentTime += 1;
        if (this.currentTime > this.intervalTime)
            this.currentTime = 0;
    };
    // Public getters
    QuestEntityMovement.prototype.getCurrentFrameMovement = function () {
        if (this.shouldMoveAtThisFrame())
            return this.offset;
        else
            return new Pos(0, 0);
    };
    QuestEntityMovement.prototype.getGravity = function () {
        return this.gravity;
    };
    QuestEntityMovement.prototype.getOffset = function () {
        return this.offset;
    };
    QuestEntityMovement.prototype.getWormsLike = function () {
        return this.wormsLike;
    };
    // Public setters
    QuestEntityMovement.prototype.setGravity = function (value) {
        this.gravity = value;
    };
    QuestEntityMovement.prototype.setOffset = function (offset) {
        this.offset = offset;
    };
    QuestEntityMovement.prototype.setWormsLike = function (value) {
        this.wormsLike = value;
    };
    return QuestEntityMovement;
})();
var QuestEntitySpellCaster = (function () {
    // Constructor
    function QuestEntitySpellCaster(callbackCollection) {
        // The delay
        this.delay = new QuestEntityWeaponDelay();
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    QuestEntitySpellCaster.prototype.tryToCast = function () {
        if (this.delay.tryToAttack()) {
            this.callbackCollection.fire();
        }
    };
    // Public getters
    QuestEntitySpellCaster.prototype.getDelay = function () {
        return this.delay;
    };
    return QuestEntitySpellCaster;
})();
var QuestEntitySpellColor = (function () {
    // Constructor
    function QuestEntitySpellColor(quest, position, size, color) {
        this.quest = quest;
        this.position = position;
        this.size = size;
        this.color = color;
    }
    // Public methods
    QuestEntitySpellColor.prototype.draw = function (renderArea, areaPosition) {
        var x1;
        var x2;
        var y;
        for (var i = 0; i < this.size.y; i++) {
            // x1
            x1 = this.position.x + areaPosition.x;
            if (x1 < this.quest.getRealQuestPosition().x)
                x1 = this.quest.getRealQuestPosition().x;
            // x2
            x2 = this.position.x + areaPosition.x + this.size.x;
            if (x2 > this.quest.getRealQuestPosition().x + this.quest.getRealQuestSize().x)
                x2 = this.quest.getRealQuestPosition().x + this.quest.getRealQuestSize().x;
            // y
            y = this.position.y + areaPosition.y + i;
            if (x1 < x2 && y >= this.quest.getRealQuestPosition().y && y < this.quest.getRealQuestPosition().y + this.quest.getRealQuestSize().y) {
                renderArea.addBackgroundColor(x1, x2, y, this.color);
            }
        }
    };
    return QuestEntitySpellColor;
})();
var QuestEntityTeam;
(function (QuestEntityTeam) {
    QuestEntityTeam[QuestEntityTeam["PLAYER"] = 0] = "PLAYER";
    QuestEntityTeam[QuestEntityTeam["MOBS"] = 1] = "MOBS";
    QuestEntityTeam[QuestEntityTeam["NATURE"] = 2] = "NATURE";
})(QuestEntityTeam || (QuestEntityTeam = {}));
var QuestEntityWeaponDelay = (function () {
    // Constructor
    function QuestEntityWeaponDelay() {
        // By default, the type is FIXED and the maxDelay is 0
        this.type = QuestEntityWeaponDelayType.FIXED;
        this.currentDelay = 0;
        this.maxDelay = 0;
    }
    // Public methods
    QuestEntityWeaponDelay.prototype.getText = function () {
        // Create the delay var
        var delay;
        // Set the delay we should use
        if (this.type == QuestEntityWeaponDelayType.BETWEEN)
            delay = Math.floor(this.minBetweenDelay + (this.maxBetweenDelay - this.minBetweenDelay) / 2);
        else
            delay = this.maxDelay;
        // Return the text depending on this delay
        switch (delay) {
            case 0:
                return "incredibly fast";
                break;
            case 1:
                return "very fast";
                break;
            case 2:
                return "fast";
                break;
            case 3:
                return "rather fast";
                break;
            case 4: return "medium speed";
            case 5:
                return "rather slow";
                break;
            case 6:
            case 7:
                return "slow";
                break;
            case 8:
            case 9:
                return "very slow";
                break;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                return "incredibly slow";
                break;
            default:
                "couldn't be slower";
                break;
        }
    };
    QuestEntityWeaponDelay.prototype.tryToAttack = function () {
        // We increase the current delay
        this.currentDelay++;
        switch (this.type) {
            case QuestEntityWeaponDelayType.FIXED:
                // If it's time to attack
                if (this.currentDelay > this.maxDelay) {
                    this.currentDelay = 0;
                    return true;
                }
                break;
            case QuestEntityWeaponDelayType.BETWEEN:
                // If it's time to attack
                if (this.currentDelay > this.maxDelay) {
                    this.currentDelay = 0;
                    this.chooseBetweenDelay();
                    return true;
                }
                break;
            case QuestEntityWeaponDelayType.ONCE_THEN_WAIT:
                // If it's time to attack
                if (this.currentDelay > this.maxDelay) {
                    return true;
                }
                break;
        }
        return false;
    };
    QuestEntityWeaponDelay.prototype.setBetweenDelay = function (minBetweenDelay, maxBetweenDelay, currentDelay) {
        if (currentDelay === void 0) { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.BETWEEN;
        this.minBetweenDelay = minBetweenDelay;
        this.maxBetweenDelay = maxBetweenDelay;
        this.chooseBetweenDelay();
    };
    QuestEntityWeaponDelay.prototype.setFixedDelay = function (maxDelay, currentDelay) {
        if (maxDelay === void 0) { maxDelay = 0; }
        if (currentDelay === void 0) { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.FIXED;
        this.maxDelay = maxDelay;
        this.currentDelay = currentDelay;
    };
    QuestEntityWeaponDelay.prototype.setOnceThenWaitDelay = function (maxDelay, currentDelay) {
        if (maxDelay === void 0) { maxDelay = 0; }
        if (currentDelay === void 0) { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.ONCE_THEN_WAIT;
        this.maxDelay = maxDelay;
        this.currentDelay = currentDelay;
    };
    QuestEntityWeaponDelay.prototype.theWeaponAttacked = function () {
        if (this.type == QuestEntityWeaponDelayType.ONCE_THEN_WAIT)
            this.currentDelay = 0;
    };
    // Private methods
    QuestEntityWeaponDelay.prototype.chooseBetweenDelay = function () {
        this.maxDelay = Random.between(this.minBetweenDelay, this.maxBetweenDelay);
    };
    return QuestEntityWeaponDelay;
})();
var QuestEntityWeaponDelayType;
(function (QuestEntityWeaponDelayType) {
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["FIXED"] = 0] = "FIXED";
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["BETWEEN"] = 1] = "BETWEEN";
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["ONCE_THEN_WAIT"] = 2] = "ONCE_THEN_WAIT"; // We can attack immediately once, but then we have to wait for another attack
})(QuestEntityWeaponDelayType || (QuestEntityWeaponDelayType = {}));
var QuestItemFound = (function () {
    // Constructor
    function QuestItemFound(quest, savingName, foundText, getText) {
        this.quest = quest;
        this.savingName = savingName;
        this.foundText = foundText;
        this.getText = getText;
    }
    // Public methods
    QuestItemFound.prototype.found = function () {
        this.quest.getGame().getQuestLog().addMessage(new QuestLogMessage(this.foundText, null, true));
    };
    QuestItemFound.prototype.get = function () {
        this.quest.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getText, null, true));
    };
    // Public getters    
    QuestItemFound.prototype.getSavingName = function () {
        return this.savingName;
    };
    return QuestItemFound;
})();
var QuestLog = (function () {
    // Constructor
    function QuestLog() {
        // Array of messages contained in the quest log
        this.messages = [];
    }
    // Public method
    QuestLog.prototype.addDelimiter = function () {
        this.messages.push(new QuestLogMessage("----------------------------------------------------------------------------------------------------"));
        this.messages.push(new QuestLogMessage(""));
    };
    QuestLog.prototype.addMessage = function (message) {
        // We add the message
        this.messages.push(message);
        // We check the log size
        this.checkLogSize();
    };
    QuestLog.prototype.draw = function (renderArea, pos) {
        // We draw the lines
        renderArea.drawHorizontalLine("-", pos.x, pos.x + 100, pos.y);
        renderArea.drawHorizontalLine("-", pos.x, pos.x + 100, pos.y + 11);
        // We draw the messages
        for (var i = 0; i < this.messages.length; i++) {
            this.messages[i].draw(renderArea, new Pos(pos.x, 1 + pos.y + this.messages.length - 1 - i), 100);
        }
    };
    // Private methods
    QuestLog.prototype.checkLogSize = function () {
        if (this.messages.length > 10) {
            this.messages.splice(0, this.messages.length - 10);
        }
    };
    return QuestLog;
})();
var QuestLogMessage = (function () {
    // Constructor
    function QuestLogMessage(left, right, bold) {
        if (right === void 0) { right = null; }
        if (bold === void 0) { bold = false; }
        // Strings
        this.left = null;
        this.right = null;
        // Set the parameters
        this.left = left;
        this.right = right;
        this.bold = bold;
        // If the left string is too big
        if (this.left.length > 100 - (this.right != null ? this.right.length : 0)) {
            this.left = this.left.substr(0, 100 - (this.right != null ? this.right.length : 0) - 7) + " (...)";
        }
    }
    // Public methods
    QuestLogMessage.prototype.draw = function (renderArea, pos, width) {
        if (this.left != null) {
            renderArea.drawString(this.left, pos.x, pos.y);
            if (this.bold)
                renderArea.addBold(pos.x, pos.x + this.left.length, pos.y);
        }
        if (this.right != null) {
            renderArea.drawString(this.right, pos.x + width - this.right.length, pos.y);
            if (this.bold)
                renderArea.addBold(pos.x + width - this.right.length, width, pos.y);
        }
    };
    return QuestLogMessage;
})();
// Potions
Saving.registerBool("questPlayerSpellHealthPotionHasSpell", false);
Saving.registerBool("questPlayerSpellTurtlePotionHasSpell", false);
Saving.registerBool("questPlayerSpellAntiGravityPotionHasSpell", false);
Saving.registerBool("questPlayerSpellBerserkPotionHasSpell", false);
Saving.registerBool("questPlayerSpellCloningPotionHasSpell", false);
Saving.registerBool("questPlayerSpellPPotionHasSpell", false);
Saving.registerBool("questPlayerSpellXPotionHasSpell", false);
Saving.registerNumber("questPlayerSpellHealthPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellAntiGravityPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellTurtlePotionQuantity", 0);
Saving.registerNumber("questPlayerSpellBerserkPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellCloningPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellPPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellXPotionQuantity", 0);
var QuestPlayerSpell = (function () {
    // Constructor
    function QuestPlayerSpell(quest, buttonClassName, buttonPosition, buttonText, buttonColor, callbackCollection, countdownType, countdownTime, underlinedLetter, hotkeyLetter, numberIdWichLimitsQuantity) {
        if (underlinedLetter === void 0) { underlinedLetter = null; }
        if (hotkeyLetter === void 0) { hotkeyLetter = null; }
        if (numberIdWichLimitsQuantity === void 0) { numberIdWichLimitsQuantity = null; }
        this.quest = quest;
        this.buttonClassName = buttonClassName;
        this.buttonPosition = buttonPosition;
        this.buttonText = buttonText;
        this.buttonColor = buttonColor;
        this.callbackCollection = callbackCollection;
        this.countdownType = countdownType;
        this.countdownTime = countdownTime;
        this.underlinedLetter = underlinedLetter;
        this.hotkeyLetter = hotkeyLetter;
        this.numberIdWichLimitsQuantity = numberIdWichLimitsQuantity;
    }
    // Public methods
    QuestPlayerSpell.prototype.draw = function (renderArea, position) {
        // Set the text
        var text = this.buttonText;
        // Possibly modify the text depending on numberIdWichLimitsQuantity
        if (this.numberIdWichLimitsQuantity != null) {
            if (Saving.loadNumber(this.numberIdWichLimitsQuantity) <= 999)
                text += " " + Saving.loadNumber(this.numberIdWichLimitsQuantity);
            else
                text += " 999+";
        }
        // Add the button
        renderArea.addAsciiRealButton(text, position.x + this.buttonPosition.x, position.y + this.buttonPosition.y, this.buttonClassName + " keepBlackTextWhenInverted", "", false, this.underlinedLetter, this.buttonColor);
        // Add the link
        renderArea.addLinkCall("." + this.buttonClassName, new CallbackCollection(this.cast.bind(this)));
    };
    QuestPlayerSpell.prototype.getHotkey = function () {
        return new Hotkey(this.hotkeyLetter, new CallbackCollection(this.cast.bind(this)));
    };
    // Public getters
    QuestPlayerSpell.prototype.getButtonPosition = function () {
        return this.buttonPosition;
    };
    // Private methods
    QuestPlayerSpell.prototype.cast = function () {
        var canWeCast = true;
        // Ceck if the quest is ended to possibly set canWeCast to false
        if (this.quest.getQuestEnded())
            canWeCast = false;
        // Check the countdown to possibly set canWeCast to false
        if (canWeCast == true) {
            switch (this.countdownType) {
                case QuestPlayerSpellCountdownType.SPELLS:
                    if (this.quest.getPlayerSpellsCountdown() > 0)
                        canWeCast = false;
                    break;
                case QuestPlayerSpellCountdownType.POTIONS:
                    if (this.quest.getPlayerPotionsCountdown() > 0)
                        canWeCast = false;
                    break;
                case QuestPlayerSpellCountdownType.BLACKHOLE:
                    if (this.countdownTime <= 0)
                        canWeCast = false;
                    break;
                default: break;
            }
        }
        // Check the numberIdWichLimitsQuantity to possibly set canWeCast to false
        if (this.numberIdWichLimitsQuantity != null) {
            if (Saving.loadNumber(this.numberIdWichLimitsQuantity) <= 0) {
                canWeCast = false;
            }
        }
        // If we can cast
        if (canWeCast == true) {
            // Handle the countdown
            switch (this.countdownType) {
                case QuestPlayerSpellCountdownType.SPELLS:
                    this.quest.increasePlayerSpellsCountdown(this.countdownTime);
                    break;
                case QuestPlayerSpellCountdownType.POTIONS:
                    this.quest.increasePlayerPotionsCountdown(this.countdownTime);
                    break;
                case QuestPlayerSpellCountdownType.BLACKHOLE:
                    this.countdownTime -= 1;
                    break;
                default: break;
            }
            // Handle numberIdWichLimitsQuantity
            if (this.numberIdWichLimitsQuantity != null) {
                Saving.saveNumber(this.numberIdWichLimitsQuantity, Saving.loadNumber(this.numberIdWichLimitsQuantity) - 1);
            }
            // Fire the callback collection which was given to us
            this.callbackCollection.fire();
        }
    };
    return QuestPlayerSpell;
})();
var QuestPlayerSpellCountdownType;
(function (QuestPlayerSpellCountdownType) {
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["SPELLS"] = 0] = "SPELLS";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["POTIONS"] = 1] = "POTIONS";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["ITEM_CAPACITIES"] = 2] = "ITEM_CAPACITIES";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["BLACKHOLE"] = 3] = "BLACKHOLE";
})(QuestPlayerSpellCountdownType || (QuestPlayerSpellCountdownType = {}));
var Random;
(function (Random) {
    function between(a, b) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 2)
            return b;
        return Math.floor(Math.random() * (b - a + 1)) + a;
    }
    Random.between = between;
    function flipACoin() {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 2)
            return true;
        if (Math.random() < 0.5)
            return false;
        return true;
    }
    Random.flipACoin = flipACoin;
    function fromArray(arr) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 4)
            return fromArray(["a", "b", "c", "d", -852, null, "aniwey", "ilovebugs", "42", 42]);
        return arr[upTo(arr.length - 1)];
    }
    Random.fromArray = fromArray;
    function fromPosition(pos) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 3)
            return new Pos(-pos.x, -pos.y);
        return new Pos(Random.upTo(pos.x), Random.upTo(pos.y));
    }
    Random.fromPosition = fromPosition;
    function oneChanceOutOf(n) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 1)
            return flipACoin();
        if (this.upTo(n - 1) == 0)
            return true;
        return false;
    }
    Random.oneChanceOutOf = oneChanceOutOf;
    function upTo(n) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 3)
            return -n;
        return Math.floor(Math.random() * (n + 1));
    }
    Random.upTo = upTo;
})(Random || (Random = {}));
///<reference path="QuestEntity.ts"/>
var Rat = (function (_super) {
    __extends(Rat, _super);
    // Constructor
    function Rat(quest, pos) {
        _super.call(this, quest, pos, new Naming("A rat", "a rat"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(3);
        this.setHp(3);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/cellar/rat"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its teeth", "its teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // Public methods
    Rat.prototype.willDie = function () {
        // We find a candy
        if (Random.oneChanceOutOf(3))
            this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        else
            this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
    };
    return Rat;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var RedEnchantedGloves = (function (_super) {
    __extends(RedEnchantedGloves, _super);
    // Constructor
    function RedEnchantedGloves() {
        _super.call(this, "eqItemGlovesRedEnchantedGloves", "eqItemGlovesRedEnchantedGlovesName", "eqItemGlovesRedEnchantedGlovesDescription", "eqItems/gloves/redEnchantedGloves");
        // The timer (to avoid casting fireballs too often..)
        this.currentTimer = 0;
        this.maxTimer = 5;
    }
    // Special ability
    RedEnchantedGloves.prototype.getSpecialAbility = function () {
        return "Randomly cast small fireballs around you (red enchanted gloves).";
    };
    // update
    RedEnchantedGloves.prototype.update = function (player, quest) {
        this.currentTimer += 1;
        // If the timer is ready
        if (this.currentTimer >= this.maxTimer) {
            // Cast the fireball
            this.castFireball(player, quest);
            // Reset the timer
            this.currentTimer = 0;
        }
    };
    // Private methods
    RedEnchantedGloves.prototype.castFireball = function (player, quest) {
        // Create the fireball
        var fireball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("A small fireball", "a small fireball"), new Color(ColorType.RED_ENCHANTED_GLOVES_FIREBALL), new Pos(2, 1), 15, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A small fireball", "a small fireball")));
        // Set the direction
        fireball.setTargetTypeNoTarget(Algo.getRandomNotImmobileDirectionUpToThisSpeed(1).multiply(new Pos(2, 2)));
        // Add the entity
        quest.addEntity(fireball);
    };
    return RedEnchantedGloves;
})(EqItem);
var RenderLinkCallbackCollection = (function (_super) {
    __extends(RenderLinkCallbackCollection, _super);
    // Constructor
    function RenderLinkCallbackCollection(callbackCollection) {
        _super.call(this);
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkCallbackCollection.prototype.run = function () {
        this.callbackCollection.fire();
    };
    return RenderLinkCallbackCollection;
})(RenderLink);
var RenderLinkChange = (function (_super) {
    __extends(RenderLinkChange, _super);
    // Constructor
    function RenderLinkChange(element, callbackCollection) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkChange.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        $(this.element).change(function (event) {
            renderLink.callbackCollection.fire();
            return false; // Avoid event bubbling
        });
    };
    return RenderLinkChange;
})(RenderLink);
var RenderLinkCheckbox = (function (_super) {
    __extends(RenderLinkCheckbox, _super);
    // Constructor
    function RenderLinkCheckbox(element, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked) {
        _super.call(this);
        this.element = element;
        this.callbackCollectionWhenChecked = callbackCollectionWhenChecked;
        this.callbackCollectionWhenUnchecked = callbackCollectionWhenUnchecked;
    }
    // Public methods
    RenderLinkCheckbox.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // We set the change event
        $(this.element).change(function (event) {
            if ($(this).is(':checked')) {
                // We fire the callback collection
                renderLink.callbackCollectionWhenChecked.fire();
            }
            else {
                renderLink.callbackCollectionWhenUnchecked.fire();
            }
            return false; // Avoid event bubbling
        });
    };
    return RenderLinkCheckbox;
})(RenderLink);
var RenderLinkClick = (function (_super) {
    __extends(RenderLinkClick, _super);
    // Constructor
    function RenderLinkClick(element, callbackCollection) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkClick.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        $(this.element).mouseup(function (event) {
            renderLink.callbackCollection.fire();
            return false; // Avoid event bubbling
        });
    };
    return RenderLinkClick;
})(RenderLink);
var RenderLinkInput = (function (_super) {
    __extends(RenderLinkInput, _super);
    // Constructor
    function RenderLinkInput(element, enigmaAnswer, callbackCollection, callbackCollectionWrong) {
        _super.call(this);
        this.element = element;
        this.enigmaAnswer = enigmaAnswer;
        this.callbackCollection = callbackCollection;
        this.callbackCollectionWrong = callbackCollectionWrong;
    }
    // Public methods
    RenderLinkInput.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // We set the change event
        $(this.element).change(function (event) {
            // We check if the new value correspond to the answer (if it does we fire the callbacks)
            if (renderLink.enigmaAnswer.isRight($(this).val()))
                renderLink.callbackCollection.fire();
            else if (renderLink.callbackCollectionWrong != null) {
                renderLink.callbackCollectionWrong.fire();
            }
            // We empty the input area
            $(this).val("");
            return false; // Avoid event bubbling
        });
        // We set the focus
        $(this.element).focus();
    };
    return RenderLinkInput;
})(RenderLink);
var RenderLinkOnHoverShowTooltip = (function (_super) {
    __extends(RenderLinkOnHoverShowTooltip, _super);
    // Constructor
    function RenderLinkOnHoverShowTooltip(classHover, classTooltip) {
        _super.call(this);
        this.classHover = classHover;
        this.classTooltip = classTooltip;
    }
    // Public methods
    RenderLinkOnHoverShowTooltip.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // If we hover on the classHover elements
        $(this.classHover).hover(function (event) {
            // We show the classTooltip tooltips
            $(renderLink.classTooltip).css({
                "display": "block"
            });
            // Avoid event bubbling
            return false;
        });
        // Else, if we're out of the classHover elements
        $(this.classHover).mouseout(function (event) {
            // We stop showing the classTooltip tooltips
            $(renderLink.classTooltip).css({
                display: "none"
            });
            // Avoid event bubbling
            return false;
        });
        // If the mouse moves, we put the classTooltip elements under the mouse
        $(this.classHover).on('mousemove', function (e) {
            $(renderLink.classTooltip).css({
                left: e.pageX - $(document).scrollLeft(),
                top: e.pageY - $(document).scrollTop()
            });
        });
    };
    return RenderLinkOnHoverShowTooltip;
})(RenderLink);
///<reference path="RenderLink.ts"/>
var RenderLinkOver = (function (_super) {
    __extends(RenderLinkOver, _super);
    // Constructor
    function RenderLinkOver(firstElement, secondElement) {
        _super.call(this);
        this.firstElement = firstElement;
        this.secondElement = secondElement;
    }
    // Public methods
    RenderLinkOver.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        $(this.firstElement).mouseenter(function (event) {
            $(renderLink.secondElement).show();
            return false; // Avoid event bubbling
        })
            .mouseleave(function (event) {
            $(renderLink.secondElement).hide();
            return false; // Avoid event bubbling
        });
        /*
        $(this.firstElement).hover(
            function(){
                $(renderLink.secondElement).css('visibility', 'visible');
            },
            function(){
                $(renderLink.secondElement).css('visibility', 'hidden');
            }
        );
        */
    };
    return RenderLinkOver;
})(RenderLink);
var RenderLinkSimpleInput = (function (_super) {
    __extends(RenderLinkSimpleInput, _super);
    // Constructor
    function RenderLinkSimpleInput(element, callbackCollection, defaultValue, hasFocus) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
        this.defaultValue = defaultValue;
        this.hasFocus = hasFocus;
    }
    // Public methods
    RenderLinkSimpleInput.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // If the default value isn't null
        if (this.defaultValue != null) {
            // We set the default value
            $(this.element).val(this.defaultValue);
        }
        // We set the change event
        $(this.element).change(function (event) {
            // We fire the callback collection
            renderLink.callbackCollection.fire();
            return false; // Avoid event bubbling
        });
        if (this.hasFocus)
            $(this.element).focus();
    };
    return RenderLinkSimpleInput;
})(RenderLink);
///<reference path="RenderTag.ts"/>
var RenderTagLt = (function (_super) {
    __extends(RenderTagLt, _super);
    // Constructor
    function RenderTagLt(x) {
        _super.call(this, x, "");
    }
    // Public methods
    RenderTagLt.prototype.clone = function () {
        return _super.prototype.clone.call(this);
    };
    RenderTagLt.prototype.draw = function (str) {
        // Instead of adding ourselves, we delete one character under the x position and then add the "&lt;"
        str = str.replaceAt(this.getX(), "&");
        return str.addAt(this.getX() + 1, "lt;");
    };
    return RenderTagLt;
})(RenderTag);
var RenderTransparency = (function () {
    // Constructor
    function RenderTransparency(alphaCharacter, metaAlphaCharacter) {
        if (metaAlphaCharacter === void 0) { metaAlphaCharacter = null; }
        this.alphaCharacter = alphaCharacter;
        this.metaAlphaCharacter = metaAlphaCharacter;
    }
    // Public getters
    RenderTransparency.prototype.getAlphaCharacter = function () {
        return this.alphaCharacter;
    };
    RenderTransparency.prototype.getMetaAlphaCharacter = function () {
        return this.metaAlphaCharacter;
    };
    return RenderTransparency;
})();
///<reference path="EqItem.ts"/>
var RocketBoots = (function (_super) {
    __extends(RocketBoots, _super);
    // Constructor
    function RocketBoots() {
        _super.call(this, "eqItemBootsRocketBoots", "eqItemBootsRocketBootsName", "eqItemBootsRocketBootsDescription", "eqItems/boots/rocketBoots");
    }
    // Special ability
    RocketBoots.prototype.getSpecialAbility = function () {
        return "Jump in mid-air without limit (rocket boots).";
    };
    return RocketBoots;
})(EqItem);
///<reference path="Game.ts"/>
///<reference path="./../../libs/jquery.d.ts"/>
var Main;
(function (Main) {
    // The game
    var game = null;
    // Information about loading
    var loadingType = MainLoadingType.NONE;
    var loadingString = null;
    // Information about the game mode
    var gameMode = null;
    // Public functions    
    function documentIsReady() {
        Keyboard.execute(); // Execute the Kayboard jquery stuff
        start(); // Start the game
    }
    Main.documentIsReady = documentIsReady;
    function reloadEverythingFromFile(fileContent) {
        // Clear intervals for the current game
        game.clearAllIntervals();
        // Set the loading type
        loadingType = MainLoadingType.FILE;
        // Set the loading string
        loadingString = fileContent;
        // Set the gamemode (null so that it is set from loading)
        gameMode = null;
        // We can't register anymore
        Saving.canRegister = false;
        // Finally start (this will erase the current game)
        start();
    }
    Main.reloadEverythingFromFile = reloadEverythingFromFile;
    function setUrlData(urlData) {
        // Create some variables
        var beforeEqual;
        var afterEqual;
        // If there's something in the url and we can find an equal sign and this equal sign isn't the last character of the string
        if (urlData != "" && urlData.indexOf("=") != -1 && urlData.indexOf("=") < urlData.length - 1) {
            // Strip the question mark
            urlData = urlData.substr(1);
            // Separate the data in two parts : before and after the equal sign
            beforeEqual = urlData.substr(0, urlData.indexOf("="));
            afterEqual = urlData.substr(urlData.indexOf("=") + 1);
            // Do different things depending on the value of beforeEqual
            switch (beforeEqual) {
                // If we're trying to load a local slot
                case "slot":
                    loadingType = MainLoadingType.LOCAL;
                    loadingString = "slot" + afterEqual;
                    break;
                // If we're trying to launch a new game with a special mode
                case "gamemode":
                    gameMode = afterEqual;
                    break;
            }
        }
    }
    Main.setUrlData = setUrlData;
    function start() {
        game = new Game(gameMode);
        Keyboard.setGame(game);
        Saving.load(game, loadingType, loadingString);
        game.postLoad();
    }
})(Main || (Main = {}));
$(document).ready(function () {
    Main.setUrlData(window.location.search);
    Main.documentIsReady();
});
///<reference path="Place.ts"/>
///<reference path="main.ts"/>
var Save = (function (_super) {
    __extends(Save, _super);
    // Constructor
    function Save(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The currently selected slot (slot1 by default)
        this.selectedSlot = "slot1";
        // The last local autosave minute we drew (used to refresh the page at the right time)
        this.lastLocalAutosaveMinute = null;
        // Should we show the file save warning?
        this.showFileSaveWarning = false;
        // The textarea content
        this.fileSaveTextareaContent = null;
        // Resize
        this.resize();
        // Create the slots array
        this.createSlotsArray();
        // Update
        this.update();
    }
    // getRenderArea()
    Save.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willBeDisplayed()
    Save.prototype.willBeDisplayed = function () {
        // We resize (we must do this there and not in the constructor because the size depends on the translation)
        this.resize();
        // We add a callback : we will be updated every second (in order to show the correct time for the local autosave countdown)
        this.getGame().getOneSecondCallbackCollection().addCallback(this.oneSecondCallback.bind(this));
    };
    // Private methods
    Save.prototype.clickedAutosave = function () {
        // Save on the selected slot
        Saving.save(this.getGame(), MainLoadingType.LOCAL, this.selectedSlot);
        // Enable autosaving
        this.getGame().enableLocalAutosave(this.selectedSlot);
        // Re-create the slots array
        this.createSlotsArray();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.clickedDisableAutosave = function () {
        // We disable auto saving
        this.getGame().disableLocalAutosave();
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.clickedFileLoad = function () {
        Main.reloadEverythingFromFile($(".saveFileLoadTextarea").val());
    };
    Save.prototype.clickedFileSave = function () {
        // Save some special variables by calling the save() methods of various objects
        this.getGame().save(); // Various variables owned by the game object
        this.getGame().getPlayer().save(); // The player
        // We now show the warning
        this.showFileSaveWarning = true;
        // Reset the textarea content
        this.fileSaveTextareaContent = "";
        // Write bools
        for (var str in Saving.getAllBools()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", "; // We add a comma if we're not adding the very first variable
            this.fileSaveTextareaContent += "bool " + str + "=" + Saving.boolToString(Saving.getAllBools()[str]);
        }
        // Write numbers
        for (var str in Saving.getAllNumbers()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", "; // We add a comma if we're not adding the very first variable
            this.fileSaveTextareaContent += "number " + str + "=" + Saving.numberToString(Saving.getAllNumbers()[str]);
        }
        // Write strings
        for (var str in Saving.getAllStrings()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", "; // We add a comma if we're not adding the very first variable
            this.fileSaveTextareaContent += "string " + str + "=" + Saving.getAllStrings()[str];
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.clickedSave = function () {
        // Save on the selected slot
        Saving.save(this.getGame(), MainLoadingType.LOCAL, this.selectedSlot);
        // Re-create the slots array
        this.createSlotsArray();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.createSlotsArray = function () {
        // Reset the array
        this.slotsArray = [];
        // Fill it
        for (var i = 1; i <= 5; i++) {
            this.slotsArray.push("slot" + i.toString());
            this.slotsArray.push("Slot " + i.toString() + " (" + LocalSaving.getSlotSummaryAsString("slot" + i.toString()) + ")");
        }
    };
    Save.prototype.drawGreen = function (text, x, y, translated) {
        if (translated === void 0) { translated = false; }
        this.renderArea.drawString(text, x, y, translated);
        this.renderArea.addColor(x, x + text.length, y, new Color(ColorType.SAVE_GREEN));
    };
    Save.prototype.drawLocalLoad = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // Var we will use for link generation
        var link;
        // Title
        this.drawTitle("saveLocalLoadTitle", y + yAdd);
        // If we support local saving
        if (LocalSaving.supportsLocalSaving()) {
            // "You can load.."
            this.drawPoint("saveLocalLoadYouCan", x, y + yAdd + 2);
            if (Database.isTranslated())
                yAdd += 1;
            // The links
            for (var i = 1; i <= 5; i++) {
                link = "http://candybox2.github.io/?slot=" + i.toString();
                this.renderArea.addHtmlLink(x + 2, y + yAdd + 3 + i, link, link);
                this.renderArea.drawString("(slot " + i.toString() + ")", x + link.length + 4, y + yAdd + 3 + i);
            }
            // "Thanks to.."
            this.drawPoint("saveLocalLoadThanksTo", x, y + yAdd + 10);
            if (Database.isTranslated())
                yAdd += 1;
        }
        else {
            // Warning messages
            this.drawWarning(Database.getText("saveLocalSaveWarning0") + " (local storage and application cache)", x, y + yAdd + 2);
            this.drawWarning(Database.getText("saveLocalSaveWarning1"), x, y + yAdd + 3);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning0"), x, y + yAdd + 5, true);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning1"), x, y + yAdd + 6, true);
        }
        // Return yAdd
        return yAdd;
    };
    Save.prototype.drawLocalSave = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // Title & why
        this.drawTitle("saveLocalSaveTitle", y + yAdd);
        this.drawPoint("saveLocalSaveWhy", x, y + yAdd + 2);
        if (Database.isTranslated())
            yAdd += 1;
        // If we support local saving
        if (LocalSaving.supportsLocalSaving()) {
            // Choose a slot text
            this.drawPoint("saveLocalSaveChooseSlot", x, y + yAdd + 4);
            // Slots list
            this.renderArea.addList(x + 5, x + 45, y + yAdd + 7, "saveLocalSaveSlotsList", new CallbackCollection(this.slotSelected.bind(this)), this.slotsArray);
            // Autosave enabled ?
            if (this.getGame().getLocalAutosaveEnabled()) {
                this.drawGreen(Database.getText("saveLocalSaveAutosaveEnabled"), x, y + yAdd + 9);
                if (Database.getTranslatedText("saveLocalSaveAutosaveEnabled") != "")
                    this.drawGreen("(" + Database.getTranslatedText("saveLocalSaveAutosaveEnabled") + ")", x, y + yAdd + 10, true);
                this.drawGreen("Next save in " + Algo.pluralFormat(Math.ceil(this.getGame().getLocalAutosaveTime() / 60), " minute", " minutes") + " on slot " + this.getGame().getLocalAutosaveSlot().substr(4, 1) + ".", x, y + yAdd + 11);
            }
            // Separation lines
            this.renderArea.drawVerticalLine("|", x + 50, y + yAdd + 5, y + yAdd + 11);
            this.renderArea.drawHorizontalLine("-", x, x + 100, y + yAdd + 3);
            this.renderArea.drawHorizontalLine("-", x, x + 100, y + yAdd + 12);
            // Choose what to do text
            this.drawPoint("saveLocalSaveChooseWhatToDo", x + 51, y + yAdd + 4);
            // Add save button
            this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveSaveButton") + " on slot " + this.selectedSlot.substr(4, 1), x + 51, y + yAdd + 7, "saveLocalSaveSaveButton", Database.getTranslatedText("saveLocalSaveSaveButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".saveLocalSaveSaveButton", new CallbackCollection(this.clickedSave.bind(this)));
            // If autosave is disabled or it's not enabled on the currently selected slot
            if (this.getGame().getLocalAutosaveEnabled() == false) {
                // Add autosave button
                this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveAutosaveButton") + " on slot " + this.selectedSlot.substr(4, 1), x + 51, y + yAdd + 10, "saveLocalSaveAutosaveButton", Database.getTranslatedText("saveLocalSaveAutosaveButton"), true, -1, null, false);
                this.renderArea.addLinkCall(".saveLocalSaveAutosaveButton", new CallbackCollection(this.clickedAutosave.bind(this)));
            }
            else {
                // Add disable autosave button
                this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveDisableAutosaveButton"), x + 51, y + yAdd + 10, "saveLocalSaveDisableAutosaveButton", Database.getTranslatedText("saveLocalSaveDisableAutosaveButton"), true, -1, null, false);
                this.renderArea.addLinkCall(".saveLocalSaveDisableAutosaveButton", new CallbackCollection(this.clickedDisableAutosave.bind(this)));
            }
        }
        else {
            // Warning messages
            this.drawWarning(Database.getText("saveLocalSaveWarning0") + " (local storage and application cache)", x, y + yAdd + 4);
            this.drawWarning(Database.getText("saveLocalSaveWarning1"), x, y + yAdd + 5);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning0"), x, y + yAdd + 7, true);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning1"), x, y + yAdd + 8, true);
        }
        // Return yAdd
        return yAdd;
    };
    Save.prototype.drawFileLoad = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // Title
        this.drawTitle("saveFileLoadTitle", y + yAdd);
        // Instructions
        this.renderArea.drawString(Database.getText("saveFileLoadPaste"), x, y + yAdd + 2);
        this.renderArea.drawString(Database.getTranslatedText("saveFileLoadPaste"), x, y + yAdd + 3, true);
        // Add the text area
        this.renderArea.addTextarea(x + 2, y + yAdd + 5, 96, 6, "saveFileLoadTextarea");
        // Add the load button
        this.renderArea.addAsciiRealButton(Database.getText("saveFileLoadButton"), 48, y + yAdd + 13, "saveFileLoadButton", Database.getTranslatedText("saveFileLoadButton"), true);
        this.renderArea.addLinkCall(".saveFileLoadButton", new CallbackCollection(this.clickedFileLoad.bind(this)));
        // Return yAdd
        return yAdd;
    };
    Save.prototype.drawFileSave = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // The title
        this.drawTitle("saveFileSaveTitle", y + yAdd);
        // The "why"
        this.renderArea.drawString(Database.getText("saveFileSaveWhy0"), x, y + yAdd + 2);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy1"), x, y + yAdd + 3);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy2"), x, y + yAdd + 4);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy3"), x, y + yAdd + 5);
        this.renderArea.drawString("   " + Database.getText("saveFileSaveWhy4"), x, y + yAdd + 6);
        // The translated "why" (only if there's a translation)
        if (Database.isTranslated()) {
            this.renderArea.drawString(Database.getTranslatedText("saveFileSaveWhy0"), x, y + yAdd + 8, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy1"), x, y + yAdd + 9, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy2"), x, y + yAdd + 10, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy3"), x, y + yAdd + 11, true);
            this.renderArea.drawString("   " + Database.getTranslatedText("saveFileSaveWhy4"), x, y + yAdd + 12, true);
            yAdd += 6; // We increase yAdd by 6 because the translations took 6 lines
        }
        // Add the button
        this.renderArea.addAsciiRealButton(Database.getText("saveFileSaveButton"), 35, y + yAdd + 8, "saveFileSaveButton", Database.getTranslatedText("saveFileSaveButton"), true);
        this.renderArea.addLinkCall(".saveFileSaveButton", new CallbackCollection(this.clickedFileSave.bind(this)));
        // Add the text area
        this.renderArea.addTextarea(x + 2, y + yAdd + 11, 96, 6, "saveFileSaveTextarea", (this.fileSaveTextareaContent != null ? this.fileSaveTextareaContent : ""));
        // Should we show the warning?
        if (this.showFileSaveWarning) {
            this.drawWarning(Database.getText("saveFileSaveWarning"), x + 2, y + yAdd + 12);
            this.drawWarning(Database.getTranslatedText("saveFileSaveWarning"), x + 2, y + yAdd + 13, true);
        }
        // We return yAdd
        return yAdd;
    };
    Save.prototype.drawPoint = function (textName, x, y) {
        this.renderArea.drawString(Database.getText(textName), x, y);
        this.renderArea.drawString(Database.getTranslatedText(textName), x, y + 1, true);
    };
    Save.prototype.drawTitle = function (textName, y) {
        var x = 50 - Math.floor((Database.getText(textName).length / 2 + 1 + Database.getTranslatedText(textName).length / 2));
        this.renderArea.drawString(Database.getText(textName), x, y);
        this.renderArea.addBold(x, x + Database.getText(textName).length, y);
        this.renderArea.drawString(Database.getTranslatedText(textName), x + Database.getText(textName).length + 1, y, true);
    };
    Save.prototype.drawWarning = function (text, x, y, translated) {
        if (translated === void 0) { translated = false; }
        if (text != "") {
            this.renderArea.drawString(text, x, y, translated);
            this.renderArea.addColor(x, x + text.length, y, new Color(ColorType.SAVE_RED));
        }
    };
    Save.prototype.oneSecondCallback = function () {
        // If there's no last minute or it's different from the current minute
        if (this.lastLocalAutosaveMinute == null || this.lastLocalAutosaveMinute != Math.ceil(this.getGame().getLocalAutosaveTime() / 60)) {
            // We set the minute
            this.lastLocalAutosaveMinute = Math.ceil(this.getGame().getLocalAutosaveTime() / 60);
            // We update
            this.createSlotsArray();
            this.update();
            this.getGame().updatePlace();
        }
    };
    Save.prototype.resize = function () {
        // The size depends on if there's a translation or not
        if (Database.isTranslated())
            this.renderArea.resize(100, 84);
        else
            this.renderArea.resize(100, 74);
    };
    Save.prototype.selectRightSlot = function () {
        // We select the right slot
        $("#" + this.selectedSlot).prop('selected', true);
    };
    Save.prototype.slotSelected = function () {
        // Get the selected language id
        this.selectedSlot = $("#saveLocalSaveSlotsList").find(":selected").attr("id");
        // Update the ligthouse
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.update = function () {
        var yPosition = 0; // The y position where we will add things. Can be incremented sometimes, depending on the user's language..
        // Erase everything
        this.renderArea.resetAllButSize();
        // Saving
        this.renderArea.drawArray(Database.getAscii("text/Saving"), 50 - Math.floor((Database.getAsciiWidth("text/Saving") / 2)), yPosition);
        yPosition += this.drawLocalSave(0, yPosition + 7);
        yPosition += this.drawFileSave(0, yPosition + 21);
        // Loading
        this.renderArea.drawArray(Database.getAscii("text/Loading"), 50 - Math.floor((Database.getAsciiWidth("text/Loading") / 2)), yPosition + 40);
        yPosition += this.drawLocalLoad(0, yPosition + 47);
        yPosition += this.drawFileLoad(0, yPosition + 59);
        // Add the link which will call the selectRightSlot method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightSlot.bind(this)));
    };
    return Save;
})(Place);
///<reference path="EqItem.ts"/>
var Scythe = (function (_super) {
    __extends(Scythe, _super);
    // Constructor
    function Scythe() {
        _super.call(this, "eqItemWeaponScythe", "eqItemWeaponScytheName", "eqItemWeaponScytheDescription", "eqItems/weapons/scythe");
    }
    // Public getters
    Scythe.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A scythe", "a scythe"), player.getClassicCollisionBoxCollection(), 21);
        qew.getCloseCombatDelay().setFixedDelay(0);
        return qew;
    };
    return Scythe;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var SeaSnake = (function (_super) {
    __extends(SeaSnake, _super);
    // Constructor
    function SeaSnake(quest, pos) {
        _super.call(this, quest, pos, new Naming("A sea snake", "a sea snake"), new RenderArea(78, 11), new Pos(0, 0));
        // Set the movement and the animation
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(-Random.between(3, 5), 0)));
        this.setQuestEntityAnimation(new QuestEntityAnimation(0, 0, Random.upTo(11), "places/quests/theSea/seaSnake/1", "places/quests/theSea/seaSnake/2", "places/quests/theSea/seaSnake/3", "places/quests/theSea/seaSnake/4", "places/quests/theSea/seaSnake/5", "places/quests/theSea/seaSnake/6", "places/quests/theSea/seaSnake/7", "places/quests/theSea/seaSnake/8", "places/quests/theSea/seaSnake/9", "places/quests/theSea/seaSnake/10", "places/quests/theSea/seaSnake/11", "places/quests/theSea/seaSnake/12"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set destructible
        this.setDestructible(false);
    }
    // update()
    SeaSnake.prototype.update = function () {
        // Launch a magic ball! (2 chances out of 3 to launch one)
        if (Random.oneChanceOutOf(3) == false)
            this.castWaterBall();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // Private methods
    SeaSnake.prototype.castWaterBall = function () {
        // Create the waterBall
        var waterBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(-2, this.getYCastingOffset())), new Naming("A magical water ball", "a magical water ball"), new Color(ColorType.SEAHORSE_WATER_BALL), new Pos(2, 1), 300, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical water ball", "a magical water ball")));
        // No target
        waterBall.setTargetTypeNoTarget(new Pos(-Random.between(2, 4), Random.fromArray([-1, 0, 1])));
        // Add the entity
        this.getQuest().addEntity(waterBall);
    };
    SeaSnake.prototype.getYCastingOffset = function () {
        switch (this.getQuestEntityAnimation().getCurrentAsciiIndex()) {
            case 0:
                return 4;
                break;
            case 1:
                return 5;
                break;
            case 2:
                return 6;
                break;
            case 3:
                return 7;
                break;
            case 4:
                return 8;
                break;
            case 5:
                return 9;
                break;
            case 6:
                return 10;
                break;
            case 7:
                return 9;
                break;
            case 8:
                return 8;
                break;
            case 9:
                return 7;
                break;
            case 10:
                return 6;
                break;
            case 11:
                return 5;
                break;
        }
    };
    return SeaSnake;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Seahorse = (function (_super) {
    __extends(Seahorse, _super);
    // Constructor
    function Seahorse(quest, pos, intendedXPosition) {
        _super.call(this, quest, pos, new Naming("A magical seahorse", "a magical seahorse"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(1, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set the intended x position
        this.intendedXPosition = intendedXPosition;
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(20);
        this.setHp(20);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/seahorse"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" "));
        // Add a spell caster
        this.addQuestEntitySpellCaster(new QuestEntitySpellCaster(new CallbackCollection(this.castWaterBall.bind(this))));
        this.getLastQuestEntitySpellCaster().getDelay().setFixedDelay(30, Random.upTo(30));
    }
    // Public methods
    Seahorse.prototype.tryToGoToIntendedXPosition = function (baseX) {
        this.goTowards(this.getGlobalPosition(), new Pos(baseX + this.intendedXPosition, this.getGlobalPosition().y), 0, new Pos(1, 0));
    };
    // Private methods
    Seahorse.prototype.castWaterBall = function () {
        // Create the waterBall
        var waterBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(-2, 0)), new Naming("A magical water ball", "a magical water ball"), new Color(ColorType.SEAHORSE_WATER_BALL), new Pos(2, 1), 70, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical water ball", "a magical water ball")));
        // No target
        waterBall.setTargetTypeNoTarget(new Pos(-2, 0));
        // Add the entity
        this.getQuest().addEntity(waterBall);
    };
    // willDie()
    Seahorse.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(150), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Seahorse;
})(QuestEntity);
///<reference path="House.ts"/>
// Lollipops
Saving.registerBool("secondHouseLollipop1Bought", false);
Saving.registerBool("secondHouseLollipop2Bought", false);
Saving.registerBool("secondHouseLollipop3Bought", false);
// The leather boots
Saving.registerBool("secondHouseLeatherBootsBought", false);
// The chocolate bar
Saving.registerBool("secondHouseChocolateBarBought", false);
// The merchant's hat
Saving.registerBool("secondHouseMerchantHatBought", false);
// The time ring
Saving.registerBool("secondHouseTimeRingBought", false);
var SecondHouse = (function (_super) {
    __extends(SecondHouse, _super);
    // Constructor
    function SecondHouse(game) {
        // House constructor
        _super.call(this, game);
        this.renderArea = new RenderArea();
        // Items sold by the candy merchant
        this.items = [];
        // Selected item (an item is selected when the players clicks on it)
        this.selectedItemIndex = null;
        // Should we draw the intro speech ? (will be set to false as soon as we select an item)
        this.shouldDrawIntroSpeech = true;
        // We add all the items
        // Lollipops
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop1Bought", "places/village/candyMerchantItems/lollipopRight", new Pos(14, 22), "secondHouseLollipop1Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop1Button"));
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop2Bought", "places/village/candyMerchantItems/lollipopLeft", new Pos(12, 23), "secondHouseLollipop2Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop2Button"));
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop3Bought", "places/village/candyMerchantItems/lollipopRight", new Pos(18, 24), "secondHouseLollipop3Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop3Button"));
        // The leather boots
        this.addItem(new CandyMerchantItem_LeatherBoots(this.getGame(), "eqItemBootsLeatherBoots", "places/village/candyMerchantItems/boots", new Pos(5, 25), "secondHouseLeatherBootsSpeech", 300, "secondHouseLeatherBootsButtonText", "secondHouseLeatherBootsButton"));
        // The chocolate bar
        this.addItem(new CandyMerchantItem_ChocolateBar(this.getGame(), "secondHouseChocolateBarBought", "places/village/candyMerchantItems/chocolateBar", new Pos(62, 27), "secondHouseChocolateBarSpeech", 800, "secondHouseChocolateBarButtonText", "secondHouseChocolateBarButton"));
        // The merchant hat
        this.addItem(new CandyMerchantItem_MerchantHat(this.getGame(), "secondHouseMerchantHatBought", "places/village/candyMerchantItems/hat", new Pos(53, 13), "secondHouseMerchantHatSpeech", 1000000, "secondHouseMerchantHatButtonText", "secondHouseMerchantHatButton"));
        // The time ring
        this.addItem(new CandyMerchantItem_TimeRing(this.getGame(), "secondHouseTimeRingBought", "places/village/candyMerchantItems/timeRing", new Pos(43, 28), "secondHouseTimeRingSpeech", 500, "secondHouseTimeRingButtonText", "secondHouseTimeRingButton"));
        // Leather gloves
        this.addItem(new CandyMerchantItem_LeatherGloves(this.getGame(), "eqItemGlovesLeatherGloves", "places/village/candyMerchantItems/leatherGloves", new Pos(82, 27), "secondHouseLeatherGlovesSpeech", 300, "secondHouseLeatherGlovesButtonText", "secondHouseLeatherGlovesButton"));
        // We resize the render area and update it
        this.renderArea.resizeFromArray(Database.getAscii("places/village/secondHouse"), 0, 3);
        this.update();
    }
    // Public methods
    SecondHouse.prototype.willBeDisplayed = function () {
        // We need to update each time we're going to be displayed in case some item should not be sold anymore because of some stuff we were doing while this place wasn't displayed
        this.update();
    };
    // getRenderArea()
    SecondHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    SecondHouse.prototype.addItem = function (item) {
        this.items.push(item);
    };
    SecondHouse.prototype.buySelectedItem = function () {
        // If we have enough candies to buy it
        if (this.getGame().getCandies().getCurrent() >= this.items[this.selectedItemIndex].getPrice()) {
            // We pay the price
            this.getGame().getCandies().add(-this.items[this.selectedItemIndex].getPrice());
            // We tell the item that we just bought it
            this.items[this.selectedItemIndex].buy();
            // No more selected item
            this.selectedItemIndex = null;
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SecondHouse.prototype.clickedOnItem = function (index) {
        // Set the currently selected item index
        this.selectedItemIndex = index;
        // We shouldn't draw the intro speech anymore
        this.shouldDrawIntroSpeech = false;
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    SecondHouse.prototype.drawIntroSpeech = function () {
        this.drawSpeech("secondHouseIntroSpeech");
    };
    SecondHouse.prototype.drawItems = function () {
        for (var i = 0; i < this.items.length; i++) {
            // If we can show this item
            if (this.items[i].canBeShown()) {
                // We draw the item at the correct position
                this.renderArea.drawArray(Database.getAscii(this.items[i].getAsciiName()), this.items[i].getAsciiPosition().x, this.items[i].getAsciiPosition().y, new RenderTransparency(" ", "%"));
                // If it can be clicked
                if (this.items[i].canBeClicked()) {
                    // We add the button and the link to be able to click it (we add it on each line of the ascii art)
                    for (var j = 0; j < Database.getAsciiHeight(this.items[i].getAsciiName()); j++) {
                        // Button
                        this.renderArea.addAsciiButton(this.items[i].getAsciiPosition().x, this.items[i].getAsciiPosition().x + Database.getAsciiWidth(this.items[i].getAsciiName()), this.items[i].getAsciiPosition().y + j, this.items[i].getButtonName() + "RealItem");
                        // Link
                        this.renderArea.addLinkCall("." + this.items[i].getButtonName() + "RealItem", new CallbackCollection(this.clickedOnItem.bind(this, i)));
                    }
                }
            }
        }
    };
    SecondHouse.prototype.drawSelectedItemStuff = function () {
        var yPos; // Will contain the y position of the bottom of the speech
        // Draw the speech
        yPos = this.drawSpeech(this.items[this.selectedItemIndex].getMerchantSpeech());
        // If we can buy this item
        if (this.items[this.selectedItemIndex].canBeBought()) {
            // Add the buying button
            this.renderArea.addAsciiRealButton(Database.getText(this.items[this.selectedItemIndex].getButtonText()), 45 - Math.floor(Database.getText(this.items[this.selectedItemIndex].getButtonText()).length / 2), yPos + 2, this.items[this.selectedItemIndex].getButtonName() + "BuyingButton", Database.getTranslatedText(this.items[this.selectedItemIndex].getButtonText()), true);
            // Add the link
            this.renderArea.addLinkCall("." + this.items[this.selectedItemIndex].getButtonName() + "BuyingButton", new CallbackCollection(this.buySelectedItem.bind(this)));
        }
    };
    SecondHouse.prototype.drawSpeech = function (speechName) {
        return this.renderArea.drawSpeech(Database.getText(speechName), 3, 30, 60, "secondHouseMerchantSpeech", Database.getTranslatedText(speechName));
    };
    SecondHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "secondHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/secondHouse"), 0, 3);
        // Draw items
        this.drawItems();
        // Should we draw the intro speech ?
        if (this.shouldDrawIntroSpeech)
            this.drawIntroSpeech();
        // If there's a selected item, draw the stuff related to it (speech and possibly buying button)
        if (this.selectedItemIndex != null) {
            this.drawSelectedItemStuff();
        }
    };
    return SecondHouse;
})(House);
///<reference path="QuestEntity.ts"/>
var ShellPowder = (function (_super) {
    __extends(ShellPowder, _super);
    // Constructor
    function ShellPowder(quest, leftDownCornerPosition) {
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight("places/quests/theSea/shellPowder") + 1));
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Shell powder", "shell powder"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 3))));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(10);
        this.setHp(10);
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/theSea/shellPowder"));
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/shellPowder"));
    }
    // willDie()
    ShellPowder.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedShellPowder", "You found shell powder.", "You gain shell powder."));
    };
    return ShellPowder;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var SmallestFish = (function (_super) {
    __extends(SmallestFish, _super);
    // Constructor
    function SmallestFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A very small fish", "a very small fish"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(10);
        this.setHp(10);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/smallestFish"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fins", "its fins"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(6);
    }
    return SmallestFish;
})(QuestEntity);
var Smoke = (function () {
    // Constructor
    function Smoke(x, y, width, height, minWaitingTime, maxWaitingTime) {
        if (minWaitingTime === void 0) { minWaitingTime = 0; }
        if (maxWaitingTime === void 0) { maxWaitingTime = 0; }
        // Position
        this.x = x;
        this.y = y;
        // Size
        this.width = width;
        this.height = height;
        // Waiting time
        this.minWaitingTime = minWaitingTime;
        this.maxWaitingTime = maxWaitingTime;
        // Init the smoke
        this.init(false);
    }
    // Public methods
    Smoke.prototype.draw = function (renderArea) {
        // If we're not waiting, we draw a smoke
        if (this.weAreWaiting == false) {
            if (this.inverted == false) {
                renderArea.drawString("(", this.x + this.xGap, this.y + this.yGap);
                renderArea.drawString(")", this.x + this.xGap + 1, this.y + this.yGap - 1);
            }
            else {
                renderArea.drawString("(", this.x + this.xGap, this.y + this.yGap - 1);
                renderArea.drawString(")", this.x + this.xGap + 1, this.y + this.yGap);
            }
        }
    };
    Smoke.prototype.move = function () {
        if (this.weAreWaiting == false) {
            // We make the smoke going up
            this.yGap--;
            // If it's too high, we call init()
            if (-this.yGap >= this.height) {
                this.init();
            }
            else {
                this.inverted = !this.inverted;
            }
        }
        else {
            this.currentWaitingTime++;
            if (this.currentWaitingTime > this.chosenWaitingTime)
                this.weAreWaiting = false;
        }
    };
    // Private methods
    Smoke.prototype.init = function (weMustBeWaitingAtFirst) {
        if (weMustBeWaitingAtFirst === void 0) { weMustBeWaitingAtFirst = true; }
        // Inverted
        this.inverted = Random.flipACoin();
        // Step
        this.xGap = Random.upTo(this.width - 1);
        // At first we're not waiting
        if (Random.flipACoin() && weMustBeWaitingAtFirst == false) {
            // Y position
            this.yGap = -Random.upTo(this.height - 1);
            // Waiting stuff
            this.weAreWaiting = false;
        }
        else {
            // Y position
            this.yGap = 0;
            // Waiting stuff
            this.weAreWaiting = true;
            this.chosenWaitingTime = Random.between(this.minWaitingTime, this.maxWaitingTime); // We choose the waiting time
            this.currentWaitingTime = 0; // We begin at 0
        }
    };
    return Smoke;
})();
///<reference path="EqItem.ts"/>
var SorceressHat = (function (_super) {
    __extends(SorceressHat, _super);
    // Constructor
    function SorceressHat() {
        _super.call(this, "eqItemHatSorceressHat", "eqItemHatSorceressHatName", "eqItemHatSorceressHatDescription", "eqItems/hats/sorceressHat");
    }
    // Special ability
    SorceressHat.prototype.getSpecialAbility = function () {
        return "Enhances your spells & potions effects (sorceress hat).";
    };
    return SorceressHat;
})(EqItem);
///<reference path="Place.ts"/>
Saving.registerBool("sorceressHutTookLollipop", false);
Saving.registerBool("sorceressHutBoughtGrimoire", false);
Saving.registerBool("sorceressHutBoughtGrimoire2", false);
Saving.registerBool("sorceressHutBoughtCauldron", false);
Saving.registerBool("sorceressHutBoughtHat", false);
var SorceressHut = (function (_super) {
    __extends(SorceressHut, _super);
    // Constructor
    function SorceressHut(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Set the default speech
        this.currentSpeech = "sorceressHutHello";
        // Resize & update
        this.renderArea.resize(144, 48);
        this.update();
    }
    // getRenderArea()
    SorceressHut.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    SorceressHut.prototype.buyCauldron = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 100000) {
            this.getGame().getLollipops().add(-100000); // We spend the lollipops
            Saving.saveBool("statusBarUnlockedCauldron", true); // We unlock the cauldron
            Saving.saveBool("sorceressHutBoughtCauldron", true); // We now bought the cauldron
            this.getGame().updateStatusBar(true); // We update the status bar
            this.currentSpeech = "sorceressHutBuyCauldronSpeech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.buyGrimoire = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 5000) {
            this.getGame().getLollipops().add(-5000); // We spend the lollipops
            this.getGame().gainItem("gridItemPossessedBeginnersGrimoire"); // We gain the grimoire
            Saving.saveBool("sorceressHutBoughtGrimoire", true); // We now bought the grimoire
            this.currentSpeech = "sorceressHutBuyGrimoireSpeech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.buyGrimoire2 = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 20000) {
            this.getGame().getLollipops().add(-20000); // We spend the lollipops
            this.getGame().gainItem("gridItemPossessedAdvancedGrimoire"); // We gain the grimoire
            Saving.saveBool("sorceressHutBoughtGrimoire2", true); // We now bought the grimoire
            this.currentSpeech = "sorceressHutBuyGrimoire2Speech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.buyHat = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 1000000000) {
            this.getGame().getLollipops().add(-1000000000); // We spend the lollipops
            Saving.saveBool("sorceressHutBoughtHat", true); // We now bought the hat
            this.getGame().gainItem("eqItemHatSorceressHat"); // We have the hat!
            this.currentSpeech = "sorceressHutBuyHatSpeech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.clickedCauldron = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedCauldron";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyCauldronButton", new CallbackCollection(this.buyCauldron.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.clickedGrimoire = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedGrimoire";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyGrimoireButton", new CallbackCollection(this.buyGrimoire.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.clickedGrimoire2 = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedGrimoire2";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyGrimoire2Button", new CallbackCollection(this.buyGrimoire2.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.clickedHat = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedHat";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyHatButton", new CallbackCollection(this.buyHat.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.drawBackground = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/background"), x, y);
    };
    SorceressHut.prototype.drawBroom = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/broom"), x, y);
    };
    SorceressHut.prototype.drawBuyingButton = function (textName, callbackCollection) {
        this.renderArea.addAsciiRealButton(Database.getText(textName), 73, 22, "sorceressHutBuyingButton", Database.getTranslatedText(textName), true, -1, null, false);
        this.renderArea.addLinkCall(".sorceressHutBuyingButton", callbackCollection);
    };
    SorceressHut.prototype.drawCauldron = function (x, y) {
        // If we didn't buy the cauldron yet
        if (Saving.loadBool("sorceressHutBoughtCauldron") == false) {
            // Draw it
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/cauldron"), x, y, new RenderTransparency(" ", "%"));
            // Add the button
            this.renderArea.addMultipleAsciiButtons("sorceressHutBuyCauldronButton", x + 11, x + 30, y + 1, x + 10, x + 31, y + 2, x + 8, x + 33, y + 3, x + 7, x + 34, y + 4, x + 6, x + 35, y + 5, x + 5, x + 36, y + 6, x + 4, x + 37, y + 7, x + 4, x + 37, y + 8, x + 4, x + 37, y + 9, x + 5, x + 36, y + 10, x + 6, x + 35, y + 11, x + 8, x + 33, y + 12);
            // Add the link
            this.renderArea.addLinkCall(".sorceressHutBuyCauldronButton", new CallbackCollection(this.clickedCauldron.bind(this)));
        }
    };
    SorceressHut.prototype.drawCurrentSpeech = function (x, y) {
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), y, x, x + 27, "sorceressHutSpeech", Database.getTranslatedText(this.currentSpeech));
    };
    SorceressHut.prototype.drawHat = function (x, y) {
        // If we didn't buy the hat yet
        if (Saving.loadBool("sorceressHutBoughtHat") == false) {
            // Draw it
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/hat"), x, y, new RenderTransparency(" ", "%"));
            // Add the button
            this.renderArea.addMultipleAsciiButtons("sorceressHutBuyHatButton", x + 20, x + 23, y, x + 16, x + 25, y + 1, x + 14, x + 26, y + 2, x + 11, x + 19, y + 3, x + 10, x + 19, y + 4, x + 9, x + 20, y + 5, x + 1, x + 27, y + 6);
            // Add the link
            this.renderArea.addLinkCall(".sorceressHutBuyHatButton", new CallbackCollection(this.clickedHat.bind(this)));
        }
    };
    SorceressHut.prototype.drawShelves = function (x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/shelves"), x, y);
        // If we didn't take the lollipop yet
        if (Saving.loadBool("sorceressHutTookLollipop") == false) {
            // Draw the lollipop
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/lollipop"), x + 32, y + 16);
            // Add the button and the link
            this.renderArea.addAsciiButton(x + 32, x + 37, y + 16, "sorceressHutTakeLollipopButton");
            this.renderArea.addLinkCall(".sorceressHutTakeLollipopButton", new CallbackCollection(this.takeLollipop.bind(this)));
        }
        // If we didn't buy the grimoire yet
        if (Saving.loadBool("sorceressHutBoughtGrimoire") == false) {
            // Draw the grimoire
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/grimoire"), x + 18, y + 8);
            // Add the button and the link
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 9, "sorceressHutBuyGrimoireButton");
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 10, "sorceressHutBuyGrimoireButton");
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 11, "sorceressHutBuyGrimoireButton");
            this.renderArea.addLinkCall(".sorceressHutBuyGrimoireButton", new CallbackCollection(this.clickedGrimoire.bind(this)));
        }
        // If we didn't buy the second grimoire yet
        if (Saving.loadBool("sorceressHutBoughtGrimoire2") == false) {
            // Draw the grimoire
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/grimoire2"), x + 30, y + 1);
            // Add the button and the link
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 2, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 3, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 4, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 5, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 6, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addLinkCall(".sorceressHutBuyGrimoire2Button", new CallbackCollection(this.clickedGrimoire2.bind(this)));
        }
    };
    SorceressHut.prototype.takeLollipop = function () {
        // We took the lollipop
        Saving.saveBool("sorceressHutTookLollipop", true);
        // Add 1 lollipop
        this.getGame().getLollipops().add(1);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theHoleBackToTheMapButton");
        // Draw everything
        this.drawBackground(0, 3);
        this.drawHat(14, 3);
        this.drawShelves(73, 3);
        this.drawCauldron(80, 27);
        this.drawBroom(49, 18);
        // Draw the speech
        this.drawCurrentSpeech(43, 4);
    };
    return SorceressHut;
})(Place);
///<reference path="QuestEntity.ts"/>
var Spikes = (function (_super) {
    __extends(Spikes, _super);
    // Constructor
    function Spikes(quest, globalPosition, width, damage, inverted) {
        if (damage === void 0) { damage = 200; }
        if (inverted === void 0) { inverted = false; }
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Some spikes", "some spikes"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(width, 1))));
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its spikes", "its spikes"), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, (inverted ? 1 : -1)), new Pos(width, 1))), damage));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
        // Draw the ascii art
        this.getRenderArea().resize(width, 1);
        for (var i = 0; i < Math.floor(width / 2); i++) {
            if (inverted == false)
                this.getRenderArea().drawString("/\\", i * 2, 0);
            else
                this.getRenderArea().drawString("\\/", i * 2, 0);
        }
    }
    return Spikes;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Sponge = (function (_super) {
    __extends(Sponge, _super);
    // Constructor
    function Sponge(quest, leftDownCornerPosition) {
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight("places/quests/theSea/sponge") + 1));
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A sponge", "a sponge"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 3))));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(40);
        this.setHp(40);
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/theSea/sponge"));
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/sponge"));
    }
    // willDie()
    Sponge.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedSponge", "You found a sponge.", "You gain a sponge."));
    };
    return Sponge;
})(QuestEntity);
// Saving stuff related to the status bar itself
Saving.registerBool("statusBarUnlocked", false);
// Saving stuff related to unlocked tabs
Saving.registerBool("statusBarUnlockedCfg", false);
Saving.registerBool("statusBarUnlockedSave", false);
Saving.registerBool("statusBarUnlockedMap", false);
Saving.registerBool("statusBarUnlockedInventory", false);
Saving.registerBool("statusBarUnlockedLollipopFarm", false);
Saving.registerBool("statusBarUnlockedCauldron", false);
Saving.registerBool("statusBarUnlockedInsideYourBox", false);
Saving.registerBool("statusBarUnlockedTheComputer", false);
Saving.registerBool("statusBarUnlockedTheArena", false);
// Saving stuff for the unlocked health bar
Saving.registerBool("statusBarUnlockedHealthBar", false);
// The corner step
Saving.registerNumber("statusBarCornerStep", 0);
var StatusBar = (function () {
    // Constructor
    function StatusBar(game, selectedTabIndex) {
        // Render areas
        this.playerHealthBar = null;
        this.renderArea = new RenderArea(100, 6, " ");
        // Tabs
        this.tabs = [];
        // Se the game
        this.game = game;
        // Set the default selected tab index
        this.selectedTabIndex = selectedTabIndex;
        // Add everything for the first time
        this.deleteAndReAddEverything();
    }
    // Public methods
    StatusBar.prototype.deleteAndReAddEverything = function () {
        // Delete tabs
        this.tabs = [];
        // Reset special hotkeys
        this.game.resetSpecialHotkeys();
        // Delete the player health bar
        this.playerHealthBar = null;
        // Add the player health bar
        if (Saving.loadBool("statusBarUnlockedHealthBar")) {
            this.playerHealthBar = new Bar(BarType.HEALTH);
            this.playerHealthBar.resize(72, 1);
        }
        // Add tabs
        if (Saving.loadBool("statusBarUnlocked"))
            this.addTab(StatusBarTabType.CANDY_BOX, 0, " THE", "CANDY", " BOX", new CallbackCollection(this.game.goToCandyBox.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedInventory"))
            this.addTab(StatusBarTabType.INVENTORY, 8, "INV", " ENT", "ORY", new CallbackCollection(this.game.goToInventory.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedMap"))
            this.addTab(StatusBarTabType.MAP, 15, "", "MAP", "", new CallbackCollection(this.game.goToMap.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedLollipopFarm"))
            this.addTab(StatusBarTabType.FARM, 21, "LOLL", "IPOP", "FARM", new CallbackCollection(this.game.goToLollipopFarm.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedCauldron"))
            this.addTab(StatusBarTabType.CAULDRON, 28, "", "CLDR", "", new CallbackCollection(this.game.goToCauldron.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedInsideYourBox"))
            this.addTab(StatusBarTabType.INSIDE_YOUR_BOX, 35, "INSIDE", " YOUR", " BOX!", new CallbackCollection(this.game.goToInsideYourBox.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedTheComputer"))
            this.addTab(StatusBarTabType.THE_COMPUTER, 44, " THE", " COM", "PUTER", new CallbackCollection(this.game.goToTheComputer.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedTheArena"))
            this.addTab(StatusBarTabType.THE_ARENA, 52, " THE", "ARENA", " /!\\", new CallbackCollection(this.game.goToTheArena.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedSave"))
            this.addTab(StatusBarTabType.SAVE, 60, "", "SAVE", "", new CallbackCollection(this.game.goToSave.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedCfg"))
            this.addTab(StatusBarTabType.CFG, 67, "C", "F", "G", new CallbackCollection(this.game.goToCfg.bind(this.game)));
        // Add special hotkeys to go to the next or previous tab
        if (Saving.loadBool("statusBarUnlocked")) {
            this.game.addSpecialHotkey(new Hotkey("n", new CallbackCollection(this.nextTab.bind(this))));
        }
    };
    StatusBar.prototype.selectTab = function (index) {
        this.selectedTabIndex = index;
        this.game.updateStatusBar();
    };
    StatusBar.prototype.selectTabByType = function (type) {
        for (var i = 0; i < this.tabs.length; i++) {
            // If this is the tab we're searching for
            if (this.tabs[i].getType() == type) {
                // We select it and we break
                this.selectedTabIndex = i;
                this.game.updateStatusBar();
            }
        }
    };
    StatusBar.prototype.updateAll = function () {
        // We erase
        this.renderArea.resetAllButSize();
        // We draw the borders
        if (Saving.loadBool("statusBarUnlocked")) {
            this.renderArea.drawString("+", 0, 0);
            this.renderArea.drawString("+", this.renderArea.getWidth() - 1, 0);
            this.renderArea.drawString("+", 0, 5);
            this.renderArea.drawString("+", this.renderArea.getWidth() - 1, 5);
            this.renderArea.drawVerticalLine("|", 0, 1, 4);
            this.renderArea.drawVerticalLine("|", this.renderArea.getWidth() - 1, 1, 4);
            this.renderArea.drawHorizontalLine("-", 1, this.renderArea.getWidth() - 1, 0);
            this.renderArea.drawHorizontalLine("-", 1, this.renderArea.getWidth() - 1, 5);
        }
        // We draw the candies we have
        this.renderArea.drawString(this.game.getCandies().getCurrentAsString(26), 2, 1);
        // We draw the lollipops we have, if we had at least one at some point
        if (this.game.getLollipops().getMax() > 0)
            this.renderArea.drawString(this.game.getLollipops().getCurrentAsString(26), 2, 2);
        // We draw the chocolate bars we have, if we had at least one at some point
        if (this.game.getChocolateBars().getMax() > 0)
            this.renderArea.drawString(this.game.getChocolateBars().getCurrentAsString(26), 2, 3);
        // We draw the pains au chocolat we have, if we had at least one at some point
        if (this.game.getPainsAuChocolat().getMax() > 0)
            this.renderArea.drawString(this.game.getPainsAuChocolat().getCurrentAsString(26), 2, 4);
        // We draw tabs
        this.drawTabs();
        // We draw the health bar
        this.updateHealthBar();
        // We draw the stuff about the status bar's corners
        this.drawStatusBarCornersStuff();
    };
    StatusBar.prototype.updateHealthBar = function () {
        // We update the health bar if it isn't null
        if (this.playerHealthBar != null) {
            // We update the bar from the player's health
            this.playerHealthBar.update(this.game.getPlayer().getHp() / this.game.getPlayer().getMaxHp(), "Your health : " + this.game.getPlayer().getHp() + "/" + this.game.getPlayer().getMaxHp());
            // We draw the bar
            this.renderArea.drawArea(this.playerHealthBar, 28, 4);
        }
    };
    // Public getters
    StatusBar.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    StatusBar.prototype.addTab = function (type, xPos, text1, text2, text3, callbackCollection) {
        // We add the tab
        this.tabs.push(new StatusBarTab(this, type, xPos, text1, text2, text3, this.tabs.length, callbackCollection));
    };
    StatusBar.prototype.clickedOnCorner = function () {
        this.setNextCornerStep();
        this.game.updateStatusBar();
    };
    StatusBar.prototype.drawAllCorners = function (character) {
        this.drawUpLeftCorner(character);
        this.drawUpRightCorner(character);
        this.drawDownLeftCorner(character);
        this.drawDownRightCorner(character);
    };
    StatusBar.prototype.drawDownLeftCorner = function (character) {
        this.renderArea.drawString(character, 0, 5);
    };
    StatusBar.prototype.drawDownRightCorner = function (character) {
        this.renderArea.drawString(character, 99, 5);
    };
    StatusBar.prototype.drawStatusBarCornersStuff = function () {
        // We add buttons
        this.renderArea.addAsciiNinjaButton(0, 1, 0, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(99, 100, 0, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(0, 1, 5, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(99, 100, 5, "statusBarCornerButton");
        // We add the link
        this.renderArea.addLinkCall(".statusBarCornerButton", new CallbackCollection(this.clickedOnCorner.bind(this)));
        // We possibly draw a different corner, depending on the corner step
        switch (Saving.loadNumber("statusBarCornerStep")) {
            case 0: break; // Default corner, we do nothing
            case 1:
                this.drawAllCorners("*");
                break;
            case 2:
                this.drawAllCorners("#");
                break;
            case 3:
                this.drawAllCorners("-");
                break;
            case 4:
                this.drawUpLeftCorner("A");
                this.drawUpRightCorner("B");
                this.drawDownRightCorner("C");
                this.drawDownLeftCorner("D");
                break;
            case 5:
                this.drawUpLeftCorner("0");
                this.drawUpRightCorner("1");
                this.drawDownRightCorner("2");
                this.drawDownLeftCorner("3");
                break;
            case 6:
                this.drawAllCorners("@");
                break;
        }
    };
    StatusBar.prototype.drawTabs = function () {
        if (Saving.loadBool("statusBarUnlocked")) {
            this.renderArea.drawVerticalLine("|", 28, 1, 4);
            for (var i = 0; i < this.tabs.length; i++) {
                this.tabs[i].render(this.renderArea, 29, 1, (this.selectedTabIndex == i ? true : false));
            }
        }
    };
    StatusBar.prototype.drawUpLeftCorner = function (character) {
        this.renderArea.drawString(character, 0, 0);
    };
    StatusBar.prototype.drawUpRightCorner = function (character) {
        this.renderArea.drawString(character, 99, 0);
    };
    StatusBar.prototype.previousTab = function () {
        if (this.selectedTabIndex - 1 >= 0)
            this.tabs[this.selectedTabIndex - 1].clicked();
    };
    StatusBar.prototype.nextTab = function () {
        // If we're allowed to.. (this will be disable when using the computer)
        if (this.game.getIsStatusBarAllowedToUseTheNKey()) {
            if (this.selectedTabIndex + 1 < this.tabs.length)
                this.tabs[this.selectedTabIndex + 1].clicked();
            else
                this.tabs[0].clicked();
        }
    };
    StatusBar.prototype.setNextCornerStep = function () {
        var nextCornerStep = Saving.loadNumber("statusBarCornerStep");
        nextCornerStep += 1;
        if (nextCornerStep > 6)
            nextCornerStep = 0;
        Saving.saveNumber("statusBarCornerStep", nextCornerStep);
    };
    return StatusBar;
})();
var StatusBarTab = (function () {
    // Constructor
    function StatusBarTab(statusBar, type, xPos, text1, text2, text3, tabIndexWhenSelected, callbackCollectionWhenSelected) {
        if (tabIndexWhenSelected === void 0) { tabIndexWhenSelected = -1; }
        if (callbackCollectionWhenSelected === void 0) { callbackCollectionWhenSelected = new CallbackCollection(); }
        // Set the status bar
        this.statusBar = statusBar;
        // Set teh type
        this.type = type;
        // Set xPos
        this.xPos = xPos;
        // Add the three strings to our 3 strings array
        this.setText(text1, text2, text3);
        // Set the rest
        this.tabIndexWhenSelected = tabIndexWhenSelected;
        this.callbackCollectionWhenSelected = callbackCollectionWhenSelected;
    }
    // Public methods
    StatusBarTab.prototype.clicked = function () {
        this.callbackCollectionWhenSelected.fire();
        this.statusBar.selectTab(this.tabIndexWhenSelected);
    };
    StatusBarTab.prototype.render = function (renderArea, x, y, selected) {
        // We draw the borders
        renderArea.drawVerticalLine("|", x + this.xPos - 1, y, 3);
        renderArea.drawVerticalLine("|", x + this.xPos + this.width, y, 3);
        // We draw the text
        for (var i = 0; i < 3; i++) {
            // We draw the string
            renderArea.drawString(this.text[i], x + this.xPos + 1, y + i);
            // If the tab is selected, we add a special color
            if (selected)
                renderArea.addBackgroundColor(x + this.xPos, x + this.xPos + this.width, y + i, new Color(ColorType.STATUS_BAR_SELECTED_TAB, true));
        }
        // If the tab isn't selected, we add a button to click it !
        if (selected == false) {
            renderArea.addMultipleAsciiButtons("statusBarTabButton" + this.tabIndexWhenSelected, x + this.xPos, x + this.xPos + this.width, y, x + this.xPos, x + this.xPos + this.width, y + 1, x + this.xPos, x + this.xPos + this.width, y + 2);
            renderArea.addLinkCall(".statusBarTabButton" + this.tabIndexWhenSelected, new CallbackCollection(this.clicked.bind(this)));
        }
    };
    // Public getters
    StatusBarTab.prototype.getType = function () {
        return this.type;
    };
    StatusBarTab.prototype.getWidth = function () {
        return this.width;
    };
    // Private methods
    StatusBarTab.prototype.calculateWidth = function () {
        this.width = 0;
        for (var i = 0; i < 3; i++) {
            if (this.text[i].length > this.width)
                this.width = this.text[i].length;
        }
        // We add two ! (because a tab has two spaces on left and right
        this.width += 2;
    };
    StatusBarTab.prototype.setText = function (text1, text2, text3) {
        // We empty the text array
        this.text = [];
        // We add the three strings given in parameters
        this.text.push(text1);
        this.text.push(text2);
        this.text.push(text3);
        // We re-calculate the tab's width
        this.calculateWidth();
    };
    return StatusBarTab;
})();
var StatusBarTabType;
(function (StatusBarTabType) {
    StatusBarTabType[StatusBarTabType["CANDY_BOX"] = 0] = "CANDY_BOX";
    StatusBarTabType[StatusBarTabType["INVENTORY"] = 1] = "INVENTORY";
    StatusBarTabType[StatusBarTabType["MAP"] = 2] = "MAP";
    StatusBarTabType[StatusBarTabType["FARM"] = 3] = "FARM";
    StatusBarTabType[StatusBarTabType["CAULDRON"] = 4] = "CAULDRON";
    StatusBarTabType[StatusBarTabType["INSIDE_YOUR_BOX"] = 5] = "INSIDE_YOUR_BOX";
    StatusBarTabType[StatusBarTabType["THE_COMPUTER"] = 6] = "THE_COMPUTER";
    StatusBarTabType[StatusBarTabType["THE_ARENA"] = 7] = "THE_ARENA";
    StatusBarTabType[StatusBarTabType["SAVE"] = 8] = "SAVE";
    StatusBarTabType[StatusBarTabType["CFG"] = 9] = "CFG";
})(StatusBarTabType || (StatusBarTabType = {}));
///<reference path="EqItem.ts"/>
var SummoningTribalSpear = (function (_super) {
    __extends(SummoningTribalSpear, _super);
    // Constructor
    function SummoningTribalSpear() {
        _super.call(this, "eqItemWeaponSummoningTribalSpear", "eqItemWeaponSummoningTribalSpearName", "eqItemWeaponSummoningTribalSpearDescription", "eqItems/weapons/summoningTribalSpear");
        // Time since we last summoned a warrior
        this.timeSinceSummon = 0;
    }
    // Public getters
    SummoningTribalSpear.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A summoning tribal spear", "a summoning tribal spear"), player.getClassicCollisionBoxCollection(), 10);
        qew.getCloseCombatDelay().setFixedDelay(2);
        return qew;
    };
    // Special ability
    SummoningTribalSpear.prototype.getSpecialAbility = function () {
        return "Frequently summons tribe warriors fighting on your side (summoning tribal spear).";
    };
    // update()
    SummoningTribalSpear.prototype.update = function (player, quest) {
        this.timeSinceSummon += 1;
        if (this.timeSinceSummon > 35) {
            this.summon(player, quest);
        }
    };
    // Private methods
    SummoningTribalSpear.prototype.summon = function (player, quest) {
        // Create the warrior
        var warrior = new PlayerSummonedTribeWarrior(quest, player.getSpellCastingPosition().plus(new Pos(1, -3)));
        // Add the health bar
        warrior.setHealthBar(new QuestEntityHealthBar(warrior, new Pos(4, 1)));
        // Add it to the quest
        quest.addEntity(warrior);
        // Reset the summon time
        this.timeSinceSummon = 0;
    };
    return SummoningTribalSpear;
})(EqItem);
///<reference path="ThirdHouseGame.ts"/>
Saving.registerBool("SuperRPGReward1", false);
Saving.registerBool("SuperRPGReward2", false);
Saving.registerBool("SuperRPGReward3", false);
Saving.registerBool("SuperRPGReward4", false);
Saving.registerBool("SuperRPGUnlockedHardmode", false);
var SuperRPG = (function (_super) {
    __extends(SuperRPG, _super);
    function SuperRPG() {
        _super.apply(this, arguments);
        // The global step of the game (splash screen, the menu, or the game itself
        this.step = SuperRPGStep.SPLASH_SCREEN;
        // The timer used for the splash screen
        this.splashScreenTimer = 39;
        // The current menu
        this.menu = null;
        // Should we exit the game?
        this.shouldExitGame = false;
    }
    // Public methods
    SuperRPG.prototype.exitGame = function () {
        this.shouldExitGame = true;
    };
    SuperRPG.prototype.nextFloorStep = function () {
        switch (this.floorStep) {
            case SuperRPGFloorStep.SHOP:
                this.floorStep = SuperRPGFloorStep.MONSTER1;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER1:
                this.floorStep = SuperRPGFloorStep.MONSTER2;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER2:
                this.floorStep = SuperRPGFloorStep.MONSTER3;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER3:
                this.floorStep = SuperRPGFloorStep.SHOP;
                this.floor += 1;
                this.goToShop();
                break;
        }
    };
    SuperRPG.prototype.startGame = function (hardmode) {
        // Set the hardmode (from parameter)
        this.hardmode = hardmode;
        // Set various stuff
        this.floor = 0;
        this.floorStep = SuperRPGFloorStep.SHOP;
        this.coins = 15;
        this.hp = 10;
        this.maxHp = 10;
        this.weapon = "Your fists";
        this.damage = 1;
        this.defenseItem = "Nothing";
        this.defense = 0;
        // Load the shop
        this.goToShop();
    };
    SuperRPG.prototype.run = function () {
        // To store the return value
        var returnValue = false;
        // If we should exit the game, we do so now
        if (this.shouldExitGame)
            return true;
        // Reset the area
        this.getRenderArea().resetAllButSize();
        // Do something different depending on the step
        switch (this.step) {
            case SuperRPGStep.SPLASH_SCREEN:
                this.drawSplashScreen();
                returnValue = this.runSplashScreen();
                break;
            case SuperRPGStep.GAME:
                this.drawGame();
                returnValue = this.runGame();
                break;
            case SuperRPGStep.LOSE:
                this.drawLose();
                returnValue = false;
                break;
        }
        // We return
        return returnValue;
    };
    // Public getters
    SuperRPG.prototype.getCoins = function () {
        return this.coins;
    };
    SuperRPG.prototype.getDamage = function () {
        return this.damage;
    };
    SuperRPG.prototype.getDefense = function () {
        return this.defense;
    };
    SuperRPG.prototype.getDefenseItem = function () {
        return this.defenseItem;
    };
    SuperRPG.prototype.getFloor = function () {
        return this.floor;
    };
    SuperRPG.prototype.getFloorStep = function () {
        return this.floorStep;
    };
    SuperRPG.prototype.getHardmode = function () {
        return this.hardmode;
    };
    SuperRPG.prototype.getHp = function () {
        return this.hp;
    };
    SuperRPG.prototype.getMaxHp = function () {
        return this.maxHp;
    };
    SuperRPG.prototype.getWeapon = function () {
        return this.weapon;
    };
    // Public setters
    SuperRPG.prototype.setCoins = function (coins) {
        this.coins = coins;
    };
    SuperRPG.prototype.setDamage = function (damage) {
        this.damage = damage;
    };
    SuperRPG.prototype.setDefense = function (defense) {
        this.defense = defense;
    };
    SuperRPG.prototype.setDefenseItem = function (defenseItem) {
        this.defenseItem = defenseItem;
    };
    SuperRPG.prototype.setHp = function (hp) {
        this.hp = hp;
        // If we have more hp than the maximum, we correct that
        if (this.hp > this.maxHp)
            this.hp = this.maxHp;
        // If we have 0 or less hp, we lose!!
        if (this.hp <= 0)
            this.goToLose();
    };
    SuperRPG.prototype.setMaxHp = function (maxHp) {
        this.maxHp = maxHp;
    };
    SuperRPG.prototype.setWeapon = function (weapon) {
        this.weapon = weapon;
    };
    // Private methods
    SuperRPG.prototype.drawGame = function () {
        this.menu.draw(this.getRenderArea());
    };
    SuperRPG.prototype.drawLose = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/SuperRPG/youLose"), 8, 1);
        if (this.reward == 0)
            this.getRenderArea().drawString("At floor " + this.floor + ". And got no candies.", 8, 7);
        else
            this.getRenderArea().drawString("At floor " + this.floor + ". And got " + this.reward + " candies.", 8, 7);
    };
    SuperRPG.prototype.drawSplashScreen = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/SuperRPG/splashScreen"), -67 + this.splashScreenTimer * 3, 2);
    };
    SuperRPG.prototype.getCandiesWeWillGain = function () {
        // The reward
        var reward = 0;
        // Test the first reward
        if (Saving.loadBool("SuperRPGReward1") == false && this.floor > 5) {
            reward += 100;
            Saving.saveBool("SuperRPGReward1", true);
        }
        // Test the second reward
        if (Saving.loadBool("SuperRPGReward2") == false && this.floor > 10) {
            reward += 1000;
            Saving.saveBool("SuperRPGReward2", true);
        }
        // Test the third reward
        if (Saving.loadBool("SuperRPGReward3") == false && this.floor > 15) {
            reward += 10000;
            Saving.saveBool("SuperRPGReward3", true);
        }
        // Test the fourth reward
        if (Saving.loadBool("SuperRPGReward4") == false && this.floor > 20) {
            reward += 30000;
            Saving.saveBool("SuperRPGReward4", true);
            Saving.saveBool("SuperRPGUnlockedHardmode", true);
        }
        // We return the reward
        return reward;
    };
    SuperRPG.prototype.goToLose = function () {
        // No more menu
        this.menu = null;
        // Change the step
        this.step = SuperRPGStep.LOSE;
        // Get the candies
        this.reward = this.getCandiesWeWillGain();
        this.getThirdHouse().getGame().getCandies().add(this.reward);
    };
    SuperRPG.prototype.goToMainMenu = function () {
        // Change the step
        this.step = SuperRPGStep.GAME;
        // Set the main menu
        this.menu = new SuperRPGMenu_Main(this);
    };
    SuperRPG.prototype.goToMonster = function () {
        // Create the new menu
        var menu = new SuperRPGMenu_Monster(this);
        // Add the entry used to quit the shop
        menu.addUsualEntries();
        // Set the monster / add entries, depending on the floor
        switch (this.floor) {
            case 0:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(20);
                else
                    menu.setBlob();
                break;
            case 1:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(30);
                else if (Random.flipACoin())
                    menu.setBlob();
                else
                    menu.setFerociousBlob();
                break;
            case 2:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(40);
                else if (Random.flipACoin()) {
                    if (Random.oneChanceOutOf(5))
                        menu.setBlob();
                    else
                        menu.setFerociousBlob();
                }
                else
                    menu.setGoblin();
                break;
            case 3:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(50);
                else if (this.floorStep == SuperRPGFloorStep.MONSTER3)
                    menu.setGoblin();
                else
                    menu.setFerociousGoblin();
                break;
            case 4:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(60);
                else if (Random.oneChanceOutOf(3))
                    menu.setFerociousGoblin();
                else
                    menu.setSkeletonOrBillGatesSkeleton();
                break;
            case 5:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(70);
                else if (Random.oneChanceOutOf(3))
                    menu.setSkeletonOrBillGatesSkeleton();
                else
                    menu.setFerociousSkeleton();
                break;
            case 6:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(80);
                else
                    menu.setFerociousSkeleton();
                break;
            case 7:
                // Big spider
                if (this.floorStep == SuperRPGFloorStep.MONSTER3)
                    menu.setSpider();
                else
                    menu.setSpiders();
                break;
            case 8:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(100);
                else
                    menu.setBabyVampire();
                break;
            case 9:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(110);
                else {
                    if (this.floorStep == SuperRPGFloorStep.MONSTER2)
                        menu.setSpiders();
                    else
                        menu.setSpider();
                }
                break;
            case 10:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(120);
                else
                    menu.setThing();
                break;
            case 11:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(130);
                else
                    menu.setSpider();
                break;
            case 12:
                if (Random.flipACoin())
                    menu.setChest(140);
                else
                    menu.setBomb();
                break;
            case 13:
                switch (this.floorStep) {
                    case SuperRPGFloorStep.MONSTER1:
                        menu.setCorpse1();
                        break;
                    case SuperRPGFloorStep.MONSTER2:
                        menu.setCorpse2();
                        break;
                    case SuperRPGFloorStep.MONSTER3:
                        menu.setDragon();
                        break;
                }
                break;
            default:
                menu.setAbstract(10 + (this.floor - 14) * 12, 0, Math.ceil(500 * (1 / (this.floor - 13))), 30 + (this.floor - 13) * 3);
                break;
        }
        // Set the menu
        this.menu = menu;
    };
    SuperRPG.prototype.goToShop = function () {
        // Create the new menu
        var menu = new SuperRPGMenu_Shop(this);
        // Add different items depending on the floor
        switch (this.floor) {
            case 0:
                menu.addBuyingWeapon("Wooden sword", 2, 10);
                menu.addBuyingDefenseItem("Wooden shield", 1, 10);
                break;
            case 1:
                menu.addBuyingWeapon("Copper sword", 3, 15);
                menu.addBuyingDefenseItem("Copper shield", 2, 15);
                menu.addBuyingHealthPotion();
                break;
            case 2:
                menu.addBuyingWeapon("Iron sword", 4, 20);
                menu.addBuyingDefenseItem("Iron shield", 3, 20);
                menu.addBuyingHealthPotion();
                break;
            case 3:
                menu.addBuyingWeapon("Silver sword", 5, 30);
                menu.addBuyingDefenseItem("Silver shield", 4, 30);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 4:
                menu.addBuyingWeapon("Gold sword", 6, 40);
                menu.addBuyingDefenseItem("Gold shield", 5, 40);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 5:
                menu.addBuyingWeapon("Diamond sword", 7, 50);
                menu.addBuyingDefenseItem("Diamond shield", 6, 50);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 6:
                menu.addBuyingWeapon("Falchion", 8, 100);
                menu.addBuyingDefenseItem("Diamond shield", 6, 50);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 7:
                menu.addBuyingWeapon("Falchion", 8, 100);
                menu.addBuyingDefenseItem("Shield of El Cid", 8, 100);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 8:
                menu.addBuyingWeapon("Dagger of Time", 10, 180);
                menu.addBuyingDefenseItem("Shield of El Cid", 8, 100);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 9:
                menu.addBuyingWeapon("Dagger of Time", 10, 180);
                menu.addBuyingDefenseItem("Shield of Achilles", 10, 180);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 10:
                menu.addBuyingWeapon("Vorpal sword", 12, 250);
                menu.addBuyingDefenseItem("Shield of Achilles", 10, 180);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 11:
                menu.addBuyingWeapon("Vorpal sword", 12, 250);
                menu.addBuyingDefenseItem("Wynebgwrthucher", 12, 250);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 12:
                menu.addBuyingWeapon("Morgul-blade", 14, 400);
                menu.addBuyingDefenseItem("Wynebgwrthucher", 12, 250);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 13:
                menu.addBuyingWeapon("Morgul-blade", 14, 400);
                menu.addBuyingDefenseItem("Ancile", 14, 400);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 14:
                menu.addBuyingWeapon("Excalibur", 16, 600);
                menu.addBuyingDefenseItem("Ancile", 14, 400);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 15:
                menu.addBuyingWeapon("Excalibur", 16, 600);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 16:
                menu.addBuyingWeapon("Tonbogiri", 18, 1000);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 17:
            case 18:
            case 19:
                menu.addBuyingWeapon("Gungnir", 20, 1500);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            default:
                menu.addBuyingWeapon("Mjolnir", 30, 2000);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
        }
        // Add the entry used to quit the shop
        menu.addQuitTheShop();
        // Set the menu
        this.menu = menu;
    };
    SuperRPG.prototype.pressedDownButton = function () {
        if (this.menu != null)
            this.menu.pressedDownButton();
    };
    SuperRPG.prototype.pressedSpaceButton = function () {
        if (this.step == SuperRPGStep.LOSE) {
            this.shouldExitGame = true;
        }
        if (this.menu != null)
            this.menu.pressedSpaceButton();
    };
    SuperRPG.prototype.pressedUpButton = function () {
        if (this.menu != null)
            this.menu.pressedUpButton();
    };
    SuperRPG.prototype.runGame = function () {
        return false;
    };
    SuperRPG.prototype.runSplashScreen = function () {
        // If the timer is >= 0
        if (this.splashScreenTimer >= 0) {
            // Reduce the timer
            this.splashScreenTimer -= 1;
        }
        else {
            // Switch to the next step
            this.goToMainMenu();
        }
        // We can't end the game during the splash screen
        return false;
    };
    return SuperRPG;
})(ThirdHouseGame);
var SuperRPGFloorStep;
(function (SuperRPGFloorStep) {
    SuperRPGFloorStep[SuperRPGFloorStep["SHOP"] = 0] = "SHOP";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER1"] = 1] = "MONSTER1";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER2"] = 2] = "MONSTER2";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER3"] = 3] = "MONSTER3";
})(SuperRPGFloorStep || (SuperRPGFloorStep = {}));
var SuperRPGMenu = (function () {
    // Constructor
    function SuperRPGMenu(superRPG, asciiName, currentlySelectedEntryIndex) {
        // Menu entries
        this.entries = [];
        // Set from parameters
        this.superRPG = superRPG;
        this.asciiName = asciiName;
        this.currentlySelectedEntryIndex = currentlySelectedEntryIndex;
    }
    // Public methods
    SuperRPGMenu.prototype.addEntry = function (entry) {
        this.entries.push(entry);
    };
    SuperRPGMenu.prototype.draw = function (renderArea) {
        // Draw the separating line
        renderArea.drawVerticalLine("|", 26, 3, 11);
        // Draw the ascii art on the left
        renderArea.drawArray(Database.getAscii(this.asciiName), 0 + Math.floor((26 - Database.getAsciiWidth(this.asciiName)) / 2), 2 + Math.floor((10 - Database.getAsciiHeight(this.asciiName)) / 2));
        // Draw the entries
        for (var i = 0; i < this.entries.length; i++) {
            this.entries[i].draw(renderArea, 27, 3 + Math.floor((10 - (this.entries.length * 2)) / 2) + i * 2, (this.currentlySelectedEntryIndex == i), 26);
        }
    };
    SuperRPGMenu.prototype.pressedDownButton = function () {
        this.currentlySelectedEntryIndex += 1;
        if (this.currentlySelectedEntryIndex >= this.entries.length)
            this.currentlySelectedEntryIndex = this.entries.length - 1;
    };
    SuperRPGMenu.prototype.pressedSpaceButton = function () {
        this.entries[this.currentlySelectedEntryIndex].getCallbackCollection().fire();
    };
    SuperRPGMenu.prototype.pressedUpButton = function () {
        this.currentlySelectedEntryIndex -= 1;
        if (this.currentlySelectedEntryIndex < 0)
            this.currentlySelectedEntryIndex = 0;
    };
    // Public getters
    SuperRPGMenu.prototype.getSuperRPG = function () {
        return this.superRPG;
    };
    // Public setters
    SuperRPGMenu.prototype.setAsciiName = function (asciiName) {
        this.asciiName = asciiName;
    };
    SuperRPGMenu.prototype.setEntries = function () {
        var entries = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            entries[_i - 0] = arguments[_i];
        }
        this.entries = entries;
    };
    return SuperRPGMenu;
})();
var SuperRPGMenuEntry = (function () {
    // Constructor
    function SuperRPGMenuEntry(text, callbackCollection) {
        this.text = text;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    SuperRPGMenuEntry.prototype.draw = function (renderArea, x, y, selected, width) {
        // Create a var which will contain the text to draw
        var textToDraw;
        // Set the text to draw
        if (selected)
            textToDraw = "> " + this.text + " <";
        else
            textToDraw = this.text;
        // Draw the text to draw
        renderArea.drawString(textToDraw, x + Math.floor((width - textToDraw.length) / 2), y);
    };
    // Public getters
    SuperRPGMenuEntry.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    return SuperRPGMenuEntry;
})();
///<reference path="SuperRPGMenu.ts"/>
var SuperRPGMenu_Ingame = (function (_super) {
    __extends(SuperRPGMenu_Ingame, _super);
    function SuperRPGMenu_Ingame() {
        _super.apply(this, arguments);
    }
    // Public methods
    SuperRPGMenu_Ingame.prototype.draw = function (renderArea) {
        // First status bar line
        // Floor
        renderArea.drawString("Floor " + this.getSuperRPG().getFloor(), 0, 0);
        // Separation bar
        renderArea.drawString("|", 10, 0);
        // Shop / 1st monster / etc
        switch (this.getSuperRPG().getFloorStep()) {
            case SuperRPGFloorStep.SHOP:
                renderArea.drawString("shop", 15, 0);
                break;
            case SuperRPGFloorStep.MONSTER1:
                renderArea.drawString("1st monster", 12, 0);
                break;
            case SuperRPGFloorStep.MONSTER2:
                renderArea.drawString("2nd monster", 12, 0);
                break;
            case SuperRPGFloorStep.MONSTER3:
                renderArea.drawString("3rd monster", 12, 0);
                break;
        }
        // Separation bar
        renderArea.drawString("|", 24, 0);
        // Hp and max hp
        renderArea.drawString("HP " + this.getSuperRPG().getHp().toString() + "/" + this.getSuperRPG().getMaxHp().toString(), 26, 0);
        // Separation bar
        renderArea.drawString("|", 39, 0);
        // Coins
        renderArea.drawString("Coins " + this.getSuperRPG().getCoins(), 41, 0);
        // Second status bar line
        // ATK + weapon + damage
        renderArea.drawString("ATK " + this.getSuperRPG().getWeapon() + " (" + this.getSuperRPG().getDamage() + ")", 0, 1);
        // Separation bar
        renderArea.drawString("|", 24, 1);
        // DEF + defense item + defense
        renderArea.drawString("DEF " + this.getSuperRPG().getDefenseItem() + " (" + this.getSuperRPG().getDefense() + ")", 26, 1);
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    return SuperRPGMenu_Ingame;
})(SuperRPGMenu);
///<reference path="SuperRPGMenu.ts"/>
var SuperRPGMenu_Main = (function (_super) {
    __extends(SuperRPGMenu_Main, _super);
    // Constructor
    function SuperRPGMenu_Main(superRPG) {
        _super.call(this, superRPG, "places/village/thirdHouseGames/SuperRPG/mainMenu", 0);
        this.addEntry(new SuperRPGMenuEntry("Start", new CallbackCollection(this.getSuperRPG().startGame.bind(this.getSuperRPG(), false))));
        if (Saving.loadBool("SuperRPGUnlockedHardmode"))
            this.addEntry(new SuperRPGMenuEntry("Start (hardmode)", new CallbackCollection(this.getSuperRPG().startGame.bind(this.getSuperRPG(), true))));
        this.addEntry(new SuperRPGMenuEntry("Exit", new CallbackCollection(this.getSuperRPG().exitGame.bind(this.getSuperRPG()))));
    }
    // Public methods
    SuperRPGMenu_Main.prototype.draw = function (renderArea) {
        // Draw the "main menu" text
        renderArea.drawString("Main menu", 22, 0);
        // Mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    return SuperRPGMenu_Main;
})(SuperRPGMenu);
///<reference path="SuperRPGMenu_Ingame.ts"/>
var SuperRPGMenu_Monster = (function (_super) {
    __extends(SuperRPGMenu_Monster, _super);
    // Constructor
    function SuperRPGMenu_Monster(superRPG) {
        _super.call(this, superRPG, "", 0);
    }
    // Public methods
    SuperRPGMenu_Monster.prototype.addUsualEntries = function () {
        this.addEntry(new SuperRPGMenuEntry("Attack", new CallbackCollection(this.playerAttacks.bind(this))));
    };
    SuperRPGMenu_Monster.prototype.draw = function (renderArea) {
        // Draw the monster damage
        renderArea.drawString("ATK " + this.damage, 0, 11);
        // Draw the monster defense
        renderArea.drawString("DEF " + this.defense, 7, 11);
        // Draw the monster hp and max hp
        renderArea.drawString("HP " + this.hp + "/" + this.maxHp, 14, 11);
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    SuperRPGMenu_Monster.prototype.setAbstract = function (atk, def, coins, hp) {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/" + Random.fromArray(["cross", "mobius", "triforce", "randomShape", "circle", "dna", "hive", "star"]), atk, def, coins, hp);
    };
    SuperRPGMenu_Monster.prototype.setBabyVampire = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/babyVampire", 10, 2, 8, 30);
    };
    SuperRPGMenu_Monster.prototype.setBlob = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/blob", Random.between(1, 3), 0, Random.between(5, 8), 3);
    };
    SuperRPGMenu_Monster.prototype.setBomb = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/bomb", 99, 0, 0, 12);
    };
    SuperRPGMenu_Monster.prototype.setChest = function (coins) {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/chest", 0, 0, coins, 10);
    };
    SuperRPGMenu_Monster.prototype.setCorpse1 = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/corpse1", 0, 0, (Random.flipACoin() ? 0 : Random.between(1, 300)), 0);
    };
    SuperRPGMenu_Monster.prototype.setCorpse2 = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/corpse2", 0, 0, (Random.flipACoin() ? 0 : Random.between(1, 300)), 0);
    };
    SuperRPGMenu_Monster.prototype.setDragon = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/dragon", Random.between(28, 32), Random.between(7, 9), 1000, Random.fromArray([45, 50, 55]));
    };
    SuperRPGMenu_Monster.prototype.setFerociousBlob = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousBlob", Random.between(2, 4), 0, Random.between(7, 10), 2);
    };
    SuperRPGMenu_Monster.prototype.setFerociousGoblin = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousGoblin", 5, 3, 20, 5);
    };
    SuperRPGMenu_Monster.prototype.setFerociousSkeleton = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousSkeleton", 8, 1, 40, 10);
    };
    SuperRPGMenu_Monster.prototype.setGoblin = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/goblin", 4, 1, 15, 5);
    };
    SuperRPGMenu_Monster.prototype.setSkeletonOrBillGatesSkeleton = function () {
        // Bill gates skeleton
        if (Random.oneChanceOutOf(10))
            this.setMonster("places/village/thirdHouseGames/SuperRPG/billGatesSkeleton", 6, 1, 50, 7);
        else
            this.setMonster("places/village/thirdHouseGames/SuperRPG/skeleton", 6, 1, 25, 7);
    };
    SuperRPGMenu_Monster.prototype.setSpider = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/spider", 10, 5, Random.between(100, 200), 25);
    };
    SuperRPGMenu_Monster.prototype.setSpiders = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/spiders", 9, 2, 9, 15);
    };
    SuperRPGMenu_Monster.prototype.setThing = function () {
        switch (Random.between(0, 2)) {
            case 0:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 20, 3, 120, 10);
                break;
            case 1:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 12, 6, 120, 30);
                break;
            case 2:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 14, 4, 120, 20);
                break;
        }
    };
    // Private methods
    SuperRPGMenu_Monster.prototype.playerAttacks = function () {
        // Variable used for damage calculation
        var damage;
        // We lose hp
        damage = this.getSuperRPG().getDamage() - this.defense;
        if (damage > 0) {
            this.hp -= damage;
            // If we have 0 or less hp, we get the coins, go to the next floor step and return
            if (this.hp <= 0) {
                this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() + this.coins);
                this.getSuperRPG().nextFloorStep();
                return;
            }
        }
        // We didn't return : it means we're still alive : we counter attack
        damage = this.damage - this.getSuperRPG().getDefense();
        if (damage > 0) {
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() - damage);
        }
    };
    SuperRPGMenu_Monster.prototype.setMonster = function (asciiName, damage, defense, coins, hp, maxHp) {
        if (maxHp === void 0) { maxHp = null; }
        // Set from the parameters
        this.setAsciiName(asciiName);
        this.damage = (this.getSuperRPG().getHardmode() ? Math.floor(damage * 1.2) : damage);
        this.defense = (this.getSuperRPG().getHardmode() ? Math.floor(defense * 1.2) : defense);
        this.coins = (this.getSuperRPG().getHardmode() ? Math.ceil(coins * 0.8) : coins);
        this.hp = (this.getSuperRPG().getHardmode() ? Math.floor(hp * 1.2) : hp);
        if (maxHp == null)
            this.maxHp = this.hp;
        else
            this.maxHp = (this.getSuperRPG().getHardmode() ? Math.floor(maxHp * 1.2) : maxHp);
    };
    return SuperRPGMenu_Monster;
})(SuperRPGMenu_Ingame);
///<reference path="SuperRPGMenu_Ingame.ts"/>
var SuperRPGMenu_Shop = (function (_super) {
    __extends(SuperRPGMenu_Shop, _super);
    // Constructor
    function SuperRPGMenu_Shop(superRPG) {
        _super.call(this, superRPG, "places/village/thirdHouseGames/SuperRPG/shop", 0);
    }
    // Public methods
    SuperRPGMenu_Shop.prototype.addBuyingDefenseItem = function (defenseItem, defense, price) {
        this.addEntry(new SuperRPGMenuEntry(defenseItem + " (" + price + ")", new CallbackCollection(this.buyDefenseItem.bind(this, defenseItem, defense, price))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingHealthCrystal = function () {
        this.addEntry(new SuperRPGMenuEntry("Health crystal (100)", new CallbackCollection(this.buyHealthCrystal.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingHealthPendant = function () {
        this.addEntry(new SuperRPGMenuEntry("Health pendant (30)", new CallbackCollection(this.buyHealthPendant.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingHealthPotion = function () {
        this.addEntry(new SuperRPGMenuEntry("Health potion (5)", new CallbackCollection(this.buyHealthPotion.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingSuperHealthPotion = function () {
        this.addEntry(new SuperRPGMenuEntry("Health potion ++ (25)", new CallbackCollection(this.buySuperHealthPotion.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingWeapon = function (weapon, damage, price) {
        this.addEntry(new SuperRPGMenuEntry(weapon + " (" + price + ")", new CallbackCollection(this.buyWeapon.bind(this, weapon, damage, price))));
    };
    SuperRPGMenu_Shop.prototype.addQuitTheShop = function () {
        this.addEntry(new SuperRPGMenuEntry("Quit the shop", new CallbackCollection(this.getSuperRPG().nextFloorStep.bind(this.getSuperRPG()))));
    };
    // Private methods
    SuperRPGMenu_Shop.prototype.buyDefenseItem = function (defenseItem, defense, price) {
        if (this.getSuperRPG().getCoins() >= price && this.getSuperRPG().getDefense() < defense) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - price);
            this.getSuperRPG().setDefenseItem(defenseItem);
            this.getSuperRPG().setDefense(defense);
        }
    };
    SuperRPGMenu_Shop.prototype.buyHealthCrystal = function () {
        if (this.getSuperRPG().getCoins() >= 100) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 100);
            this.getSuperRPG().setMaxHp(this.getSuperRPG().getMaxHp() + 20);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 20);
        }
    };
    SuperRPGMenu_Shop.prototype.buyHealthPendant = function () {
        if (this.getSuperRPG().getCoins() >= 30) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 30);
            this.getSuperRPG().setMaxHp(this.getSuperRPG().getMaxHp() + 5);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 5);
        }
    };
    SuperRPGMenu_Shop.prototype.buyHealthPotion = function () {
        if (this.getSuperRPG().getCoins() >= 5 && this.getSuperRPG().getHp() < this.getSuperRPG().getMaxHp()) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 5);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 8);
        }
    };
    SuperRPGMenu_Shop.prototype.buySuperHealthPotion = function () {
        if (this.getSuperRPG().getCoins() >= 25 && this.getSuperRPG().getHp() < this.getSuperRPG().getMaxHp()) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 25);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 50);
        }
    };
    SuperRPGMenu_Shop.prototype.buyWeapon = function (weapon, damage, price) {
        if (this.getSuperRPG().getCoins() >= price && this.getSuperRPG().getDamage() < damage) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - price);
            this.getSuperRPG().setWeapon(weapon);
            this.getSuperRPG().setDamage(damage);
        }
    };
    return SuperRPGMenu_Shop;
})(SuperRPGMenu_Ingame);
var SuperRPGStep;
(function (SuperRPGStep) {
    SuperRPGStep[SuperRPGStep["SPLASH_SCREEN"] = 0] = "SPLASH_SCREEN";
    SuperRPGStep[SuperRPGStep["GAME"] = 1] = "GAME";
    SuperRPGStep[SuperRPGStep["LOSE"] = 2] = "LOSE";
})(SuperRPGStep || (SuperRPGStep = {}));
///<reference path="QuestEntity.ts"/>
var Teapot = (function (_super) {
    __extends(Teapot, _super);
    // Constructor
    function Teapot(quest, pos) {
        _super.call(this, quest, pos, new Naming("A teapot", "a teapot"), new RenderArea(19, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(6, 1), new Pos(8, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(18, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(17, 1)), new CollisionBox(this, new Pos(3, 4), new Pos(16, 1)), new CollisionBox(this, new Pos(5, 5), new Pos(12, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1000000);
        this.setHp(1000000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/teapot"));
        this.setTransparency(new RenderTransparency(" ", "%"));
    }
    // update()
    Teapot.prototype.update = function () {
        _super.prototype.update.call(this);
        console.log(this.getHp());
        // We heal ourselves if the player is too far on the left
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x - 50)
            this.heal(50);
    };
    // willDie()
    Teapot.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
        // The spoon
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponGiantSpoon", "You found a giant spoon inside the teapot.", "You gain a giant spoon."));
    };
    return Teapot;
})(QuestEntity);
///<reference path="Place.ts"/>
var TheArena = (function (_super) {
    __extends(TheArena, _super);
    // Constructor
    function TheArena(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resize(100, 20);
        this.update();
    }
    // getRenderArea()
    TheArena.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    TheArena.prototype.drawQuestLogo = function (questFolderName, x, y) {
        // If the quest folder name given isn't null
        if (questFolderName != null) {
            // If this quest doesn't exist
            if (TheArenaModule.getQuest(questFolderName) == null)
                console.log("Trying to draw the arena quest " + questFolderName + " which wasn't added to the arena module.");
            else {
                // Draw the logo
                TheArenaModule.getQuest(questFolderName).drawLogo(this.renderArea, x, y, this.getGame());
            }
        }
        // Draw the borders
        this.renderArea.drawHorizontalLine("-", x, x + 19, y);
        this.renderArea.drawHorizontalLine("-", x, x + 19, y + 5);
        this.renderArea.drawVerticalLine("|", x, y, y + 5);
        this.renderArea.drawVerticalLine("|", x + 19, y, y + 5);
    };
    TheArena.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Quick explanation
        this.renderArea.drawString("The Arena is a special area featuring additional quests written by players.", 12, 1);
        // List of quests
        this.drawQuestLogo("peacefulForest", 2, 3);
        this.drawQuestLogo("hardcorePlatformer", 21, 3);
        this.drawQuestLogo(null, 40, 3);
        this.drawQuestLogo(null, 59, 3);
        this.drawQuestLogo(null, 78, 3);
        this.drawQuestLogo(null, 2, 8);
        this.drawQuestLogo(null, 21, 8);
        this.drawQuestLogo(null, 40, 8);
        this.drawQuestLogo(null, 59, 8);
        this.drawQuestLogo(null, 78, 8);
        // Hardmode
        this.renderArea.drawString("If you want more challenge, you can also play hardmode here : ", 1, 17);
        this.renderArea.addHtmlLink(63, 17, "http://candybox2.github.io/?gamemode=hard", "http://candybox2.github.io/?gamemode=hard");
        // Create your quest!
        this.renderArea.drawString("If you're a programmer and you want to create a quest,                     and                 !", 1, 15);
        this.renderArea.addHtmlLink(56, 15, "source_code.html", "get the source code");
        this.renderArea.addHtmlLink(80, 15, "create_quest.html", "follow the guide");
    };
    return TheArena;
})(Place);
var TheArenaModule;
(function (TheArenaModule) {
    var quests = {};
    // Add a quest
    function addQuest(quest) {
        quests[quest.getQuestFolderName()] = quest;
    }
    TheArenaModule.addQuest = addQuest;
    // Get a quest
    function getQuest(questFolderName) {
        return quests[questFolderName];
    }
    TheArenaModule.getQuest = getQuest;
})(TheArenaModule || (TheArenaModule = {}));
var TheArenaModuleQuest = (function () {
    // Constructor
    function TheArenaModuleQuest(questFolderName, specialCallback) {
        // Set from parameters
        this.questFolderName = questFolderName;
        this.specialCallback = specialCallback;
    }
    // Public methods
    TheArenaModuleQuest.prototype.drawLogo = function (renderArea, x, y, game) {
        // Draw the logo ascii art
        renderArea.drawArray(Database.getAscii("arena/" + this.questFolderName + "/logo"), x + 1, y + 1);
        // Add the button and the link
        renderArea.addMultipleAsciiButtons("theArenaQuest" + this.questFolderName, x + 1, x + 19, y + 1, x + 1, x + 19, y + 2, x + 1, x + 19, y + 3, x + 1, x + 19, y + 4);
        renderArea.addLinkCall(".theArenaQuest" + this.questFolderName, new CallbackCollection(this.launchQuest.bind(this, game)));
    };
    // Public getters
    TheArenaModuleQuest.prototype.getQuestFolderName = function () {
        return this.questFolderName;
    };
    // Private methods
    TheArenaModuleQuest.prototype.launchQuest = function (game) {
        if (game.canStartQuest()) {
            game.getStatusBar().selectTabByType(StatusBarTabType.MAP);
            game.goToMap();
            game.setPlace(this.specialCallback(game));
        }
    };
    return TheArenaModuleQuest;
})();
///<reference path="Place.ts"/>
var TheCave = (function (_super) {
    __extends(TheCave, _super);
    // Constructor
    function TheCave(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Last moves chosen
        this.lastMoves = [];
        // Database text names for the first sentence below
        this.firstSentence = null;
        // Pattern currently in use
        this.pattern = null;
        // Add the additional characters to the array
        this.createAdditionalCharactersPossible();
        // Add the additional characters positions to the array
        this.createAdditionalCharactersPositionsPossible();
        // Create the current way
        this.createWay();
        // Resize & update
        this.renderArea.resizeFromArray(Database.getAscii("places/theCave/ways"), 42, 7); // 3 for the return to map button + 4 for the two sentences = 7
        this.update();
    }
    // getRenderArea()
    TheCave.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Public methods
    TheCave.prototype.aPatternNeedsUpdating = function () {
        this.update();
        this.getGame().updatePlace();
    };
    // Public getters
    TheCave.prototype.getAdditionalCharactersPositionsPossible = function () {
        return this.additionalCharactersPositionsPossible;
    };
    TheCave.prototype.getAdditionalCharactersPossible = function () {
        return this.additionalCharactersPossible;
    };
    // Private methods
    TheCave.prototype.createAdditionalCharactersPositionsPossible = function () {
        // Reset the array
        this.additionalCharactersPositionsPossible = [];
        // Add positions
        this.additionalCharactersPositionsPossible.push(new Pos(20, 6));
        this.additionalCharactersPositionsPossible.push(new Pos(19, 9));
        this.additionalCharactersPositionsPossible.push(new Pos(17, 13));
        this.additionalCharactersPositionsPossible.push(new Pos(20, 18));
        this.additionalCharactersPositionsPossible.push(new Pos(17, 24));
        this.additionalCharactersPositionsPossible.push(new Pos(41, 19));
        this.additionalCharactersPositionsPossible.push(new Pos(56, 16));
        this.additionalCharactersPositionsPossible.push(new Pos(52, 22));
        this.additionalCharactersPositionsPossible.push(new Pos(31, 23));
        this.additionalCharactersPositionsPossible.push(new Pos(64, 28));
        this.additionalCharactersPositionsPossible.push(new Pos(64, 12));
        this.additionalCharactersPositionsPossible.push(new Pos(75, 5));
        this.additionalCharactersPositionsPossible.push(new Pos(80, 12));
        this.additionalCharactersPositionsPossible.push(new Pos(77, 17));
        this.additionalCharactersPositionsPossible.push(new Pos(80, 20));
        this.additionalCharactersPositionsPossible.push(new Pos(78, 26));
    };
    TheCave.prototype.createAdditionalCharactersPossible = function () {
        // Reset the array
        this.additionalCharactersPossible = [];
        // Add characters
        this.additionalCharactersPossible.push("V");
        this.additionalCharactersPossible.push("\\");
        this.additionalCharactersPossible.push("/");
        this.additionalCharactersPossible.push("'");
        this.additionalCharactersPossible.push("`");
        this.additionalCharactersPossible.push("~");
        this.additionalCharactersPossible.push(")");
        this.additionalCharactersPossible.push("(");
        this.additionalCharactersPossible.push("}");
        this.additionalCharactersPossible.push("{");
        this.additionalCharactersPossible.push("@");
        this.additionalCharactersPossible.push(">");
        this.additionalCharactersPossible.push("^");
    };
    TheCave.prototype.createWay = function (moveType) {
        if (moveType === void 0) { moveType = null; }
        // A variable used in the loop choosing the new pattern
        var cont;
        // Reset the additional characters array
        this.additionalCharacters = [];
        // Set the first sentence
        switch (moveType) {
            case TheCaveMoveType.STRAIGHT:
                this.firstSentence = "theCaveFirstSentenceWentStraight";
                break;
            case TheCaveMoveType.LEFT:
                this.firstSentence = "theCaveFirstSentenceWentLeft";
                break;
            case TheCaveMoveType.RIGHT:
                this.firstSentence = "theCaveFirstSentenceWentRight";
                break;
            case null:
                this.firstSentence = "theCaveFirstSentenceYouAre";
                break;
        }
        // If there's a pattern, we possibly set it to null
        if (this.pattern != null) {
            // If this pattern should end, there's no pattern anymore
            if (this.pattern.ended()) {
                this.pattern = null;
            }
        }
        // If there's no pattern (and we moved at least once)
        if (this.pattern == null && this.lastMoves.length > 0) {
            // One chance out of two to use a new one
            if (Random.flipACoin()) {
                cont = 10;
                while (cont > 0 && this.pattern == null) {
                    cont -= 1;
                    switch (Random.upTo(4)) {
                        case 0:
                            if (Saving.loadBool("gridItemPossessedHeartPlug") == false)
                                this.pattern = new TheCavePattern_ArrowsToHeartPlug(this);
                            break;
                        case 1:
                            if (Saving.loadBool("TheCavePattern_ChocolateBarNowGotTheBar") == false)
                                this.pattern = new TheCavePattern_ChocolateBarNow(this);
                            break;
                        case 2:
                            if (Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false)
                                this.pattern = new TheCavePattern_TreasureMap(this);
                            break;
                        case 3:
                            this.pattern = new TheCavePattern_MonkeyWizard(this);
                            break;
                        case 4:
                            this.pattern = new TheCavePattern_OctopusKing(this);
                            break;
                    }
                }
            }
        }
        // Add some additional characters
        for (var i = 0; i < 10; i++) {
            this.additionalCharacters.push(new TheCaveAdditionalCharacter(this));
        }
    };
    TheCave.prototype.drawWays = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 3; }
        // Draw the background
        this.renderArea.drawArray(Database.getAscii("places/theCave/ways"), x + 21, y);
        // Draw additional characters
        for (var i = 0; i < this.additionalCharacters.length; i++) {
            this.renderArea.drawString(this.additionalCharacters[i].getString(), x + this.additionalCharacters[i].getPosition().x, y + this.additionalCharacters[i].getPosition().y);
        }
        // Draw the sentences
        if (this.firstSentence != null) {
            this.renderArea.drawString(Database.getText(this.firstSentence), x + 23, y + 32);
            this.renderArea.drawString(Database.getTranslatedText(this.firstSentence), x + 23, y + 33, true);
        }
        if (this.pattern != null && this.pattern.getSentence() != null) {
            this.renderArea.drawString(Database.getText(this.pattern.getSentence()), x + 23, y + 34);
            this.renderArea.drawString(Database.getTranslatedText(this.pattern.getSentence()), x + 23, y + 35, true);
        }
        // If there's a pattern, draw pattern related stuff
        if (this.pattern != null)
            this.pattern.draw(this.renderArea, x, y);
        // Add the black background color
        for (var i = 0; i <= 4; i++) {
            this.renderArea.addBackgroundColor(x + 46, x + 54, y + 1 + i, new Color(ColorType.THECAVE_BACKGROUND_COLOR));
        }
        // Add the button to go left
        this.renderArea.addMultipleAsciiButtons("theCaveGoLeftButton", x + 30, x + 32, y + 5, x + 29, x + 33, y + 6, x + 27, x + 33, y + 7, x + 26, x + 32, y + 8, x + 26, x + 32, y + 9, x + 26, x + 32, y + 10, x + 25, x + 32, y + 11, x + 24, x + 32, y + 12, x + 25, x + 31, y + 13, x + 25, x + 31, y + 14, x + 25, x + 32, y + 15, x + 25, x + 32, y + 16, x + 25, x + 32, y + 17, x + 25, x + 32, y + 18, x + 24, x + 32, y + 19, x + 24, x + 31, y + 20, x + 25, x + 30, y + 21, x + 26, x + 29, y + 22, x + 26, x + 28, y + 23, x + 25, x + 27, y + 24, x + 25, x + 26, y + 25);
        this.renderArea.addLinkCall(".theCaveGoLeftButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.LEFT)));
        // Add the button to go right
        this.renderArea.addMultipleAsciiButtons("theCaveGoRightButton", x + 68, x + 70, y + 6, x + 68, x + 72, y + 7, x + 68, x + 73, y + 8, x + 68, x + 73, y + 9, x + 69, x + 74, y + 10, x + 69, x + 74, y + 11, x + 69, x + 74, y + 12, x + 69, x + 75, y + 13, x + 69, x + 75, y + 14, x + 68, x + 74, y + 15, x + 68, x + 74, y + 16, x + 68, x + 74, y + 17, x + 68, x + 74, y + 18, x + 68, x + 74, y + 19, x + 69, x + 74, y + 20, x + 70, x + 74, y + 21, x + 71, x + 74, y + 22, x + 72, x + 73, y + 23);
        this.renderArea.addLinkCall(".theCaveGoRightButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.RIGHT)));
        // Add the button to go straight
        this.renderArea.addMultipleAsciiButtons("theCaveGoStraightButton", x + 46, x + 54, y + 1, x + 46, x + 54, y + 2, x + 46, x + 54, y + 3, x + 46, x + 54, y + 4, x + 46, x + 54, y + 5);
        this.renderArea.addLinkCall(".theCaveGoStraightButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.STRAIGHT)));
    };
    TheCave.prototype.goToTheCaveExit = function () {
        Saving.saveBool("mainMapDoneCaveEntrance", true);
        this.getGame().setPlace(new TheCaveExit(this.getGame()));
    };
    TheCave.prototype.move = function (type) {
        // If we made more than 12 moves and there's no pattern, we reach the exit
        if (this.lastMoves.length > 12 && this.pattern == null) {
            this.goToTheCaveExit();
        }
        // If there's a pattern, we call its move method
        if (this.pattern != null)
            this.pattern.move(type);
        // Add this move to the last moves
        this.lastMoves.push(type);
        // Create the new way
        this.createWay(type);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    TheCave.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theCaveBackToTheMapButton");
        // Draw the ways
        this.drawWays();
    };
    return TheCave;
})(Place);
var TheCaveAdditionalCharacter = (function () {
    // Constructor
    function TheCaveAdditionalCharacter(theCave, characterString, characterPosition) {
        if (characterString === void 0) { characterString = null; }
        if (characterPosition === void 0) { characterPosition = null; }
        // We set the cave
        this.theCave = theCave;
        // If the string given in parameter isn't null
        if (characterString != null) {
            // We set our string from this one
            this.characterString = characterString;
        }
        else {
            // We choose a string randomly from the possible strings
            this.characterString = this.theCave.getAdditionalCharactersPossible()[Random.upTo(this.theCave.getAdditionalCharactersPossible().length - 1)];
        }
        // If the position given in parameters isn't null
        if (characterPosition != null) {
            // We set our position from this one
            this.characterPosition = characterPosition;
        }
        else {
            // We choose a position randomly from the possible positions
            this.characterPosition = this.theCave.getAdditionalCharactersPositionsPossible()[Random.upTo(this.theCave.getAdditionalCharactersPositionsPossible().length - 1)];
        }
    }
    // Public getters
    TheCaveAdditionalCharacter.prototype.getPosition = function () {
        return this.characterPosition;
    };
    TheCaveAdditionalCharacter.prototype.getString = function () {
        return this.characterString;
    };
    return TheCaveAdditionalCharacter;
})();
///<reference path="Place.ts"/>
var TheCaveExit = (function (_super) {
    __extends(TheCaveExit, _super);
    // Constructor
    function TheCaveExit(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/theCave/exit"), 42, 3);
        this.update();
    }
    // getRenderArea()
    TheCaveExit.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    TheCaveExit.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the background
        this.renderArea.drawArray(Database.getAscii("places/theCave/exit"), 21, 3);
        // Draw the text
        this.renderArea.drawString(Database.getText("theCaveExitText0"), 30, 3);
        this.renderArea.drawString(Database.getText("theCaveExitText1"), 30, 4);
        // Draw the translated text
        this.renderArea.drawString(Database.getTranslatedText("theCaveExitText0"), 30, 6, true);
        this.renderArea.drawString(Database.getTranslatedText("theCaveExitText1"), 30, 7, true);
        // Add the button to return to the main map
        this.renderArea.addAsciiRealButton(Database.getText("theCaveExitButtonText"), 41, 20, "theCaveExitReturnToMapButton", Database.getTranslatedText("theCaveExitButtonText"), true);
        this.renderArea.addLinkCall(".theCaveExitReturnToMapButton", new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())));
    };
    return TheCaveExit;
})(Place);
var TheCaveMoveType;
(function (TheCaveMoveType) {
    TheCaveMoveType[TheCaveMoveType["LEFT"] = 0] = "LEFT";
    TheCaveMoveType[TheCaveMoveType["RIGHT"] = 1] = "RIGHT";
    TheCaveMoveType[TheCaveMoveType["STRAIGHT"] = 2] = "STRAIGHT";
})(TheCaveMoveType || (TheCaveMoveType = {}));
var TheCavePattern = (function () {
    // Constructor
    function TheCavePattern(theCave) {
        this.theCave = theCave;
    }
    // Public methods
    TheCavePattern.prototype.draw = function (renderArea, x, y) {
    };
    TheCavePattern.prototype.ended = function () {
        return false;
    };
    TheCavePattern.prototype.getSentence = function () {
        return null;
    };
    TheCavePattern.prototype.move = function (type) {
    };
    // Public getters
    TheCavePattern.prototype.getTheCave = function () {
        return this.theCave;
    };
    return TheCavePattern;
})();
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_ArrowsToHeartPlug = (function (_super) {
    __extends(TheCavePattern_ArrowsToHeartPlug, _super);
    // Constructor
    function TheCavePattern_ArrowsToHeartPlug(theCave) {
        _super.call(this, theCave);
        // Is the pattern stopped?
        this.stopped = false;
        // Should we draw an arrow?
        this.arrow = true;
        // Number of times the player correctly followed the arrows
        this.followedNumber = 0;
        // Did we find the heart plug?
        this.foundPlug = false;
        // Did we get the heart plug? (true if the player clicked on it)
        this.gotPlug = false;
        // Choose a random direction
        this.arrowAtRight = Random.flipACoin();
    }
    // Public methods
    TheCavePattern_ArrowsToHeartPlug.prototype.draw = function (renderArea, x, y) {
        // If we should draw an arrow
        if (this.arrow) {
            // Draw a different arrow depending on the direction
            if (this.arrowAtRight == true) {
                renderArea.drawString("->", x + 71, y + 17);
            }
            else {
                renderArea.drawString("<-", x + 26, y + 17);
            }
        }
        // If we found the plug and didn't pick it up yet
        if (this.foundPlug == true && this.gotPlug == false) {
            // Draw the plug ascii art
            renderArea.drawArray(Database.getAscii("places/theCave/heartPlug"), x + 46, y + 14);
            // Draw the button over the plug
            renderArea.addMultipleAsciiButtons("theCavePattern_ArrowsToHeartPlugButton", x + 46, x + 53, y + 14, x + 46, x + 53, y + 15);
            // Add the button link
            renderArea.addLinkCall(".theCavePattern_ArrowsToHeartPlugButton", new CallbackCollection(this.getPlug.bind(this)));
        }
    };
    TheCavePattern_ArrowsToHeartPlug.prototype.ended = function () {
        return this.stopped;
    };
    TheCavePattern_ArrowsToHeartPlug.prototype.getSentence = function () {
        // If we found the plug but didn't get it yet, we return the sentence
        if (this.foundPlug == true && this.gotPlug == false) {
            return "theCavePattern_ArrowsToHeartPlugSeeStrangePlug";
        }
        // Else, we return null
        return null;
    };
    TheCavePattern_ArrowsToHeartPlug.prototype.move = function (type) {
        // If the arrow is at right and we just went right or the arrow is at left and we just went left, we continue
        if ((this.arrowAtRight == true && type == TheCaveMoveType.RIGHT) ||
            (this.arrowAtRight == false && type == TheCaveMoveType.LEFT)) {
            // If we didn't find the plug yet
            if (this.foundPlug == false) {
                // If we followed at least six arrows
                if (this.followedNumber > 6) {
                    this.foundPlug = true;
                    this.arrow = false;
                }
                else {
                    // Possibly change the arrow direction
                    this.arrowAtRight = Random.flipACoin();
                    // Increase the followed number
                    this.followedNumber += 1;
                }
            }
            else
                this.stopped = true;
        }
        else {
            this.stopped = true;
        }
    };
    // Private methods
    TheCavePattern_ArrowsToHeartPlug.prototype.getPlug = function () {
        // Get the plug
        this.getTheCave().getGame().gainItem("gridItemPossessedHeartPlug");
        this.gotPlug = true;
        // Ask the cave for an update
        this.getTheCave().aPatternNeedsUpdating();
    };
    return TheCavePattern_ArrowsToHeartPlug;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
Saving.registerBool("TheCavePattern_ChocolateBarNowGotTheBar", false);
var TheCavePattern_ChocolateBarNow = (function (_super) {
    __extends(TheCavePattern_ChocolateBarNow, _super);
    // Constructor
    function TheCavePattern_ChocolateBarNow(theCave) {
        _super.call(this, theCave);
        // Did we clicked to get the bar?
        this.gotTheBar = false;
    }
    // Public methods
    TheCavePattern_ChocolateBarNow.prototype.draw = function (renderArea, x, y) {
        // If we didn't pick the bar yet
        if (this.gotTheBar == false) {
            // Draw the bar ascii art
            renderArea.drawArray(Database.getAscii("places/theCave/chocolateBar"), x + 40, y + 25);
            // Draw the button over the plug
            renderArea.addMultipleAsciiButtons("theCavePattern_ChocolateBarNowButton", x + 40, x + 57, y + 26, x + 40, x + 57, y + 27);
            // Add the button link
            renderArea.addLinkCall(".theCavePattern_ChocolateBarNowButton", new CallbackCollection(this.getTheBar.bind(this)));
        }
    };
    TheCavePattern_ChocolateBarNow.prototype.ended = function () {
        return true;
    };
    TheCavePattern_ChocolateBarNow.prototype.getSentence = function () {
        // If we didn't pick the bar yet, we return the sentence
        if (this.gotTheBar == false) {
            return "theCavePattern_ChocolateBarNowSeeChocolateBar";
        }
        // Else, we return null
        return null;
    };
    // Private methods
    TheCavePattern_ChocolateBarNow.prototype.getTheBar = function () {
        // Get the bar
        this.getTheCave().getGame().getChocolateBars().add(1);
        this.gotTheBar = true;
        // We can't get the bar anymore (we can't start this pattern)
        Saving.saveBool("TheCavePattern_ChocolateBarNowGotTheBar", true);
        // Ask the cave for an update
        this.getTheCave().aPatternNeedsUpdating();
    };
    return TheCavePattern_ChocolateBarNow;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_MonkeyWizard = (function (_super) {
    __extends(TheCavePattern_MonkeyWizard, _super);
    // Constructor
    function TheCavePattern_MonkeyWizard(theCave) {
        _super.call(this, theCave);
    }
    // Public methods
    TheCavePattern_MonkeyWizard.prototype.draw = function (renderArea, x, y) {
        // Draw the monkey wizard
        renderArea.drawArray(Database.getAscii("places/theCave/monkeyWizard"), x + 32, y + 6, new RenderTransparency(" ", "%"));
        // Add the button & the link allowing the player to challenge him
        renderArea.addAsciiRealButton(Database.getText("theCavePattern_MonkeyWizardButton"), x + 39, y + 26, "theCavePattern_MonkeyWizardButton", Database.getTranslatedText("theCavePattern_MonkeyWizardButton"));
        renderArea.addLinkCall(".theCavePattern_MonkeyWizardButton", new CallbackCollection(this.challenge.bind(this)));
    };
    TheCavePattern_MonkeyWizard.prototype.ended = function () {
        return true;
    };
    TheCavePattern_MonkeyWizard.prototype.getSentence = function () {
        return "theCavePattern_MonkeyWizardSentence";
    };
    // Private methods
    TheCavePattern_MonkeyWizard.prototype.challenge = function () {
        if (this.getTheCave().getGame().canStartQuest())
            this.getTheCave().getGame().setPlace(new MonkeyWizardQuest(this.getTheCave().getGame()));
    };
    return TheCavePattern_MonkeyWizard;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_OctopusKing = (function (_super) {
    __extends(TheCavePattern_OctopusKing, _super);
    // Constructor
    function TheCavePattern_OctopusKing(theCave) {
        _super.call(this, theCave);
    }
    // Public methods
    TheCavePattern_OctopusKing.prototype.draw = function (renderArea, x, y) {
        // Draw the monkey wizard
        renderArea.drawArray(Database.getAscii("places/theCave/octopusKing"), x + 32, y + 6, new RenderTransparency(" ", "%"));
        // Add the button & the link allowing the player to challenge him
        renderArea.addAsciiRealButton(Database.getText("theCavePattern_OctopusKingButton"), x + 39, y + 26, "theCavePattern_OctopusKingButton", Database.getTranslatedText("theCavePattern_OctopusKingButton"));
        renderArea.addLinkCall(".theCavePattern_OctopusKingButton", new CallbackCollection(this.challenge.bind(this)));
    };
    TheCavePattern_OctopusKing.prototype.ended = function () {
        return true;
    };
    TheCavePattern_OctopusKing.prototype.getSentence = function () {
        return "theCavePattern_OctopusKingSentence";
    };
    // Private methods
    TheCavePattern_OctopusKing.prototype.challenge = function () {
        if (this.getTheCave().getGame().canStartQuest())
            this.getTheCave().getGame().setPlace(new OctopusKingQuest(this.getTheCave().getGame()));
    };
    return TheCavePattern_OctopusKing;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
Saving.registerBool("TheCavePattern_TreasureMapSawMap", false);
Saving.registerBool("TheCavePattern_TreasureMapFoundTreasure", false);
var TheCavePattern_TreasureMap = (function (_super) {
    __extends(TheCavePattern_TreasureMap, _super);
    // Constructor
    function TheCavePattern_TreasureMap(theCave) {
        _super.call(this, theCave);
        // We saw the map!
        Saving.saveBool("TheCavePattern_TreasureMapSawMap", true);
    }
    // Public methods
    TheCavePattern_TreasureMap.prototype.draw = function (renderArea, x, y) {
        renderArea.drawArray(Database.getAscii("places/theCave/treasureMap"), x + 38, y + 22);
    };
    TheCavePattern_TreasureMap.prototype.ended = function () {
        return true;
    };
    TheCavePattern_TreasureMap.prototype.getSentence = function () {
        return "theCavePattern_TreasureMapSentence";
    };
    return TheCavePattern_TreasureMap;
})(TheCavePattern);
///<reference path="Place.ts"/>
var TheComputer = (function (_super) {
    __extends(TheComputer, _super);
    // Constructor
    function TheComputer(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The lines
        this.lines = [];
        // The current command text
        this.currentCommandText = "";
        // Did we already add hotkeys?
        this.hotkeysAdded = false;
        // Resize and update
        this.renderArea.resize(100, 40);
        this.update();
    }
    // getRenderArea()
    TheComputer.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    TheComputer.prototype.willStopBeingDisplayed = function () {
        this.getGame().setIsStatusBarAllowedToUseTheNKey(true); // The status bar can use the n key now
    };
    // Private methods
    TheComputer.prototype.addHotkeys = function () {
        // Hotkeys are added now
        this.hotkeysAdded = true;
        // Add the enter hotkey
        this.getGame().addHotkey(new Hotkey("enter", new CallbackCollection(this.pressedEnter.bind(this))));
        // Add hotkeys for each letter from a to z
        for (var i = 97; i <= 122; i++) {
            this.getGame().addHotkey(new Hotkey(String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
        }
        // Same thing for the numbers from 0 to 9
        for (var i = 48; i <= 57; i++) {
            this.getGame().addHotkey(new Hotkey(String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
            this.getGame().addHotkey(new Hotkey("numpad" + String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
        }
        // Add the hotkey for the space key
        this.getGame().addHotkey(new Hotkey("space", new CallbackCollection(this.pressedKey.bind(this, " "))));
        // Add the hotkey for the delete key
        this.getGame().addHotkey(new Hotkey("delete", new CallbackCollection(this.pressedDelete.bind(this))));
    };
    TheComputer.prototype.addLine = function (line) {
        this.lines.push(line);
    };
    TheComputer.prototype.addMisunderstood = function () {
        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "This command was misunderstood. Try \"help\" for a list of available commands."));
    };
    TheComputer.prototype.draw = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the computer
        this.renderArea.drawArray(Database.getAscii("general/theComputer/computer"), 19, 0);
        // Draw the on button
        this.drawOnButton(69, 14);
        // Draw the lines
        this.drawLines(22, 16, 6);
    };
    TheComputer.prototype.drawOnButton = function (x, y) {
        // Draw the button
        this.renderArea.addMultipleAsciiButtons("theComputerOnButton", x + 1, x + 4, y, x, x + 5, y + 1, x + 1, x + 4, y + 2);
        // Add the link
        this.renderArea.addLinkCall(".theComputerOnButton", new CallbackCollection(this.switchOnOff.bind(this)));
    };
    TheComputer.prototype.drawLines = function (x, y, minY) {
        for (var i = this.lines.length - 1; i >= 0; i--) {
            // We add the return value to our y var because it returns the extra lines it used
            y -= this.lines[i].draw(this.renderArea, new Pos(x, y - (this.lines.length - 1 - i)), minY);
        }
    };
    TheComputer.prototype.executeCommand = function (commandText) {
        // Create an array from the command words
        var words = commandText.split(" ");
        // Try to understand the command from the first word
        if (commandText.length > 0 && words.length > 0) {
            switch (words[0]) {
                // Some hidden commands :P
                case "no":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Yes!"));
                    break;
                case "yes":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No!"));
                    break;
                case "aniwey":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "He made this game :)"));
                    break;
                case "cedric":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A nice guy who made the online saving system of the first Candy Box."));
                    break;
                case "17":
                case "dixsept":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A beta tester and ascii artist. Some people say that he has a big nose. Don't listen to them."));
                    break;
                case "soinou":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A beta tester. He also made the tab system of the first Candy Box."));
                    break;
                case "42":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The answer to the ultimate question of life, the universe, and everything."));
                    break;
                case "cp":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you can't copy anything, sorry."));
                    break;
                case "rm":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you can't remove anything, sorry."));
                    break;
                case "cd":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Where would you like to go anyway?"));
                    break;
                case "ls":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ". .."));
                    break;
                case "emacs":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best text editor ever after vim."));
                    break;
                case "vim":
                case "vi":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best text editor ever after emacs."));
                    break;
                case "nano":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Come on, do you seriously want to use this?"));
                    break;
                case "startx":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Fatal server error: Cannot establish any listening sockets - Make sure an X server isn't already running"));
                    break;
                case "mkdir":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Cannot create directory. No, you won't be given any precision."));
                    break;
                case "sudo":
                case "su":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "To gain root access, please use \"su -\". (hint : you can't type the \"-\")"));
                    break;
                case "lol":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Haha. That's funny."));
                    break;
                case "pwd":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "/home/player"));
                    break;
                case "mv":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "What would you like to move anyway?"));
                    break;
                case "man":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Nah. Use help instead."));
                    break;
                case "pacman":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best package manager ever."));
                    break;
                case "whoami":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "player"));
                    break;
                case "tobias":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Tobias Nordqvist, an ascii artist. From sweden. Thanks to him!"));
                    break;
                case "deinol":
                case "dani":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Dani \"Deinol\" Gómez, an ascii artist. Thanks to him!"));
                    break;
                case "godsturf":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "GodsTurf, an ascii artist. Thanks to him!"));
                    break;
                case "mlp":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES"));
                    break;
                // The help command
                case "help":
                    // If there's a second word
                    if (words.length > 1) {
                        // If there's a third word, the command is incorrect
                        if (words.length > 2) {
                            this.addMisunderstood();
                        }
                        else {
                            switch (words[1]) {
                                case "help":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The help command displays informations about other system commands."));
                                    break;
                                case "add":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The add command allows you to add a given quantity of a given resource. Usage : \"add quantity resource\"."));
                                    break;
                                case "quantity":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A quantity is expressed by a number, which is composed of multiple figures."));
                                    break;
                                case "resource":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "List of available resources : candies, lollipops, chocolatebars, painsauchocolat."));
                                    break;
                                case "bug":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug command allows you to configure the bugs generated by the computer. Usage : \"bug type level\"."));
                                    break;
                                case "type":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug type is the kind of bug you want to configure. Allowed types are \"graphical\", \"quest\" and \"ultimate\". Use \"help graphical\", \"help quest\" or \"help ultimate\" for more information."));
                                    break;
                                case "graphical":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Graphical bugs only affect how the game display informations. They won't be kept after reloading your game."));
                                    break;
                                case "quest":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Quest bugs affect the quests gameplay. Results are unexpected. They probably won't be kept after reloading your game."));
                                    break;
                                case "ultimate":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Ultimate bugs can affect a lot of things. They will probably be kept after reloading your game, and they basically could destroy your save. Your browser may even crash. Be careful with them."));
                                    break;
                                case "level":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug level describes how much the bugs will impact the game. Allowed values are 0, 1, 2, 3 and 4. 0 means no bug and 4 is the most powerful bug."));
                                    break;
                                case "command":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you're not supposed to type \"help command\", you should type \"help bug\" or \"help add\" for example."));
                                    break;
                                // Default : misunderstood
                                default:
                                    this.addMisunderstood();
                                    break;
                            }
                        }
                    }
                    else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "List of available commands : add, bug, help. Use \"help command\" to get more informations about a specific command. There are probably no hidden commands. I guess."));
                    }
                    break;
                // The add command
                case "add":
                    // If there's a second word
                    if (words.length > 1) {
                        // If there's a third word
                        if (words.length > 2) {
                            // If there's a fourth word
                            if (words.length > 3) {
                                // Misunderstood
                                this.addMisunderstood();
                            }
                            else {
                                // If the second word cannot be converted to a number
                                if (isNaN(parseFloat(words[1])))
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The quantity must be a number. See \"help quantity\" for more informations."));
                                else if (words[2] != "candies" && words[2] != "lollipops" && words[2] != "chocolatebars" && words[2] != "painsauchocolat")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The resource is invalid. See \"help resource\" for more informations."));
                                else {
                                    // Execute the command, depending on the resource given
                                    switch (words[2]) {
                                        case "candies":
                                            this.getGame().getCandies().add(parseFloat(words[1]));
                                            break;
                                        case "lollipops":
                                            this.getGame().getLollipops().add(parseFloat(words[1]));
                                            break;
                                        case "chocolatebars":
                                            this.getGame().getChocolateBars().add(parseFloat(words[1]));
                                            break;
                                        case "painsauchocolat":
                                            this.getGame().getPainsAuChocolat().add(parseFloat(words[1]));
                                            break;
                                    }
                                    // Write the result
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, words[1] + " " + words[2] + " added successfully."));
                                }
                            }
                        }
                        else {
                            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a resource. See \"help add\" for more informations."));
                        }
                    }
                    else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a quantity. See \"help add\" for more informations."));
                    }
                    break;
                // The bug command
                case "bug":
                    // If there's a second word
                    if (words.length > 1) {
                        // If there's a third word
                        if (words.length > 2) {
                            // If there's a fourth word
                            if (words.length > 3) {
                                // Misunderstood
                                this.addMisunderstood();
                            }
                            else {
                                // If the second word isn't a valid type
                                if (words[1] != "graphical" && words[1] != "quest" && words[1] != "ultimate")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug type is incorrect. See \"help type\" for more informations."));
                                else if (words[2] != "0" && words[2] != "1" && words[2] != "2" && words[2] != "3" && words[2] != "4")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug level is invalid. See \"help level\" for more informations."));
                                else {
                                    // Execute the command, depending on the type given
                                    switch (words[1]) {
                                        case "graphical":
                                            Bugs.setGraphicalBugLevel(parseInt(words[2]));
                                            break;
                                        case "quest":
                                            Bugs.setQuestBugLevel(parseInt(words[2]));
                                            break;
                                        case "ultimate":
                                            Bugs.setUltimateBugLevel(parseInt(words[2]));
                                            break;
                                    }
                                    // Write the result
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Bug type " + words[1] + " set successfully at level " + words[2] + "."));
                                }
                            }
                        }
                        else {
                            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a bug level. See \"help level\" for more informations."));
                        }
                    }
                    else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a bug type. See \"help type\" for more informations."));
                    }
                    break;
                // Default : misunderstood
                default:
                    this.addMisunderstood();
                    break;
            }
        }
    };
    TheComputer.prototype.pressedDelete = function () {
        // If we're currently waiting for a command
        if (this.state == TheComputerState.WAITING_FOR_COMMAND) {
            // If the current command text contains at least one letter
            if (this.currentCommandText.length > 0) {
                // We delete the last character
                this.currentCommandText = this.currentCommandText.slice(0, this.currentCommandText.length - 1);
                // We update
                this.update();
                this.getGame().updatePlace();
            }
        }
    };
    TheComputer.prototype.pressedEnter = function () {
        // Do something different depending on the current state
        switch (this.state) {
            // If we were waiting for the return key
            case TheComputerState.WAITING_FOR_RETURN:
                // We change our state
                this.state = TheComputerState.WAITING_FOR_COMMAND;
                // We add an empty text line
                this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
                // We add an empty command line
                this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, ""));
                // We update
                this.update();
                this.getGame().updatePlace();
                break;
            // If we were writing a command
            case TheComputerState.WAITING_FOR_COMMAND:
                // We try to execute the command
                this.executeCommand(this.currentCommandText);
                // We empty the current command text
                this.currentCommandText = "";
                // We add an empty text line
                this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
                // We add an empty command line
                this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, ""));
                // We update
                this.update();
                this.getGame().updatePlace();
                break;
        }
    };
    TheComputer.prototype.pressedKey = function (key) {
        // If we're currently waiting for a command
        if (this.state == TheComputerState.WAITING_FOR_COMMAND) {
            // Create an array of words from the current command text (for checking purposes)
            var words = this.currentCommandText.split(" ");
            // If the last word of the current command text isn't too big and the current command text itself isn't too big either
            if ((words.length == 0 || words[words.length - 1].length < 25 || key == " ") && this.currentCommandText.length < 100) {
                // We add the letter to the command
                this.currentCommandText = this.currentCommandText + key;
                // We update
                this.update();
                this.getGame().updatePlace();
            }
        }
    };
    TheComputer.prototype.switchOnOff = function () {
        // If the computer was on
        if (this.on) {
            this.on = false; // Now it's off
            this.lines = []; // Clear the lines
            this.getGame().setIsStatusBarAllowedToUseTheNKey(true); // The status bar can use the n key now
        }
        else {
            this.on = true; // Now it's on
            // Add the first lines
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Booting GNU/Candies system version 4.2... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Initializing the memory stack... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Checking every piece of the system is free software... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
            this.addLine(new TheComputerLine(TheComputerLineType.CENTER, "Press return to continue"));
            // Set the current computer state
            this.state = TheComputerState.WAITING_FOR_RETURN;
            // The status bar isn't allowed to use the n key anymore
            this.getGame().setIsStatusBarAllowedToUseTheNKey(false);
            // If we didn't add hotkeys yet, we do so
            if (this.hotkeysAdded == false)
                this.addHotkeys();
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    TheComputer.prototype.update = function () {
        // If we have too much lines, delete some of them
        if (this.lines.length > 12) {
            this.lines.splice(0, this.lines.length - 12);
        }
        // If the last line type is COMMAND, we change its text by the current command text
        if (this.lines.length > 0 && this.lines[this.lines.length - 1].getType() == TheComputerLineType.COMMAND) {
            this.lines[this.lines.length - 1].setLinesFromText(this.currentCommandText);
        }
        // Draw
        this.draw();
    };
    return TheComputer;
})(Place);
var TheComputerLine = (function () {
    // Constructor
    function TheComputerLine(type, text) {
        // Set the type
        this.type = type;
        // Set the lines of text depending on the text given in parameter
        this.setLinesFromText(text);
    }
    // Public methods
    TheComputerLine.prototype.draw = function (renderArea, pos, minY) {
        // Draw our lines of text
        for (var i = this.linesOfText.length - 1; i >= 0; i--) {
            // If the line isn't out of the screen
            if (pos.y - (this.linesOfText.length - 1 - i) >= minY) {
                // If our type isn't "CENTER"
                if (this.type != TheComputerLineType.CENTER) {
                    // We draw it
                    renderArea.drawString(this.linesOfText[i], pos.x, pos.y - (this.linesOfText.length - 1 - i));
                }
                else {
                    // We draw it centered
                    renderArea.drawString(this.linesOfText[i], pos.x + 16 - Math.floor(this.linesOfText[i].length / 2), pos.y - (this.linesOfText.length - 1 - i));
                }
            }
        }
        // We return the extra lines we took to draw
        return this.linesOfText.length - 1;
    };
    TheComputerLine.prototype.setLinesFromText = function (text) {
        // Set the first line, empty
        this.linesOfText = [""];
        // Possibly change the text given in parameter, depending on the type
        switch (this.type) {
            case TheComputerLineType.COMMAND:
                text = " > " + text;
                break;
        }
        // Create the array of words
        var words = text.split(" ");
        // Add the words one by one to our lines
        for (var i = 0; i < words.length; i++) {
            // If we can add this word to the line OR the word is way too big to fit in any line anyway
            if (words[i].length + this.linesOfText[this.linesOfText.length - 1].length < 32 || words[i].length > 30) {
                // We add the word
                this.linesOfText[this.linesOfText.length - 1] = this.linesOfText[this.linesOfText.length - 1] + words[i] + " ";
            }
            else {
                // We add a new line
                this.linesOfText.push(words[i] + " ");
            }
        }
    };
    // Public getters
    TheComputerLine.prototype.getType = function () {
        return this.type;
    };
    return TheComputerLine;
})();
var TheComputerLineType;
(function (TheComputerLineType) {
    TheComputerLineType[TheComputerLineType["TEXT"] = 0] = "TEXT";
    TheComputerLineType[TheComputerLineType["COMMAND"] = 1] = "COMMAND";
    TheComputerLineType[TheComputerLineType["CENTER"] = 2] = "CENTER"; // Centered text
})(TheComputerLineType || (TheComputerLineType = {}));
var TheComputerState;
(function (TheComputerState) {
    TheComputerState[TheComputerState["WAITING_FOR_RETURN"] = 0] = "WAITING_FOR_RETURN";
    TheComputerState[TheComputerState["WAITING_FOR_COMMAND"] = 1] = "WAITING_FOR_COMMAND";
})(TheComputerState || (TheComputerState = {}));
///<reference path="Quest.ts"/>
// To know if the player found the chests
Saving.registerBool("theHoleFirstChestFound", false);
Saving.registerBool("theHoleSecondChestFound", false);
Saving.registerBool("theHoleThirdChestFound", false);
Saving.registerBool("theHoleFourthChestFound", false);
var TheHole = (function (_super) {
    __extends(TheHole, _super);
    // Constructor
    function TheHole(game) {
        _super.call(this, game, "You can move with the left and right arrow keys!");
        // Variables which store the open states of the chests for the current quest
        this.firstChestOpened = false;
        this.secondChestOpened = false;
        this.thirdChestOpened = false;
        this.fourthChestOpened = false;
        // A bool to know if the player is going left or right (useful to choose the fireball spell direction)
        // By default we're going right because in most quests the fireball is launched to the right, so it just seems more logical
        // But anyway as soon as the player will press the left key this can change
        this.isGoingRight = true;
        // Resize the quest
        this.resizeQuest(100, 35, new Pos(100, 136));
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(48, 0));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.createWalls();
        // Add the spikes
        this.addSpikes(new Spikes(this, new Pos(44, 42), 20));
        this.addSpikes(new Spikes(this, new Pos(23, 59), 22));
        this.addSpikes(new Spikes(this, new Pos(90, 62), 8));
        this.addSpikes(new Spikes(this, new Pos(87, 69), 4));
        this.addSpikes(new Spikes(this, new Pos(94, 69), 4));
        this.addSpikes(new Spikes(this, new Pos(93, 74), 2));
        this.addSpikes(new Spikes(this, new Pos(66, 74), 14));
        this.addSpikes(new Spikes(this, new Pos(66, 82), 4));
        this.addSpikes(new Spikes(this, new Pos(76, 83), 6));
        this.addSpikes(new Spikes(this, new Pos(3, 95), 8));
        this.addSpikes(new Spikes(this, new Pos(13, 97), 10));
        this.addSpikes(new Spikes(this, new Pos(24, 96), 2));
        this.addSpikes(new Spikes(this, new Pos(29, 96), 2));
        this.addSpikes(new Spikes(this, new Pos(33, 95), 12));
        this.addSpikes(new Spikes(this, new Pos(64, 64), 4));
        // Add the chests
        this.addChest(new Chest(this, new Pos(27, 67), true, new CallbackCollection(this.openFirstChest.bind(this)), Saving.loadBool("theHoleFirstChestFound")));
        this.addChest(new Chest(this, new Pos(59, 74), true, new CallbackCollection(this.openSecondChest.bind(this)), Saving.loadBool("theHoleSecondChestFound")));
        this.addChest(new Chest(this, new Pos(37, 107), false, new CallbackCollection(this.openThirdChest.bind(this)), Saving.loadBool("theHoleThirdChestFound")));
        this.addChest(new Chest(this, new Pos(4, 129), true, new CallbackCollection(this.openFourthChest.bind(this)), Saving.loadBool("theHoleFourthChestFound")));
        // Add the lost tribe warrior alone in its room
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(68, 89), new Pos(63, 85), new Pos(93, 95)));
        // Add the lost tribe warriors in the big room
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(14, 126), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(21, 126), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(31, 125), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(51, 123), new Pos(2, 112), new Pos(79, 129)));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You jumped into the big hole! You're falling quickly, try to stay alive!"));
    }
    // willBeDisplayed()
    TheHole.prototype.willBeDisplayed = function () {
        // We call the mother willBeDisplayed()
        _super.prototype.willBeDisplayed.call(this);
        // Register hotkeys so that they can't be used by the player's browser
        this.getGame().addHotkey(new Hotkey("left", null));
        this.getGame().addHotkey(new Hotkey("right", null));
    };
    // Public methods
    TheHole.prototype.castPlayerFireball = function () {
        // If we're going right, we cast a fireball going right ; if we're going left, we cast a fireball going left
        if (this.isGoingRight)
            _super.prototype.castPlayerFireball.call(this, new Pos(2, 0));
        else
            _super.prototype.castPlayerFireball.call(this, new Pos(-2, 0));
    };
    TheHole.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(48, 0), new Pos(1, 1));
    };
    TheHole.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement());
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    TheHole.prototype.endQuest = function (win) {
        if (win) {
            // We add the message
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to reach the bottom of the hole!"));
        }
        else {
            // We add the message
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died while falling in the hole. No one will probably ever find your body down there."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
        // If we won, we possibly confirm the opening of some of the chests, depending on our variables
        if (win) {
            if (this.firstChestOpened)
                Saving.saveBool("theHoleFirstChestFound", true);
            if (this.secondChestOpened)
                Saving.saveBool("theHoleSecondChestFound", true);
            if (this.thirdChestOpened)
                Saving.saveBool("theHoleThirdChestFound", true);
            if (this.fourthChestOpened)
                Saving.saveBool("theHoleFourthChestFound", true);
        }
    };
    TheHole.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Move the player horizontally
            this.moveHorizontally();
            // Update entities
            this.updateEntities();
            // Calculate the new global drawing offset
            this.calcNewGlobalDrawingOffset();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getPartOfAscii("places/quests/theHole/background", -this.getGlobalDrawingOffset().y, -this.getGlobalDrawingOffset().y + 35), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    TheHole.prototype.addChest = function (chest) {
        this.addEntity(chest);
    };
    TheHole.prototype.addLostTribeWarrior = function (lostTribeWarrior) {
        lostTribeWarrior.setHealthBar(new QuestEntityHealthBar(lostTribeWarrior, new Pos(4, 1)));
        this.addEntity(lostTribeWarrior);
    };
    TheHole.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };
    TheHole.prototype.addWalls = function () {
        var positions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            positions[_i - 0] = arguments[_i];
        }
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 0)));
        var wall = (this.getLastEntity());
        // Add the boxes
        for (var i = 0; i < positions.length / 4; i++) {
            wall.addBox(new Pos(positions[i * 4], positions[i * 4 + 1]), new Pos(positions[i * 4 + 2] - positions[i * 4] + 1, positions[i * 4 + 3] - positions[i * 4 + 1] + 1));
        }
    };
    TheHole.prototype.calcNewGlobalDrawingOffset = function () {
        // If the player is too low or too high on the screen (that's why we take the offset in account here), we set the offset to follow the player
        if (this.getGame().getPlayer().getGlobalPosition().y + this.getGlobalDrawingOffset().y > 10)
            this.setGlobalDrawingOffset(new Pos(0, -this.getGame().getPlayer().getGlobalPosition().y + 10));
        else if (this.getGame().getPlayer().getGlobalPosition().y + this.getGlobalDrawingOffset().y < 5) {
            if (this.getGame().getPlayer().getGlobalPosition().y > 5)
                this.setGlobalDrawingOffset(new Pos(0, -this.getGame().getPlayer().getGlobalPosition().y + 5));
            else
                this.setGlobalDrawingOffset(new Pos(0, 0));
        }
    };
    TheHole.prototype.createWalls = function () {
        // Yes, I know that the code below is quite ugly
        // But I had two choices : either write the bounding boxes manually (this is what I chose)
        // Or write a specific level editor to do the work for me (it could work with something like the height maps in 3d games - there would be a second "ascii art" composed of 0 and 1 for example, 0 would mean no collision and 1 would mean collision)
        // But this is the only level which requires such complicated bounding boxes, so really, writing a level editor for one level isn't worth it
        this.addWalls(0, 0, 40, 22, 0, 23, 39, 23, 0, 24, 38, 24, 0, 25, 37, 25, 0, 26, 36, 26, 0, 27, 33, 27, 0, 28, 32, 28, 0, 29, 31, 29, 0, 30, 30, 30, 0, 31, 29, 31, 0, 32, 28, 32, 0, 33, 27, 33, 0, 34, 26, 34, 0, 35, 25, 35, 0, 36, 24, 36, 0, 37, 23, 37, 0, 38, 22, 59, 0, 60, 44, 60, 0, 61, 43, 61, 0, 62, 27, 62, 34, 62, 38, 62, 0, 63, 26, 63, 0, 64, 25, 66, 0, 67, 26, 67, 0, 68, 33, 68, 0, 69, 32, 69, 0, 70, 31, 70, 0, 71, 27, 71, 0, 72, 26, 72, 0, 73, 25, 73, 0, 74, 24, 74, 0, 75, 16, 75, 0, 76, 15, 76, 0, 77, 4, 77, 0, 78, 3, 80, 0, 81, 2, 81, 0, 82, 1, 95, 36, 73, 39, 73, 35, 74, 40, 74, 34, 75, 41, 75, 33, 76, 49, 76, 32, 77, 49, 77, 32, 78, 49, 78, 33, 79, 49, 79, 34, 80, 49, 80, 35, 81, 49, 81, 36, 82, 49, 82, 37, 83, 49, 85, 37, 86, 49, 86, 38, 87, 50, 87, 39, 88, 51, 88, 45, 89, 52, 89, 46, 90, 54, 90, 47, 91, 54, 94, 46, 95, 54, 95, 0, 96, 11, 96, 32, 96, 54, 96, 0, 97, 12, 97, 23, 97, 26, 97, 28, 97, 54, 97, 0, 98, 26, 101, 28, 98, 54, 101, 0, 102, 26, 102, 28, 102, 57, 102, 0, 103, 23, 103, 35, 103, 65, 103, 0, 104, 20, 104, 36, 104, 69, 104, 0, 105, 19, 105, 41, 105, 74, 105, 0, 106, 18, 106, 41, 106, 87, 106, 0, 107, 17, 109, 40, 107, 87, 107, 29, 108, 87, 108, 28, 109, 87, 109, 0, 110, 18, 110, 27, 110, 68, 110, 0, 111, 57, 111, 0, 112, 39, 112, 0, 113, 30, 113, 0, 114, 8, 114, 0, 115, 7, 115, 0, 116, 6, 116, 0, 117, 5, 119, 0, 120, 4, 120, 0, 121, 3, 121, 0, 122, 2, 128, 0, 129, 3, 129, 79, 112, 87, 112, 78, 113, 87, 113, 77, 114, 87, 114, 76, 115, 87, 115, 75, 116, 87, 116, 74, 117, 87, 117, 73, 118, 87, 118, 71, 119, 87, 119, 70, 120, 87, 120, 69, 121, 87, 121, 68, 122, 87, 122, 66, 123, 87, 123, 64, 124, 87, 124, 61, 125, 87, 125, 56, 126, 87, 126, 50, 127, 86, 127, 41, 128, 85, 128, 27, 129, 84, 129, 0, 130, 79, 130, 0, 131, 72, 131, 0, 132, 71, 132, 0, 133, 70, 134, 0, 135, 100, 135, 59, 0, 100, 24, 60, 25, 100, 25, 61, 26, 100, 26, 62, 27, 100, 27, 63, 28, 100, 28, 64, 29, 100, 42, 44, 43, 100, 43, 45, 44, 100, 44, 46, 45, 100, 45, 50, 46, 100, 46, 57, 47, 100, 47, 69, 48, 100, 48, 70, 49, 100, 49, 75, 50, 100, 50, 84, 51, 100, 51, 85, 52, 100, 52, 92, 53, 100, 53, 93, 54, 100, 54, 83, 55, 89, 55, 94, 55, 100, 55, 82, 56, 88, 56, 94, 56, 100, 56, 81, 57, 87, 57, 94, 57, 100, 57, 77, 58, 86, 58, 95, 58, 100, 58, 76, 59, 86, 59, 96, 59, 100, 59, 75, 60, 86, 60, 97, 60, 100, 60, 71, 61, 86, 61, 98, 61, 100, 69, 90, 63, 98, 63, 70, 62, 86, 62, 69, 63, 86, 63, 59, 64, 63, 64, 68, 64, 86, 64, 58, 65, 86, 65, 53, 66, 86, 66, 52, 67, 86, 67, 51, 68, 86, 68, 46, 69, 86, 69, 45, 70, 90, 70, 94, 70, 100, 70, 45, 71, 60, 71, 82, 71, 89, 71, 95, 71, 100, 74, 51, 72, 58, 72, 52, 73, 57, 73, 53, 74, 58, 74, 54, 75, 100, 75, 55, 76, 100, 77, 55, 78, 62, 78, 75, 78, 100, 78, 55, 79, 59, 79, 87, 79, 100, 79, 88, 80, 100, 80, 89, 81, 100, 81, 90, 82, 100, 82, 53, 83, 75, 83, 91, 83, 100, 83, 54, 84, 87, 84, 92, 84, 100, 84, 55, 85, 87, 85, 93, 85, 100, 95, 59, 86, 86, 86, 60, 87, 78, 87, 60, 88, 66, 88, 59, 89, 64, 89, 58, 90, 63, 91, 58, 92, 64, 92, 58, 93, 73, 93, 58, 94, 78, 94, 58, 95, 83, 95, 58, 96, 100, 97, 59, 98, 100, 98, 60, 99, 100, 99, 71, 100, 100, 100, 82, 101, 100, 101, 92, 102, 100, 103, 91, 104, 100, 129, 90, 130, 100, 130, 89, 131, 100, 131, 88, 132, 100, 132, 85, 133, 100, 133, 78, 134, 100, 134);
    };
    TheHole.prototype.openFirstChest = function () {
        this.firstChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedHeartPendant", "You opened a chest and found a heart pendant!", "You gain a heart pendant."));
    };
    TheHole.prototype.openFourthChest = function () {
        this.fourthChestOpened = true;
        this.foundChocolateBars(4);
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You opened a chest and found four chocolate bars!", null, true));
    };
    TheHole.prototype.openSecondChest = function () {
        this.secondChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedFortressKey", "You opened a chest and found the desert fortress key!", "You gain the desert fortress key."));
    };
    TheHole.prototype.openThirdChest = function () {
        this.thirdChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedBlackMagicGrimoire", "You opened a chest and found a grimoire!", "You gain a black magic grimoire."));
    };
    TheHole.prototype.moveHorizontally = function () {
        var leftPressed = Keyboard.isKeyPressed("left");
        var rightPressed = Keyboard.isKeyPressed("right");
        if (leftPressed && !rightPressed) {
            this.getGame().getPlayer().move(new Pos(-1, 0));
            this.isGoingRight = false;
        }
        else if (rightPressed && !leftPressed) {
            this.getGame().getPlayer().move(new Pos(1, 0));
            this.isGoingRight = true;
        }
    };
    TheHole.prototype.thePlayerWon = function () {
        // If the player reached the bottom of the hole
        if (this.getGame().getPlayer().getGlobalPosition().y >= 134)
            return true;
        return false;
    };
    return TheHole;
})(Quest);
///<reference path="Quest.ts"/>
var TheSea = (function (_super) {
    __extends(TheSea, _super);
    // Constructor
    function TheSea(game) {
        _super.call(this, game, "You can move with the down and up arrow keys!");
        // Floors
        this.floors = [];
        // Generation projection (how many characters the player doesn't already see should we generate)
        this.generationProjection = 10;
        // The distance we've swimed so far
        this.distance = 0;
        // Min and max floor height
        this.floorMinHeight = 3;
        this.floorMaxHeight = 8;
        // Patterns stuff
        this.currentPattern = null;
        this.currentPatternLevel = null;
        // Last player movement
        this.lastPlayerMovement = new Pos(0, 0);
        // Did we already generate a sponge? Shell powder?
        this.spongeGenerated = false;
        this.shellPowderGenerated = false;
        // Resize the quest
        this.resizeQuest(100, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Gravity is disabled
        this.setGravityDisabled(true);
        this.setWormsLikeDisabled(true);
        // Add the player
        this.getGame().getPlayer().loadMediumCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 5));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Fill the floors array with null values
        for (var i = 0; i <= 99 + this.generationProjection; i++) {
            this.floors.push(null);
        }
        // Generate for the first time
        this.generate(0, 99 + this.generationProjection);
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You jump into the sea! You know you could find precious hidden treasures in the depths..."));
    }
    // willBeDisplayed()
    TheSea.prototype.willBeDisplayed = function () {
        // We call the mother willBeDisplayed()
        _super.prototype.willBeDisplayed.call(this);
        // Register hotkeys so that they can't be used by the player's browser
        this.getGame().addHotkey(new Hotkey("up", null));
        this.getGame().addHotkey(new Hotkey("down", null));
    };
    // Public methods
    TheSea.prototype.addBigShark = function (pos) {
        var bigShark = new BigShark(this, pos);
        bigShark.setHealthBar(new QuestEntityHealthBar(bigShark, new Pos(47, 1)));
        if (this.addEntity(bigShark))
            return bigShark; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addJellyFish = function (pos) {
        var jellyFish = new JellyFish(this, pos);
        jellyFish.setHealthBar(new QuestEntityHealthBar(jellyFish, new Pos(6, 1), new Pos(0, 0)));
        if (this.addEntity(jellyFish))
            return jellyFish; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addMediumFish = function (pos) {
        var mediumFish = new MediumFish(this, pos);
        mediumFish.setHealthBar(new QuestEntityHealthBar(mediumFish, new Pos(8, 1), new Pos(0, 0)));
        if (this.addEntity(mediumFish))
            return mediumFish; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addMiniShark = function (pos) {
        var miniShark = new MiniShark(this, pos);
        miniShark.setHealthBar(new QuestEntityHealthBar(miniShark, new Pos(19, 1)));
        if (this.addEntity(miniShark))
            return miniShark; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addSeahorse = function (pos, intendedXPosition) {
        var seahorse = new Seahorse(this, pos, intendedXPosition);
        seahorse.setHealthBar(new QuestEntityHealthBar(seahorse, new Pos(4, 1)));
        if (this.addEntity(seahorse))
            return seahorse; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addSeaSnake = function (pos) {
        var seaSnake = new SeaSnake(this, pos);
        if (this.addEntity(seaSnake))
            return seaSnake; // We return it
        return null; // Else we return null
    };
    TheSea.prototype.addSmallestFish = function (pos) {
        var smallestFish = new SmallestFish(this, pos);
        smallestFish.setHealthBar(new QuestEntityHealthBar(smallestFish, new Pos(3, 1)));
        if (this.addEntity(smallestFish))
            return smallestFish; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.castJump = function () { }; // We can't jump in the sea !
    TheSea.prototype.castPlayerAcidRain = function () {
        // We cast from 0 to 100, not strictly around the player as usual
        _super.prototype.castPlayerAcidRain.call(this, null, null, 0, 100);
    };
    TheSea.prototype.castPlayerTeleport = function () {
        // We teleport, be we stay on the left side of the quest
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(0, this.getRealQuestSize().y - 1));
    };
    TheSea.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(false);
        entity.getQuestEntityMovement().setWormsLike(false);
    };
    TheSea.prototype.endQuest = function (win) {
        // Variable used to generate the winning message
        var comment;
        // We add some messages
        if (win) {
            switch (Random.between(0, 8)) {
                case 0:
                    comment = "by jumping on a jellyfish";
                    break;
                case 1:
                    comment = "by hanging onto a sea turtle";
                    break;
                case 2:
                    comment = "by following a dolphin";
                    break;
                case 3:
                    comment = "(you don't know how)";
                    break;
                case 4:
                    comment = "by hanging onto a shark's fin";
                    break;
                case 5:
                    comment = "by following a whale";
                    break;
                case 6:
                    comment = "by following a squid";
                    break;
                case 7:
                    comment = "by asking your way to a shrimp";
                    break;
                case 8:
                    comment = "thanks to some updrafts";
                    break;
            }
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You almost died in the sea but managed to get to the surface in time " + comment + "."));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the sea."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    // getLeftLimit()
    TheSea.prototype.getLeftLimit = function () {
        return 100;
    };
    TheSea.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so, end the quest (he won!!) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Add some enemies
            this.handlePatterns(100, 115);
            // Move the player vertically
            this.moveVertically();
            // Update entities
            this.updateEntities();
            // Force scrolling of everything
            this.globalScrolling();
        }
        // Draw
        this.preDraw();
        this.drawSea();
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Public getters
    TheSea.prototype.getDistance = function () {
        return this.distance;
    };
    TheSea.prototype.getFloorMaxHeight = function () {
        return this.floorMaxHeight;
    };
    TheSea.prototype.getFloorMinHeight = function () {
        return this.floorMinHeight;
    };
    TheSea.prototype.getLastPlayerMovement = function () {
        return this.lastPlayerMovement;
    };
    TheSea.prototype.getRightLimit = function () {
        return 70;
    };
    // Private methods    
    TheSea.prototype.addFloor = function (index, type, height, previousFloor) {
        if (previousFloor === void 0) { previousFloor = null; }
        // Add the floor
        this.floors[index] = new TheSeaFloor(type, height, previousFloor);
        // If the type is normal
        if (type == TheSeaFloorType.NORMAL)
            this.addFloorCollisionBox(new Pos(index, this.getRealQuestSize().y - (height - 1)), new Pos(1, height - 1)); // Add a floor collision box at height - 1
        else
            this.addFloorCollisionBox(new Pos(index, this.getRealQuestSize().y - height), new Pos(1, height)); // Add a floor collision box at height
    };
    TheSea.prototype.addFloorCollisionBox = function (pos, size) {
        var wall = new Wall(this, pos);
        wall.addBox(new Pos(0, 0), size);
        this.addEntity(wall);
    };
    TheSea.prototype.drawFloors = function () {
        for (var i = 0; i <= 99; i++) {
            if (this.floors[i] != null) {
                this.floors[i].draw(this.getRenderArea(), this.getRealQuestPosition().y + this.getRealQuestSize().y, i);
            }
        }
    };
    TheSea.prototype.drawSea = function () {
        this.drawFloors();
    };
    TheSea.prototype.generate = function (x1, x2) {
        this.generateFloors(x1, x2);
        this.generateShellPowder(x1, x2);
        this.generateSponge(x1, x2);
        this.generatePlants(x1, x2);
    };
    TheSea.prototype.generateFloors = function (x1, x2) {
        // Create variables which will be useful
        var type;
        for (var i = x1; i <= x2; i++) {
            // If we're placing the first floor
            if (i == 0) {
                // We place it at a random height and with the normal type
                this.addFloor(i, TheSeaFloorType.NORMAL, Random.between(this.floorMinHeight, this.floorMaxHeight));
            }
            else {
                // Init the variables
                type = null;
                // If we want to keep the same type and it's possible to do so
                if (Random.oneChanceOutOf(15 - this.floors[i - 1].getHowManyFloorsOfTheSameTypeBefore()) == false && ((this.floors[i - 1].getType() == TheSeaFloorType.NORMAL) ||
                    (this.floors[i - 1].getType() == TheSeaFloorType.GOING_DOWN && this.floors[i - 1].getHeight() > this.floorMinHeight) ||
                    (this.floors[i - 1].getType() == TheSeaFloorType.GOING_UP && this.floors[i - 1].getHeight() < this.floorMaxHeight) // We want to keep going up and we're not too high : no problem
                )) {
                    // We will keep the same type as the previous floor
                    type = this.floors[i - 1].getType();
                }
                else {
                    // If the previous floor has a normal type
                    if (this.floors[i - 1].getType() == TheSeaFloorType.NORMAL) {
                        if (this.floors[i - 1].getHeight() == this.floorMinHeight)
                            type = TheSeaFloorType.GOING_UP; // If the previous floor was too low, we must go up
                        else if (this.floors[i - 1].getHeight() >= this.floorMaxHeight - 1)
                            type = TheSeaFloorType.GOING_DOWN; // If the previous floor was too high, we must go down
                        else {
                            // Else, we pick randomly the new type
                            if (Random.flipACoin())
                                type = TheSeaFloorType.GOING_UP;
                            else
                                type = TheSeaFloorType.GOING_DOWN;
                        }
                    }
                    else {
                        type = TheSeaFloorType.NORMAL;
                    }
                }
                // Create the floor from the type decided before
                switch (type) {
                    case TheSeaFloorType.NORMAL:
                        if (this.floors[i - 1].getType() == TheSeaFloorType.GOING_UP)
                            this.addFloor(i, TheSeaFloorType.NORMAL, this.floors[i - 1].getHeight() + 1, this.floors[i - 1]);
                        else
                            this.addFloor(i, TheSeaFloorType.NORMAL, this.floors[i - 1].getHeight(), this.floors[i - 1]);
                        break;
                    case TheSeaFloorType.GOING_DOWN:
                        this.addFloor(i, TheSeaFloorType.GOING_DOWN, this.floors[i - 1].getHeight() - 1, this.floors[i - 1]);
                        break;
                    case TheSeaFloorType.GOING_UP:
                        if (this.floors[i - 1].getType() == TheSeaFloorType.NORMAL)
                            this.addFloor(i, TheSeaFloorType.GOING_UP, this.floors[i - 1].getHeight(), this.floors[i - 1]);
                        else
                            this.addFloor(i, TheSeaFloorType.GOING_UP, this.floors[i - 1].getHeight() + 1, this.floors[i - 1]);
                        break;
                }
            }
        }
    };
    TheSea.prototype.generatePlants = function (x1, x2) {
        // Set some parameters important for the generation
        var minPlantNumber = 0;
        var maxPlantNumber = 10;
        // Create some variables which will be useful
        var thereIsAlreadyAPlant;
        // Iterate over newly generated floors, searching for one which could receive a plant
        for (var i = x1; i <= x2; i++) {
            if (Random.oneChanceOutOf(3) &&
                i >= 4 &&
                this.floors[i].getType() == TheSeaFloorType.NORMAL &&
                this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 4 // And there's at least 4 floors of the same type before
            ) {
                // Init the variable
                thereIsAlreadyAPlant = false;
                // Check if there is already a plant
                for (var j = i - 4; j <= i; j++) {
                    // If this floor already has a plant on it
                    if (this.floors[j].getHasAPlant() == true) {
                        thereIsAlreadyAPlant = true;
                        break;
                    }
                }
                // We add a plant here if there isn't already a plant on one of the floors
                if (thereIsAlreadyAPlant == false) {
                    // We add the plant
                    this.addEntity(new Plant(this, new Pos(i - 4, this.getRealQuestSize().y - this.floors[i].getHeight()), minPlantNumber, maxPlantNumber));
                    // We inform the floors that they now have a plant on them
                    for (var j = i - 4; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };
    TheSea.prototype.generateShellPowder = function (x1, x2) {
        // If we don't already have shell powder and no shell powder have been generated in this quest so far and the distance is at least 500
        if (Saving.loadBool("gridItemPossessedShellPowder") == false && this.shellPowderGenerated == false && this.distance >= 500) {
            // Iterate over newly generated floors, searching for one which could receive the powder
            for (var i = x1; i <= x2; i++) {
                if (i >= 6 &&
                    this.floors[i].getType() == TheSeaFloorType.NORMAL &&
                    this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 6 // And there's at least 6 floors of the same type before
                ) {
                    // Check if there is already a plant, if so return
                    for (var j = i - 6; j <= i; j++) {
                        // If this floor already has a plant on it, return
                        if (this.floors[j].getHasAPlant() == true)
                            return;
                    }
                    // Add the powder and change the shellPowderGenerated bool
                    this.shellPowderGenerated = true;
                    this.addEntity(new ShellPowder(this, new Pos(i - 6, this.getRealQuestSize().y - this.floors[i].getHeight())));
                    this.getLastEntity().setHealthBar(new QuestEntityHealthBar(this.getLastEntity(), new Pos(6, 1)));
                    // Inform the floors that they now have a plant on them
                    for (var j = i - 6; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };
    TheSea.prototype.generateSponge = function (x1, x2) {
        // If we don't already have a sponge and no sponge have been generated in this quest so far and the distance is at least 793
        if (Saving.loadBool("gridItemPossessedSponge") == false && this.spongeGenerated == false && this.distance >= 793) {
            // Iterate over newly generated floors, searching for one which could receive a sponge
            for (var i = x1; i <= x2; i++) {
                if (i >= 6 &&
                    this.floors[i].getType() == TheSeaFloorType.NORMAL &&
                    this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 6 // And there's at least 6 floors of the same type before
                ) {
                    // Check if there is already a plant, if so return
                    for (var j = i - 6; j <= i; j++) {
                        // If this floor already has a plant on it, return
                        if (this.floors[j].getHasAPlant() == true)
                            return;
                    }
                    // Add the sponge and change the spongeGenerated bool
                    this.spongeGenerated = true;
                    this.addEntity(new Sponge(this, new Pos(i - 6, this.getRealQuestSize().y - this.floors[i].getHeight())));
                    this.getLastEntity().setHealthBar(new QuestEntityHealthBar(this.getLastEntity(), new Pos(6, 1)));
                    // Inform the floors that they now have a plant on them (well, actually its a sponge, but these "animals" looks kind of like plants, so don't worry about that)
                    for (var j = i - 6; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };
    TheSea.prototype.globalScrolling = function () {
        // How much do we have to scroll ?
        var scrollingXOffset = -(this.getGame().getPlayer().getCharacterType() == PlayerCharacterType.MEDIUM ? this.getGame().getPlayer().getGlobalPosition().x : this.getGame().getPlayer().getGlobalPosition().x - 2);
        // If we should scroll
        if (scrollingXOffset < 0) {
            // Set the x last player movement
            this.lastPlayerMovement.x = -scrollingXOffset;
            // Increase the distance
            this.distance += -scrollingXOffset;
            // Scroll entities
            this.forceMovingAllEntities(new Pos(scrollingXOffset, 0));
            // Scroll the floor
            this.scrollFloor(-scrollingXOffset);
            // Generate new things to fill the new area
            this.generate(100 + scrollingXOffset + this.generationProjection, 99 + this.generationProjection);
        }
        else {
            // Set the x last player movement
            this.lastPlayerMovement.x = 0;
        }
    };
    TheSea.prototype.handlePatterns = function (x1, x2) {
        // If the pattern is null or done, we need a new pattern
        if (this.currentPattern == null || this.currentPattern.isPatternDone()) {
            // If the level is null, we begin with level 0
            if (this.currentPatternLevel == null)
                this.currentPatternLevel = new TheSeaPatternLevel_Level0(this);
            else if (this.currentPatternLevel.isLevelDone())
                this.currentPatternLevel = this.currentPatternLevel.getNextLevel();
            // We get the new pattern from the current level
            this.currentPattern = this.currentPatternLevel.getPattern(this.distance);
        }
        // We run the pattern
        this.currentPattern.run(x1, x2);
    };
    TheSea.prototype.moveVertically = function () {
        var upPressed = Keyboard.isKeyPressed("up");
        var downPressed = Keyboard.isKeyPressed("down");
        if (upPressed && !downPressed) {
            this.getGame().getPlayer().move(new Pos(0, -1));
            this.lastPlayerMovement.y = -1;
        }
        else if (downPressed && !upPressed) {
            this.getGame().getPlayer().move(new Pos(0, 1));
            this.lastPlayerMovement.y = 1;
        }
    };
    TheSea.prototype.scrollFloor = function (howMany) {
        for (var i = howMany; i <= 99 + this.generationProjection; i++) {
            this.floors[i - howMany] = this.floors[i];
        }
    };
    return TheSea;
})(Quest);
var TheSeaFloor = (function () {
    // Constructor
    function TheSeaFloor(type, height, previousFloor) {
        if (previousFloor === void 0) { previousFloor = null; }
        // Does this floor have a plant on it ?
        this.hasAPlant = false;
        this.type = type;
        this.height = height;
        // If the previous floor is null or has a different type
        if (previousFloor == null || previousFloor.getType() != this.type) {
            // There's no floor of the same type before
            this.howManyFloorsOfTheSameTypeBefore = 0;
        }
        else {
            // We take the howManyFloorsOfTheSameTypeBefore of the previous floor and we add one
            this.howManyFloorsOfTheSameTypeBefore = previousFloor.howManyFloorsOfTheSameTypeBefore + 1;
        }
        // Special character stuff
        if (Random.oneChanceOutOf(3) && (previousFloor == null || previousFloor.getHasSpecialCharacter() == false)) {
            // We will have a special character
            this.hasSpecialCharacter = true;
            // Set the height
            this.specialCharacterHeight = Random.between(0, this.height - 1);
            // Set the character
            if (Random.oneChanceOutOf(4)) {
                this.specialCharacter = "^";
            }
            else {
                this.specialCharacter = "-";
            }
        }
        else {
            // We won't have a special character
            this.hasSpecialCharacter = false;
        }
    }
    // Public methods
    TheSeaFloor.prototype.draw = function (renderArea, floorPosition, xPosition) {
        // We can draw different characters for the floor, depending on the type
        switch (this.type) {
            case TheSeaFloorType.NORMAL:
                renderArea.drawString("_", xPosition, floorPosition - this.height);
                break;
            case TheSeaFloorType.GOING_DOWN:
                renderArea.drawString("\\", xPosition, floorPosition - this.height);
                break;
            case TheSeaFloorType.GOING_UP:
                renderArea.drawString("/", xPosition, floorPosition - this.height);
                break;
        }
        // If we have a special character
        if (this.hasSpecialCharacter) {
            // We draw it
            renderArea.drawString(this.specialCharacter, xPosition, floorPosition - this.specialCharacterHeight);
        }
    };
    // Pubic getters
    TheSeaFloor.prototype.getHasAPlant = function () {
        return this.hasAPlant;
    };
    TheSeaFloor.prototype.getHasSpecialCharacter = function () {
        return this.hasSpecialCharacter;
    };
    TheSeaFloor.prototype.getHeight = function () {
        return this.height;
    };
    TheSeaFloor.prototype.getHowManyFloorsOfTheSameTypeBefore = function () {
        return this.howManyFloorsOfTheSameTypeBefore;
    };
    TheSeaFloor.prototype.getType = function () {
        return this.type;
    };
    // Public setters
    TheSeaFloor.prototype.setHasAPlant = function (hasAPlant) {
        this.hasAPlant = hasAPlant;
    };
    return TheSeaFloor;
})();
var TheSeaFloorType;
(function (TheSeaFloorType) {
    TheSeaFloorType[TheSeaFloorType["NORMAL"] = 0] = "NORMAL";
    TheSeaFloorType[TheSeaFloorType["GOING_DOWN"] = 1] = "GOING_DOWN";
    TheSeaFloorType[TheSeaFloorType["GOING_UP"] = 2] = "GOING_UP";
})(TheSeaFloorType || (TheSeaFloorType = {}));
var TheSeaPattern = (function () {
    // Constructor
    function TheSeaPattern(theSea, initialDistance) {
        this.theSea = theSea;
        this.initialDistance = initialDistance;
    }
    // Public methods
    TheSeaPattern.prototype.isPatternDone = function () {
        return false;
    };
    TheSeaPattern.prototype.run = function (x1, x2) {
    };
    // Public getters
    TheSeaPattern.prototype.getInitialDistance = function () {
        return this.initialDistance;
    };
    TheSeaPattern.prototype.getTheSea = function () {
        return this.theSea;
    };
    return TheSeaPattern;
})();
var TheSeaPatternLevel = (function () {
    // Constructor
    function TheSeaPatternLevel(theSea) {
        // How many patterns launched already ?
        this.howManyPatterns = 0;
        this.theSea = theSea;
    }
    // Public methods
    TheSeaPatternLevel.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel(this.theSea);
    };
    TheSeaPatternLevel.prototype.getPattern = function (initialDistance) {
        return new TheSeaPattern(this.theSea, initialDistance);
    };
    TheSeaPatternLevel.prototype.increaseHowManyPatterns = function () {
        this.howManyPatterns += 1;
    };
    TheSeaPatternLevel.prototype.isLevelDone = function () {
        return false;
    };
    // Public getters
    TheSeaPatternLevel.prototype.getHowManyPatterns = function () {
        return this.howManyPatterns;
    };
    TheSeaPatternLevel.prototype.getTheSea = function () {
        return this.theSea;
    };
    return TheSeaPatternLevel;
})();
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Boss0 = (function (_super) {
    __extends(TheSeaPatternLevel_Boss0, _super);
    // Constructor
    function TheSeaPatternLevel_Boss0(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Boss0.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level1(this.getTheSea());
    };
    TheSeaPatternLevel_Boss0.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        return new TheSeaPattern_Boss0_Shapes(this.getTheSea(), initialDistance);
    };
    TheSeaPatternLevel_Boss0.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 1)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Boss0;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Boss1 = (function (_super) {
    __extends(TheSeaPatternLevel_Boss1, _super);
    // Constructor
    function TheSeaPatternLevel_Boss1(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Boss1.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level2(this.getTheSea());
    };
    TheSeaPatternLevel_Boss1.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        return new TheSeaPattern_Boss1_Seahorses(this.getTheSea(), initialDistance);
    };
    TheSeaPatternLevel_Boss1.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 1)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Boss1;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level0 = (function (_super) {
    __extends(TheSeaPatternLevel_Level0, _super);
    // Constructor
    function TheSeaPatternLevel_Level0(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level0.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Boss0(this.getTheSea());
    };
    TheSeaPatternLevel_Level0.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        switch (Random.upTo(2)) {
            case 0:
                return new TheSeaPattern_MaybeOneSmallestFish(this.getTheSea(), initialDistance);
                break;
            case 1:
                return new TheSeaPattern_OneSmallestFish(this.getTheSea(), initialDistance);
                break;
            case 2:
                return new TheSeaPattern_MaybeOneMediumFish(this.getTheSea(), initialDistance);
                break;
        }
    };
    TheSeaPatternLevel_Level0.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 2)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Level0;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level1 = (function (_super) {
    __extends(TheSeaPatternLevel_Level1, _super);
    // Constructor
    function TheSeaPatternLevel_Level1(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level1.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Boss1(this.getTheSea());
    };
    TheSeaPatternLevel_Level1.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        switch (Random.upTo(1)) {
            case 0:
                return new TheSeaPattern_LotOfMiniSharks(this.getTheSea(), initialDistance);
                break;
            case 1:
                return new TheSeaPattern_JellyFishStorm(this.getTheSea(), initialDistance);
                break;
        }
    };
    TheSeaPatternLevel_Level1.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 2)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Level1;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level2 = (function (_super) {
    __extends(TheSeaPatternLevel_Level2, _super);
    // Constructor
    function TheSeaPatternLevel_Level2(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level2.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level2(this.getTheSea());
    };
    TheSeaPatternLevel_Level2.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        // If this is the first pattern, then we return the big sharks pattern
        if (this.getHowManyPatterns() == 1)
            return new TheSeaPattern_BigSharks(this.getTheSea(), initialDistance);
        else
            return new TheSeaPattern_SeaSnakesForever(this.getTheSea(), initialDistance);
    };
    TheSeaPatternLevel_Level2.prototype.isLevelDone = function () {
        return false;
    };
    return TheSeaPatternLevel_Level2;
})(TheSeaPatternLevel);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_BigSharks = (function (_super) {
    __extends(TheSeaPattern_BigSharks, _super);
    // Constructor
    function TheSeaPattern_BigSharks(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_BigSharks.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 125)
            return true;
        return false;
    };
    TheSeaPattern_BigSharks.prototype.run = function (x1, x2) {
        if (this.getTheSea().getDistance() % 60 == 0)
            this.getTheSea().addBigShark(new Pos(x2, Random.fromArray([2, 6])));
    };
    return TheSeaPattern_BigSharks;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_Boss0_Shapes = (function (_super) {
    __extends(TheSeaPattern_Boss0_Shapes, _super);
    // Constructor
    function TheSeaPattern_Boss0_Shapes(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Fishes of the squares
        this.fishes = [];
        // Did we add the fishes already ?
        this.fishesAdded = false;
        // Are fishes moving right now ?
        this.fishesAreMoving = true;
        // Set the shape type
        this.shapeType = Random.upTo(2);
    }
    // Public methods    
    TheSeaPattern_Boss0_Shapes.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 50)
            return true;
        return false;
    };
    TheSeaPattern_Boss0_Shapes.prototype.run = function (x1, x2) {
        // If it's time to add the fishes
        if (this.fishesAdded == false && this.getTheSea().getDistance() > this.getInitialDistance() + 30) {
            this.fishesAdded = true;
            this.addShape(x1, 1);
            this.addShape(x1, 8);
            this.addShape(x1, 15);
            this.addShape(x1 + 15, 0);
            this.addShape(x1 + 15, 7);
            this.addShape(x1 + 15, 14);
            this.addShape(x1 + 30, 1);
            this.addShape(x1 + 30, 8);
            this.addShape(x1 + 30, 15);
        }
        // Handle fishes movement (to make them stop if the player stop moving)
        this.handleFishesMovement();
    };
    // Private methods
    TheSeaPattern_Boss0_Shapes.prototype.addFish = function (smallestFish) {
        if (smallestFish != null)
            this.fishes.push(smallestFish);
    };
    TheSeaPattern_Boss0_Shapes.prototype.addCross = function (x, y) {
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x, y + 1)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 3, y + 2)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 6, y + 3)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, y + 4)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x, y + 4)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 3, y + 3)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 6, y + 2)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, y + 1)));
    };
    TheSeaPattern_Boss0_Shapes.prototype.addLines = function (x, y) {
        for (var i = x; i <= x + 9; i += 3) {
            for (var j = y; j <= y + 4; j += 2) {
                this.addFish(this.getTheSea().addSmallestFish(new Pos(i, j)));
            }
        }
    };
    TheSeaPattern_Boss0_Shapes.prototype.addShape = function (x, y) {
        // Call a random shape method
        switch (this.shapeType) {
            case 0:
                this.addSquare(x, y);
                break;
            case 1:
                this.addLines(x, y);
                break;
            case 2:
                this.addCross(x, y);
                break;
        }
    };
    TheSeaPattern_Boss0_Shapes.prototype.addSquare = function (x, y) {
        // Top & bottom
        for (var i = x; i <= x + 9; i += 3) {
            // Top of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(i, y)));
            // Bottom of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(i, y + 5)));
        }
        // Left & right
        for (var j = y; j <= y + 4; j++) {
            // Left of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(x, j)));
            // Right of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, j)));
        }
    };
    TheSeaPattern_Boss0_Shapes.prototype.handleFishesMovement = function () {
        // If fishes are moving but shouldn't be
        if (this.fishesAreMoving == true && this.getTheSea().getLastPlayerMovement().x == 0 && this.getTheSea().getGame().getPlayer().getGlobalPosition().y >= 20) {
            // Fishes are not moving any more
            this.fishesAreMoving = false;
            for (var i = 0; i < this.fishes.length; i++) {
                this.fishes[i].setQuestEntityMovement(new QuestEntityMovement(new Pos(0, 0)));
            }
        }
        else if (this.fishesAreMoving == false && (this.getTheSea().getLastPlayerMovement().x > 0 || this.getTheSea().getGame().getPlayer().getGlobalPosition().y < 20)) {
            // Fishes are now moving
            this.fishesAreMoving = true;
            for (var i = 0; i < this.fishes.length; i++) {
                this.fishes[i].setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
            }
        }
    };
    return TheSeaPattern_Boss0_Shapes;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_Boss1_Seahorses = (function (_super) {
    __extends(TheSeaPattern_Boss1_Seahorses, _super);
    // Constructor
    function TheSeaPattern_Boss1_Seahorses(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.seahorses = [];
        this.seahorsesAdded = false;
        this.seaHorsesStopped = false;
        // The special seahorse wandering
        this.seahorseWandering = null;
        this.seahorseWanderingIsGoingUp = false;
        // The special seahorse following player
        this.seahorseFollowingPlayer = null;
    }
    // Public methods
    TheSeaPattern_Boss1_Seahorses.prototype.addSeahorse = function (seahorse) {
        if (seahorse != null) {
            this.seahorses.push(seahorse);
            return seahorse;
        }
        return null;
    };
    TheSeaPattern_Boss1_Seahorses.prototype.isPatternDone = function () {
        // Return false if seahorses aren't added yet
        if (this.seahorsesAdded == false)
            return false;
        // Return false if any of the seahorses is still alive
        for (var i = 0; i < this.seahorses.length; i++) {
            if (this.seahorses[i].getDead() == false)
                return false;
        }
        return true;
    };
    TheSeaPattern_Boss1_Seahorses.prototype.run = function (x1, x2) {
        // If we didn't add seahorses already (and we're far enough), we do so
        if (this.seahorsesAdded == false && this.getTheSea().getDistance() > this.getInitialDistance() + 30) {
            this.seahorsesAdded = true;
            // First column
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1, 2), 75));
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1, 12), 75));
            // Second column
            this.seahorseWandering = this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 7, 10), 81));
            // Third Column
            this.seahorseFollowingPlayer = this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 14, 10), 87));
            // Fourth column
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 21, 7), 93));
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 21, 17), 93));
        }
        // If we already added seahorses, we increase the moving counter
        if (this.seahorsesAdded == true && this.seaHorsesStopped == false) {
            // Find the seahorse which is the most on the left and store its x position
            var mostLeftX = 500;
            for (var i = 0; i < this.seahorses.length; i++) {
                if (this.seahorses[i].getGlobalPosition().x < mostLeftX)
                    mostLeftX = this.seahorses[i].getGlobalPosition().x;
            }
            // If this mostLeftX is <= 75
            if (mostLeftX - this.getTheSea().getGame().getPlayer().getGlobalPosition().x <= 75) {
                // We stop the seahorses
                this.seaHorsesStopped = true;
                for (var i = 0; i < this.seahorses.length; i++) {
                    this.seahorses[i].getQuestEntityMovement().setOffset(new Pos(0, 0));
                }
            }
        }
        // If the sea horses are stopped, we adjust their movement so that they swim with the player
        if (this.seaHorsesStopped) {
            for (var i = 0; i < this.seahorses.length; i++) {
                this.seahorses[i].tryToGoToIntendedXPosition(this.getTheSea().getGame().getPlayer().getGlobalPosition().x);
            }
        }
        // We handle the special seahorse wandering
        if (this.seahorseWandering != null) {
            if (this.seahorseWanderingIsGoingUp) {
                this.seahorseWandering.getQuestEntityMovement().getOffset().y = -1;
                if (this.seahorseWandering.getGlobalPosition().y <= 0)
                    this.seahorseWanderingIsGoingUp = false;
            }
            else {
                this.seahorseWandering.getQuestEntityMovement().getOffset().y = 1;
                if (this.seahorseWandering.getGlobalPosition().y >= 16)
                    this.seahorseWanderingIsGoingUp = true;
            }
        }
        // We handle the special seahorse following the player
        if (this.seahorseFollowingPlayer != null) {
            // By default we don't move
            this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = 0;
            // If the player is above
            if (this.getTheSea().getGame().getPlayer().getGlobalPosition().y < this.seahorseFollowingPlayer.getGlobalPosition().y - 1) {
                // If we're not too high
                if (this.seahorseFollowingPlayer.getGlobalPosition().y > 0)
                    // We go up
                    this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = -1;
            }
            else if (this.getTheSea().getGame().getPlayer().getGlobalPosition().y > this.seahorseFollowingPlayer.getGlobalPosition().y - 1) {
                // If we're not too low
                if (this.seahorseFollowingPlayer.getGlobalPosition().y < 17)
                    // We go down
                    this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = +1;
            }
        }
    };
    return TheSeaPattern_Boss1_Seahorses;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_JellyFishStorm = (function (_super) {
    __extends(TheSeaPattern_JellyFishStorm, _super);
    // Constructor
    function TheSeaPattern_JellyFishStorm(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_JellyFishStorm.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_JellyFishStorm.prototype.run = function (x1, x2) {
        if (Random.oneChanceOutOf(10))
            this.getTheSea().addJellyFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 6)));
    };
    return TheSeaPattern_JellyFishStorm;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_LotOfMiniSharks = (function (_super) {
    __extends(TheSeaPattern_LotOfMiniSharks, _super);
    // Constructor
    function TheSeaPattern_LotOfMiniSharks(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.sharksAdded = false;
    }
    // Public methods
    TheSeaPattern_LotOfMiniSharks.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 60)
            return true;
        return false;
    };
    TheSeaPattern_LotOfMiniSharks.prototype.run = function (x1, x2) {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 30 && this.sharksAdded == false) {
            this.sharksAdded = true;
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 2));
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 8));
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 14));
        }
    };
    return TheSeaPattern_LotOfMiniSharks;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_MaybeOneMediumFish = (function (_super) {
    __extends(TheSeaPattern_MaybeOneMediumFish, _super);
    // Constructor
    function TheSeaPattern_MaybeOneMediumFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_MaybeOneMediumFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_MaybeOneMediumFish.prototype.run = function (x1, x2) {
        if (Random.oneChanceOutOf(5)) {
            this.getTheSea().addMediumFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 4)));
        }
    };
    return TheSeaPattern_MaybeOneMediumFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_MaybeOneSmallestFish = (function (_super) {
    __extends(TheSeaPattern_MaybeOneSmallestFish, _super);
    // Constructor
    function TheSeaPattern_MaybeOneSmallestFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_MaybeOneSmallestFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_MaybeOneSmallestFish.prototype.run = function (x1, x2) {
        if (Random.flipACoin()) {
            this.getTheSea().addSmallestFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 2)));
        }
    };
    return TheSeaPattern_MaybeOneSmallestFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_OneSmallestFish = (function (_super) {
    __extends(TheSeaPattern_OneSmallestFish, _super);
    // Constructor
    function TheSeaPattern_OneSmallestFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_OneSmallestFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_OneSmallestFish.prototype.run = function (x1, x2) {
        this.getTheSea().addSmallestFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 2)));
    };
    return TheSeaPattern_OneSmallestFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_SeaSnakesForever = (function (_super) {
    __extends(TheSeaPattern_SeaSnakesForever, _super);
    // Constructor
    function TheSeaPattern_SeaSnakesForever(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.addedRedSharkFin = false;
        this.addedGreenSharkFin = false;
        this.addedPurpleSharkFin = false;
        this.nextSnakeIn = 0;
        this.nextSharkIn = Random.between(0, 50);
    }
    // Public methods
    TheSeaPattern_SeaSnakesForever.prototype.isPatternDone = function () {
        return false;
    };
    TheSeaPattern_SeaSnakesForever.prototype.run = function (x1, x2) {
        // Possibly add a snake
        this.nextSnakeIn -= 1;
        if (this.nextSnakeIn <= 0) {
            this.getTheSea().addSeaSnake(new Pos(x2, Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 12)));
            this.nextSnakeIn = 85 - Math.ceil((1 - Math.exp(-(this.getTheSea().getDistance() - this.getInitialDistance()) / 1500)) * 83);
        }
        // Possibly add a shark
        this.nextSharkIn -= 1;
        if (this.nextSharkIn <= 0) {
            // Store the shark
            var shark = this.getTheSea().addBigShark(new Pos(x2, Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 10)));
            // If a shark was added
            if (shark != null) {
                if (Saving.loadBool("gridItemPossessedRedSharkFin") == false && this.addedRedSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 150) {
                    shark.hasFin(BigSharkFinType.RED);
                    this.addedRedSharkFin = true;
                }
                else if (Saving.loadBool("gridItemPossessedGreenSharkFin") == false && this.addedGreenSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 700) {
                    shark.hasFin(BigSharkFinType.GREEN);
                    this.addedGreenSharkFin = true;
                }
                else if (Saving.loadBool("gridItemPossessedPurpleSharkFin") == false && this.addedPurpleSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 2500) {
                    shark.hasFin(BigSharkFinType.PURPLE);
                    this.addedPurpleSharkFin = true;
                }
            }
            // Set the next shark in
            this.nextSharkIn = 60 - Math.ceil((1 - Math.exp(-(this.getTheSea().getDistance() - this.getInitialDistance()) / 1500)) * 55);
        }
    };
    return TheSeaPattern_SeaSnakesForever;
})(TheSeaPattern);
///<reference path="House.ts"/>
var ThirdHouse = (function (_super) {
    __extends(ThirdHouse, _super);
    // Constructor
    function ThirdHouse(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The game running
        this.gameRunning = null;
        this.renderArea.resizeFromArray(Database.getAscii("places/village/thirdHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    ThirdHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willBeDisplayed()
    ThirdHouse.prototype.willBeDisplayed = function () {
        this.getGame().getQuestCallbackCollection().addCallback(this.runGame.bind(this));
        // Add some hotkeys
        this.getGame().addHotkey(new Hotkey("up", new CallbackCollection(this.pressedUpButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("down", new CallbackCollection(this.pressedDownButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("space", new CallbackCollection(this.pressedSpaceButton.bind(this))));
    };
    // Private methods
    ThirdHouse.prototype.addControls = function (x, y) {
        // If there's a game running, we add the controls
        if (this.gameRunning != null) {
            // UP button
            this.renderArea.addAsciiButton(x, x + 4, y, "thirdHouseUpButton");
            this.renderArea.addLinkCall(".thirdHouseUpButton", new CallbackCollection(this.pressedUpButton.bind(this)));
            // Space button
            this.renderArea.addAsciiButton(x + 7, x + 25, y + 1, "thirdHouseSpaceButton");
            this.renderArea.addLinkCall(".thirdHouseSpaceButton", new CallbackCollection(this.pressedSpaceButton.bind(this)));
            // DOWN button
            this.renderArea.addAsciiButton(x + 28, x + 34, y, "thirdHouseDownButton");
            this.renderArea.addLinkCall(".thirdHouseDownButton", new CallbackCollection(this.pressedDownButton.bind(this)));
        }
    };
    ThirdHouse.prototype.addInsertCandiesButtons = function (x, y) {
        // First button (10 candies)
        this.renderArea.addAsciiButton(x, x + 4, y, "thirdHouseInsert10CandiesButton");
        this.renderArea.addLinkCall(".thirdHouseInsert10CandiesButton", new CallbackCollection(this.insert10Candies.bind(this)));
        // Second button (1000 candies)
        this.renderArea.addAsciiButton(x, x + 4, y + 2, "thirdHouseInsert1000CandiesButton");
        this.renderArea.addLinkCall(".thirdHouseInsert1000CandiesButton", new CallbackCollection(this.insert1000Candies.bind(this)));
    };
    ThirdHouse.prototype.insert10Candies = function () {
        // If we have enough candies
        if (this.getGame().getCandies().getCurrent() >= 10) {
            // We pay the price
            this.getGame().getCandies().add(-10);
            // We launch the game
            this.gameRunning = new SuperRPG(this);
        }
    };
    ThirdHouse.prototype.insert1000Candies = function () {
        // If we have enough candies
        if (this.getGame().getCandies().getCurrent() >= 1000) {
            // We pay the price
            this.getGame().getCandies().add(-1000);
            // We launch the game
            this.gameRunning = new GalacticWars(this);
        }
    };
    ThirdHouse.prototype.pressedDownButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedDownButton();
    };
    ThirdHouse.prototype.pressedSpaceButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedSpaceButton();
    };
    ThirdHouse.prototype.pressedUpButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedUpButton();
    };
    ThirdHouse.prototype.runGame = function () {
        // If there's a game running, we run it
        if (this.gameRunning != null) {
            // If it should stop running
            if (this.gameRunning.run() == true) {
                this.gameRunning = null; // We set it to null
                // We update
                this.update();
                this.getGame().updatePlace();
            }
            else {
                // We update
                this.update();
                // We draw the game on the screen
                this.renderArea.drawArea(this.gameRunning.getRenderArea(), 19, 10);
                // We update at the game level
                this.getGame().updatePlace();
            }
        }
    };
    ThirdHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "thirdHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/thirdHouse"), 0, 3);
        // Add the buttons to insert candies
        this.addInsertCandiesButtons(25, 28);
        // Add the buttons to control the game
        this.addControls(29, 24);
    };
    return ThirdHouse;
})(House);
///<reference path="Place.ts"/>
var Treasure = (function (_super) {
    __extends(Treasure, _super);
    // Constructor
    function Treasure(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/treasure"), 57, 3);
        this.update();
    }
    // getRenderArea()
    Treasure.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Treasure.prototype.dig = function () {
        // We found the treasure
        Saving.saveBool("TheCavePattern_TreasureMapFoundTreasure", true);
        // Get it
        this.getGame().getChocolateBars().add(3);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Treasure.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "treasureBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/treasure"), 28, 3);
        // If we didn't find the treasure yet
        if (Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false) {
            // Add the button to get the treasure
            this.renderArea.addAsciiRealButton(Database.getText("treasureButtonDig"), 49, 14, "treasureButton", Database.getTranslatedText("treasureButtonDig"), true, -1, null, false);
            this.renderArea.addLinkCall(".treasureButton", new CallbackCollection(this.dig.bind(this)));
        }
        else {
            // Add the text
            this.renderArea.drawString(Database.getText("treasureButtonYouFound"), 49, 14);
            this.renderArea.drawString(Database.getTranslatedText("treasureButtonYouFound"), 49, 15, true);
        }
    };
    return Treasure;
})(Place);
///<reference path="QuestEntity.ts"/>
var TreeSpirit = (function (_super) {
    __extends(TreeSpirit, _super);
    // Constructor
    function TreeSpirit(quest, pos, groundYPosition) {
        _super.call(this, quest, pos, new Naming("A tree spirit", "a tree spirit"), new RenderArea(5, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(5, 2)), new CollisionBox(this, new Pos(1, 3), new Pos(3, 2))), new QuestEntityMovement());
        // Set the ground y position from the value given in parameter
        this.groundYPosition = groundYPosition;
        // Set the default values for ammunition related variables
        this.maxAmmunition = 5;
        this.ammunition = 5;
        this.ammunitionTimer = 0;
        // Set the default values for magic spines related variables
        this.magicSpineTimer = 0;
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/treeSpirit"));
        this.setTransparency(new RenderTransparency(" "));
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(100);
        this.setHp(100);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Spines", "spines"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(7, 6))), 2));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // update()
    TreeSpirit.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().plus(new Pos(2, 0)).getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition());
        // Handle ammunition timer
        if (this.ammunitionTimer <= 0) {
            if (this.ammunition < this.maxAmmunition)
                this.ammunition += 1;
            this.ammunitionTimer = 20;
        }
        else
            this.ammunitionTimer -= 1;
        // Handle magic spine timer
        if (this.magicSpineTimer > 0)
            this.magicSpineTimer -= 1;
        // Set the movement depending on the distance from the player
        this.getQuestEntityMovement().setOffset(new Pos((distanceFromPlayer.x > 0 ? -1 : 1), 0));
        // If the player is above the ground position
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y < this.groundYPosition) {
            // If the timer is okay
            if (this.magicSpineTimer <= 0) {
                // We shoot a magic spine on the left or on the right
                if (this.shootMagicSpine((distanceFromPlayer.x > 0 ? true : false))) {
                    this.ammunition -= 1; // We lower the ammunition
                    this.magicSpineTimer = 12; // We set the countdown
                }
            }
        }
        // Call the mother class update
        _super.prototype.update.call(this);
    };
    // willDie()
    TreeSpirit.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(100 + 50 * Random.upTo(10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    TreeSpirit.prototype.shootMagicSpine = function (onTheLeft) {
        // Create the magic spine
        var magicSpine = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos((onTheLeft ? -3 : 5), 2)), new Naming("A magical spine", "a magical spine"), new Color(ColorType.TREE_SPIRIT_MAGIC_SPINE), new Pos(3, 1), 150, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical spine", "a magical spine")));
        // No target
        magicSpine.setTargetTypeNoTarget(new Pos((onTheLeft ? -2 : 2), 0));
        // Add the entity
        return this.getQuest().addEntity(magicSpine);
    };
    return TreeSpirit;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var TribalSpear = (function (_super) {
    __extends(TribalSpear, _super);
    // Constructor
    function TribalSpear() {
        _super.call(this, "eqItemWeaponTribalSpear", "eqItemWeaponTribalSpearName", "eqItemWeaponTribalSpearDescription", "eqItems/weapons/tribalSpear");
    }
    // Public getters
    TribalSpear.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A tribal spear", "a tribal spear"), player.getClassicCollisionBoxCollection(), 8);
        qew.getCloseCombatDelay().setFixedDelay(2);
        return qew;
    };
    return TribalSpear;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var TripodCamel = (function (_super) {
    __extends(TripodCamel, _super);
    // Constructor
    function TripodCamel(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tripod camel", "a tripod camel"), new RenderArea(7, 2), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 1), new Pos(5, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(7);
        this.setHp(7);
        // Set the ascii art and the transparent character
        if (Random.flipACoin())
            this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/tripodCamel1"));
        else
            this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/tripodCamel2"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its long neck", "its long neck"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(3, 3))), 5));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(6, 8);
    }
    // Public methods
    TripodCamel.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(20 + Random.upTo(12)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return TripodCamel;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Troll = (function (_super) {
    __extends(Troll, _super);
    // Constructor
    function Troll(quest, pos) {
        _super.call(this, quest, pos, new Naming("A troll", "a troll"), new RenderArea(15, 10), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(11, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(4, 1), new Pos(3, 3)), new CollisionBox(this, new Pos(9, 1), new Pos(6, 2)), new CollisionBox(this, new Pos(0, 4), new Pos(8, 4)), new CollisionBox(this, new Pos(2, 8), new Pos(5, 2)), new CollisionBox(this, new Pos(8, 4), new Pos(4, 2)), new CollisionBox(this, new Pos(11, 3), new Pos(2, 4)) // The lowest part of the bludgeon
        ), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(80);
        this.setHp(80);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/bridge/troll"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new Bludgeon(this.getQuest(), this, new Naming("Its bludgeon", "its bludgeon"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(17, 11))), 15));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(6);
    }
    // Public methods
    Troll.prototype.draw = function (renderArea) {
        _super.prototype.draw.call(this, renderArea);
        // We add the missing "<" on the troll's bludgeon as a tag
        renderArea.addTag(new RenderTagLt(this.getQuest().getRealQuestPosition().x + this.getGlobalPosition().x + this.getRenderAreaPosition().x + 9), this.getQuest().getRealQuestPosition().y + this.getGlobalPosition().y + this.getRenderAreaPosition().y + 1);
    };
    Troll.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(500), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponTrollBludgeon", "You picked up the troll's bludgeon from the floor", "You gain the troll's bludgeon"));
    };
    return Troll;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var TrollBludgeon = (function (_super) {
    __extends(TrollBludgeon, _super);
    // Constructor
    function TrollBludgeon() {
        _super.call(this, "eqItemWeaponTrollBludgeon", "eqItemWeaponTrollBludgeonName", "eqItemWeaponTrollBludgeonDescription", "eqItems/weapons/trollBludgeon");
    }
    // Public getters
    TrollBludgeon.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new PlayerBludgeon(quest, player, new Naming("The troll's bludgeon", "the troll's bludgeon"), player.getClassicCollisionBoxCollection());
        qew.getCloseCombatDelay().setFixedDelay(6);
        return qew;
    };
    return TrollBludgeon;
})(EqItem);
///<reference path="GridItem.ts"/>
var UnicornHorn = (function (_super) {
    __extends(UnicornHorn, _super);
    function UnicornHorn() {
        _super.apply(this, arguments);
    }
    UnicornHorn.prototype.update = function (player, quest) {
        player.heal(3);
    };
    return UnicornHorn;
})(GridItem);
///<reference path="Place.ts"/>
var Village = (function (_super) {
    __extends(Village, _super);
    // Constructor
    function Village(game) {
        _super.call(this, game);
        // Render areas
        this.renderArea = new RenderArea();
        // Smoke
        this.smokes = [new Smoke(8, 26, 1, 3, 1, 3),
            new Smoke(64, 26, 2, 4, 0, 0),
            new Smoke(80, 26, 1, 3, 1, 3),
            new Smoke(59, 42, 1, 3, 1, 3)
        ];
        // Resize the area
        this.renderArea.resizeFromArray(Database.getAscii("places/village/village"), 0, 3);
        // Update
        this.update();
    }
    // Public methods    
    Village.prototype.willBeDisplayed = function () {
        this.getGame().getOneSecondCallbackCollection().addCallback(this.actionSmokes.bind(this));
        this.update(); // We update. This is needed because the village is the first thing to be loaded when we launch the game
    };
    // getRenderArea()
    Village.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Village.prototype.actionSmokes = function () {
        // We make the smokes move
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].move();
        }
        // We update on the page
        this.update();
        this.getGame().updatePlace();
    };
    Village.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button only if we possess the main map
        if (Saving.loadBool("gridItemPossessedMainMap"))
            this.addBackToMainMapButton(this.renderArea, "villageBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/village/village"), 0, 3);
        // Draw smokes
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].draw(this.renderArea);
        }
        // Load various things
        this.loadFirstHouse(2, 3 + 24);
        this.loadSecondHouse(18, 3 + 21);
        this.loadThirdHouse(32, 3 + 25);
        this.loadForge(61, 3 + 24);
        this.loadFourthHouse(77, 3 + 24);
        this.loadFifthHouse(91, 3 + 25);
    };
    // Private "go to" methods
    Village.prototype.goToFirstHouse = function () {
        alert("yay");
    };
    Village.prototype.goToSecondHouse = function () {
        this.getGame().setPlace(new SecondHouse(this.getGame()));
    };
    Village.prototype.goToThirdHouse = function () {
        this.getGame().setPlace(new ThirdHouse(this.getGame()));
    };
    Village.prototype.goToForge = function () {
        this.getGame().setPlace(new Forge(this.getGame()));
    };
    Village.prototype.goToFourthHouse = function () {
        this.getGame().setPlace(new FourthHouse(this.getGame()));
    };
    Village.prototype.goToFifthHouse = function () {
        this.getGame().setPlace(new FifthHouse(this.getGame()));
    };
    // Private "load" methods
    Village.prototype.loadFirstHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiNinjaButtons("mapVillageFirstHouseButton", x + 6, x + 8, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageLockedHouseComment"), Database.getTranslatedText("mapVillageLockedHouseComment"), "mapVillageFirstHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageFirstHouseButton, .mapVillageFirstHouseComment", ".mapVillageFirstHouseComment");
    };
    Village.prototype.loadSecondHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageSecondHouseButton", x + 1, x + 9, y, x, x + 10, y + 1, x - 1, x + 11, y + 2, x, x + 10, y + 3, x, x + 10, y + 4, x, x + 10, y + 5, x, x + 10, y + 6, x, x + 10, y + 7, x, x + 10, y + 8);
        // Comments
        this.renderArea.addFullComment(x + 5, y + 9, Database.getText("mapVillageTheShopComment"), Database.getTranslatedText("mapVillageTheShopComment"), "mapVillageSecondHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageSecondHouseButton, .mapVillageSecondHouseComment", ".mapVillageSecondHouseComment");
        this.renderArea.addLinkCall(".mapVillageSecondHouseButton, .mapVillageSecondHouseComment", new CallbackCollection(this.goToSecondHouse.bind(this)));
    };
    Village.prototype.loadThirdHouse = function (x, y) {
        // If we have the key to the third house
        if (Saving.loadBool("gridItemPossessedThirdHouseKey")) {
            // Buttons
            this.renderArea.addMultipleAsciiButtons("mapVillageThirdHouseButton", x + 1, x + 7, y, x, x + 8, y + 1, x - 1, x + 9, y + 2, x, x + 8, y + 3, x, x + 8, y + 4);
            // Comments
            this.renderArea.addFullComment(x + 4, y + 5, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageThirdHouseComment");
            // Interactions
            this.renderArea.addLinkOver(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", ".mapVillageThirdHouseComment");
            this.renderArea.addLinkCall(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", new CallbackCollection(this.goToThirdHouse.bind(this)));
        }
        else {
            // Buttons
            this.renderArea.addMultipleAsciiNinjaButtons("mapVillageThirdHouseButton", x + 1, x + 7, y, x, x + 8, y + 1, x - 1, x + 9, y + 2, x, x + 8, y + 3, x, x + 8, y + 4);
            // Comments
            this.renderArea.addFullComment(x + 4, y + 5, Database.getText("mapVillageLockedHouseComment"), Database.getTranslatedText("mapVillageLockedHouseComment"), "mapVillageThirdHouseComment");
            // Interactions
            this.renderArea.addLinkOver(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", ".mapVillageThirdHouseComment");
        }
    };
    Village.prototype.loadForge = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageForgeButton", x + 3, x + 6, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageForgeComment"), Database.getTranslatedText("mapVillageForgeComment"), "mapVillageForgeComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageForgeButton, .mapVillageForgeComment", ".mapVillageForgeComment");
        this.renderArea.addLinkCall(".mapVillageForgeButton, .mapVillageForgeComment", new CallbackCollection(this.goToForge.bind(this)));
    };
    Village.prototype.loadFourthHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageFourthHouseButton", x + 3, x + 5, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageFourthHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageFourthHouseButton, .mapVillageFourthHouseComment", ".mapVillageFourthHouseComment");
        this.renderArea.addLinkCall(".mapVillageFourthHouseButton, .mapVillageFourthHouseComment", new CallbackCollection(this.goToFourthHouse.bind(this)));
    };
    Village.prototype.loadFifthHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageFifthHouseButton", x + 1, x + 9, y, x, x + 10, y + 1, x - 1, x + 11, y + 2, x, x + 10, y + 3, x, x + 10, y + 4);
        // Comments
        this.renderArea.addFullComment(x + 5, y + 5, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageFifthHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageFifthHouseButton, .mapVillageFifthHouseComment", ".mapVillageFifthHouseComment");
        this.renderArea.addLinkCall(".mapVillageFifthHouseButton, .mapVillageFifthHouseComment", new CallbackCollection(this.goToFifthHouse.bind(this)));
    };
    return Village;
})(Place);
///<reference path="QuestEntity.ts"/>
var Wall = (function (_super) {
    __extends(Wall, _super);
    // Constructor
    function Wall(quest, pos) {
        _super.call(this, quest, pos, new Naming("A wall", "a wall"), null, new Pos(0, 0), new CollisionBoxCollection());
    }
    // Public method
    Wall.prototype.addBox = function (pos, size) {
        this.getCbc().addCollisionBox(new CollisionBox(this, pos, size));
    };
    Wall.prototype.removeBoxes = function () {
        this.getCbc().removeBoxes();
    };
    return Wall;
})(QuestEntity);
///<reference path="Place.ts"/>
// Candies stuff
Saving.registerBool("wishingWellFirstCandyThrown", false);
Saving.registerNumber("wishingWellPreviousCandyWishPrice", 1);
Saving.registerNumber("wishingWellCurrentCandyWishPrice", 1);
// Lollipops stuff
Saving.registerBool("wishingWellFirstLollipopThrown", false);
Saving.registerNumber("wishingWellCurrentLollipopWishPrice", 1);
// How many chocolate bars did we threw?
Saving.registerBool("wishingWellWeAreEnchanting", false); // If true, it means a chocolate bar was thrown and we're waiting for the player to choose its enchantment
Saving.registerNumber("wishingWellHowManyChocolateBarsThrown", 0);
// How many pains au chocolat did we threw?
Saving.registerBool("wishingWellWeArePainAuChocolating", false); // If true, it means a pain au chocolat was thrown and we're waiting for the player to choose its reward
Saving.registerNumber("wishingWellHowManyPainsAuChocolatThrown", 0);
// Chocolate bars stuff
Saving.registerBool;
var WishingWell = (function (_super) {
    __extends(WishingWell, _super);
    // Constructor
    function WishingWell(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Current speech
        this.currentSpeech = null;
        this.selectedEnchantmentId = "wishingWellPossibleEnchantment0";
        // Gifts
        this.selectedGiftId = "wishingWellGiftPower";
        this.createPossibleEnchantments();
        this.renderArea.resizeFromArray(Database.getAscii("places/wishingWell"), 62, 3);
        this.update();
    }
    // getRenderArea()
    WishingWell.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    WishingWell.prototype.addEnchantmentIfPossible = function (enchantment) {
        if (enchantment.isPossible())
            this.possibleEnchantments.push(enchantment);
    };
    WishingWell.prototype.chooseGift = function () {
        switch (this.selectedGiftId) {
            case "wishingWellGiftPower":
                Saving.saveNumber("gameGiftPower", Saving.loadNumber("gameGiftPower") + 1);
                break;
            case "wishingWellGiftHealth":
                Saving.saveNumber("gameGiftHealth", Saving.loadNumber("gameGiftHealth") + 1);
                break;
            case "wishingWellGiftMagic":
                Saving.saveNumber("gameGiftMagic", Saving.loadNumber("gameGiftMagic") + 1);
                break;
        }
        // We're not pain au chocolating anymore
        Saving.saveBool("wishingWellWeArePainAuChocolating", false);
        // Set the speech
        this.currentSpeech = "wishingWellGiftDoneSpeech";
        // Re calc max hp
        this.getGame().getPlayer().reCalcMaxHp();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    WishingWell.prototype.createPossibleEnchantments = function () {
        // We empty the array
        this.possibleEnchantments = [];
        // We add the echantments
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemGlovesLeatherGloves", EqItemType.GLOVES), new EnchantmentItem(this.getGame(), "eqItemGlovesRedEnchantedGloves", EqItemType.GLOVES)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemGlovesLeatherGloves", EqItemType.GLOVES), new EnchantmentItem(this.getGame(), "eqItemGlovesPinkEnchantedGloves", EqItemType.GLOVES)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponTribalSpear", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponSummoningTribalSpear", EqItemType.WEAPON)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponMonkeyWizardStaff", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponEnchantedMonkeyWizardStaff", EqItemType.WEAPON)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemBodyArmoursKnightBodyArmour", EqItemType.BODYARMOUR), new EnchantmentItem(this.getGame(), "eqItemBodyArmoursEnchantedKnightBodyArmour", EqItemType.BODYARMOUR)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrown", EqItemType.HAT), new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrownWithJaspers", EqItemType.HAT)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrown", EqItemType.HAT), new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrownWithObsidian", EqItemType.HAT)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponGiantSpoon", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponGiantSpoonOfDoom", EqItemType.WEAPON)));
        // We create the list array
        this.createPossibleEnchantmentsArrayForTheList();
    };
    WishingWell.prototype.createPossibleEnchantmentsArrayForTheList = function () {
        this.possibleEnchantmentsArrayForTheList = [];
        for (var i = 0; i < this.possibleEnchantments.length; i++) {
            this.possibleEnchantmentsArrayForTheList.push("wishingWellPossibleEnchantment" + i, this.possibleEnchantments[i].getBeforeItem().getText() + " -> " + this.possibleEnchantments[i].getAfterItem().getText());
        }
    };
    WishingWell.prototype.drawCandiesStuff = function (x, y) {
        // If we didn't throw our first candy yet
        if (Saving.loadBool("wishingWellFirstCandyThrown") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowFirstCandyButton"), x, y, "wishingWellThrowFirstCandyButton", Database.getTranslatedText("wishingWellThrowFirstCandyButton"), true);
            this.renderArea.addLinkCall(".wishingWellThrowFirstCandyButton", new CallbackCollection(this.throwFirstCandy.bind(this)));
        }
        else {
            // The button
            this.renderArea.addAsciiRealButton("Throw " + Algo.pluralFormatNicely(Saving.loadNumber("wishingWellCurrentCandyWishPrice"), " candy", " candies") + " in the well", x, y, "wishingWellThrowCandiesButton");
            this.renderArea.addLinkCall(".wishingWellThrowCandiesButton", new CallbackCollection(this.throwCandies.bind(this)));
        }
    };
    WishingWell.prototype.drawChocolateBarsStuff = function (x, y) {
        // If we're not enchanting
        if (Saving.loadBool("wishingWellWeAreEnchanting") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowChocolateBarButton"), x, y, "wishingWellThrowChocolateBarButton", Database.getTranslatedText("wishingWellThrowChocolateBarButton"), true);
            // The link
            this.renderArea.addLinkCall(".wishingWellThrowChocolateBarButton", new CallbackCollection(this.throwChocolateBar.bind(this)));
        }
        else {
            // If there's at least one possible enchantment
            if (this.possibleEnchantments.length >= 1) {
                // "Choose the enchantment"
                this.renderArea.drawString(Database.getText("wishingWellChooseEnchantment"), x, y);
                this.renderArea.drawString(Database.getTranslatedText("wishingWellChooseEnchantment"), x, y + 1, true);
                // The list
                this.renderArea.addList(x, x + 30, y + 3, "wishingWellEnchantmentList", new CallbackCollection(this.enchantmentSelected.bind(this)), this.possibleEnchantmentsArrayForTheList);
                // Enchant button
                this.renderArea.addAsciiRealButton(Database.getText("wishingWellEnchantButton"), x, y + 6, "wishingWellEnchantButton", Database.getTranslatedText("wishingWellEnchantButton"));
                this.renderArea.addLinkCall(".wishingWellEnchantButton", new CallbackCollection(this.enchant.bind(this)));
                // Add the link which will call the selectRightEnchantment method after the html dom is created
                this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightEnchantment.bind(this)));
            }
            else {
                // We tell the player that there's nothing to enchant
                this.renderArea.drawString(Database.getText("wishingWellNoPossibleEnchantment"), x, y);
                this.renderArea.drawString(Database.getTranslatedText("wishingWellNoPossibleEnchantment"), x, y + 1, true);
            }
        }
    };
    WishingWell.prototype.drawLollipopsStuff = function (x, y) {
        // If we didn't throw our first lollipop yet
        if (Saving.loadBool("wishingWellFirstLollipopThrown") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowFirstLollipopButton"), x, y, "wishingWellThrowFirstLollipopButton", Database.getTranslatedText("wishingWellThrowFirstLollipopButton"), true);
            this.renderArea.addLinkCall(".wishingWellThrowFirstLollipopButton", new CallbackCollection(this.throwFirstLollipop.bind(this)));
        }
        else {
            // The button
            this.renderArea.addAsciiRealButton("Throw " + Algo.pluralFormatNicely(Saving.loadNumber("wishingWellCurrentLollipopWishPrice"), " lollipop", " lollipops") + " in the well", x, y, "wishingWellThrowLollipopsButton");
            this.renderArea.addLinkCall(".wishingWellThrowLollipopsButton", new CallbackCollection(this.throwLollipops.bind(this)));
        }
    };
    WishingWell.prototype.drawPainsAuChocolatStuff = function (x, y) {
        // If we're not pain au chocolating
        if (Saving.loadBool("wishingWellWeArePainAuChocolating") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowPainAuChocolatButton"), x, y, "wishingWellThrowPainAuChocolatButton", Database.getTranslatedText("wishingWellThrowPainAuChocolatButton"), true);
            // The link
            this.renderArea.addLinkCall(".wishingWellThrowPainAuChocolatButton", new CallbackCollection(this.throwPainAuChocolat.bind(this)));
        }
        else {
            // "Choose your gift"
            this.renderArea.drawString(Database.getText("wishingWellChooseGift"), x, y);
            this.renderArea.drawString(Database.getTranslatedText("wishingWellChooseGift"), x, y + 1, true);
            // The list
            this.renderArea.addList(x, x + 30, y + 3, "wishingWellGiftList", new CallbackCollection(this.giftSelected.bind(this)), this.getGiftsArray());
            // Choose gift button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellChooseGiftButton"), x, y + 6, "wishingWellChooseGiftButton", Database.getTranslatedText("wishingWellChooseGiftButton"));
            this.renderArea.addLinkCall(".wishingWellChooseGiftButton", new CallbackCollection(this.chooseGift.bind(this)));
            // Add the link which will call the selectRightEnchantment method after the html dom is created
            this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.giftSelected.bind(this), this.selectRightGift.bind(this)));
        }
    };
    WishingWell.prototype.enchant = function () {
        // Get the index of the selected echantment
        var index = parseInt(this.selectedEnchantmentId.substr(30));
        // Enchant (lose the before item and gain the after item)
        this.possibleEnchantments[index].enchant();
        // We're not enchanting anymore
        Saving.saveBool("wishingWellWeAreEnchanting", false);
        // We re-create the lists
        this.createPossibleEnchantments();
        // Set the speech
        this.currentSpeech = "wishingWellEnchantmentDoneSpeech";
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    WishingWell.prototype.enchantmentSelected = function () {
        // Get the selected language id
        this.selectedEnchantmentId = $("#wishingWellEnchantmentList").find(":selected").attr("id");
    };
    WishingWell.prototype.getGiftsArray = function () {
        // Crate the array
        var arr = [];
        // Add the power gift
        arr.push("wishingWellGiftPower");
        arr.push("More power");
        // Add the health gift
        arr.push("wishingWellGiftHealth");
        arr.push("More health");
        // Add the magic gift if we have less than 6 in magic gift
        if (Saving.loadNumber("gameGiftMagic") < 6) {
            arr.push("wishingWellGiftMagic");
            arr.push("More magic");
        }
        // Return the array
        return arr;
    };
    WishingWell.prototype.giftSelected = function () {
        // Get the selected language id
        this.selectedGiftId = $("#wishingWellGiftList").find(":selected").attr("id");
    };
    WishingWell.prototype.selectRightEnchantment = function () {
        // We select the right question
        $("#" + this.selectedEnchantmentId).prop('selected', true);
    };
    WishingWell.prototype.selectRightGift = function () {
        // We select the right question
        $("#" + this.selectedGiftId).prop('selected', true);
    };
    WishingWell.prototype.throwCandies = function () {
        // We save the old price
        var oldPrice = Saving.loadNumber("wishingWellCurrentCandyWishPrice");
        // If we have enough candies
        if (this.getGame().getCandies().getCurrent() >= Saving.loadNumber("wishingWellCurrentCandyWishPrice")) {
            // If we need to be healed
            if (this.getGame().getPlayer().getHp() < this.getGame().getPlayer().getMaxHp()) {
                // Pay the price
                this.getGame().getCandies().add(-Saving.loadNumber("wishingWellCurrentCandyWishPrice"));
                // Heal the player
                this.getGame().getPlayer().setHp(this.getGame().getPlayer().getMaxHp());
                // Set the speech
                this.currentSpeech = "wishingWellThrewCandiesSpeech";
                // Set the next price
                Saving.saveNumber("wishingWellCurrentCandyWishPrice", Saving.loadNumber("wishingWellPreviousCandyWishPrice") * 2 + Saving.loadNumber("wishingWellCurrentCandyWishPrice") * 2);
                Saving.saveNumber("wishingWellPreviousCandyWishPrice", oldPrice);
            }
            else {
                // Set the speech
                this.currentSpeech = "wishingWellNoWoundSpeech";
            }
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwChocolateBar = function () {
        if (this.getGame().getChocolateBars().getCurrent() >= 1) {
            // Pay the price
            this.getGame().getChocolateBars().add(-1);
            // Set the speech (depending on if it's the first bar we throw or not)
            if (Saving.loadNumber("wishingWellHowManyChocolateBarsThrown") == 0)
                this.currentSpeech = "wishingWellChocolateBarIntroductionSpeech";
            else
                this.currentSpeech = "wishingWellThrewChocolateBarSpeech";
            // Increase the number of chocolate bars thrown
            Saving.saveNumber("wishingWellHowManyChocolateBarsThrown", Saving.loadNumber("wishingWellHowManyChocolateBarsThrown") + 1);
            // We are now enchanting
            Saving.saveBool("wishingWellWeAreEnchanting", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwFirstCandy = function () {
        if (this.getGame().getCandies().getCurrent() >= 1) {
            this.getGame().getCandies().add(-1); // We use one candy
            this.currentSpeech = "wishingWellCandyIntroductionSpeech"; // Set the speech
            Saving.saveBool("wishingWellFirstCandyThrown", true); // Change the bool
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwFirstLollipop = function () {
        if (this.getGame().getLollipops().getCurrent() >= 1) {
            this.getGame().getLollipops().add(-1); // We use one lollipop
            this.currentSpeech = "wishingWellLollipopIntroductionSpeech"; // Set the speech
            Saving.saveBool("wishingWellFirstLollipopThrown", true); // Change the bool
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwLollipops = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= Saving.loadNumber("wishingWellCurrentLollipopWishPrice")) {
            // Pay the price
            this.getGame().getLollipops().add(-Saving.loadNumber("wishingWellCurrentLollipopWishPrice"));
            // Add the same amount of candies
            this.getGame().getCandies().add(Math.ceil(Saving.loadNumber("wishingWellCurrentLollipopWishPrice") / 2));
            // Set the speech
            this.currentSpeech = "wishingWellThrewLollipopsSpeech";
            // Set the next price
            Saving.saveNumber("wishingWellCurrentLollipopWishPrice", Saving.loadNumber("wishingWellCurrentLollipopWishPrice") * 10);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwPainAuChocolat = function () {
        if (this.getGame().getPainsAuChocolat().getCurrent() >= 1) {
            // Pay the price
            this.getGame().getPainsAuChocolat().add(-1);
            // Set the speech (depending on if it's the first pain au chocolat we throw or not)
            if (Saving.loadNumber("wishingWellHowManyPainsAuChocolatThrown") == 0)
                this.currentSpeech = "wishingWellPainAuChocolatIntroductionSpeech";
            else
                this.currentSpeech = "wishingWellThrewPainAuChocolatSpeech";
            // Increase the number of pains au chocolat thrown
            Saving.saveNumber("wishingWellHowManyPainsAuChocolatThrown", Saving.loadNumber("wishingWellHowManyPainsAuChocolatThrown") + 1);
            // We are now pain au chocolating
            Saving.saveBool("wishingWellWeArePainAuChocolating", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "wishingWellBackToTheMapButton");
        // Draw the well
        this.renderArea.drawArray(Database.getAscii("places/wishingWell"), 38, 3);
        // Draw the speech if currentSpeech isn't null
        if (this.currentSpeech != null) {
            this.renderArea.drawSpeech(Database.getText(this.currentSpeech), 3, 75, 95, "wishingWellSpeech", Database.getTranslatedText(this.currentSpeech));
        }
        // Draw various stuff around it
        this.drawCandiesStuff(0, 4);
        if (this.getGame().getLollipops().getMax() >= 1)
            this.drawLollipopsStuff(0, 9);
        if (this.getGame().getChocolateBars().getMax() >= 1)
            this.drawChocolateBarsStuff(0, 14);
        if (this.getGame().getPainsAuChocolat().getMax() >= 1)
            this.drawPainsAuChocolatStuff(0, 24);
    };
    return WishingWell;
})(Place);
///<reference path="QuestEntity.ts"/>
var Wolf = (function (_super) {
    __extends(Wolf, _super);
    // Constructor
    function Wolf(quest, pos) {
        _super.call(this, quest, pos, new Naming("A wolf", "a wolf"), new RenderArea(7, 3), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(7, 2))), new QuestEntityMovement());
        // At first, we're not taking the decision to begin running
        this.takeTheDecisionToRunTimer = null;
        // Set the area transparency
        this.setTransparency(new RenderTransparency(" "));
        // At first we're looking left and standing
        this.setIsLookingLeft(true);
        this.setIsStanding(true);
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(45);
        this.setHp(45);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fangs", "its fangs"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(9, 3))), 10));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // update()
    Wolf.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().plus(new Pos(3, 0)).getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition());
        // If the player is on our left
        if (distanceFromPlayer.x > 0) {
            // We're looking left
            this.setIsLookingLeft(true);
        }
        else {
            // We're looking right
            this.setIsLookingLeft(false);
        }
        // If we're standing
        if (this.isStanding) {
            // If we're not already taking the decision to run BUT the running movement would be possible
            if (this.takeTheDecisionToRunTimer == null && this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0)))) {
                // We take the decision to run by setting the timer
                this.takeTheDecisionToRunTimer = Random.between(2, 6);
            }
            else if (this.takeTheDecisionToRunTimer != null) {
                // We decrease the timer
                this.takeTheDecisionToRunTimer -= 1;
                // If the timer is <= 0 and the running movement would be possible
                if (this.takeTheDecisionToRunTimer <= 0 && this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0)))) {
                    this.setIsStanding(false); // We run
                    this.takeTheDecisionToRunTimer = null; // Not taking any decision anymore
                }
            }
        }
        else {
            // If the running movement won't be possible next turn
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0))) == false) {
                // We stand
                this.setIsStanding(true);
            }
        }
        // Call the mother class update
        _super.prototype.update.call(this);
    };
    // willDie()
    Wolf.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(100 + 50 * Random.upTo(10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    Wolf.prototype.getRunningSpeed = function () {
        return (this.isLookingLeft ? -1 : 1);
    };
    Wolf.prototype.reDrawArea = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/wolf/" + (this.isLookingLeft ? "left" : "right") + (this.isStanding ? "Standing" : "Running")));
    };
    Wolf.prototype.setIsLookingLeft = function (isLookingLeft) {
        // If the value is different
        if (isLookingLeft != this.isLookingLeft) {
            this.isLookingLeft = isLookingLeft; // Set the value
            this.updateQuestEntityMovementOffset(); // Update the movement
            this.reDrawArea(); // Update the area
        }
    };
    Wolf.prototype.setIsStanding = function (isStanding) {
        // If the value is different
        if (isStanding != this.isStanding) {
            this.isStanding = isStanding; // Set the value
            this.updateQuestEntityMovementOffset(); // Update the movement
            this.reDrawArea(); // Update the area
        }
    };
    Wolf.prototype.updateQuestEntityMovementOffset = function () {
        // If we're standing
        if (this.isStanding) {
            // No movement
            this.getQuestEntityMovement().setOffset(new Pos(0, 0));
        }
        else {
            // Set the movement depending on our orientation
            this.getQuestEntityMovement().setOffset(new Pos(this.getRunningSpeed(), 0));
        }
    };
    return Wolf;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var WoodenSword = (function (_super) {
    __extends(WoodenSword, _super);
    // Constructor
    function WoodenSword() {
        _super.call(this, "eqItemWeaponWoodenSword", "eqItemWeaponWoodenSwordName", "eqItemWeaponWoodenSwordDescription", "eqItems/weapons/woodenSword");
    }
    // Public getters
    WoodenSword.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A wooden sword", "a wooden sword"), player.getClassicCollisionBoxCollection(), 1);
        qew.getCloseCombatDelay().setFixedDelay(4, 0);
        return qew;
    };
    return WoodenSword;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Xinopherydon = (function (_super) {
    __extends(Xinopherydon, _super);
    // Constructor
    function Xinopherydon(quest, pos) {
        _super.call(this, quest, pos, new Naming("A xinopherydon", "a xinopherydon"), new RenderArea(17, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(5, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(9, 1)), new CollisionBox(this, new Pos(12, 2), new Pos(5, 1)), new CollisionBox(this, new Pos(3, 3), new Pos(14, 1)), new CollisionBox(this, new Pos(4, 4), new Pos(5, 1)), new CollisionBox(this, new Pos(10, 4), new Pos(5, 1)), new CollisionBox(this, new Pos(5, 5), new Pos(3, 1)), new CollisionBox(this, new Pos(11, 5), new Pos(3, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(5000);
        this.setHp(5000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/xinopherydon"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its huge body", "its huge body"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(19, 8))), 800));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(20);
    }
    // update()
    Xinopherydon.prototype.update = function () {
        _super.prototype.update.call(this);
        console.log(this.getHp());
        // We heal ourselves if the player is too far on the left
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x - 50)
            this.heal(50);
    };
    // willDie()
    Xinopherydon.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(30000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The claw
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedXinopherydonClaw", "You found a strange claw on the xinopherydon's corpse.", "You gain a strange claw."));
    };
    return Xinopherydon;
})(QuestEntity);
///<reference path="GridItem.ts"/>
var XinopherydonClaw = (function (_super) {
    __extends(XinopherydonClaw, _super);
    function XinopherydonClaw() {
        _super.apply(this, arguments);
    }
    XinopherydonClaw.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return damage * 2;
    };
    return XinopherydonClaw;
})(GridItem);
///<reference path="Quest.ts"/>
var Yourself = (function (_super) {
    __extends(Yourself, _super);
    // Constructor
    function Yourself(game) {
        _super.call(this, game);
        // Sentences flying across the screen
        this.sentences = [];
        // Sentences timer (to avoid having sentences at the very beginning of the quest)
        this.sentencesTimer = 30;
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 19));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add yourself
        this.addYourself();
        // Add the walls
        this.addWalls();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You are now fighting yourself."));
    }
    // Public methods
    Yourself.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
    };
    Yourself.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat yourself!"));
            Saving.saveBool("mainMapDoneDesert", true); // The desert is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died trying to beat yourself."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Yourself.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Handle sentences
            this.handleSentences();
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawSentences(); // Draw the sentences
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Yourself.prototype.addYourself = function () {
        this.yourself = new YourselfEntity(this, new Pos(96, 19));
        this.yourself.setHealthBar(new QuestEntityHealthBar(this.yourself, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.yourself);
    };
    Yourself.prototype.addWalls = function () {
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 0)));
        var wall = (this.getLastEntity());
        // Add the boxes
        wall.addBox(new Pos(-1, -1), new Pos(102, 1));
        wall.addBox(new Pos(-1, 0), new Pos(1, 21));
        wall.addBox(new Pos(0, 20), new Pos(101, 1));
        wall.addBox(new Pos(101, 0), new Pos(1, 20));
    };
    Yourself.prototype.drawSentences = function () {
        // Call the sentences update methods
        for (var i = 0; i < this.sentences.length; i++) {
            this.sentences[i].draw(this.getRenderArea());
        }
    };
    Yourself.prototype.handleSentences = function () {
        // If it's time to add sentences
        if (this.sentencesTimer <= 0) {
            // If we don't have the crown
            if (this.getGame().isEquipped("hat", "eqItemHatOctopusKingCrown") == false) {
                // We possibly add a randomly-chosen sentence
                if (this.sentences.length == 0 || Random.oneChanceOutOf(10))
                    this.sentences.push(new YourselfSentence(this, Random.fromArray(["You need to be more self-confident",
                        "You need more confidence!",
                        "My crown is called content, a crown that seldom kings enjoy",
                        "Self-confidence is having confidence in oneself",
                        "The Octopus King helps those who help themselves",
                        "It's hard to beat yourself",
                        "If my head looks like an \"o\", what does my belly look like?",
                        "What does the squirrel do all the day?",
                        "I wonder what is inside the first house",
                        "I guess it's time for me to become a King",
                        "With a crown on your head, you just feel they will never hurt you",
                        "Look at all these flying sentences",
                        "Am I talking to myself?",
                        "There are three shark fins",
                        "Did you look under the carpet?",
                        "Look at this bar above",
                        "Maybe you could change its corners",
                        "Nonsense",
                        "Confidence confidence confidence",
                        "If there be no enemy there's no fight. If no fight, no victory and if no victory there is no crown",
                        "A crown is merely a hat that lets the rain in",
                        "I spent a lot of time with a crown on my head",
                        "Sometime I wish the aliens would abduct me and crown me as their leader",
                        "The crown of life is neither happiness nor annihilation; it is understanding",
                        "Tentacles tentacles tentacles"]), Random.flipACoin(), Random.between(1, 12)));
            }
            else {
                // We possibly add the sentence
                if (this.sentences.length == 0 || Random.oneChanceOutOf(20))
                    this.sentences.push(new YourselfSentence(this, Random.fromArray(["You are very self-confident."]), Random.flipACoin(), Random.between(1, 12)));
            }
        }
        else {
            this.sentencesTimer -= 1;
        }
        // Call the sentences update methods
        for (var i = 0; i < this.sentences.length; i++) {
            // If it should be deleted, we remove it from the array
            if (this.sentences[i].update()) {
                this.sentences.splice(i, 1);
                i--;
            }
        }
    };
    Yourself.prototype.thePlayerWon = function () {
        // If yourself is dead, we return true
        if (this.yourself.shouldDie())
            return true;
        // Else we return false
        return false;
    };
    return Yourself;
})(Quest);
///<reference path="QuestEntity.ts"/>
var YourselfEntity = (function (_super) {
    __extends(YourselfEntity, _super);
    // Constructor
    function YourselfEntity(quest, pos) {
        _super.call(this, quest, pos, new Naming("Yourself", "yourself"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(this.getQuest().getGame().getPlayer().getMaxHp());
        this.setHp(this.getQuest().getGame().getPlayer().getHp());
        // Set the ascii art
        this.getRenderArea().drawString("\\o/");
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("The same weapon as yours", "the same weapon as yours"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3))), 0));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay();
    }
    // setHp()
    YourselfEntity.prototype.setHp = function (hp) {
        // If we don't have the crown
        if (this.getQuest().getGame().isEquipped("hat", "eqItemHatOctopusKingCrown") == false) {
            // When anyone want to change our hp, we change the player's hp first :)
            this.getQuest().getGame().getPlayer().setHp(hp);
        }
        else {
            // When anyone want to change our hp, we change the player's hp first :) (but here we keep it over 0!)
            if (hp > 0)
                this.getQuest().getGame().getPlayer().setHp(hp);
            else
                this.getQuest().getGame().getPlayer().setHp(1);
        }
        _super.prototype.setHp.call(this, hp);
    };
    // willDie()
    YourselfEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(Math.floor(this.getQuest().getGame().getCandies().getCurrent() / 10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemBootsBootsOfIntrospection", "You found the boots of introspection", "You gain the boots of introspection"));
    };
    return YourselfEntity;
})(QuestEntity);
var YourselfSentence = (function () {
    // Constructor
    function YourselfSentence(quest, text, isGoingRight, y) {
        // Set from parameters
        this.quest = quest;
        this.text = text;
        this.isGoingRight = isGoingRight;
        // Set the position
        if (this.isGoingRight)
            this.position = new Pos(-this.text.length, y);
        else
            this.position = new Pos(100, y);
    }
    // Public methods
    YourselfSentence.prototype.draw = function (renderArea) {
        renderArea.drawString(this.text, this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.position.x, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.position.y);
    };
    YourselfSentence.prototype.update = function () {
        if (this.isGoingRight) {
            this.position.x += 1;
            if (this.position.x > 100)
                return true; // Delete the sentence
        }
        else {
            this.position.x -= 1;
            if (this.position.x < -this.text.length)
                return true; // Delete the sentence
        }
        // We don't delete the sentence : we return false
        return false;
    };
    return YourselfSentence;
})();
Database.addAscii("arena/hardcorePlatformer/background", 240, 12, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
    "",
    " Good luck!                                                                     That wasn't so hard, was it?                                      Wow. Good job. But now it's going to be serious.                                       Yay!!",
    "________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"
]);
Database.addAscii("arena/hardcorePlatformer/logo", 18, 4, [
    " HARDCORE",
    "     PLATFORMER",
    "",
    "_/\\/\\__\\o/____/\\/\\"
]);
Database.addAscii("arena/peacefulForest/logo", 16, 4, [
    " ||| \\o/|||  |||",
    "",
    "   The peaceful",
    "      forest"
]);
Database.addAscii("eqItems/bodyArmours/enchantedKnightBodyArmour", 13, 8, [
    " \\\\       //",
    " |*'-._.-' |",
    " |     *  *|",
    "/   *       \\",
    "|*     *  * |",
    "\\           /",
    " '. *  *  .'",
    "   '-._.-'"
]);
Database.addAscii("eqItems/bodyArmours/knightBodyArmour", 13, 8, [
    " \\\\       //",
    " | '-._.-' |",
    " |         |",
    "/  :::::::  \\",
    "|  ::KNI::  |",
    "\\  :::::::  /",
    " '.       .'",
    "   '-._.-'"
]);
Database.addAscii("eqItems/bodyArmours/lightweightBodyArmour", 11, 7, [
    " \\       /",
    " |'-._.-'|",
    " |       |",
    "/         \\",
    "\\         /",
    " '.     .'",
    "   '-.-'"
]);
Database.addAscii("eqItems/boots/bootsOfIntrospection", 29, 8, [
    "  ?                         ?",
    "        ____    ?",
    "    ?   \\   |   ____   ?",
    "       __)  |  |   /",
    "      (_____)  |  (__",
    "               (_____)  ?",
    "  ?",
    "           ?        ?"
]);
Database.addAscii("eqItems/boots/leatherBoots", 16, 5, [
    "  ____",
    "  \\   |   ____",
    " __)  |  |   /",
    "(_____)  |  (__",
    "         (_____)"
]);
Database.addAscii("eqItems/boots/rocketBoots", 33, 8, [
    "                  _______",
    " _______         (____/ <|",
    "(____/ <|        (___/  <|",
    "(___/  <|        (__/   <\\______",
    "(__/   <\\______  /.-._.-.-'-._.-\\",
    "/.-._.-.-'-._.-\\ \\___ ______ ___/",
    "\\___ ______ ___/    /\"\\    /\"\\",
    "   /\"\\    /\"\\"
]);
Database.addAscii("eqItems/gloves/leatherGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\       |",
    " \\        |",
    "  \\______/"
]);
Database.addAscii("eqItems/gloves/pinkEnchantedGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\ (\\/)  |",
    " \\   \\/   |",
    "  \\______/"
]);
Database.addAscii("eqItems/gloves/redEnchantedGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\ # # # |",
    " \\  ##### |",
    "  \\______/"
]);
Database.addAscii("eqItems/hats/merchantHat", 17, 3, [
    "      .---.",
    "     |     |",
    "'-.__|_____|__.-'"
]);
Database.addAscii("eqItems/hats/octopusKingCrown", 9, 3, [
    "|\\/\\_/\\/|",
    "| . : . |",
    "¯¯¯¯¯¯¯¯¯"
]);
Database.addAscii("eqItems/hats/octopusKingCrownWithJaspers", 9, 3, [
    "|\\/\\_/\\/|",
    "| o O o |",
    "¯¯¯¯¯¯¯¯¯"
]);
Database.addAscii("eqItems/hats/octopusKingCrownWithObsidian", 9, 3, [
    "|\\/\\_/\\/|",
    "| w W w |",
    "¯¯¯¯¯¯¯¯¯"
]);
Database.addAscii("eqItems/hats/sorceressHat", 28, 7, [
    "                   _.-.",
    "                .-'  ~ '.",
    "             _.'  ¨_.'-._\\",
    "           .'    ~|      '",
    "          ' ¨     -",
    ".________/_________\\_______.",
    " ¨¨°¨°¨¨            ¨°¨¨¨°¨"
]);
Database.addAscii("eqItems/weapons/enchantedMonkeyWizardStaff", 11, 21, [
    " .   *   .",
    "{*}\\/o\\/{*}",
    " '.o O o.'",
    "  \\  o  /",
    "   {_O_}",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    (*)",
    "    (*)",
    "    (*)"
]);
Database.addAscii("eqItems/weapons/giantSpoon", 13, 31, [
    "     .-.",
    "   .:   :.",
    "  :       :",
    " :         :",
    ":           :",
    ":           :",
    ":           :",
    " :         :",
    "  :.     .:",
    "    :___:",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    '-.-'"
]);
Database.addAscii("eqItems/weapons/giantSpoonOfDoom", 13, 31, [
    "     .-.",
    "   .: # :.",
    "  :     # :",
    " :  #      :",
    ":       #   :",
    ":  #        :",
    ":     #     :",
    " : #     # :",
    "  :.   # .:",
    "    :___:",
    "    |   |",
    "    |#  |",
    "    |  #|",
    "    |   |",
    "    |  #|",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |#  |",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |  #|",
    "    |  #|",
    "    |   |",
    "    |#  |",
    "    |   |",
    "    '-.-'"
]);
Database.addAscii("eqItems/weapons/ironAxe", 11, 12, [
    "   /\\  |\\",
    " __)(__) \\",
    "(__{}__   >",
    "   ||  ) /",
    "   ||  |/",
    "   ||",
    "   ||",
    "   ||",
    "   ||",
    "   ||",
    "   /\\",
    "  '--'"
]);
Database.addAscii("eqItems/weapons/monkeyWizardStaff", 9, 19, [
    " .  .  .",
    "/ \\/ \\/ \\",
    "\\_     _/",
    "  \\_ _/",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   |_|",
    "   ( )",
    "  _/ \\_",
    " /_____\\"
]);
Database.addAscii("eqItems/weapons/polishedSilverSword", 12, 21, [
    "     ^",
    "    / \\",
    "    ) (",
    "   <   >",
    "    ) (",
    "    | |",
    "    ) (",
    "   <   >",
    "    ) (",
    "    | |",
    "    ) (",
    "   <   >",
    " .  ) (  .",
    " |\\_| |_/|",
    "< ¤_ ¤ _¤ >",
    " |/ \\_/ \\|",
    " '  [-]  '",
    "    [-]",
    "    [-]",
    "    [-]",
    "   (___)"
]);
Database.addAscii("eqItems/weapons/scythe", 30, 32, [
    " /\\",
    " )(",
    " ||",
    "| (|______",
    "|) |      '---____",
    "| (|              '--__",
    "|) |______              '-.",
    "| (|______'----.___        \\",
    " ||      '----.___'---._    \\",
    " ||               '--- ._\\_  |",
    " ||                      \\_\\ |",
    " ||                        \\\\|",
    " ||                         \\|",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " /\\",
    " \\/"
]);
Database.addAscii("eqItems/weapons/summoningTribalSpear", 18, 29, [
    "        /\\",
    "       //\\\\",
    "      //▲▲\\\\",
    "     //▲▲▲▲\\\\",
    "    //▲▲▲▲▲▲\\\\",
    "    \\\\▲▲▲▲▲▲//",
    "     \\\\▲▲▲▲//",
    "      \\____/",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    " ____   ||   ____",
    "/\\\\\\\\\\__||__/////\\",
    "\\/////_/||\\_\\\\\\\\\\/",
    "     /-||||-\\",
    "    /-|/||\\|-\\",
    "   /-|/ || \\|-\\",
    "   |_/  ||  \\_|",
    "        ||",
    "        ||",
    "       ([])"
]);
Database.addAscii("eqItems/weapons/tribalSpear", 14, 27, [
    "    /\\",
    "   //\\\\",
    "  //¨¨\\\\",
    " //¨¨¨¨\\\\",
    "//¨¨¨¨¨¨\\\\",
    "\\\\¨¨¨¨¨¨//",
    " \\\\¨¨¨¨//",
    "  \\____/",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||   ____",
    "    ||__/////\\",
    "    ||\\_\\\\\\\\\\/",
    "    |||-\\",
    "    ||\\|-\\",
    "    || \\|-\\",
    "    ||  \\_|",
    "    ||",
    "    ||",
    "   ([])"
]);
Database.addAscii("eqItems/weapons/trollBludgeon", 12, 18, [
    "    _/\\_",
    "   /____\\",
    " <)    > (>",
    " /  <     \\",
    "<)        (>",
    " \\ <   >  /",
    " <) ____ (>",
    "   \\____/",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "   (____)"
]);
Database.addAscii("eqItems/weapons/woodenSword", 9, 18, [
    "    ^",
    "   / \\",
    "   | |",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "_  |||  _",
    "\\\\_|_|_//",
    " \\_____/",
    "   (x)",
    "   (x)",
    "   (x)"
]);
Database.addAscii("general/box", 29, 25, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    " ___________________________",
    "|:''''''''''''''''''''''''':|",
    "|:          _____          :|",
    "|:         /     \\         :|",
    "|_________(_[   ]_)_________|",
    "|:¨¨¨¨¨¨¨¨¨\\_____/¨¨¨¨¨¨¨¨¨:|",
    "|:                         :|",
    "|:                         :|",
    "|:  ___    .-\"\"\"-.    ___  :|",
    "|:  \\  \\  /\\ \\ \\ \\\\  /  /  :|",
    "|:   }  \\/\\ \\ \\ \\ \\\\/  {   :|",
    "|:   }  /\\ \\ \\ \\ \\ /\\  {   :|",
    "|:  /__/  \\ \\ \\ \\ /  \\__\\  :|",
    "|:         '-...-'         :|",
    "|:.........................:|",
    "|___________________________|"
]);
Database.addAscii("general/candyRoom", 50, 7, [
    "                 ___                        ____",
    "               \\/   \\/                    \\/    \\/",
    "       _____   /\\___/\\ _   ____     _     /\\____/\\",
    "     \\/     \\/   (_)  (_)\\/    \\/  (_)       (_)",
    "     /\\_____/\\    |    | /\\____/\\   |   ___   |",
    "     \\/     \\/    |    | \\/    \\/   | \\/   \\/ |",
    "     /\\_____/\\    |    | /\\____/\\   | /\\___/\\ |"
]);
Database.addAscii("general/inventoryBodyArmour", 21, 12, [
    ".....................",
    ".    BODY ARMOUR    .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    "....................."
]);
Database.addAscii("general/inventoryBoots", 36, 12, [
    "....................................",
    ".              BOOTS               .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    "...................................."
]);
Database.addAscii("general/inventoryBottom", 99, 75, [
    " |   \\=======================================================================================/   |",
    " |   _________________________________________________________________________________________   |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [_____________________][_____________________][_____________________][____________________]  |",
    " |                                                                                               |",
    " (_______________________________________________________________________________________________()"
]);
Database.addAscii("general/inventoryGloves", 13, 12, [
    ".............",
    ".  GLOVES   .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    "............."
]);
Database.addAscii("general/inventoryHat", 36, 12, [
    "....................................",
    ".                HAT               .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    "...................................."
]);
Database.addAscii("general/inventoryTop", 99, 55, [
    "               ______                                 __",
    "              /\\__  _\\                               /\\ \\__",
    "              \\/_/\\ \\/     ___   __  __     __    ___\\ \\ ,_\\   ___   _ __   __  __",
    "                 \\ \\ \\   /. _ `\\/\\ \\/\\ \\  /.__`\\/. _ `\\ \\ \\/  / __`\\/\\`.__\\/\\ \\/\\ \\",
    "                  \\_\\ \\__/\\ \\/\\ \\ \\ \\_/ |/\\  __//\\ \\/\\ \\ \\ \\_/\\ \\L\\ \\ \\ \\/ \\ \\ \\_\\ \\",
    "                  /\\_____\\ \\_\\ \\_\\ \\___/ \\ \\____\\ \\_\\ \\_\\ \\__\\ \\____/\\ \\_\\  \\/`____ \\",
    "                  \\/_____/\\/_/\\/_/\\/__/   \\/____/\\/_/\\/_/\\/__/\\/___/  \\/_/   `/___/> \\",
    "                                                                                /\\___/",
    "                                                                                \\/__/",
    "",
    " _________________________________________________________________________________________________",
    "(                                                                                                ()",
    " |                                                                                               |",
    " |  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}                                                       |",
    " |  {(              WEAPON              )}          \\                                            |",
    " |  { )                                ( }       / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ \\ \\ \\                                           |",
    " |  {(                                  )}      \\ \\ ) )                                          |",
    " |  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}                                                       |",
    " |                                                                                               |",
    " |   /=======================================================================================\\   |",
    " |   | Max HP :          - Weapon damage :            - Weapon speed :                       |   |",
    " |   |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|   |",
    " |   |                                                                                       |   |"
]);
Database.addAscii("general/openBox", 29, 25, [
    "            _____",
    "       ____/|   |\\____",
    "      |\\_____________/|",
    "      ||             ||",
    "      ||             ||",
    "      ||             ||",
    "      ||             ||",
    "      ||_____________||",
    "      |/_____________\\|",
    "     /I               I\\",
    "    / I               I \\",
    "   /  I               I  \\",
    "  /   I               I   \\",
    " /    I               I    \\",
    "|:¨¨¨¨¨¨¨¨\\_______/¨¨¨¨¨¨¨¨:|",
    "|:                         :|",
    "|:                         :|",
    "|:  ___    .-\"\"\"-.    ___  :|",
    "|:  \\  \\  /\\ \\ \\ \\\\  /  /  :|",
    "|:   }  \\/\\ \\ \\ \\ \\\\/  {   :|",
    "|:   }  /\\ \\ \\ \\ \\ /\\  {   :|",
    "|:  /__/  \\ \\ \\ \\ /  \\__\\  :|",
    "|:         '-...-'         :|",
    "|:.........................:|",
    "|___________________________|"
]);
Database.addAscii("general/specialAbilityBackground", 98, 1, [
    " |   |                                                                                       |   |"
]);
Database.addAscii("general/translaCAT", 19, 16, [
    "   |\\___/|",
    "  /       \\",
    " / <*> <*> \\",
    "/___  V  ___\\",
    "    |   |",
    "    |    \\______",
    "    /           \\",
    "   |             |",
    " __/              \\",
    "|_______        __/",
    "        |      /",
    "         \\  __/",
    "        _/ /  __",
    "       / /    \\ \\",
    "      | |_____/ /",
    "       \\_______/"
]);
Database.addAscii("general/insideYourBox/0", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("general/insideYourBox/1", 1, 3, [
    "o",
    "|",
    "|"
]);
Database.addAscii("general/insideYourBox/10", 14, 3, [
    " ____________",
    "/__/__/__/__/|",
    "|__|__|__|__|/"
]);
Database.addAscii("general/insideYourBox/2", 5, 1, [
    "----o"
]);
Database.addAscii("general/insideYourBox/3", 5, 1, [
    "o----"
]);
Database.addAscii("general/insideYourBox/4", 1, 3, [
    "o",
    "|",
    "|"
]);
Database.addAscii("general/insideYourBox/5", 8, 2, [
    "/\\.--./\\",
    "\\/'--'\\/"
]);
Database.addAscii("general/insideYourBox/6", 3, 5, [
    " _",
    "(_)",
    " |",
    " |",
    " |"
]);
Database.addAscii("general/insideYourBox/7", 3, 9, [
    " _",
    "| |",
    "|/|",
    "|/|",
    "| |",
    "| |",
    "|/|",
    "|/|",
    "|_|"
]);
Database.addAscii("general/insideYourBox/8", 3, 9, [
    " _",
    "| |",
    "|\\|",
    "|\\|",
    "| |",
    "| |",
    "|\\|",
    "|\\|",
    "|_|"
]);
Database.addAscii("general/insideYourBox/9", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("general/insideYourBox/text", 90, 12, [
    "                                __   __                          _",
    "                                \\%\\ /%/__ _  _  __ __ _____ _ _ |%|",
    "                                 \\%V%/%_%\\%||%| \\%V%%V%/%_%\\%'%\\|_|",
    "                                  |_|\\___/\\_,_|  \\_/\\_/\\___/_||_(_)",
    "           __   __                            _                        _ _   _   _",
    "           \\%\\ /%/__ _  _   _ _  _____ __ __ |%|_  __ ___ _____   __ _|%|%| |%|_|%|_  ___",
    "            \\%V%/%_%\\%||%| |%'%\\/%_%\\%V%%V%/ |%'%\\/%_`%\\%V%/%-_) /%_`%|%|%| |%%_|%'%\\/%-_)",
    "             |_|\\___/\\_,_| |_||_\\___/\\_/\\_/  |_||_\\__,_|\\_/\\___| \\__,_|_|_|  \\__|_||_\\___|",
    "                                _        _        _   _                         _    _ _",
    "              ____ __ _____ ___|%|_ ___ (_)_ _   |%|_|%|_  ___  __ __ _____ _ _|%|__|%|%|",
    "             (_-<%V%%V%/%-_)%-_)%%_(_-< |%|%'%\\  |%%_|%'%\\/%-_) \\%V%%V%/%_%\\%'_|%/%_`%|_|",
    "             /__/\\_/\\_/\\___\\___|\\__/__/ |_|_||_|  \\__|_||_\\___|  \\_/\\_/\\___/_| |_\\__,_(_)"
]);
Database.addAscii("general/theComputer/computer", 62, 24, [
    "                                            _________________",
    "                                           |                 |",
    "                                           |   ___________   |",
    "                                           |  |   .....   |  |",
    " ______________________________________    |  |___________|  |",
    "|  __________________________________  |   |   ___________   |",
    "| |                                  | |   |  |   .....   |  |",
    "| |                                  | |   |  |___________|  |",
    "| |                                  | |   |   __   __   _   |",
    "| |                                  | |   |  |__| |__| |_|  |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |       .|.       |",
    "| |                                  | |   |      (   )      |",
    "| |                                  | |   |       '-'       |",
    "| |__________________________________| |   |                 |",
    "|______________________________________|   |                 |",
    "                 |    |      '.            |                 |",
    "                 |    |        '-.-'-.-'-.-|                 |",
    "                 )    (                    |                 |",
    "                /      \\                   |                 |",
    "               /________\\                  |_________________|"
]);
Database.addAscii("gridItems/a", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    A    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/advancedGrimoire", 8, 11, [
    "   .  .",
    "  /////|",
    " ///// |",
    "|===|  |",
    "|   |  |",
    "|era|  |",
    "|tho|  |",
    "|shi|  |",
    "|   | /",
    "|===|/",
    "'---'"
]);
Database.addAscii("gridItems/beginnersGrimoire", 7, 11, [
    "   .  .",
    "  ////|",
    " //// |",
    "|==|  |",
    "|  |  |",
    "|ar|  |",
    "|fb|  |",
    "|tp|  |",
    "|  | /",
    "|==|/",
    "'--'"
]);
Database.addAscii("gridItems/blackMagicGrimoire", 9, 11, [
    "   .   .",
    "  //////|",
    " ////// |",
    "|====|  |",
    "| BM |  |",
    "|_/\\_|  |",
    "|\\  /|  |",
    "| \\/ |  |",
    "| OD | /",
    "|====|/",
    "'----'"
]);
Database.addAscii("gridItems/feather", 5, 6, [
    " _",
    "| \\",
    "\\-|\\",
    " \\-|\\",
    "  \\-|",
    "    \\"
]);
Database.addAscii("gridItems/fortressKey", 8, 10, [
    "   _",
    "  |:|_|\\",
    "  |: _ (",
    "  |:| |/",
    "  |:|",
    "  |:|",
    "  |:|",
    " /\\ /\\",
    "( -O- )",
    " \\/_\\/"
]);
Database.addAscii("gridItems/greenSharkFin", 14, 5, [
    "   .´",
    "  /(",
    " /  \\  (green)",
    "/    `.",
    "¯¯¯¯¯¯¯"
]);
Database.addAscii("gridItems/heartPendant", 12, 11, [
    "\\          /",
    " \\        /",
    "  \\      /",
    "   \\    /",
    "    \\  /",
    "     \\/",
    "     ::",
    "   _ :: _",
    "  ( `\\/' )",
    "  `\\    /'",
    "    `\\/'"
]);
Database.addAscii("gridItems/heartPlug", 17, 7, [
    "  /    /    /",
    " /____/____/",
    "/____/____/\\  /",
    "\\         \\ \\/",
    " \\   ***   \\/\\  /",
    "  \\   ***   \\ \\/",
    "   \\_________\\/"
]);
Database.addAscii("gridItems/l", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    L    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/mainMap", 17, 10, [
    " _______________",
    "/  8            \\",
    "| 888     .-'   |",
    "|  |  _.-'      |",
    "|    (          |",
    "|     )       ^ |",
    "|    /    ^  | ||",
    "|   /    | |    |",
    "| -'            |",
    "\\_______________/"
]);
Database.addAscii("gridItems/p", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    P    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/pitchfork", 12, 8, [
    "      /    /",
    "     /    /",
    "    /    /",
    "   /    /",
    "  /    /",
    " /    /",
    " ////",
    "////"
]);
Database.addAscii("gridItems/pogoStick", 13, 11, [
    " ___________",
    "(_____ _____)",
    "     | |",
    "     | |",
    "     | |",
    "     | |",
    "   __| |__",
    "  (_______)",
    "     | |",
    "     | |",
    "     |_|"
]);
Database.addAscii("gridItems/purpleSharkFin", 15, 5, [
    "   .´",
    "  /(",
    " /  \\  (purple)",
    "/    `.",
    "¯¯¯¯¯¯¯"
]);
Database.addAscii("gridItems/redSharkFin", 12, 5, [
    "   .´",
    "  /(",
    " /  \\  (red)",
    "/    `.",
    "¯¯¯¯¯¯¯"
]);
Database.addAscii("gridItems/shellPowder", 13, 5, [
    "   |z.-+);",
    "  -+|)='`%:",
    " })]`]}s)'.;",
    " -+{!%^;_\\'\".",
    "%;=)h;-+--(-]"
]);
Database.addAscii("gridItems/sponge", 15, 7, [
    "      ___",
    "   .-'***'.",
    "  /~*****~ \\",
    " /*****~****'.",
    "(***~*********)",
    " '.*****~**__/",
    "  '-:::::-'"
]);
Database.addAscii("gridItems/talkingCandy", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("gridItems/thirdHouseKey", 8, 10, [
    "   _",
    "  | |_|\\",
    "  |  _ (",
    "  | | |/",
    "  | |",
    "  | |",
    "  | |",
    " /\\ /\\",
    "( -3- )",
    " \\/_\\/"
]);
Database.addAscii("gridItems/timeRing", 11, 9, [
    "    ___",
    "   / | \\",
    "  (  o- )",
    "   \\   /",
    "  .-'-'-.",
    " //     \\\\",
    "((       ))",
    " \\\\     //",
    "  '-._.-'"
]);
Database.addAscii("gridItems/unicornHorn", 7, 4, [
    "\\.",
    " \\'.",
    "  \\ '.",
    "   \\,-'"
]);
Database.addAscii("gridItems/xinopherydonClaw", 12, 5, [
    "    _.---.",
    "  .'      '.",
    " '  .-'-.  |",
    "/ .'     '-'",
    "|/"
]);
Database.addAscii("gridItems/y", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    Y    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("maps/map", 208, 88, [
    "                                                                                    ~                                                                                                           ~",
    "              ~                                                                                                                                       ~",
    "                                                                       ~",
    "                                                  ~",
    "                         ~                                                                                                                                            ~",
    "                                                                                                          ~",
    "",
    "                                         ¨¨¨¨¨¨¨¨¨                               ~       ~                                ~                                                                   ~",
    "                                         ¨¨¨¨¨¨¨¨     ~                                                 ~",
    "                                        |¨¨¨¨¨¨¨/                     ~                                                                      ~                              ~",
    "                             ~          |¨¨¨¨¨¨/                                                  ___                             ~                      ~",
    "      ~                                 |¨¨¨¨¨/         ~                       ~     ~          /^_ \\        ~",
    "                                        |¨¨¨¨/                 ~                                /^( \\/              ~                                ~              ~",
    "                                        |¨¨¨/                                           ______ / ^/______                                 ~",
    "                          ~             |¨¨/                                        ___/      | ^ |      \\_____                     ~",
    "                                       ___/      ~                    ~        ____/    ______| ^ |______    \\_\\________    ~                                   ~",
    "                                 ~     |8|                                    / _/  ___/     /  ^  \\     \\___  \\_       \\",
    "              ~                       /___\\                                  / /  _/     I>  |, ^ ,|    I>   \\_  \\       \\___                    ~                                 ~",
    "                                      |   |                          ~      / / _/      /\\   /|\\_/|\\   /\\      \\_ \\          \\                       ~",
    "                                      |III|               ~              __/ | /       /__\\ | (Q P) | /__\\       \\ |          \\____      ~                               ~",
    "                            ~         |   |    ~                        /    |/        |**| // \\_/ \\\\ |**|        \\|   ¨           \\",
    "                                      |III|                        ____/     |         |[]|\"VV\"\"\"\"\"VV\"|[]|         |                \\          ~       ______________                              ~",
    "                                      |   |                       /          |\\        |[]|--{}-_-{}--|[]|        /|                 |                (         _    ´'\\",
    "                                 ~    |III|                 _____/           | \\_      |__|----| |----|__|      _/ |           ¨      ´'\\ ~    _______| 888    / \\      ´'\\",
    "                                     _|___|        ~       (                  \\  \\_    '  '    ___    '  '    _/  /            ____     |     /        88888   |-| 888    :    ~",
    "                         ~          ( /|||\\\\               |       ¨           \\_  \\___       (:::)       ___/  _/            /   /     |    |    ¨   8888888     88888   |",
    "                                    /       \\________      |                     \\_    \\______|:::|______/    _/      ¨       \\__/      |    |   888    | |      8888888  |",
    "   ~                               /                 \\_    |               ¨       \\___       |   |       ___/                          |  ~ |  88888   | |  888   | |    |               ~",
    "                                  /                    \\   |                           \\______|   |______/                   ___        :    : 8888888      88888  | | ¨  |",
    "                                 (_       ____          |  |   ¨              ¨                                 ¨         __/   \\_______)   /    | |   ¨   8888888         ´'\\     ~",
    "              ~               ~    \\_   __)  (__   _    |  |       88                                                   _/    ~             ) ¨  | |       _ | |      888     :                                ~",
    "                                     \\_/        |#| \\__/   | 88   8888              ¨                ¨                _/                 ~ /              / \\| |     88888    |",
    "                                                           |8888   ||  88   88   88                           ¨      /  ~            ~    /   888      ¨  |+|       8888888   |",
    "                                             <|       ~    : || 88    8888 8888 8888         88    88               |        ~           /   88888        |_|         | |     |   ~",
    "                                         ~  __|_ _        /88  8888    || 88||   || 88   88 8888  8888          88  |              ,----'   8888888      /| |\\        | |     |",
    "                           ~                \\__/|#|      /8888  ||  88   8888  88  8888 8888 || 88 ||  88      8888 |             (           | |        ||0||    _    _      |",
    "                                         .______|#|_____/  ||88    8888   ||  8888  ||   ||    8888   8888  88  ||  :   ~          |          | |    ¨        _  / \\  / \\  ¨  |      ~               ~",
    "                      ~            ~    /                   8888    ||     88  ||  88   88   88 ||  88 ||  8888   ^/           ~   |   ¨                   _ / \\ |-| _|-|_    |",
    "                                       /  ¨                  ||   88   88 8888    8888 8888 8888   8888 88  ||   /_\\               )                   _  / \\|-| / \\/ \\ / \\   |",
    "                                      /                          8888 8888 ||   88 ||   ||   ||  88 || 8888  ^  /^  \\ ^^  ~    ^^ /        ¨     ¨    / \\ |-| / \\|-||-| |-|   :",
    "      ~                     ~        /            ¨               ||   ||      8888     88   88 8888 88 ||  / \\^/ \\  ^^^^_____^^^^   ¨                |-| / \\ |-|/ \\ / \\     /",
    "                                    /                     ¨                88   ||  88 8888 8888 || 8888   ^  /_\\  \\ |  |_____|  |                        |-| / \\|-| |-|    /              ~",
    "                   ~               /        ¨                             8888 88  8888 ||   ||    ^ ||^  /_\\/   \\  \\|  |_____|  |    //^\\\\    (\\     ¨       |-|          /",
    "                                  :                                        || 8888  ||    88     ^/ \\ ^ \\/   \\    \\  |__|_|=|_|__|      #      | \\        ¨          ¨    /",
    "                                  |                 ¨                ¨         || 88     8888 ^ / \\ ^/ \\ \\    \\                         #      |  '----------------------'     ~",
    "                                  |                                              8888   ^ || / \\   /_\\  \\ \\       //^\\\\                 #      |",
    "                               ~  |      ¨                    ¨                   || ^ / \\^ / ^ \\ /   \\  \\          #                          |",
    "                  ~               |                                      ¨          /_\\  /_\\ / \\ /     \\      ¨     #   /\\/\\_P                 |   ~",
    "                                  |  ¨        ^     ^  ^                        ^  /   ^/   \\   \\                   #  `||||          Q_/\\/\\   |",
    "                          ~       |          /_\\   /_\\/_\\ ^  ^  ^      ^    ^  /_\\/   /_\\    \\   \\                                      ||||`  :          ~        ~                           ~",
    "                                  |      ¨  /   \\^/   ^  /_\\/_\\/_\\ ^  /_\\  /_\\/   \\  /   \\                 ¨                    //^\\\\         /",
    "                                  :        / ^  / ^  /_\\/ ^/   ^  /_\\/   ^/   \\    \\/     \\         ¨               Q_/\\/\\        #          /",
    "    ~                             \\         /_\\/ ^ \\/ ^ \\/ ^  /_\\/   \\  /_\\    \\                                      ||||`       #         /     ~",
    "                      ~            :______ / ^ \\/ ^ \\/_\\/ ^ \\/ ^ \\    \\/   \\              ¨                                       #        /",
    "                                ~         ) /_\\/ /_\\/ ^ \\/_\\ \\/_\\ \\   /     \\                    ¨            ¨           ,---------------'    ~                ~                   ~",
    "                                          :/   \\/   \\/_\\/   \\/   \\               ¨                                       (_______",
    "                                          \\    /    /   \\    \\    \\                                                      ________´'\\",
    "                           ~               \\       /|[O]|\\                               ¨                       ¨      /________\\  :   ~",
    "                                            \\                    ¨                                                      |__[ ]___|   \\             ~",
    "             ~                      ~        \\                              ¨        __________        ¨                 .________.   ´'\\                     ~",
    "                                              :                             ________/          ´'\\__ ______              :'´'´'´'´:      :   ~",
    "                                ~             |                            /                       !-! ~  ´'\\       \\ /  :'´'´'´'´:      |                                                 ~",
    "                          ~                   |     ¨                    _/  ~                     !-!       \\     --O-- :'´'´'´'´:      |              ~",
    "   ~                                          |                  ¨     _/                          !-!        ´'\\   / \\  :'´'´'´'´:      |",
    "                                              :                     __/          ~         ~       !-!           |  |_|  :'´'´'´'´:      :      ~                      ~",
    "                                        ~     \\         _          (                               !-!      ~    |  |_|  :'´'´'´'´:   __/          ~",
    "                              ~                \\       (O)         |                        _______!-!           |  / \\  :'´'´'´'´:  /   ~",
    "                                                \\       ¨          |    ~                  |    _    |   ~       |       :________: /                                        ~",
    "                                                 \\                /                ~      /    /&\\    \\           ´'\\              /",
    "      ~                                 ~         '--------------'                       '--.  |¤|    .'             '------------'         ~",
    "                          ~                                               ~                  \\_______/",
    "                                                         ~                                                   ~                    ~                    ~",
    "                                               ~                                        ~                                 ~                                        ~",
    "                                   ~",
    "                                                                    ~                                                                 ~",
    "                                                                                                           ~                                                                             ~",
    "                                                                                     ~                                                             ~        ~",
    "        ~                   ~               ~             ~",
    "                                                                                                                             ~",
    "",
    "",
    "                                                                                    ~",
    "                                  ~",
    "                                                                                                                                                     ~",
    "                ~                                          ~                                                       ~",
    "",
    "                                          ~",
    ""
]);
Database.addAscii("places/dragonFoot", 161, 25, [
    "                                                                                                                         .'                          '.",
    "                                                                                                                         '                            '",
    "                                                                                                                        .'                            '.",
    "                                                                                                                        '                              '",
    "                                                                                                                       .'                              '.",
    "                                                                                                                       '                                '",
    "                                                                                                                      .'                                '.",
    "                                                                                                                      /                                  \\",
    "                                                                                                                     /                                    \\",
    "                                                                                                                    .'                                    '.",
    "                                                                                                                   .'                                      '.",
    "                                                                                                                 _-'                                        '.",
    "                                                                                                ____....----''_''              __.-'                          '.",
    "                                                                                   ___...---''''    __..--''''          _..--''                                 '",
    "                                                                          __..--'''       ___...---'              _..--'                                        \\",
    "                                                                   _..--''         _..--''                    _.-'                                              |",
    "                                                                 .'              .'                         .'                                                  |",
    "___                                                             '               '                          '                                                    |",
    "  |___                                                         /               /                          /                                                  __/",
    "     |___                                                      '               '                          '                         _____.....------'''''''''",
    "         |___                                                 /               /                          /                 __...--''",
    "            |___                                              '               '                ___...---''          _..--''",
    "               |___                                           |          ___..|       __..--'''          |    _..--'",
    "__________________|___                                         \\_..---'''     \\_..--''                   \\_.-'",
    ""
]);
Database.addAscii("places/lonelyHouse", 97, 35, [
    "  /        |                                                                         |        \\",
    " /         |                                                                         |         \\",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |_________________________________________________________________________|          |",
    "|         /                                                                           \\         |",
    "|        /                                                                             \\        |",
    "|       /                                                                               \\       |",
    "|      /                                                                                 \\      |",
    "|     /                                                                                   \\     |",
    "|    /                                                                                     \\    |",
    "|   /                                                                                       \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/mountains", 138, 19, [
    "                                    /\\                                              /\\",
    "                                   // \\     _      /\\                              /  \\     _      /\\",
    "                      /\\_        _//   \\   / \\/\\ _/  \\    /\\         /\\_        __/   \\\\   / \\/\\ _/  \\    /\\",
    "                    _/   \\/\\_  _/ /   \\ \\_/   \\_/     \\__/ _\\      _/   \\/\\_  _/ /      \\_/   \\_/     \\__/ _\\",
    "                   /        `\\/   \\_   \\ \\_    / //    /    \\\\    /        `\\/   \\_   \\  \\_    / //    /    \\\\",
    "                  //     \\    \\_  / \\      \\  / _     /  /    \\  //     \\    \\_  / \\      \\   / _     /  /    \\",
    "                 //       \\     |/                             \\//       \\     |/                              \\",
    "       /\\       /                          \\             _      \\                                    /\\         \\",
    "    __/ -\\     /                                        /¨\\      \\_             _                   // \\     _   \\  /\\",
    "___//    \\\\   /     /         /                    ____/   \\_____/¨\\__         /¨\\     /\\_        _//  \\\\   / \\/\\\\\\/  \\    /\\",
    "/     /    \\ /     /         /                    /¨¨¨¨     ¨¨¨¨¨   ¨¨\\       /   \\  _/   \\/\\_  _/ /     \\_/   \\_//    \\__/ _\\",
    "            /               /               _____/                     \\_____/     \\/        `\\/   \\_  \\  \\_    / //    /    \\\\",
    "           /                         ______/¨¨¨¨¨                       ¨¨¨¨¨       \\                                          \\",
    "          /                         /¨¨¨¨¨¨                                          \\_____                                     \\",
    "         /                        _/                                                  ¨¨¨¨¨\\                                     \\",
    "        /        _____           /¨                                                         \\                            ______   \\",
    "       /   _____/¨¨¨¨¨\\_________/                                                            \\_________              ___/¨¨¨¨¨¨\\___\\______",
    "______/___/¨¨¨¨¨       ¨¨¨¨¨¨¨¨¨                                                              ¨¨¨¨¨¨¨¨¨\\____    ____/¨¨¨        ¨¨¨¨¨¨¨¨¨¨",
    "¨¨¨¨¨¨¨¨¨¨                                                                                              ¨¨¨¨\\__/¨¨¨¨"
]);
Database.addAscii("places/outsideTheHole", 100, 21, [
    "                                           ¨                           ¨",
    "                  ¨               ¨                            ¨                     ¨         ¨",
    "        ¨                 ¨                          ¨                      ¨",
    "                                           ________        _______                          ¨",
    "  ¨                                       /|       \\______/      /                ¨",
    "               ¨                ¨        / |       |      |    _/     ¨",
    "                        ¨               /  |       |      |   /                                  ¨",
    "                                       /   |       |      |   \\   ¨                       ¨",
    "      ¨                        ¨      /    |       |      |   /          ¨",
    "                                     /     |       |      |  /                      ¨",
    "                           ¨         \\     |       |      | /  ¨                                   ¨",
    "                  ¨                   \\    |       |      |/",
    "         ¨                             \\__ |       |      /            ¨                  ¨",
    "                             ¨            \\|       |     /         ¨",
    "                                   ¨       \\       |    /                     ¨",
    "    ¨             ¨                         \\______|___/    ¨                                ¨",
    "                             ¨",
    "           ¨                                         ¨                                ¨",
    "                                          ¨                      ¨",
    "                     ¨                            ¨                                            ¨",
    "    ¨                          ¨                                            ¨"
]);
Database.addAscii("places/pier", 75, 23, [
    "                   ___                             ~",
    "  ~               /   \\                                                   ~",
    "          ~       |   |   ~",
    "                 /|   |                   ~                          ~",
    "                / |   |                               ~",
    "               /  |   |         ~",
    "    ~         /   |   |                                      ~",
    "             /    |   |",
    "            /     |   |  ~                  ~       ________________",
    " ~       ~ /      |   |             ~              /---------------/|",
    "          /       |   |      ~                    /---------------/||  ~",
    "    ~    /        |   | ~              ~      ~  /---------------/|/",
    "~       /_________|   |          ~              /---------------/|/|~",
    "     ~    _.------|   |------._                /---------------/|/||",
    "  ~   _.-'_.------|   |------._'-._     ~     /---------------/|/|||    ~",
    "   .-'.-'         |   |         '-.'-.       /---------------/|/~|||",
    "~  '-.__          |   |          __.-'   ~  /---------------/|/  ||/",
    "    \\   '---.__   |   |   __.---'   /~     /---------------/|/       ~",
    " ~   \\         '---------'         /  ~   /---------------/|/  ~",
    "      \\                           /      /---------------/|/            ~",
    "    ~  '----._______________.----' ~    /---------------/|/        ~",
    "          ~     ~      ~    ~          /---------------/|/  ~",
    "______________________________________/---------------/_/__________________"
]);
Database.addAscii("places/treasure", 43, 25, [
    "                    888888        |",
    "    ¨               888888        |",
    "                  8888888888   ¨  |",
    "                  8888888888      |",
    "                88888888888888    |",
    "         ¨      88888888888888    |",
    "                    |    |        |",
    "        888888      |    |        |",
    "        888888      |    |    ¨   |",
    "   ¨  8888888888    |    |        |",
    "      8888888888    |    |        |_",
    "    88888888888888                  '-.__",
    "    88888888888888                       \\",
    "        |    |            888888          |",
    "        |    |    ¨       888888          |",
    "     ¨  |    |          8888888888        |",
    "        |    |          8888888888      ¨ |",
    "        |    |        88888888888888      |",
    "                      88888888888888      |",
    "                          |    |          |",
    "                  ¨       |    |          |",
    "                          |    |          |",
    "                          |    |          |",
    "                          |    |          |",
    ""
]);
Database.addAscii("places/wishingWell", 37, 30, [
    "       _______________________",
    "     /|                       |\\",
    "    //|_______________________|\\\\",
    "   ///                         \\\\\\",
    "  ///                           \\\\\\",
    " ///                             \\\\\\",
    "///                               \\\\\\",
    "|/_________________________________\\|",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||    _________________    ||",
    "    || .-' _______________ '-. ||",
    "    ||' .-'  |    |    |  '-. '||",
    "    || /|    |    |    |    |\\ ||",
    "   (||( |    |    |    |    | )||)",
    "   |\\  \\|    |    |    |    |/  /|",
    "   | \\  '-.  |    |    |  .-'  / |",
    "   | |'.   '-------------'   .'| |",
    "   |\\| |'-._______________.-'| |/|",
    "   | \\ | | | | | | | | | | | | / |",
    "   | |'. | | | | | | | | | | .'| |",
    "   |\\| |'-._______________.-'| |/|",
    "   | \\ | | | | | | | | | | | | / |",
    "    \\|'. | | | | | | | | | | .'|/",
    "     \\ |'-._______________.-'| /",
    "      '. | | | | | | | | | | .'",
    "        '-._______________.-'"
]);
Database.addAscii("places/aTree/background", 70, 52, [
    "            |   |",
    "            |   |",
    "  |             |",
    "  |             |",
    "  |             |",
    "                |",
    "                |        _.-'''-,",
    "                |      .'        `\\",
    "                |     /           /",
    "       |        |    /      .--^_^",
    "       |        |    |     /  C ,,\\",
    "                |    |    |   \\  _.)                           ___",
    "                |     \\   |   /  \\                   ____.----'.-'",
    "                |      '-, \\./ \\)\\)               .-' --  __.-'",
    "    |            \\        `-/   );/           ___/  - _.-'",
    "    |             \\_________''--'-'________.-' --    /",
    "    |              -   --        -  -     -     __.-'",
    "                     -    --    -     --   --  /",
    "                   _________________________.-'",
    "                  /",
    "                 /",
    "                |",
    "          |     |",
    "          |     |",
    "          |     |",
    "          |     |",
    "                |",
    "                |",
    "                |",
    "                |",
    "      |         |",
    "      |         |",
    "      |         |",
    "                |",
    "                |",
    "                |",
    "                |",
    "  |             |",
    "  |             |",
    "             |  |",
    "             |  |",
    "                |",
    "                |",
    "                |",
    "                |",
    "  |             |",
    "  |             |",
    "  |             |",
    "  |             |",
    "            |   |",
    "            |   |",
    "                |^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
]);
Database.addAscii("places/aTree/ticTacToeBoard", 22, 13, [
    " _____________________",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|"
]);
Database.addAscii("places/aTree/ticTacToeO", 4, 3, [
    " __",
    "|  |",
    "|__|"
]);
Database.addAscii("places/aTree/ticTacToeX", 2, 2, [
    "\\/",
    "/\\"
]);
Database.addAscii("places/castle/map", 106, 34, [
    "                               |____|",
    "                               |____|",
    "                               |____|",
    "                               |____|",
    " ______________________________|    |_____________________________",
    "|                                   ¨                             |",
    "|  ¨                ¨                              ¨     ¨        |",
    "|                            ¨           ¨                      ¨ |",
    "|        ¨       ¨                 ¨             ¨                |                          _____",
    "|______________          ________________________________ ¨       |                      _.-'     '-._",
    "|              |        |                                |        |_____________       .'             '.",
    "|              |     ¨  |                                | ¨          ¨         |     /                 \\",
    "|              #        |                                |      ¨    .-'-'-. ¨  |____;                   ;",
    "|              #  ¨     |                                |          /o      '.      #                    |",
    "|              |        |                                |   ¨      \\o      .'   ___#                    |",
    "|______________|        |                                |       ¨   '-.-.-'   ¨|    ;                   ;",
    "|              |      ¨ |                                #         _____________|     \\                 /",
    "|              |        |                                #     ¨  |                    '._           _.'",
    "|              #        |                                |        |                       '-._____.-'",
    "|              #        |                                | ¨      |",
    "|              | ¨      |                                |      ¨ |",
    "|______________|    ¨   |                                |        |",
    "|              |        |________________________________|        |",
    "|              |                          ¨                 ¨     |",
    "|              #    ¨        ¨                       ¨            |",
    "|              #                   ¨          ¨                   |",
    "|              | ¨         ¨           ¨           ¨         ¨    |",
    "|______________|_______________________          _________________|",
    "                                       |  ¨     |",
    "                                       |        |",
    "                                       |      ¨ |",
    "                                       | ¨      |",
    "                                       |___  ___|",
    "                                           ##"
]);
Database.addAscii("places/castle/bigRoom/background", 160, 27, [
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                  _.- - - - -._                                                                                |",
    "        |                                              _.-'             '-._                                                                            |",
    "        |                                           .-'     _.- - - -._     '-.                                                                         |",
    "        |                                          /     .-'           '-.     \\                                                                        |",
    "        |                                         /     / |  o       o  | \\     \\                                                                       |",
    "        |                                         |    /  |      _      |  \\    |                                                                       |",
    "        |                                         |    |  |    .' '.    |  |    |                                                                       |",
    "        |                                         |    |  |_____________|  |    |                                                                       |",
    "        |                                         |    | /               \\ |    |                                                                       |",
    "        |                                         |____|/_________________\\|____|                                                                       |",
    "        |                                         |                             |                                                                       |",
    "        |                                         |         ___________         |                                                                       |",
    "        |                                         |        | |       | |        |                                                                       |",
    "        |_________________________________________|        | |_______| |        |_______________________________________________________________________|",
    "       /                                          |        | /       \\ |        |                                                                       \\",
    "      /                                           |________|/         \\|________|                                                                        \\",
    "     /                                                                                                                                                    \\",
    "    /                                                                                                                                                      \\",
    "   /                                                                                                                                                        \\",
    "  /                                                                                                                                                          \\",
    " /                                                                                                                                                            \\",
    "/                                                                                                                                                              \\"
]);
Database.addAscii("places/castle/room2/fire", 16, 6, [
    "     _ /\\ _",
    "  .-' // \\ '-.",
    " (_; /_/ \\\\ ;_)",
    "(_; // | \\ \\\\ .)",
    "( `.__ _  ___,')",
    " `'(_ )_)(_)_)'"
]);
Database.addAscii("places/castle/room2/pitchfork", 12, 8, [
    "      /    /",
    "     /    /",
    "    /    /",
    "   /    /",
    "  /    /",
    " /    /",
    " ////",
    "////"
]);
Database.addAscii("places/castle/tower/castleTower", 90, 95, [
    "       /                                                                          \\",
    "      /                ¨                         ¨           ¨        ¨            \\",
    "     /                             ¨                ¨                               \\",
    "    /        ¨                             ¨                                         \\",
    "   /                                                         ¨                   ¨    \\",
    "  /                       ¨     ¨                                                      \\",
    " /    ¨   ¨       ¨                            ¨                                        \\",
    "/                                                                     ¨         ¨        \\",
    "|'_                    ¨            ¨                                                  _'|",
    "|  ''--..___                                 ¨       ¨        ¨               ___..--''  |",
    "|           '''---....____                                      ____....---'''           |",
    "|                         '''''-----.....________.....-----'''''                         |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                        ________                                        |",
    "|                     ____.....-----'''''        '''''-----.....____                     |",
    "|                    /                                              \\                    |",
    "|                   /                                                \\                   |",
    "|                  /__________________________________________________\\                  |",
    "|                  |   _____        _____        _____        _____   |                  |",
    "|                  |  /     \\      /     \\      /     \\      /     \\  |                  |",
    "|                  | /       \\    /       \\    /       \\    /       \\ |                  |",
    "|                  ||         |  |         |  |         |  |         ||                  |",
    "|        ___...---'| \\       /    \\       /    \\       /    \\       / |'---...___        |",
    "| _..--''  ____ _  |  \\_____/      \\_____/      \\_____/      \\_____/  |          ''--.._ |",
    "|'_      .'____.'  |__________________________________________________|                _'|",
    "|  ''--..___                                                                  ___..--''  |",
    "|       |   '''---....____                                      ____....---'''   |       |",
    "|__     |         |       '''''-----.....________.....-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "   ''--.|___      |           |              |             |           |      ___|.--''",
    "            '''---|...____    |              |             |    ____...|---'''",
    "                          '''''-----.....____|___.....-----'''''"
]);
Database.addAscii("places/castle/tower/talkingCandy", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("places/cauldron/book", 96, 30, [
    "      _________________________________________   ________________________________________",
    " _.-' |                                        \\ /                                       | '-._",
    "| | | |                                         v                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |_________________________________________|________________________________________| | | |",
    "| | |'__________________________________________^________________________________________'.| | |",
    "|_|'___________________________________________/ \\_________________________________________'.|_|"
]);
Database.addAscii("places/cauldron/bookPage0", 39, 22, [
    "0",
    "",
    "",
    "______                   _",
    "| ___ \\                 (_)",
    "| |_/ /_ __ _____      ___ _ __   __ _",
    "| ___ \\ '__/ _ \\ \\ /\\ / / | '_ \\ / _` |",
    "| |_/ / | |  __/\\ V  V /| | | | | (_| |",
    "\\____/|_|  \\___| \\_/\\_/ |_|_| |_|\\__, |",
    "                                  __/ |",
    "                                 |___/",
    "                   _",
    "      ___         (_)         __",
    "    \\/   \\/   +    |   -->    )(",
    "    /\\___/\\        |         /  \\",
    "                   |        (____)",
    "                                    _",
    "                                   | |",
    "  _ __ ___   __ _ _ __  _   _  __ _| |",
    " | '_ ` _ \\ / _` | '_ \\| | | |/ _` | |",
    " | | | | | | (_| | | | | |_| | (_| | |",
    " |_| |_| |_|\\__,_|_| |_|\\__,_|\\__,_|_|"
]);
Database.addAscii("places/cauldron/bookPage1", 38, 18, [
    "                                     1",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "              ~ Summary ~",
    "                ¨¨¨¨¨¨¨",
    "",
    " Page 2 : Health potion",
    " Page 3 : Turtle potion",
    " Pages 4-5 : Anti-gravity potion",
    " Pages 6-7 : Berserk potion",
    " Pages 8-9 : The P potion",
    " Pages 10-11 : The X potion",
    ""
]);
Database.addAscii("places/cauldron/bookPage10", 40, 26, [
    "10",
    "              The X potion",
    "              ¨¨¨¨¨¨¨¨¨¨¨¨",
    "  The X potion is a legend. It is said",
    "that whoever manage to brew it and drink",
    "it would travel to a place where no one",
    "have been before.",
    "",
    "  I don't know if this potion is just a",
    "legend or not, but I will write in this",
    "book everything I know about it.",
    "",
    "  The X potion is mentioned in many old",
    "legends and alchemy books. Here's a",
    "summary of the informations which may",
    "help you to brew it. Good luck!",
    "",
    " - It is said that 5 steps are necessary",
    "to brew the X potion.",
    "",
    " - It is said that no lollipops are",
    "required, except for one of the steps.",
    "",
    " - It is said that, unlike for other",
    "potions, you can't brew multiple X",
    "potions at once."
]);
Database.addAscii("places/cauldron/bookPage11", 39, 26, [
    "                                    11",
    "",
    " - Finally, the following poem is often",
    "quoted when it comes to the X potion :",
    "",
    "          On the first day,",
    "it gave birth to the very first Sweet.",
    "       But it was cold outside.",
    "",
    "          On the second day,",
    "      it gave the Sweet a father.",
    "       But it was cold outside.",
    "",
    "          On the third day,",
    "      it gave the Sweet a brother.",
    "       But it was cold outside.",
    "",
    "          On the fourth day,",
    "      it gave the Sweet a friend.",
    "       But it was cold outside.",
    "",
    "          On the fifth day,",
    "      it gave the Sweet a lover,",
    "   and it may sound simple or silly,",
    "     but now the Sweet was happy,",
    "       and it was hot outside."
]);
Database.addAscii("places/cauldron/bookPage2", 39, 22, [
    "2",
    "",
    "",
    "",
    "              Health potion",
    "              ¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "",
    "  The health potion is one of the",
    "easiest to brew, really. It only",
    "requires candies. Used in quests, it",
    "will heal you by giving you back 100",
    "health points.",
    "",
    "  Instructions :",
    "   - Put 100 candies in your cauldron",
    "   - Mix for a few seconds",
    "   - Put into bottles",
    "",
    "  Just like for any potion, you can of",
    "course multiply the quantities. For",
    "example, if you use 300 candies instead",
    "of 100, you will get 3 health potions."
]);
Database.addAscii("places/cauldron/bookPage3", 39, 26, [
    "                                     3",
    "",
    "             Turtle potion",
    "             ¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "  The turtle potion is a bit harder to",
    "brew than the health potion. You will",
    "need both candies and lollipops.",
    "",
    "  If you drink this potion in a quest,",
    "it will turn you into a turtle. You",
    "will move slower, but you will also be",
    "more resistant to you enemies attacks.",
    "",
    "  Instructions :",
    "   - Put 50 candies in your cauldron",
    "   - Add 500 lollipops in your cauldron",
    "   - Mix during more or less 10 seconds",
    "   - Stop mixing",
    "   - Add 50 candies",
    "   - Mix again for a few seconds",
    "   - Put into bottles",
    "",
    "  And now the most important thing you",
    "should never forget : once you will be",
    "a turtle, do NOT turn over. You",
    "wouldn't be able to get up."
]);
Database.addAscii("places/cauldron/bookPage4", 40, 25, [
    "4",
    "",
    "",
    "           Anti-gravity potion",
    "           ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "  This potion, which was invented by the",
    "well-known sorcerer Isaac, allows you to",
    "resist to the earth's gravitation force",
    "for a few seconds.",
    "",
    "  It is especially useful after jumping",
    "(if you can't jump, you should seriously",
    "consider obtaining a pogo stick).",
    "",
    "  It isn't very easy to brew, you will",
    "need to heat up your cauldron and watch",
    "the temperature carefully.",
    "",
    "  Instructions :",
    "   - Put 1000 candies in your cauldron",
    "   - Heat up until the water is lukewarm",
    "   - Stop heating up",
    "   - Add 1000 candies",
    "   - Heat up until the water is boiling",
    "   - Put into bottles"
]);
Database.addAscii("places/cauldron/bookPage5", 39, 23, [
    "                                     5",
    "",
    "",
    "     Anti-gravity potion : use case",
    "     ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "           \"Fly above a gap\"",
    "",
    "",
    "_____\\o/_______            ____________",
    "              /            \\",
    "",
    "",
    "   *drinks the potion*",
    "__________\\o/__            ____________",
    "              /            \\",
    "",
    "",
    "_______________     \\o/    ____________",
    "              /            \\",
    "",
    "",
    "_______________            __\\o/_______",
    "              /            \\"
]);
Database.addAscii("places/cauldron/bookPage6", 40, 23, [
    "6",
    "",
    "",
    "",
    "             Berserk potion",
    "             ¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "  The berserk potion transforms you into",
    "a berserker.",
    "",
    "  The drawback is that it consumes half",
    "of your life.",
    "",
    "  The benefit is that it doubles your",
    "damage for a few seconds!",
    "",
    "  Brewing this potions is very simple,",
    "but you will need a lot of lollipops.",
    "Here are the instructions :",
    "   - Put 20 000 lollipops in your",
    "     cauldron",
    "   - Mix them until your arms are",
    "     hurting",
    "   - Put into bottles"
]);
Database.addAscii("places/cauldron/bookPage7", 38, 20, [
    "                                     7",
    "",
    "",
    "",
    "",
    "",
    "",
    "           Important notice",
    "           ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "     concerning the berserk potion",
    "     ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "",
    "  Do NOT add any candy when brewing",
    "this potion.",
    "",
    "  I mean, not a single one.",
    "",
    "  Really.",
    "",
    "  Results would be unexpected."
]);
Database.addAscii("places/cauldron/bookPage8", 40, 26, [
    "8",
    "              The P potion",
    "              ¨¨¨¨¨¨¨¨¨¨¨¨",
    "  The P potion is a strange one. You",
    "cannot predict what it is going to do.",
    "It could heal you or damage you, make",
    "you stronger or weaker, or even turn you",
    "into someone (something?) else.",
    "",
    "  And it's also hard to brew!",
    "",
    "  Instructions :",
    "   - Put 500 candies in your cauldron",
    "   - Mix for a few seconds",
    "   - Stop mixing",
    "   - Add 100 times more candies than the",
    "number of seconds you mixed. For example",
    "if you mixed during 4 seconds, you'll",
    "need to add 400 candies. Do not multiply",
    "this quantity, even if you want to make",
    "more than one potion.",
    "   - Heat up until the water is lukewarm",
    "   - Stop heating up",
    "   - Add some lollipops",
    "   - Mix",
    "   - Put into bottles!"
]);
Database.addAscii("places/cauldron/bookPage9", 40, 21, [
    "                                     9",
    "",
    "",
    "",
    "",
    "    Make a good use of the P potion",
    "    ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "  There are some rules which you can",
    "follow in order to get better results",
    "when drinking the P potion. Although",
    "these rules were defined empirically,",
    "they seem to work pretty well.",
    "",
    "  - The more you use P potions, the more",
    "they seem to have strange effects.",
    "",
    "  - If your health is very low, you",
    "should probably drink a P potion.",
    "",
    "  - Animals drinking P potions seem to",
    "react in a very bad way."
]);
Database.addAscii("places/cauldron/cauldron", 42, 18, [
    "            _________________",
    "           (_________________)",
    "          .-'               '-.",
    "        .'                     '.",
    "       /                         \\",
    "      '                           '",
    "     '                             '",
    "    '                               '",
    "    '                               '",
    "    '                               '",
    "     \\                             /",
    "      '.                         .'",
    "        '-.___________________.-'",
    "            / /           \\ \\",
    "           / /             \\ \\",
    "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
    "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨"
]);
Database.addAscii("places/fortress/inside", 100, 32, [
    "                              |                                      |",
    "                              |                                      |",
    "                              |                                      |",
    "                              |                                      |",
    "                              |           _______________            |",
    "                              |          |               |           |",
    "                              |          |               |           |",
    "                  _.-'|       |          |               |           |       |'-._",
    "              _.-'    |       |          |              /|           |       |    '-._",
    "          _.-'        |       |          |             / |           |       |        '-._",
    "       .-'            |       |          |            /  |           |       |            '-.",
    "       |              |       |          |           /   |           |       |              |",
    "       |              |       |          |          /    |           |       |              |",
    "       |              |       |          |         /     |           |       |              |",
    "       |              |       |          |        /      |           |       |              |",
    "       |              |       |          |       /       |           |       |              |",
    "       |              |       |          |      /        |           |       |              |",
    "       |              |       |          |     /         |           |       |              |",
    "       |              |       |          |    /          |           |       |              |",
    "       |              |       |          |   /           |           |       |              |",
    "       |              |       |          |  /            |           |       |              |",
    "       |-._           |       |          | /             |           |       |           _.-|",
    "       |   '-._       |       |__________|/              |___________|       |       _.-'   |",
    "       |       '-._   |    _.-'                                      '-._    |   _.-'       |",
    "       |           '-.|_.-'                                              '-._|.-'           |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "    _.-'                                                                                     '-._",
    "_.-'                                                                                             '-.",
    ""
]);
Database.addAscii("places/lighthouse/lighthouse", 100, 48, [
    "",
    "",
    "                                                                ___",
    "                                                               {=0=}",
    "                                                               /---\\",
    "                                                           ___/_____\\___",
    "                                                           |[         ]|",
    "                                                           |[         ]|",
    "                                                        :  |+++++++++++|  :",
    "                                                        :__|+++++++++++|__:",
    "                                                             |#######|",
    "                                                             |#######|",
    "                                                             |#######|",
    "                                                            |         |",
    "                                                            |         |",
    "                                                            |         |",
    "                                                           |###########|",
    "                                                           |###########|",
    "                                                           |###########|",
    "                                                          |             |",
    "                                                          |             |",
    "                                                          |             |",
    "                                                         |###############|",
    "                                                         |###############|",
    "                                                         |###############|",
    "                                                        |                 |",
    "                                                        |                 |   __",
    "                                                        |                 |  ( o)",
    "                                                       |###################| /||",
    "                                                       |###################|( ||",
    "                                                  _____|###################|_\\_m\\",
    "                                                 /                             |\\\\_",
    "                                   _____________/                    --        | '-'",
    "                       ___________/                                            |",
    "                     _|                                                        |",
    "                   _|     ----                      -----                      |",
    "                 _|                                                             \\",
    "               _|                                                  ---           |",
    "             _|                                                                  |",
    "           _|                       ---                                          |",
    "__________|                                                                       \\",
    "                                                                                   |",
    " ---                                                          --                   |",
    "                                                                                   |",
    "                                       ----                                        |",
    "                   --                                                       ---    |",
    "                                                                                   | _      _      _",
    "                                                                                   \\)`'-.,_)`'-.,_)`"
]);
Database.addAscii("places/lighthouse/puzzle/blankPart", 7, 5, [
    "_______",
    "\\     /",
    "/     \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/livesPart", 7, 5, [
    "_______",
    "\\     /",
    "/ <3  \\",
    "\\  <3 /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/moveBelowLineToTheRight", 7, 5, [
    "_______",
    "\\     /",
    "/  V  \\",
    "\\ --> /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/moveLeftLineAbove", 7, 5, [
    "_______",
    "\\     /",
    "/ < T \\",
    "\\   | /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/nothingHerePart", 7, 5, [
    "_______",
    "\\ no  /",
    "/thing\\",
    "\\here!/",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showAbove", 7, 5, [
    "_______",
    "\\     /",
    "/  T  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showAroundPart", 7, 5, [
    "_______",
    "\\     /",
    "/ T > \\",
    "\\ V < /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showBelow", 7, 5, [
    "_______",
    "\\     /",
    "/  V  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showLeft", 7, 5, [
    "_______",
    "\\     /",
    "/  <  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showLeftRight", 7, 5, [
    "_______",
    "\\     /",
    "/  >  \\",
    "\\  <  /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showRight", 7, 5, [
    "_______",
    "\\     /",
    "/  >  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/stonePart", 7, 5, [
    "_______",
    "\\ ___ /",
    "// P \\\\",
    "\\\\___//",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/whatPart", 7, 5, [
    "_______",
    "\\     /",
    "/ ? ? \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lollipopFarm/lolligatorLeftFull", 12, 2, [
    "\\o^^^^.__.-.",
    "/ ¨¨¨¨¨  '-'"
]);
Database.addAscii("places/lollipopFarm/lolligatorLeftTop", 12, 1, [
    "_o^^^^.__.-."
]);
Database.addAscii("places/lollipopFarm/lolligatorRightFull", 13, 2, [
    ".-.__.^^^^^o/",
    "'-'  ¨¨¨¨¨¨ \\"
]);
Database.addAscii("places/lollipopFarm/lolligatorRightTop", 13, 1, [
    ".-.__.^^^^^o_"
]);
Database.addAscii("places/lollipopFarm/lollipopFarm", 102, 28, [
    "                                     _______________________________________________",
    "                                    /-----------------------------------------------\\",
    "                                   /-------------------------------------------------\\",
    "                                  /___________________________________________________\\",
    "                                 /|  __________           _____            _________  |\\",
    "                                  | [__________]         |  |  |          [_________] |",
    "                                  |                      | .|. |                      |",
    "                                  |                      |  |  |                      |",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "                  :---:---:---:---:---:---:---:---:---:",
    "                 /  ______________________________   /",
    "                :  /                             /  :",
    "               /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "              :  /  #.#/#!#/#&#   #*#/#£#/#§#  /  :",
    "             /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "            :  /  #.#/#!#/#&#   #*#/#£#/#§#  /  :",
    "           /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "          :  /  #.#/#!#/#&#   #*#/#£#/#§#  /  :",
    "         /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "        :  /  #.#/#!#/#&#   #*#/#£#/#§#  /  :",
    "       /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "      :  /  #.#/#!#/#&#   #*#/#£#/#§#  /  :",
    "     /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "    :  /  #.#/#!#/#&#   #*#/#£#/#§#  /  :",
    "   /  /  #.#/#!#/#&#   #*#/#£#/#§#  /  /",
    "  :  /_____________________________/  :",
    " /                                   /",
    ":---:---:---:---:---:---:---:---:---:"
]);
Database.addAscii("places/lollipopFarm/mill", 19, 15, [
    "        __",
    " /'.   /**\\   .'\\",
    "/   './    \\.'   \\",
    "'-._  '.__.'  _.-'",
    "   |'-.(==).-'|",
    "   |_.-;||;-._|",
    "_.-'  .'--'.  '-._",
    "\\   .'------'.    /",
    " \\.'|--------|'._/",
    "    |--------|",
    "    |---()---|",
    "    |________|",
    "     /      \\",
    "",
    ""
]);
Database.addAscii("places/lollipopFarm/pond", 52, 15, [
    "                    _____",
    "            _____.-'     \\____         |",
    "       ____/        ~        (_______  !|",
    "      (       ~                      '-.!||",
    "       \\                 ~            (_ !!|||",
    "        :                       ~       '-.!!!|",
    "       /            ~                      '-.!",
    " ______)     ~                     ~          \\",
    "(_                                             \\",
    "  \\  ~             ~                    ~       '-.",
    "   \\                        ~                  ~   )",
    "    \\____                                    ___.-'",
    "         '-.     ~                ~         /",
    "            '-.________           _________/",
    "                       '-._____.-'"
]);
Database.addAscii("places/quests/bridge/bridge", 138, 15, [
    "__________________________________________________________________________________________________________________________________________",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "__________________________________________________________________________________________________________________________________________",
    "   \\__    __/                                                   \\__    __/                                                    \\__    __/",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                          -._       \\    |  |,    /       _.-                                          |  |",
    "      |  |                                             '-._      .d|  | b.      _.-'                                             |  |",
    "      |  |                                                      d  |  |   b    '                                                 |  |",
    "      |  |                                                     d   |  |    b                                                     |  |",
    "°º¤ø,¸|  |º°`°º¤ø,¸,ø¤°º¤ø,¸¸,ø¤º°`°º¤ø,¸,ø¤º°`°º¤ø,¸,ø¤°º¤ø,¸¸,ø¤º|  |¤ø,¸,ø¤º°`°º¤ø,¸,ø¤°º¤ø,¸¸,ø¤º°`°º¤ø,¸,ø¤º°`°º¤ø,¸,ø¤°º¤ø,|  |¤º°`°",
    " ~ ~ ~|  | ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |  |~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |  |~ ~ ~",
    "~~~~~~|~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~|~~~~~",
    "~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~"
]);
Database.addAscii("places/quests/bridge/troll", 15, 10, [
    "           /\\",
    "    (_)   /< \\>",
    "    /∞\\  <\\ >/>",
    "  __\\ö/_   ||",
    " /  O-O \\_/|3",
    "| /|:::|\\_/||",
    "| ||~~~|   ()",
    "mm |\\_/|",
    "   || ||",
    "  /_|/_|"
]);
Database.addAscii("places/quests/castle/room1/background", 100, 24, [
    "",
    "",
    "       ________________________________________________________________________________________",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |____",
    "      |",
    "      |",
    "      |                                                                                         ____",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |________________________________________________________________________________________|"
]);
Database.addAscii("places/quests/castle/room3/background", 100, 24, [
    "",
    "",
    "       ________________________________________________________________________________________",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |____",
    "      |",
    "      |",
    "      |_____________________________________________________________________________________________"
]);
Database.addAscii("places/quests/castle/room3/egg", 2, 1, [
    "()"
]);
Database.addAscii("places/quests/castle/room3/monster", 13, 4, [
    "\\  _______  /",
    " \\/%%%%%%%\\/",
    "  \\%°%.%°%/",
    "   \\_____/"
]);
Database.addAscii("places/quests/castleEntrance/background", 149, 31, [
    "                                                                                                              |   |    |   |/                       /",
    "                                                                                                            _/__     ____  /                       /",
    "                                                                                                           /___/|   /___/|/                       /",
    "                                                                                                           |   |    |   |/                       /",
    "                                                                                                         _/__     ____  /                       /",
    "                                                                                                        /___/|   /___/|/                       /",
    "                                                                                                        |___|/___|___|/                       /",
    "                                                                                                                                             /",
    "                                                                                                                                            /",
    "                                                                                                                                           /",
    "                                                                                                                                          /",
    "                                                                                                                                         /",
    "                                                                                                                                        /",
    "                                                                                                                                       /",
    "                                                                                                                                      /",
    "                               ¨                                                                                                     /",
    "                                                                                                                                    /",
    "                                                                                                                            /|     /",
    "                   ¨                                                                                                       / |    /",
    "                                                                                                                          /  |   /",
    "                                                 ¨                                                                           |  /",
    "                                                                                                                             | /",
    "    ¨                                                          ¨                                                          ___|/",
    "                                   ¨                                         ¨        ¨",
    "                       ¨                           ¨                                             ¨",
    "            ¨                  ¨",
    "      ¨                                                         ¨",
    "                       ¨                                                   ¨                       ¨",
    "                                                                                        ¨",
    "                                                        ¨",
    ""
]);
Database.addAscii("places/quests/castleEntrance/front", 18, 30, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|  /",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  /",
    "|__|___|___|__| /",
    "||___|___|___||/"
]);
Database.addAscii("places/quests/castleEntrance/knight1", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'°%\\_//|__",
    " ¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    ||   ||"
]);
Database.addAscii("places/quests/castleEntrance/knight2", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'°%\\_//|__",
    " ¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    /|   ||"
]);
Database.addAscii("places/quests/castleEntrance/knight3", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'°%\\_//|__",
    " ¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    |\\   |\\"
]);
Database.addAscii("places/quests/castleEntrance/knight4", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'°%\\_//|__",
    " ¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    \\\\   \\\\"
]);
Database.addAscii("places/quests/castleEntrance/knight5", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'°%\\_//|__",
    " ¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    |\\   \\\\"
]);
Database.addAscii("places/quests/cellar/rat", 3, 1, [
    "rat"
]);
Database.addAscii("places/quests/common/chestClosed", 3, 2, [
    " _",
    "|_|"
]);
Database.addAscii("places/quests/common/chestOpenedLeft", 3, 2, [
    "  )",
    "|_|"
]);
Database.addAscii("places/quests/common/chestOpenedRight", 3, 2, [
    "(",
    "|_|"
]);
Database.addAscii("places/quests/desert/background", 149, 9, [
    "      //^\\\\                            //^\\\\                                                     //^\\\\",
    "       '#'                              '#'                                                       '#'                                //^\\\\",
    "       #                                 #                                                        #                                   '#'",
    "      #                                  #                                                       #                                      #",
    "      #                                  #                                                       #                                      #",
    " _.,--#---~--,._                        _#,--~---~--,._                         _.,--~---~---._   #                  _.,--~---~--,._     #",
    "'               '*-,._            _.,-*'               '*-,._            _.,-~*'      ~        '*-#.           ._,-*'         ~     '*-,.#",
    "   ~                  '*-,.__.,-*'      ~     ~              '-,.__.,--*'                  ~       '*-,.__.,-*'       ~                   '-,.__.,-*'",
    "         ~       ~             ~                     ~                      ~                           ~                        ~"
]);
Database.addAscii("places/quests/desert/birdLeftDown", 9, 4, [
    "",
    "<>_____",
    "  \\_\\\\/-<",
    "     \\\\"
]);
Database.addAscii("places/quests/desert/birdLeftUp", 9, 3, [
    "     //",
    "<>__//_",
    "  \\___/-<"
]);
Database.addAscii("places/quests/desert/birdRightDown", 9, 4, [
    "",
    "  _____<>",
    ">-\\//_/",
    "  //"
]);
Database.addAscii("places/quests/desert/birdRightUp", 9, 3, [
    "  \\\\",
    "  _\\\\__<>",
    ">-\\___/"
]);
Database.addAscii("places/quests/desert/camel", 7, 2, [
    "Q_/\\/\\",
    "  ||||`"
]);
Database.addAscii("places/quests/desert/tripodCamel1", 7, 2, [
    "Q_/\\/\\",
    "  || |`"
]);
Database.addAscii("places/quests/desert/tripodCamel2", 7, 2, [
    "Q_/\\/\\",
    "  | ||`"
]);
Database.addAscii("places/quests/developer/hello", 38, 5, [
    "B    B   BBBBB   B       B       BBBBB",
    "B    B   B       B       B       B   B",
    "BBBBBB   BBBBB   B       B       B   B",
    "B    B   B       B       B       B   B",
    "B    B   BBBBB   BBBBB   BBBBB   BBBBB"
]);
Database.addAscii("places/quests/developer/imgladyoumadeitsofar", 94, 12, [
    "YYYYY  Y  YY YY      YYYYY   Y       YYYYY   YYY        O   O   OOOOO   O   O",
    "  Y       Y Y Y      Y       Y       Y   Y   Y  YY       O O    O   O   O   O",
    "  Y       Y   Y      Y  YY   Y       YYYYY   Y   Y        O     O   O   O   O",
    "  Y       Y   Y      Y   Y   Y       Y   Y   Y  YY        O     O   O   O   O",
    "YYYYY     Y   Y      YYYYY   YYYYY   Y   Y   YYY          O     OOOOO   OOOOO",
    "",
    "",
    "YY YY   YYYYY   YYY     YYYYY      YYYYY   YYYYY      YYYYY   YYYYY      YYYYY   YYYYY   YYYYY",
    "Y Y Y   Y   Y   Y  YY   Y            Y       Y        Y       Y   Y      Y       Y   Y   Y   Y",
    "Y   Y   YYYYY   Y   Y   YYYYY        Y       Y        YYYYY   Y   Y      YYYYY   YYYYY   YYYYY",
    "Y   Y   Y   Y   Y  YY   Y            Y       Y            Y   Y   Y      Y       Y   Y   Y  Y",
    "Y   Y   Y   Y   YYY     YYYYY      YYYYY     Y        YYYYY   YYYYY      Y       Y   Y   Y   Y"
]);
Database.addAscii("places/quests/developer/love", 16, 5, [
    "    Y      BBBBB",
    "  Y            B",
    "Y          BBBBB",
    "  Y            B",
    "    Y      BBBBB"
]);
Database.addAscii("places/quests/developer/me", 43, 34, [
    "                    ######",
    "                ############",
    "               ##############",
    "            ##################",
    "           ####################",
    "          #######XxxxxxxX#######",
    "         ######x++===--=++x######",
    "         #####X+=--------=+x#####",
    "         #####x+==-------==xX#####",
    "         ####X++==--------=+x######",
    "         ####X++=---------==x######",
    "         ####x+=----;-----==xX######",
    "         ####x==----------==xX######",
    "         ####XXxxx==---=++xx+X######",
    "         ####XxxXxxx+++XXXXxXX#######",
    "        #####XX#XXx+-++xXXxxxX#######",
    "        #####X###xx+;=xxx#xXxx#######",
    "        ####Xxxxxx+=;==+xxxxxx#######",
    "       #####x++===+=;======++xX######",
    "       #####x+==-=+=-=+--====+X######",
    "       #####x+=--=+=-=+=--===x#######",
    "       #####x+=--=xx=++=--==++#######",
    "       #####X+==-=xxxxx=--==+x########",
    "       ######x+===x#+xx==-=+xX########",
    "      #######xx++x#XxX#x+=++xX########",
    "      #######xxXXXXx+xXxXxx+x#########",
    "      #######XxxxXxx+++xXxXxx#########",
    "      ########xx+xx++++x++xxX#########",
    "     #########XxxxxxXXxx++xx##########",
    "     ##########Xxxxxxxx++xxX###########",
    "    ###########Xxx++++++xxX############",
    "  ##############Xx++x++xxx##############",
    " ################XXxxxxxx################",
    "######################X####################"
]);
Database.addAscii("places/quests/forest/background", 98, 17, [
    "  |   \\\\|.'    |  |    \\\\|.'   |  |     \\\\|.'  |  |   \\\\|.'    |  |    \\\\|.'   |  |     \\\\|.'  |",
    " ||   \\` /   _.| ||,!  \\` /   _| ||\\,!  \\` /   | ||   \\` /   _.| ||,!  \\` /   _| ||\\,!  \\` /   | |",
    "|||`. | |_.-'.'||||\\`. | |_.-'.|||| \\`. | |_.-'||||`\\ |||_.-'.'||||\\`. | |_.-'.|||| \\`. | |_.-'|||",
    " ||\\ \\|! ,-'   | || \\ \\|! ,-'  | ||  \\ \\|! ,-' | ||\\ \\|  ,-'   | || \\ \\|! ,-'  | ||  \\ \\|! ,-' | |",
    "| | \\  ||      || |  \\  ||     |  |   \\  ||    || | \\  ||      || |  \\  ||     || |   \\  ||    ||",
    "|||  \\  |      ||||   `. |     ||||    `. |    ||||  `. |      || |   `. |     ||||    `. |    | |",
    "| |   | |      || |    | |     || |     | |    || |   | |      || |    | |     || |     | |    ||",
    " ||   |||      | ||    |||     | ||     |||    | ||   |||      | ||    |||     | ||     |||    | |",
    "|||   | |      || |    | | ¨   ||||     | |    |||| ¨ | |      ||||    | | ¨   || |     | |    |||",
    "| |   | |  ¨   || | ¨  | |     || | ¨   | | ¨  |  |   | |      || |¨   | |     || | ¨   | |  ¨ ||",
    "  | , !|| ,    | ||   ,! |  , \\| ||   / ! |    | || , !|| ,    | ||   ,! |  , \\| ||   / ! |    | |",
    "| |   '-`      || |    '-`     || |     '-`    || |   '-`      || |    '-`     || |     '-`    ||",
    "'| \\ ¨        / '| \\  ¨       / '| \\    ¨     / '| \\      ¨   / '| \\       ¨  / '| \\      ¨   / '|",
    "",
    "          ¨      ¨           ¨          ¨              ¨      ¨             ¨           ¨¨     ¨",
    "  ¨                  ¨                       ¨                  ¨                   ¨       ¨",
    "      ¨                 ¨           ¨                     ¨              ¨               ¨      ¨"
]);
Database.addAscii("places/quests/forest/treeSpirit", 5, 5, [
    "_____",
    "°|||°",
    "=|||=",
    " |||",
    " |||"
]);
Database.addAscii("places/quests/forest/wolf/leftRunning", 7, 3, [
    " _",
    "''(___",
    " \\\\ \\\\`"
]);
Database.addAscii("places/quests/forest/wolf/leftStanding", 7, 3, [
    " _",
    "''(___",
    " || ||`"
]);
Database.addAscii("places/quests/forest/wolf/rightRunning", 7, 3, [
    "     _",
    " ___)''",
    "`// //"
]);
Database.addAscii("places/quests/forest/wolf/rightStanding", 7, 3, [
    "     _",
    " ___)''",
    "`|| ||"
]);
Database.addAscii("places/quests/fortress/room1", 208, 31, [
    "        ~                ~                                 ~                               ~                                  ~                                                           ~                    ~",
    "________________________________________________________________________________________________________________________________________________________________________________________________________",
    "                                  |   |                                                                                                                                                                 \\",
    "                                  |   |                                                                                                                                                                  |",
    "                                  | ~ |                                                                                                                                                                  | ~",
    "                                  |   |                                                                                                                                                                  |",
    "                                  |   |                                                                                                                                                                  |",
    "______________                    |  ~|                                                                                                                       __________________________________________/",
    "              \\                   |   |                                                                                                                      /                                               ~",
    "          ~    |                  |   |                                                   ____________     ___________________________________               |                      ~",
    "               |                  |   |                   ____     __      _     ___     /            |   /          ~                   ~    \\              |       ~",
    "  ~            |                  |~  |                  /    \\   /  \\    / \\   /   \\    |    ~       |   \\___________________________________/              |                                         ~",
    "               |                  \\___/         ____     |   ~|   |  |    | |   |   |    |            |                                                      |                              ~",
    "               |                               /    \\    |    |   | ~|    | |   |~  |    |            |                                                      |          ~",
    "               |                   _______     |    |    |    |   |  |    | |   |   |    |            |_____     _____________________________               |                       ~                        ~",
    "    ~          |                  /       \\    |    |    |    |   |  |    |~|   |   |    |        ~         |   /         ~          ~        \\              |                                    ~",
    "               |                  |       |    | ~  |    | ~  |   |  |    | |   | ~ |    |                  |   \\_____________________________/              |",
    "               |                  |     ~ |    |    |    |    |   \\__/    \\_/   \\___/    |               ~  |                                                |                        _________________________",
    "            ~  |                  | ~     |    |    |    |    \\_____________________     | ~                |                                                |    ~                  /                         |",
    "               |                  |       |    |    |    |                          |    |                  |_____     _______________________               |               ~      /                          |",
    "     ~         |                  |       |    |    |    |                          |    |                        |   /  ~       ~          ~ \\              |                     /                           |",
    "               |                  |       |    |    |    |           ~              |    |       ~                |   \\_______________________/              \\____________________/                            |",
    "               |                  |    ~  |    |  ~ |    |                       ~  |    |                        |                                                                      _                     |",
    "               |                  |       |    |    |    |     ~                    |    |                  ~     |                                                                     | |                    |",
    "          ~    |                  |       |    |    |    |                          |    |                        |_____________________________________________              _____     | |___________________/",
    "               |                  | ~     |    |    |    |                          |    |  ~                                                                 ~ \\            /     \\    |",
    "  ~            |                  |       |    |    |    |                ~         |    |          ~                     ~               ~                     |            |  ~  |    |    ~          ~",
    "               |                  |       |    |~   |    |                          |    |                                                      ~               |            |     |    |",
    "               |                  |       |    |    |    |   ~                      |    |                                                                      |            |     |    |                     ~",
    "            ~  |                  |   ~   |    |    |    |          ~           ~   |    |      ~              ~               ~                      ~         |            | ~   |    |          ~",
    "   ~           |__________________|_______|____|    |____|__________________________|____|______________________________________________________________________|____________|_____|____|_______________________"
]);
Database.addAscii("places/quests/fortress/room2", 100, 17, [
    "                           ~                         ~                        ~",
    "                ~                              ~                                             ~",
    "    ~                                                       ~         ~",
    "________________________________________________________________________________________________ ~",
    "                                                                                                \\",
    "                                                                                                 |",
    "                                                                                                 | ~",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 | ~",
    "                                                                                                 |",
    "____________________                                                            ________________/",
    "        ~           \\________________                       ___________________/           ~      ~",
    "                ~              ~     \\_____________________/           ~",
    "    ~                                           ~                                  ~            ~"
]);
Database.addAscii("places/quests/fortress/room3", 100, 31, [
    "                         ~                                 ~                               ~",
    "     ~          __________________________________________________________________________",
    "               /                                                                          \\        ~",
    "               |                                                                           |",
    "           ~   |                                                                           |",
    "               |                                                                           |  ~",
    "   ~           |                                                                   _______/",
    "               |                                                                  /",
    "               |                                                                  |",
    "          ~    |                                                                  |   ~",
    "               |                                                                  |             ~",
    "  ~            |                                                                  |",
    "               |                                                                  |          ~",
    "               |                                                                  |",
    "               |                                                                  |",
    "    ~          |                                                                  |  ~",
    "               |                                                                  |",
    "               |                                                                  |             ~",
    "            ~  |                                                                  |",
    "               |                                                                  |    ~",
    "     ~         |                                                                  |          ~",
    "               |                                                                  |",
    "               |                                                                  |",
    "               |                                                                  |   ~",
    "_______________/                                                                  |                ~",
    "                                                                                  |",
    "                                                                                  |",
    "                                                                                  |       ~",
    "                                                                                  |",
    "                                                                                  |          ~",
    "__________________________________________________________________________________|  ~"
]);
Database.addAscii("places/quests/fortress/teapot", 19, 6, [
    "",
    ". -   .-'¨¨'-.",
    " \\%\\./`¨¨¨¨¨¨`\\/'\".",
    "  \\%;%%%%%%%%%%;%%\"",
    "   \\;%%%%%%%%%%;%.\"",
    "     \\________/ \""
]);
Database.addAscii("places/quests/fortress/xinopherydon", 17, 6, [
    " ___",
    "/o  \\___     ___",
    "\\__     \\___/  o\\",
    "   \\     _     _/",
    "    \\   / \\   /",
    "     \\_/   \\_/"
]);
Database.addAscii("places/quests/giantNougatMonster/monster", 15, 4, [
    " .-'¨¨¨¨¨¨¨'.",
    "/-%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/giantNougatMonster/monsterAngry", 15, 4, [
    " .-'¨¨¨¨¨¨¨'.",
    "/O%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/giantNougatMonster/monsterAwake", 15, 4, [
    " .-'¨¨¨¨¨¨¨'.",
    "/o%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/hell/background", 150, 10, [
    "_______________________________________________________                _______________________            ____________________________________________",
    "                                                      /|              |\\                     /|          |\\",
    "                                                     / |              | \\                   / |          | \\",
    "                                                    /  |              |  \\                 /  |          |  \\",
    "___________________________________________________/   |              |   \\_______________/   |          |   \\________________________________________",
    "                                                   |   |              |   |               |   |          |   |",
    "                                                   |   /              \\   |               |   /          \\   |",
    "                                                   |  /                \\  |               |  /            \\  |",
    "                                                   | /                  \\ |               | /              \\ |",
    "___________________________________________________|/                    \\|_______________|/                \\|________________________________________"
]);
Database.addAscii("places/quests/hell/camazotz", 22, 8, [
    "         ____",
    "        /%%%%\\",
    "   _    \\`%ˊ /    _",
    "  /%`'-._)%%(_.-'`%\\",
    " /%%%%%%/%%%%\\%%%%%%\\",
    "/.-.-.-.\\%%%%/.-.-.-.\\",
    "         '..'",
    "          WW"
]);
Database.addAscii("places/quests/hell/demonBubbles0", 5, 3, [
    "OooO",
    " ooOo",
    "oOo"
]);
Database.addAscii("places/quests/hell/demonBubbles1", 5, 3, [
    " oOo",
    "OooOo",
    " oOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles2", 5, 3, [
    "oOoo",
    " OooO",
    "Ooo"
]);
Database.addAscii("places/quests/hell/demonBubbles3", 5, 3, [
    " oO",
    "OooO",
    "ooOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles4", 5, 3, [
    "  Oo",
    " OooO",
    "ooOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles5", 5, 3, [
    "oOoo",
    " Ooo",
    "OoOOo"
]);
Database.addAscii("places/quests/hell/demonBubbles6", 5, 3, [
    "oOoO",
    "  oOo",
    "OooOo"
]);
Database.addAscii("places/quests/hell/demonCube", 5, 3, [
    ".-'-.",
    ";°%°;",
    "'-.-'"
]);
Database.addAscii("places/quests/hell/demonEyes", 5, 4, [
    "_____",
    "\\è%é/",
    " )%(",
    "/___\\"
]);
Database.addAscii("places/quests/hell/devil", 8, 6, [
    "/(    )\\",
    "\\%\\__/%/",
    "(%%%%%%)",
    " \\%%%%/",
    "  \\%%/",
    "   ¨¨"
]);
Database.addAscii("places/quests/monkeyWizard/monkeyWizard", 4, 4, [
    "   W",
    " O_|",
    "/| |",
    "( )|"
]);
Database.addAscii("places/quests/monkeyWizard/roof", 100, 5, [
    "     .         .               .               .                    .         .               .",
    "       ___________ .               .                        .       ___              .",
    "  ____/           \\_____    .                ______________________/   \\___________              .",
    " /                      \\___________________/                                      \\_______________",
    "/                                                                                                  \\"
]);
Database.addAscii("places/quests/octopusKing/octopusKing", 6, 4, [
    "  WW",
    " /..\\",
    " \\  /",
    "///\\\\\\"
]);
Database.addAscii("places/quests/octopusKing/roof", 100, 5, [
    "       .               .            .            .                  .             .            .",
    "   .   ___________              .                        .          ___  .                  .",
    "  ____/           \\_____  .                . ______________________/   \\___________   .          .",
    " /                      \\___________________/                                      \\_______________",
    "/                                                                                                  \\"
]);
Database.addAscii("places/quests/theHole/background", 100, 136, [
    "                                        |                  |",
    "                                        |                  |",
    "                          -             |                  |                                       ^",
    "                                        |                  |",
    "        ^                               |                  |",
    "                                        |                  |               ^",
    "                                        |                  |      -                      -",
    "            -                           |                  |",
    "                        ^               |                  |",
    "                                        |                  |",
    "                                        |                  |                        -",
    "                                -       |                  |                                      ^",
    "    -                                   |                  |          ^",
    "                                        |                  |",
    "                                        |                  |",
    "             ^                          |                  |          -",
    "                                        |                  |                     ^             -",
    "                              ^         |                  |",
    "                                        |                  |",
    "                                        |                  |",
    "             -                          |                  |                                ^",
    "                                        |                  |      -",
    "                        ^               |                  |",
    "                                       /                   |              ^",
    "                                      /                    |                             -",
    "  ^                                  /                      \\",
    "                          -       __/                        \\",
    "                                 /                            \\",
    "                                /                              \\      -",
    "      -                        /                                |",
    "                              /                                 |                ^",
    "                ^            /                                  |",
    "                            /                                   |                           -",
    "                           /                                    |",
    "                          /                                     |",
    "                         /                                      |               -",
    "                 -      /                                       |",
    "        ^              /                                        |     ^",
    "                      /                                         |",
    "                      |                                         |                          ^",
    "    -                 |                                         |",
    "                      |                                         |",
    "                ^     |                     ____________________|             -",
    "                      |                     \\",
    "             -        |                      \\          ^",
    "                      |                       \\___",
    "                   ^  |                           \\______          -           ^",
    "                      |                                  \\___________                         -",
    "    ^                 |                                              \\",
    "                      |                                               \\____",
    "                      |                                                    \\________         ^",
    "                      |                                                             \\",
    "    -            -    |                                                              \\______",
    "                      |                                                                     \\",
    "          ^           |                                                             _____    \\   -",
    "                      |                                                            /     |    |",
    "                      |                                                           /     /     |",
    "                      |                                                       ___/     /      \\",
    "                      |                                                      /        /        \\",
    "    -                 |______________________                               /         |         \\",
    "                                            /                           ___/    ^     |          \\",
    "                            ______     ____/                           /              |           |",
    "                     ^     /      \\___/                               /         -     |   ________|",
    "                          /                                 ___      /                |   \\_______|",
    "                 -       |                                 /   \\____/             ^   |           |",
    "                         |                            ____/             ^             |           |",
    "                         |                           /                                |           |",
    "     ^                    \\_______                  /     ^      -                    |           |",
    "                                 /             ____/                              -   |           |",
    "                                /             /                          ^            |____   ____|",
    "                            ___/             /     -         _____________________        /   \\",
    "                  ^     -  /                 \\_____        _/                     \\______/     |",
    "     -                    /          __            \\     _/                                    |",
    "        ^                /          /  \\            \\ -  \\                                     |",
    "                 _______/          /    \\            \\    \\____________________________________/",
    "                /                 / -    \\_______     \\                                         ^",
    "     __________/                 /               |     |      ^                -",
    " -  /                           /     ^        - |     |       ____________",
    "   |                            \\                |     |    __/            \\___________    ^",
    "   |                             \\    -      ^   |     |___/                           \\       -",
    "   |                              \\              |                                      \\",
    "  /                                \\             |                                       \\     ^",
    " |                                  \\            |   ______________________               \\",
    " |                                   |        -  |   \\                     \\___________    \\",
    " |                                   |  ^        |    \\   -    ^                       |    \\",
    " |                                   |           |     \\___               ^        -   |     |",
    " |                                   \\           \\         \\     -             _______/      |",
    " |                                    \\     -     \\         |      ___________/              |",
    " |                                     \\_____      \\        |    _/                          |",
    " |                                           \\      \\_     /    /                            |   -",
    " |                                            \\  -    |   |    |                             |",
    " |                                             |      |   |    |                             |",
    " |                                             |    ^ |   |     \\________                    |",
    " |                                             |      |   |              \\____               |",
    " |                                             |      |   |      ^            \\____          | -",
    " \\_________                      _____________/       |   |   -                    \\_________/",
    "           \\            __   ___/                  -  |   |              -                         ^",
    "            \\__________/  | |                         |   |                            ^",
    "     ^                    | |         -               |    \\",
    "               -        ^ | |                   ^     |     \\__________     ^               -",
    "                          | |-                        |                \\__________",
    "     -                    | |                         |__                         \\_________",
    "              ^         __| |______                      \\_______                           \\    ^",
    "                     __/           \\          -                  \\___                       /",
    "                    /               \\____                            \\____                 |",
    "            -      /                     \\               ^                \\____________    |",
    "                  /                      /                                             |   |",
    "     ^           |            __________/                  -         ^          -      |   |   -",
    "                 |           /                  ^                                      |   |",
    "                 |          /         -                              __________________/   |",
    "                  \\________/                              __________/                      |",
    "    -         ^                         _________________/                      _______    |  ^",
    "                           -   ________/                                       /       |   |",
    "         _____________________/                                               /    -   |   |",
    "   ^    /                                                                    /         |   |",
    "       /                                                                    /          |   |",
    "      /                                                                    /    -   ^  |   |     -",
    "  -  |                                                                    /            |   |",
    "     |                                                                  _/             |   |",
    "     |                                                                 /             - |   |       ^",
    " ^  /                                                                 /                |   |",
    "   /                                                                 /   -             |   |",
    "  |                                                                _/                  |   |",
    "  |                                                              _/                    |   |",
    "  |                                                           __/      ^               |   |   ^",
    "- |                                                      ____/                     ^   |   |",
    "  |                                                _____/                -             |   |",
    "  |                                       ________/                                   /    |",
    "  |                         _____________/                                           /     |  -",
    "   \\_______________________/                                                    ____/      |",
    "                                     ^                -                  ______/          /",
    " -                            -                                         /                /",
    "       ^                                                      ^        /              __/",
    "                      ^                                               /        ______/",
    "                -                             -                       |_______/           -",
    ""
]);
Database.addAscii("places/quests/theHole/lostTribeWarrior", 4, 4, [
    "▲",
    "|_O/",
    "| |",
    "|/ \\"
]);
Database.addAscii("places/quests/theSea/bigShark", 47, 10, [
    "              .´",
    "             /(",
    "            /%%\\                       __..--._",
    "        ___/%%%%`._               _.-´¯%_.-´¯¯",
    " _..--´'¯%%%%%%%%%%%%¯`---..___.-´¯%%%%_-´",
    "(%%%%%O%%%)))%%%%%%%%%%%%%%%%%%%%%%%%%%(_",
    " `vvvvv%%%%%%\\%%%%%/%%%%%%_.------._%%%%%¯`-._",
    "   `----------\\%%%/----´¯¯          ¯`------´¯",
    "               \\%/",
    "                V"
]);
Database.addAscii("places/quests/theSea/jellyFish", 6, 5, [
    " ____",
    "(o%%o)",
    " ))))",
    "((((",
    " ))))"
]);
Database.addAscii("places/quests/theSea/mediumFish", 8, 4, [
    "  __",
    " /.%\\ /|",
    "(%%%%X%|",
    " \\_V/ \\|"
]);
Database.addAscii("places/quests/theSea/miniShark", 19, 5, [
    "         ,        .",
    "        /(.._,,_./|",
    "   _.-\"\"%%%%%%%%%%|",
    " .´¤%}}}%%%%.-'-'\\|",
    "´v-----\\|--'      '"
]);
Database.addAscii("places/quests/theSea/plant0", 4, 4, [
    "\\##/",
    " )%)",
    "(%(",
    " )_)"
]);
Database.addAscii("places/quests/theSea/plant1", 3, 4, [
    " )-",
    "(",
    "-)-",
    "("
]);
Database.addAscii("places/quests/theSea/plant10", 4, 4, [
    "\\@@/",
    "(%(",
    " )%)",
    "(_("
]);
Database.addAscii("places/quests/theSea/plant2", 3, 6, [
    "  )",
    "-(-",
    "  )",
    "-(-",
    "  )",
    " ("
]);
Database.addAscii("places/quests/theSea/plant3", 4, 4, [
    "  )",
    " (",
    "  )-",
    "-("
]);
Database.addAscii("places/quests/theSea/plant4", 4, 6, [
    "  )",
    "-(",
    "  )",
    "-(",
    "  )-",
    " ("
]);
Database.addAscii("places/quests/theSea/plant5", 4, 4, [
    "  )",
    "-(",
    "  )-",
    " ("
]);
Database.addAscii("places/quests/theSea/plant6", 4, 9, [
    "  )-",
    " (",
    "  )",
    "-(",
    "  )-",
    " (",
    "  )",
    "-(",
    "  )"
]);
Database.addAscii("places/quests/theSea/plant7", 4, 4, [
    "  )-",
    "-(",
    "  )",
    " ("
]);
Database.addAscii("places/quests/theSea/plant8", 4, 4, [
    "\\MM/",
    " )%)",
    "(%(",
    " )_)"
]);
Database.addAscii("places/quests/theSea/plant9", 4, 4, [
    "\\##/",
    "(%(",
    " )%)",
    "(_("
]);
Database.addAscii("places/quests/theSea/seahorse", 4, 4, [
    ":=@",
    " {|<",
    "  |",
    "  J"
]);
Database.addAscii("places/quests/theSea/shellPowder", 6, 3, [
    " z.-);",
    "})]`s",
    ";h;-+-"
]);
Database.addAscii("places/quests/theSea/smallestFish", 3, 1, [
    "()("
]);
Database.addAscii("places/quests/theSea/sponge", 6, 3, [
    " *~**",
    "****-*",
    " *****"
]);
Database.addAscii("places/quests/theSea/seaSnake/1", 78, 11, [
    "",
    "    ___//",
    " _.c    )_",
    "/__  _ /( (-_",
    "  /.' '(.( ( (-_",
    "         '(_( ( ( -._                                _ .- ( -._",
    "            '(.( ( ( ( -._                      _.-( ( ( ( ( ( (-._",
    "                ' (_( ( ( '- ._             _.-'( ( ( ( (-(-(.(_( ('-._",
    "                    '(.( ( ( ( '- . _ _ .-'( ( ( (.-'          '-(_( ('-_",
    "                        '-(_( ( ( ( ( ( ( ( (_(-'                   '-(_('-_",
    "                            '--(.(_( ( ( -'                            ' - ('>"
]);
Database.addAscii("places/quests/theSea/seaSnake/10", 103, 10, [
    "",
    "",
    "                                                 _  .  -  -  -  .",
    "                                             .-' ('( ( ( ( ( ( ( ( (-.",
    "    ___//_                              _. '( ( ( (_( . . ----- . ( ( ('.",
    " _.c    )(' -. _                     _.( ( ( (_. '                '. ( ( (.",
    "/__  _ /( ( ( ( (-._             _.-( ( ( (.-'                        '-( (\\",
    "  /.'    ' -.(_( ( ( ( - .....- '( ( (_-'                                '.(\\",
    "               '-.( ( ( ( ( ( ( ( ( -'                                     \\('",
    "                    ' -(.(_(_( - '                                          \\|"
]);
Database.addAscii("places/quests/theSea/seaSnake/11", 111, 10, [
    "",
    "",
    "                                                         _ _ _",
    "    ___//_                                        _.- '( ( ( ( ('-._",
    " _.c    ) ( - _                               _-( ( ( ( (_(_(_( ( ( (-_",
    "/__  _ /_( ( ( (' -. _                     _.( ( ( (_.- '     '  -.( ( (.",
    "  /.'    ' -(_( ( ( ( (-._             _.-( ( ( (.-'                '-( ('.",
    "               ' -.(_( ( ( ( - .....- '( ( (_-'                        '-( (.",
    "                     '-.( ( ( ( ( ( ( ( ( -'                              '.(\\",
    "                          ' -(.(_(_( - '                                    '-"
]);
Database.addAscii("places/quests/theSea/seaSnake/12", 101, 11, [
    "",
    "",
    "    ___//",
    " _.c    )_                                               _ _ _",
    "/__  _ /_ ( - _                                   _.- '( ( ( ( ('-._",
    "  /.'   _( ( ( (' -. _                     _. _-( ( ( ( (_(_(_( ( ( (-_",
    "         ' -(_( ( ( ( (-._             _.-( (( ( ( (_.- '     '  -.( ( (.",
    "               ' -.(_( ( ( ( - .....- '( ( (_ ( (.-'                '-( ('.",
    "                     '-.( ( ( ( ( ( ( ( ( -' -'                        '-( (.",
    "                          ' -(.(_(_( - '                                  '.(\\",
    "                                                                            '-"
]);
Database.addAscii("places/quests/theSea/seaSnake/2", 79, 11, [
    "",
    "",
    "    ___//_.__",
    " _.c    )( ( (-( . _",
    "/__  _ /(_(_( (.( ( (-_",
    "  /.'        ' '(_( ( ( -._                                _ .- - . _",
    "                  '(.( ( ( ( -._                      _.-' ( ( ( ( ( (-_",
    "                      ' (_( ( ( '- _              _.-'( ( ( ( (-'-(.(_( '-.",
    "                          '(.( ( ( ( '- . _ _ .-'( ( ( (.-'           '-(_('.",
    "                              '-(_( ( ( ( ( ( ( ( (_(-'                   '(.\\",
    "                                  '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/3", 78, 11, [
    "",
    "",
    "             __..__",
    "    ___//_.-( ( ( ( ' -.",
    " _.c    )( ( (_(_( (.( (' -_",
    "/__  _ / _(.('     ' -(_( ( ( -._                                _ .  _",
    "  /.'                   '-.( ( ( ( -._                      _.-( ( ( ( (' -_",
    "                            ' (_( ( ( '- ._             _.-'( ( ( (-(- ' '- .\\",
    "                                '(.( ( ( ( '- . _ _ .-'( ( (_(.-'",
    "                                    '-(_( ( ( ( ( ( ( ( (_('",
    "                                         '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/4", 78, 11, [
    "",
    "",
    "              _. -'('('- ._",
    "           . '( ( ( ( ( ( (-( . _",
    "    ___//('( ( (.(-'''.(_( (.( ( (-_",
    " _.c    ) ( ( '            '(_( ( ( -._                                  ____",
    "/__  _ /. '                    '(.( ( ( ( -._                      _. - ( (.-'",
    "  /.'                              ' (_( ( ( '- ._             _.-'( ( (.'",
    "                                       '(.( ( ( ( '- . _ _ .-'( ( ( (.'",
    "                                           '-(_( ( ( ( ( ( ( ( (_(-'",
    "                                                '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/5", 78, 11, [
    "",
    "                          _ _",
    "                   _.-('( ( ( ('-.",
    "               _.-'( ( ( ( ( ( ( ( ' .",
    "           _-'( ( ( (.(- '  '-(_( (.( ( -",
    "    ___//('( ( (_(-'            ' -( ( ( ( '._",
    " _.c    ) (_(.-'                    ' ( ( ( ( ( -._                       _.-/",
    "/__  _ /.-'                               -( ( ( ( '- ._             _.-'( .'",
    "  /.'                                         ' (.( ( ( '- . _ _ .-'( ( (.'",
    "                                                   ' ( ( ( ( ( ( (_(_( '",
    "                                                       '- ( (_(.(-'"
]);
Database.addAscii("places/quests/theSea/seaSnake/6", 84, 11, [
    "",
    "                              _ _ . _",
    "                        _.- '( ( ( ( ( ('-.",
    "                    .-(.('( ( ( ( ( ( ( ( ('.",
    "               _. '( ( ( (.( -'''''''''-(_( (.(-",
    "            _.( ( ( (_. '                 '( ( ( (-_",
    "    ___//.-( ( ( (.-'                       ' ( ( ( (-                     /|",
    " _.c    ) ( (_(-'                               -( ( ( (- ._            _.( /",
    "/__  _ /_(.('                                     ' (.( ( ( '- . _ _ .-( (.'",
    "  /.'                                                 ' ( ( ( ( ( ( ( (_-'",
    "                                                           ' - ( ( ( '"
]);
Database.addAscii("places/quests/theSea/seaSnake/7", 89, 11, [
    "",
    "                                    _ _ . _",
    "                              _.- '( ( ( ( ( ('-.",
    "                          .-(.('( ( ( ( ( ( ( ( ('.",
    "                     _. '( ( ( (.( -'''''''''-(_( (.(-",
    "                  _.( ( ( (_. '                 '( ( ( (_",
    "              _.-( ( ( (.-'                       ' ( ( ( '",
    "    ___//__.-'( ( (_(-'                               -( ( ( (._            _.",
    " _.c    )( ( ( (.('                                     ' (.( ( '- . _ _ .-( /",
    "/__  _ /__( (-'                                             ' ( ( ( ( ( ( (.'",
    "  /.'                                                            ' ( ( (-'"
]);
Database.addAscii("places/quests/theSea/seaSnake/8", 96, 10, [
    "",
    "",
    "                                     _ . - '( ( (' - . _",
    "                                 .-' ('( ( ( ( ( ( ( ( ( -",
    "                            _. '( ( ( (.(- - ''' - -  ( ( ( (",
    "                         _.( ( ( (_. '                  '( ( ( -",
    "    ___//            _.-( ( ( (.-'                         '( ( ( -",
    " _.c    )( - .._..-' ( ( (_-'                                 -( ( (._",
    "/__  _ /( ( ( ( ( ( ( ( -'                                      '(.( ('- . __",
    "  /.'     ' -(_(_( - '                                              '-( ( ( .'"
]);
Database.addAscii("places/quests/theSea/seaSnake/9", 101, 10, [
    "",
    "",
    "                                           _  .  -  -  -  .",
    "                                       .-' ('( ( ( ( ( ( ( ( '-.",
    "                                  _. '( ( ( (_( . . ----- . ( ( ('.",
    "    ___//_                     _.( ( ( (_. '                   -( ( (",
    " _.c    ) (-._             _.-( ( ( (.-'                          '(_( '",
    "/__  _ /_( ( ( ( - .....- '( ( (_-'                                  '( ( -",
    "  /.'    '-.( ( ( ( ( ( ( ( ( -'                                         ( (\\",
    "              ' -(.(_(_( - '                                                '|"
]);
Database.addAscii("places/sorceressHut/background", 286, 45, [
    "             |                                                                                                                    |",
    "             |                                                                                                                    |",
    "             |                                                                                                                    |",
    "             |             ___                                                                                                    |",
    "             |          .-'   '-.                                                                                                 |",
    "             |         /         \\                                                                                                |",
    "             |         |  ~   ~  |                                                                                                |",
    "             |         \\ (.) (.) /                                                                                                |",
    "             |          |   /   |                                                                                                 |",
    "             |          \\   0.  /                                                                                                 |",
    "             |          (   _   )                                                                                                 |",
    "             |        __.\\     /._                                                                                                |",
    "             |    _.-'  (|'._.'|)  '-._                                                                                           |",
    "             |  .'       '-___-'       '.                                                                                         |",
    "             |.'    ~              ¨     '.                                                                                       |",
    "             .'                           '.                                                                                      |",
    "            /                               \\                                                                                     |",
    "           .'                ¨              '.                                                                                    |",
    "           /                                 \\.                                                                                   |",
    "          .'     ¨                           '.                                                                                   |",
    "          '                       ~           '                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |              ¨                    |                                                                                   |",
    "          |                               ¨   |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |           ~                       |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |    ¨                              |                                                                                   |",
    "          |                        ¨          |                                                                                   |",
    "          |             ¨                     |                                                                                   |",
    "          |                     ~             |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |        ¨                          |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |                            ¨      |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          \\            ~                      /                                                                                   |",
    "           '._~                 ~        ~_ .'____________________________________________________________________________________|",
    "            .''-.--._.-' -. _. -'-._ _ .-'                                                                                        '.",
    "          .'       |°-°|       |°-°|                                                                                                '.",
    "        .'        .'~  )       (  ~'.                                                                                                 '.",
    "      .'        .' - .'         '. - '.                                                                                                 '.",
    "    .'         / - .'             '. - \\                                                                                                  '.",
    "  .'          |_.-'                 '-._|                                                                                                   '.",
    ".'                                                                                                                                            '.                                                                                                                                            '."
]);
Database.addAscii("places/sorceressHut/broom", 9, 27, [
    "    v",
    "    v",
    "   (*)",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   |_|",
    " .'   '.",
    "/_______\\",
    "|||||||||",
    "|||||||||",
    "|||||||||",
    " \\|||||/",
    "  ^^^^^"
]);
Database.addAscii("places/sorceressHut/cauldron", 42, 18, [
    "            _________________",
    "           (_________________)",
    "          .-'%%%%%%%%%%%%%%%'-.",
    "        .'%%%%%%%%%%%%%%%%%%%%%'.",
    "       /%%%%%%%%%%%%%%%%%%%%%%%%%\\",
    "      '%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "     '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "     \\%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/",
    "      '.%%%%%%%%%%%%%%%%%%%%%%%%%.'",
    "        '-.___________________.-'",
    "            /%/           \\%\\",
    "           /%/             \\%\\",
    "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
    "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨"
]);
Database.addAscii("places/sorceressHut/grimoire", 2, 4, [
    "__",
    "ar",
    "fb",
    "tp"
]);
Database.addAscii("places/sorceressHut/grimoire2", 4, 5, [
    " ___",
    "|",
    "|era",
    "|tho",
    "|shi"
]);
Database.addAscii("places/sorceressHut/hat", 28, 7, [
    "                   _.-.",
    "                .-'%%~%'.",
    "             _.'%%¨_.'-._\\",
    "           .'%%%%~|      '",
    "          '%¨%%%%%-",
    ".________/_________\\_______.",
    " ¨¨°¨°¨¨            ¨°¨¨¨°¨"
]);
Database.addAscii("places/sorceressHut/lollipop", 5, 1, [
    "o----"
]);
Database.addAscii("places/sorceressHut/shelves", 56, 18, [
    "                      _____",
    "        __          _|=====|       ___ _",
    "  _    |==|      __|F|     |__    |TSN|P|   __ _",
    " |S|___|  |_ _ _|xx| |MAGIC|  |   |   | |__|CO|T|__ __",
    " | |   |17| | | |__| |CAKES|->|   |   | |JV|  |A|H2|G2|",
    " | |W:A|  |M|L|P|  | |     |->|   |   | |  |42|O|  |  |",
    "_|_|___|==|_|_|_|xx|_|=====|__|___|666|_|__|__|G|__|__|_",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨_¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨_¨¨¨¨¨¨¨",
    "   __          |P|   _  __                _____\\ \\",
    "  |XX|_ _ _ _ _| |  |K|\\  \\     .---.    (_____|\\ \\",
    "  |  |1|2|3|4|5| |  | | \\  \\   ( X X )   (_____| \\ \\",
    "__|XX|_|_|_|_|_|_|__|_|__\\__\\___|_V_|____(_____|__\\_\\___",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨",
    "        ._.      __      |__|         {w} {v}      ..",
    "  O     | |      )(     //00\\\\        _|___|_      ||",
    " .o.  .'=B='.   /  \\    ||  ||        \\     /    .'IP'.",
    "_/_\\__'.___.'__(____)___\\\\__//_________\\___/_____'.__.'_",
    "¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨"
]);
Database.addAscii("places/theCave/chocolateBar", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("places/theCave/exit", 58, 31, [
    "",
    "",
    "",
    "",
    "",
    "",
    "       ____________________________________________",
    "     /|                                            |\\",
    "    / |                                            | \\",
    "   /  |                                            |  \\",
    "  /   |                     __/\\_                  |   \\",
    " /    |                 ___/     \\                 |    \\",
    "/     |                /      ¨   \\                |     \\",
    "      |              _/            \\               |",
    "      |             /     ¨        /               |",
    "      |            /            ¨ /                |",
    "      |           /  ¨            |                |",
    "      |          /                |                |",
    "      |          \\                |                |",
    "      |           \\        ¨      \\                |",
    "      |           /   ¨            \\               |",
    "      |       ___/                  \\__            |",
    "      |      /                         \\___        |",
    "      |   __/                              \\____   |",
    "      |__/                                      \\__|",
    "     /                                              \\",
    "    /                                                \\",
    "   /                                                  \\",
    "  /                                                    \\",
    " /                                                      \\",
    "/                                                        \\"
]);
Database.addAscii("places/theCave/heartPlug", 7, 2, [
    "|__|__|",
    "|_____|"
]);
Database.addAscii("places/theCave/monkeyWizard", 38, 20, [
    "                              .  .  .",
    "              v              /%\\/%\\/%\\",
    "          _ .~°~. _          \\_%%%%%_/",
    "         \\_(%u%u%)_/           \\_%_/",
    "        _.-%\\%v%/%-._           |%|",
    "    .'°°%%%_(%_%)_%%%°°'.       |%|",
    "   {_____%/._\\v/_.\\%_____}      |%|",
    "  .'%%%%%%%%%%°%%%%%%%%%%'   _-o|%|o",
    " .'%%%.~%%_o%)%(%o_%%~.%%%'~'%%.|%|O",
    ".'%%'   \\%%%%%%%%%%%/  '-%_.-' '|%|o",
    "(%%(    |%%%%%%%%%%%|           |%|",
    "\\%%\\    /%%%%%~%%%%%\\           |%|",
    " \\%'.  .%%%%%%_%%%%%%.          |%|",
    "  \\%.°'%%%%_-' '-_%%%%'         |%|",
    "  (_o/%%%/         \\%%%\\        |%|",
    "     (%%(           )%%)        |_|",
    "      \\%%\\         /%%/         (%)",
    "      _-'%|       |%'-_        _/%\\_",
    "     (oOo.)       (.oOo)      /_____\\",
    ""
]);
Database.addAscii("places/theCave/octopusKing", 37, 19, [
    "                                /\\",
    "             |\\/\\_/\\/|         :%%:",
    " /\\          |%.%:%.%|         |%%|",
    "//\\\\      _.-'¯¯¯¯¯¯¯'-._      |%%|",
    "\\\\//    /¯%%%%%%%%%%%%%%%¯\\    |%%|",
    " XX    /%%%%%._%%%%%_.%%%%%\\   |%%|",
    " ||   |%%%%%/-_'%%%'_-\\%%%%%|  |%%|",
    " ||   |%%%%%\\_/%%%%%\\_/%%%%%|  |%%|",
    " ||   |%%%%%%%%%%%%%%%%%%%%%|  |/\\|",
    " ||    \\%%%%%%WWWWWWW%%%%%%/   ||||",
    " ||     \\%%%%%%%%%%%%%%%%%/  ()=TT=()",
    "(¯¯¯\\    |%%%%%%%_%%%%%%%|    /¯¯¯)",
    " TT\\%\\  /%/%/%/%/ \\%\\%\\%\\%\\  /%/TT",
    " || \\%\\/%/%/%/%/   \\%\\%\\%\\%\\/%/ ||",
    " ||  \\__/%/%/%(     )%\\%\\%\\__/ (oo)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (o(o(o(     )o)o)o)"
]);
Database.addAscii("places/theCave/treasureMap", 20, 8, [
    "        ooo    o",
    "       ooooo   o",
    "      ooooooo  o",
    "  ooo   o o    o",
    " ooooo  o o    o",
    "ooooooo  X      ooo",
    "  o o              o",
    "  o o"
]);
Database.addAscii("places/theCave/ways", 58, 32, [
    "                        \\        /",
    "",
    "",
    "",
    "         _/|",
    "        /  |                                   /\\",
    "      _/____\\           /        \\            /__\\_",
    "     /______/          /          \\           |    \\",
    "    /      |          /            \\          |     |",
    "    \\      |         /              \\         \\     \\",
    "    /______/        /                \\         \\_____\\",
    "   /_______\\       /                  \\        /     /",
    "  |        /      /                    \\       |     \\",
    "   \\______/      /                      \\      \\______\\",
    "   /      \\     /                        \\     /      /",
    "   \\       \\   /                          \\   /______/",
    "   /       |  /                            \\  \\______\\",
    "   \\       | /                              \\ /      /",
    "   /_______|/                                \\|______|",
    "  /                                                  |",
    "  \\                                                  |",
    "   \\                                                 \\",
    "    \\                                                /",
    "    /                                               /",
    "   /                                                \\",
    "   \\                                                 |",
    "    |                                                /",
    "   /                                                  \\",
    "  /                                                    \\",
    " /                                                      \\",
    "/                                                        \\",
    ""
]);
Database.addAscii("places/village/fifthHouse", 97, 35, [
    "  /        |      _______________________                                            |        \\",
    " /         |     (______________________ )                                           |         \\",
    "|          |     ||            _^_      ||                                           |          |",
    "|          |     ||         .-'|_|'-.   ||                                           |          |",
    "|          |     ||        /   ___   \\  ||                                           |          |",
    "|          |     ||       /|  |=|=|  |\\ ||                                           |          |",
    "|          |     ||--|--|--|  |-|-|  |  ||                                           |          |",
    "|          |     ||--|--|--|  |=|=|  |  ||                                           |          |",
    "|          |     ||^^^^^^^^^^^^^^^^^^^^^||                   __  _          _   _    | |\\       |",
    "|          |     ||_____________________||                  /   |_ |   |   |_| |_)   | | \\      |",
    "|          |     (_______________________)                  \\__ |_ |__ |__ | | | \\   | |  \\     |",
    "|          |                                      ####      _______________________  | |  |\\    |",
    "|          |                                    ########    |  _________________  |  | |  ||\\   |",
    "|          |                                    ##I  I##    | /                 \\ |  | |\\ || \\  |",
    "|          |                                    ##\\ S/##    | |                 | |  | |\\\\|| |  |",
    "|          |                                     #|  |#     | |                 | |  | | \\ | |  |",
    "|          |                                   .-'\\__/'-.   | |                /| |  | |  | \\|  |",
    "|          |    ()         ()                 |          |  | |               / | |  | |  ||\\|  |",
    "|          |    ||         ||                 | ||    || |  | |              /  | |  | \\  || |  |",
    "|          |    ||_________||                 | ||    || |  | |             /   | |  |  \\ || |  |",
    "|          |    |  ______   |   ____          | ||    || |  | |____________/    | |  |   \\|| |  |",
    "|          |    |_(      )__|  /    \\         |_||____||_|  | |            |    | |  |    \\| |  |",
    "|          |    /  '----'  /| /______\\        | ||_[]_|| |  | |            |    | |  |     \\ |  |",
    "|          |   /          / | | ____ |        MM |    | MM  | |            |    | |  |      \\|  |",
    "|          |__/          /  |_||  o ||___________| || |_____| |            |    | |__|          |",
    "|         () /      ()  /  /  ||____||           | || |      \\|            |    | |\\  \\         |",
    "|        /||/       || /  /   |______|           | || |       \\            |   /| | \\  \\        |",
    "|       / ||________||/  /                       |_||_|        \\           |  / | |  \\  \\       |",
    "|      /  |          |  /                       _| || |_        \\---------------------\\  \\      |",
    "|     /   |          | /                       (___||___)                                 \\     |",
    "|    /    |__________|/                                                                    \\    |",
    "|   /                                                                                       \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/forge", 97, 35, [
    "  /        |          |         | |       ||_|_________|____                         |        \\",
    " /         |          |         | |      /||_|_________|___ \\                        |         \\",
    "|          |          |         | |      \\||_|_________|____/                        |          |",
    "|          |          |         | |       || '         '                             |          |",
    "|          |          |         | |                                   ______         |          |",
    "|          |          |         | |                                .-' ____ '-.      |          |",
    "|          |          |         | |                                \\.-'    '-./      |          |",
    "|          |          |         | |                 __|_________|___\\        /       |          |",
    "|          |          |         | |                |__|_________|___/        \\       |          |",
    "|          |          |         | |                   '         '  /'-.____.-'\\      |          |",
    "|          |    ______|         | |_______                         '-.______.-'      |          |",
    "|          |   /      |_________|/       /\\                                          |          |",
    "|          |  /   o----                 / /                            ||            |          |",
    "|          | /_________________________/ /                            /  \\           |          |",
    "|          |/__________________________\\/                             \\  /     ____  |          |",
    "|          |                                                          .\\/.    |____| |          |",
    "|          |                                    _____                  /\\      :||:  |          |",
    "|          |              )                    / ~~~ \\                /  \\      ||   |          |",
    "|          |             (                     \\ `¿´ /               /    \\     ||   |          |",
    "|          |    _____)_________________      _.-\\ - /-._            /      \\         |          |",
    "|          |   /  __(__________)____  /|  /¯¯¯¯/¯|¯|¯\\¯¯¯¯\\     _________________    |          |",
    "|          |  /  :@@@@@@@@@@@@(@@@@: / | (  ´)|´  ¯  `|(´  )    \\________________\\   |          |",
    "|          |  :. '-.@@@@@@@@@@@@.-' .: | |   ||       ||   |     \\               /   |          |",
    "|          |  : '.  '-.______.-'  .' : |  \\   )|     |(   /       '-._________.-'    |          |",
    "|          |__:   '-.__________.-'   : |___\\==||_____||==/____|¯¯|_____||  |_________|          |",
    "|         /   :     |----------|     : |---/  |+-----++:0+----|  |    .'|  |_         \\         |",
    "|        /    :     |----------|     :/'---UUUU+--+--+0000----|  |   |\\.'__'.\\         \\        |",
    "|       /     '-.   |----------|   .-'         |  |  |        |__|   \\|______|          \\       |",
    "|      /         '-.|__________|.-'            |  |  |                                   \\      |",
    "|     /                                        |  |  |                                    \\     |",
    "|    /                                         |__|__|                                     \\    |",
    "|   /                                          (__|__)                                      \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouse", 97, 35, [
    "  /        |       |--_--_||                                                         |        \\",
    " /         |       |_--_--||                              _______________________    |         \\",
    "|          |       |--_--_||                             (______________________ )   |          |",
    "|          |       |_--_--||                             ||            _^_      ||   |          |",
    "|          |       |--_--_||                             ||         .-'|_|'-.   ||   |          |",
    "|          |       |_--_--||                             ||        /   ___   \\  ||   |          |",
    "|          |       |--_--_||                             ||       /|  |=|=|  |\\ ||   |          |",
    "|          |       |_--_--||                             ||--|--|--|  |-|-|  |  ||   |          |",
    "|          |       |--_--_||         ______________      ||--|--|--|  |=|=|  |  ||   | |\\       |",
    "|          |       |_--_--||        /      ----o  /|     ||^^^^^^^^^^^^^^^^^^^^^||   | | \\      |",
    "|          |       |--_--_||       /____________ / |     ||_____________________||   | |  \\     |",
    "|          |       |_--_--||       |     |      |  |     (_______________________)   | |  |\\    |",
    "|          |       |--_--_|/       |     |      |  |                                 | |  ||\\   |",
    "|          |     ============      |     |      |  |                                 | |\\ || \\  |",
    "|          |      |        ||      |     |      |  |                                 | |\\\\|| |  |",
    "|          |      |        ||      |     |      |  |                                 | | \\ | |  |",
    "|          |      |        ||      |     |      |  |                                 | |  | \\|  |",
    "|          |      |________|/      |   ()|()    |  |                ()         ()    | |  ||\\|  |",
    "|          |   ================    |     |      |  |         @      ||         ||    | \\  || |  |",
    "|          |    | __________ ||    |     |      |  |         _\\/    ||_________||    |  \\ || |  |",
    "|          |    |/    (())  \\||    |     |      |  |       ___)(__  |   ______  |    |   \\|| |  |",
    "|          |    ||  __)))(__|||    |     |      |  |      |\\ (__) \\ |__(      )_|    |    \\| |  |",
    "|          |    || /#(( ))@@|||    |     |      | /       | \\______\\|\\  '----'   \\   |     \\ |  |",
    "|          |    ||/##@@@@@@#|||    |_____|______|/        | | ____ || \\           \\  |      \\|  |",
    "|          |____||##@@@@@@##||/_____||_________||_________| ||  o |||  \\           \\_|          |",
    "|         /    ================     ||         ||         \\ ||____|| \\  \\  ()       \\ ()        |",
    "|        /    _____________________________                \\|______|  \\  \\ ||        \\||        |",
    "|       /   ~/¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨/~                           \\  \\||_________||\\       |",
    "|      /   ~/¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨/~                             \\  |           | \\      |",
    "|     /   ~/¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨/~                               \\ |           |  \\     |",
    "|    /   ~/¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨/~                                 \\|___________|   \\    |",
    "|   /   ~/¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨/~                                                    \\   |",
    "|  /   ~/____________________________/~                                                      \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouseCupboardOpenedWithLollipop", 19, 15, [
    " / | |  |      |  |",
    "/  | |__|      |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |  |      |  |",
    "|  | |__|()    |  |",
    "|  | /o-|      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |__|      |  |",
    "|  | /  |      | /",
    "|  |/___|______|/",
    "| /||_________||",
    "|/ ||         ||"
]);
Database.addAscii("places/village/fourthHouseCupboardOpenedWithoutLollipop", 19, 15, [
    " / | |  |      |  |",
    "/  | |__|      |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |  |      |  |",
    "|  | |__|()    |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |__|      |  |",
    "|  | /  |      | /",
    "|  |/___|______|/",
    "| /||_________||",
    "|/ ||         ||"
]);
Database.addAscii("places/village/fourthHouseLollipopUnderCarpet", 4, 1, [
    "---o"
]);
Database.addAscii("places/village/fourthHouseNoLollipopOnCupboard", 17, 3, [
    "  ______________",
    " /             /|",
    "/____________ / |"
]);
Database.addAscii("places/village/secondHouse", 97, 35, [
    "  /        |                                                                         |        \\",
    " /         |                                                                         |         \\",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                ___                      |          |",
    "|          |                                               /   \\                     |          |",
    "|          |                                              |a  a |                    |          |",
    "|          |                                              |  L  |                    |          |",
    "|          |                                              _\\'-'/_                    |          |",
    "|          |                                          _.-'\\_____/'-._                |          |",
    "|          |                                         /  _         _  \\               |          |",
    "|          |_______________                          | | |       | | |               |          |",
    "|         /               /|                         | | |       | | |               |          |",
    "|        /               / |                         | \\ |       | | |               |          |",
    "|       /               /  |                          \\ \\|_______| | |               |          |",
    "|      /               /   |                           \\_|__[x]__| |_|               |          |",
    "|     /               /    |             ________________|_______|_|_|_______________|____      |",
    "|    /               /     |____________/                                                 \\     |",
    "|   /               /      /           /                                                   \\    |",
    "|  /               /      /           /                                                     \\   |",
    "| /               /      /           /                                                       \\  |",
    "|/_______________/      /           /_________________________________________________________\\ |",
    "||               |     /            |                                                          ||",
    "||               |    /             |                                                          ||",
    "||               |   /              |                                                          ||",
    "||               |  /               |                                                          ||",
    "||               | /                |                                                          ||",
    "||_______________|/_________________|__________________________________________________________||"
]);
Database.addAscii("places/village/thirdHouse", 91, 35, [
    "  /        |                                                                   |        \\",
    " /         |                                                                   |         \\",
    "|          |                                                                   |          |",
    "|          |                                                                   |          |",
    "|          |                                                                   |          |",
    "|          |       _____________________________________________________       |          |",
    "|          |      /_____________________________________________________\\      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |_____________________________________________________|      |          |",
    "|          |     /            __                          ____           \\     |          |",
    "|          |    /            |UP|   __________________   |DOWN|           \\    |          |",
    "|          |   /             ¨¨¨¨  (__________________)  ¨¨¨¨¨¨            \\   |          |",
    "|          |  /_____________________________________________________________\\  |          |",
    "|          |__|          ____       ____ _____ _____ ___  (_)___  ____ _    |__|          |",
    "|         /   |   10 -> (____)     / __ `/ __ `/ __ `__ \\/ / __ \\/ __ `/    |   \\         |",
    "|        /    |          ____     / /_/ / /_/ / / / / / / / / / / /_/ /     |    \\        |",
    "|       /     | 1000 -> (____)    \\__, /\\__,_/_/ /_/ /_/_/_/ /_/\\__, /      |     \\       |",
    "|      /      |                  /____/                        /____/       |      \\      |",
    "|     /       |_____________________________________________________________|       \\     |",
    "|    /                                                                               \\    |",
    "|   /                                                                                 \\   |",
    "|  /                                                                                   \\  |",
    "| /                                                                                     \\ |",
    "|/_______________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/village", 102, 47, [
    "                                                 /\\",
    "                                                /\"\"\\",
    "                                               /\"\"\"\"\\",
    "         888888                               /______\\                    8888",
    "      88888888888                            /|| /\\ ||\\                 88888888",
    "    888888888888888                           ||/__\\||                888888888888",
    " 888888888888888888888                        ||  ' ||                    | ||",
    "         |   |                                ||____||                    |  |",
    "         | | |                               /\"\"\"\"\"\"\"\"\\                   || |",
    "         |  ||                              /\"\"\"\"\"\"\"\"\"\"\\                  || |",
    "         ||  |                             /\"\"\"\"(__)\"\"\"\"\\                '    '",
    "         ||  |               ¨            /\"\"\"\"\"\"||\"\"\"\"\"\"\\",
    "         |  ||                       ¨    |      ||      |",
    "        /     \\                           |______________|    ¨          ¨               ¨",
    "                      ¨                  /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\",
    "                                        /|                |\\                       ¨",
    "     ¨                        ¨        / |  /\\        /\\  | \\    ¨                      ¨",
    "              ¨                          | |::|      |::| |               ¨",
    "                                         | |::| ____ |::| |   ¨",
    "                       ¨         ¨       | |__||    ||__| |           ¨           ¨       ¨",
    "                    ______               |     | .. |     |",
    "              ¨    /------\\              |_____|____|_____|",
    "                  /________\\           ¨¨¨¨¨¨¨¨¨¨||¨¨¨¨¨¨¨¨¨¨",
    "                 /|        |\\                    ||",
    "    ____||_       | []  [] |      ____          |  |           _| |___         _||____       ______",
    "   /-------\\      |        |     /----\\         |  |          /-| |---\\       /-------\\     /------\\",
    "  /_________\\     |  SHOP  |    /  []  \\       |    |        /_________\\     /_________\\   /________\\",
    " /| []  ___ |\\    |  ___   |   /|  ___ |\\   ___|    |___    /|-|-|-|-|-|\\   /|     ___ |\\ /|  ___   |\\",
    "  |     |,| |     |  |,|   |    |  |,| |   /            \\    |-|-|-[,]-|     | []  |,| |   |  |,|[] |",
    "__|_____|_|_|_____|__|_|___|____|__| |_|__/              \\___|_|_|_[_]_|_____|_____|_|_|___|__| |___|_",
    "                                                .--.",
    "                                               ( ~  )",
    "      _________       _||____      ____         '--'       _________       ___||__       _____",
    "_____/---------\\_____/-||----\\____/----\\____            __/---------\\_____/---||--\\_____/-----\\_______",
    "    /___________\\   /_________\\  /______\\   \\__      __/ /___________\\   /_________\\   /_______\\",
    "   /|           |\\ /|         |\\/|      |\\     |    |   /|           |\\ /|         |\\ /|       |\\",
    "    |           |   |         |  |      |      |    |    |           |   |         |   |       |",
    "    |___________|   |_________|  |______|      |    |    |___________|   |_________|   |_______|",
    "                                               |    |",
    "                                               |    |",
    "     _________        _______       ____       |    |     _||______       _______         _||__",
    "    /---------\\      /-------\\     /----\\      |    |    /-||------\\     /-------\\       /-||--\\",
    "   /___________\\    /_________\\   /______\\     |    |   /___________\\   /_________\\     /_______\\",
    "  /|           |\\  /|         |\\ /|      |\\    |    |  /|           |\\ /|         |\\   /|       |\\",
    "   |           |    |         |   |      |     |    |   |           |   |         |     |       |",
    "   |___________|    |_________|   |______|     |    |   |___________|   |_________|     |_______|",
    "                                               |    |"
]);
Database.addAscii("places/village/candyMerchantItems/boots", 14, 5, [
    "   ___",
    "  \\   | ____",
    " __)  ||   /",
    "(_____)|  (__",
    "       (_____)"
]);
Database.addAscii("places/village/candyMerchantItems/chocolateBar", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("places/village/candyMerchantItems/hat", 17, 3, [
    "      .---.",
    "     |%%%%%|",
    "'-.__|_____|__.-'"
]);
Database.addAscii("places/village/candyMerchantItems/leatherGloves", 5, 4, [
    " ...",
    " ||||",
    "\\||||",
    " \\__/"
]);
Database.addAscii("places/village/candyMerchantItems/lollipopLeft", 5, 1, [
    "o----"
]);
Database.addAscii("places/village/candyMerchantItems/lollipopRight", 5, 1, [
    "----o"
]);
Database.addAscii("places/village/candyMerchantItems/timeRing", 1, 1, [
    "O"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/ship", 11, 2, [
    "/\\_.-'\"'-._",
    "\\_______.-'"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/splashScreen", 87, 5, [
    "_________      ______            __________           ___       __",
    "__  ____/_____ ___  /_____ ________  /___(_)______    __ |     / /_____ _______________",
    "_  / __ _  __ `/_  /_  __ `/  ___/  __/_  /_  ___/    __ | /| / /_  __ `/_  ___/_  ___/",
    "/ /_/ / / /_/ /_  / / /_/ // /__ / /_ _  / / /__      __ |/ |/ / / /_/ /_  /   _(__  )",
    "\\____/  \\__,_/ /_/  \\__,_/ \\___/ \\__/ /_/  \\___/      ____/|__/  \\__,_/ /_/    /____/"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/youLose", 37, 5, [
    "__  __               __",
    "\\ \\/ /___  __  __   / /___  ________",
    " \\  / __ \\/ / / /  / / __ \\/ ___/ _ \\",
    " / / /_/ / /_/ /  / / /_/ (__  )  __/",
    "/_/\\____/\\__,_/  /_/\\____/____/\\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/babyVampire", 24, 8, [
    "  /\\_____/\\",
    " /         \\   I want to",
    ";  o     o  ;    be a",
    ";           ;   vampire",
    " \\  \\/ \\/  /",
    " .'-.....-'.      ^.^",
    "'           '",
    "'           '"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/billGatesSkeleton", 11, 8, [
    "  _.---._",
    ".'       '.",
    ";         ;",
    "\\ ($) ($) /",
    " \\   A   /",
    "  )     (",
    "  \\\"\"\"\"\"/",
    "   '._.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/blob", 19, 7, [
    "      .-'-'-.",
    "     '       '",
    "    '  ^   ^  '",
    "  .'           '.",
    " '    '-._.-'     '",
    "'                 '",
    " '-._.-'`'`'-._.-'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/bomb", 14, 9, [
    "        ,--.!,",
    "       /   -*-",
    "      /    '|`",
    "   .-\"\"-.",
    " /`      `\\",
    ";          ;",
    ";          ;",
    " \\        /",
    "  `'-..-'`"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/chest", 14, 8, [
    "  __________",
    " /\\____;;___\\",
    "| /         /",
    "\\.---------.",
    " |\\         \\",
    " | |---------|",
    " \\ |         |",
    "  \\|_________|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/circle", 17, 9, [
    "      *   *",
    "  *           *",
    "",
    "*               *",
    "",
    "*               *",
    "",
    "  *           *",
    "      *   *"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/corpse1", 16, 6, [
    "A charred corpse",
    " is lying here",
    "",
    "     _0",
    "     /\\",
    "    /\\"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/corpse2", 16, 5, [
    "Another one here",
    "",
    "   0/",
    "   /\\_/",
    "     \\_"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/cross", 17, 8, [
    "        |",
    "   \\         /",
    "       .-.",
    "     __| |__",
    "-=  |__   __|  =-",
    "       | |",
    "       | |",
    "       |_|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/dna", 8, 9, [
    "  \\/ /",
    "  / /\\",
    " / /\\ \\",
    "( (  ) )",
    " \\ \\/ /",
    "  \\/ /",
    "  / /\\",
    " / /\\ \\",
    "( (  ) )"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/dragon", 20, 9, [
    "      __\\\\\\__",
    "    <' _     \\",
    "  <'_\\ __ 'o o",
    " <'/__(  \\_   \\",
    " <_/\\_\\    \\_  \\",
    "<_/ _\\_\\     (\\\\)",
    "<_\\_  \\_\\    (\\\\\\)",
    "               (\\\\\\)",
    "                (\\\\)"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousBlob", 19, 7, [
    "      .-'-'-.",
    "     '       '",
    "    '  \\   /  '",
    "  .'           '.",
    " '     .---.     '",
    "'                 '",
    " '-._.-'`'`'-._.-'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousGoblin", 16, 8, [
    " ,     ..     ,",
    "(`._.\"`  `\"._.')",
    " '.          .'",
    "  | (W)  (W) |",
    "  |          |",
    "   \\ 'VvvV' /",
    "    '.    .'",
    "      '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousSkeleton", 13, 8, [
    "  _.-----._",
    ".'         '.",
    ";           ;",
    "\\  (W) (W)  /",
    " \\    A    /",
    "  )       (",
    "  \\ \"\"\"\"\" /",
    "   '.___.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/goblin", 16, 8, [
    " ,     ..     ,",
    "(`._.\"`  `\"._.')",
    " '.          .'",
    "  | ()    () |",
    "  |          |",
    "   \\ 'VvvV' /",
    "    '.    .'",
    "      '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/hive", 26, 9, [
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/mainMenu", 24, 9, [
    " _____     _",
    "|     |___|_|___",
    "| | | | .'| |   |",
    "|_|_|_|__,|_|_|_|",
    "",
    "      _____ ___ ___ _ _",
    "     |     | -_|   | | |",
    "     |_|_|_|___|_|_|___|",
    ""
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/mobius", 15, 9, [
    "    _______",
    "   /    \\  \\",
    "  /  /\\  \\  \\",
    " /  /  \\  \\  \\",
    "/  /  / \\  \\  \\",
    "\\  \\  \\ /  /  /",
    " \\  \\  \\  /  /",
    "  \\  \\  \\/  /",
    "   \\__\\____/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/randomShape", 12, 6, [
    "    _______",
    " __/  _____)",
    "(___  \\____",
    "    \\   ___)",
    "    /   \\",
    "    \\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/shop", 23, 10, [
    "         __",
    "        /..\\   Please",
    "        \\__/   buy my",
    "       /|  |\\  stuff",
    "    __/_|__|_\\_______",
    "   /                 \\",
    "  /___________________\\",
    "  |                   |",
    "  |                   |",
    "  |___________________|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/skeleton", 11, 8, [
    "  _.---._",
    ".'       '.",
    ";         ;",
    "\\ (O) (O) /",
    " \\   A   /",
    "  )     (",
    "  \\\"\"\"\"\"/",
    "   '._.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/spider", 22, 6, [
    "  /\\              /\\",
    " /  \\   .-\"\"-.   /  \\",
    "/ /\\ \\/` .  . `\\/ /\\ \\",
    " /  \\;          ;/  \\",
    "/     \\        /     \\",
    "       `'-..-'`"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/spiders", 21, 8, [
    " /\\.--./\\",
    "/\\( °° )/\\",
    "   '--'     /\\.--./\\",
    "           /\\( °° )/\\",
    "              '--'",
    "     /\\.--./\\",
    "    /\\( °° )/\\",
    "       '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/splashScreen", 64, 6, [
    "________                               _________________________",
    "__  ___/___  ______________________    ___  __ \\__  __ \\_  ____/",
    "_____ \\_  / / /__  __ \\  _ \\_  ___/    __  /_/ /_  /_/ /  / __",
    "____/ // /_/ /__  /_/ /  __/  /        _  _, _/_  ____// /_/ /",
    "/____/ \\__,_/ _  .___/\\___//_/         /_/ |_| /_/     \\____/",
    "              /_/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/star", 9, 4, [
    " __.'.__",
    "'-.   .-'",
    "  /.-.\\",
    "  '   '"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/thing", 20, 9, [
    "      _.-''-._",
    "     /        \\",
    "    (   o    o )",
    "    /          \\",
    "   /      __    \\",
    "  (   _      _   )",
    "  |_ ( '-..-' ) _|",
    " _)   \\      /   (_",
    "(,(,(,/      \\,),),)"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/triforce", 12, 6, [
    "     /\\",
    "    /  \\",
    "   /____\\",
    "  /\\    /\\",
    " /  \\  /  \\",
    "/____\\/____\\"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/youLose", 37, 5, [
    "__  __               __",
    "\\ \\/ /___  __  __   / /___  ________",
    " \\  / __ \\/ / / /  / / __ \\/ ___/ _ \\",
    " / / /_/ / /_/ /  / / /_/ (__  )  __/",
    "/_/\\____/\\__,_/  /_/\\____/____/\\___/"
]);
Database.addAscii("players/medium", 11, 4, [
    "\\         /",
    " \\  .-.  /",
    "  \\(%%%)/",
    "    '-'"
]);
Database.addAscii("players/mediumBerserk", 11, 4, [
    "\\         /",
    " \\  .-.  /",
    "  \\(O%O)/",
    "    '-'"
]);
Database.addAscii("players/mediumSqueezed", 6, 3, [
    "  ..",
    "\\(%%)/",
    "  \"\""
]);
Database.addAscii("players/mediumSqueezedBerserk", 6, 3, [
    "  ..",
    "\\(OO)/",
    "  \"\""
]);
Database.addAscii("players/mediumSqueezedTurtle", 6, 3, [
    " ..",
    "/  \\/)",
    "uuuu'"
]);
Database.addAscii("players/mediumSqueezedTurtleBerserk", 6, 3, [
    " ..",
    "/  \\/O",
    "uuuu'"
]);
Database.addAscii("players/mediumTurtle", 11, 4, [
    "",
    "  .---.  _",
    " /     \\/_)",
    "'uu---uu'"
]);
Database.addAscii("players/mediumTurtleBerserk", 11, 4, [
    "",
    "  .---.  _",
    " /     \\/O)",
    "'uu---uu'¨"
]);
Database.addAscii("text/About", 32, 5, [
    "     _    _                 _",
    "    / \\  | |__   ___  _   _| |_",
    "   / _ \\ | '_ \\ / _ \\| | | | __|",
    "  / ___ \\| |_) | (_) | |_| | |_",
    " /_/   \\_\\_.__/ \\___/ \\__,_|\\__|"
]);
Database.addAscii("text/Configuration", 65, 6, [
    "   ____             __ _                       _   _",
    "  / ___|___  _ __  / _(_) __ _ _   _ _ __ __ _| |_(_) ___  _ __",
    " | |   / _ \\| '_ \\| |_| |/ _` | | | | '__/ _` | __| |/ _ \\| '_ \\",
    " | |__| (_) | | | |  _| | (_| | |_| | | | (_| | |_| | (_) | | | |",
    "  \\____\\___/|_| |_|_| |_|\\__, |\\__,_|_|  \\__,_|\\__|_|\\___/|_| |_|",
    "                         |___/"
]);
Database.addAscii("text/Loading", 39, 6, [
    "  _                    _ _",
    " | |    ___   __ _  __| (_)_ __   __ _",
    " | |   / _ \\ / _` |/ _` | | '_ \\ / _` |",
    " | |__| (_) | (_| | (_| | | | | | (_| |",
    " |_____\\___/ \\__,_|\\__,_|_|_| |_|\\__, |",
    "                                 |___/"
]);
Database.addAscii("text/Saving", 34, 6, [
    "  ____              _",
    " / ___|  __ ___   _(_)_ __   __ _",
    " \\___ \\ / _` \\ \\ / / | '_ \\ / _` |",
    "  ___) | (_| |\\ V /| | | | | (_| |",
    " |____/ \\__,_| \\_/ |_|_| |_|\\__, |",
    "                            |___/"
]);
Database.addText("br.mapVillageComment", "Aldeia");
Database.addText("br.mapFortressComment", "Fortaleza do Deserto");
Database.addText("br.mapATreeComment", "Árvore");
Database.addText("br.mapTheDesertComment", "Deserto");
Database.addText("br.mapWishingWellComment", "Poço dos Desejos");
Database.addText("br.mapLonelyHouseComment", "Casa abandonada");
Database.addText("br.mapForestComment", "Floresta");
Database.addText("br.mapCastleEntranceComment", "Portões do castelo");
Database.addText("br.mapCastleComment", "Castelo");
Database.addText("br.mapDragonComment", "Dragão");
Database.addText("br.candyBoxEatCandiesButton", "Comer todos os doces");
Database.addText("br.candyBoxThrowCandiesButton", "Jogar 10 doces no chão");
Database.addText("br.mapVillageAHouseComment", "Casa");
Database.addText("br.mapVillageForgeComment", "Forja");
Database.addText("br.buttonBackToTheMap", "Voltar ao mapa");
Database.addText("br.mapSorceressHutComment", "Cabana da feiticeira");
Database.addText("br.buttonBackToTheVillage", "Voltar à aldeia");
Database.addText("br.mapATreeIntroductionSpeech", "Oi, eu sou o esquilo. Posso lhe dar doces e muitas outras coisas. Eu sei que você ama doces... Mas eu me sinto tão só nessa floresta.");
Database.addText("br.mapATreeIntroductionButton", "Como posso ajudá-lo?");
Database.addText("br.mapATreeFirstQuestion", "Vou fazer perguntas. Se você acertar, ganhará os doces mais doces! Primeira pergunta: você ama mesmo doces? (responda em inglês)");
Database.addText("br.mapATreeSecondQuestion", "É isso aí! Tome, 20 doces para você. Agora, complete essa sequência de letras para ganhar outro prêmio: S, E, I, D, N, A, ?");
Database.addText("br.mapATreeThirdQuestion", "Doces! Fique com mais esses 100 doces. Próxima pergunta: quantos doces a pessoa mais doce do mundo tem?");
Database.addText("br.mapATreeFourthQuestion", "Aqui, mais 500 doces para você! O próximo prêmio vai ser bem interessante... Lá vai a charada: em uma floresta esquecida, cresce uma árvore muito antiga, onde vivem os animais mais inteligentes do mundo. Dizem que ela tem 60 raízes, 360 galhos e 2160 folhas. Quantas marcas tem o tronco dessa árvore?");
Database.addText("br.mapATreeFifthQuestion", "Parabéns! Sim, eu estava falando da minha árvore. Fique com esses 3 pirulitos. Faça bom uso deles! Próxima charada, preste atenção: em uma noite de lua cheia, eu jogo um chapéu amarelo no mar vermelho. O que acontece com o chapéu?");
Database.addText("br.mapATreeTicTacToeIntro", "Muito bem! Essa não era tão difícil. Mais três barras de chocolate para você! Já para a próxima recompensa, as regras serão diferentes. Você terá de me vencer em um jogo! Está preparado?");
Database.addText("br.mapATreeTicTacToeIntroButton", "Mas é claro!");
Database.addText("br.mapATreeTicTacToeLetsPlay", "É o jogo-da-velha. Vamos jogar em um tabuleiro 3 por 3. Você usará o símbolo X e eu o símbolo O. Cada um de uma vez, o objetivo é colocar três símbolos um do lado do outro. Vou deixar que você comece!");
Database.addText("br.mapATreeTicTacToeNobodyWins", "Preenchemos todo o tabuleiro, mas ninguém conseguiu fechar uma sequência... Empatou! Quer tentar novamente?");
Database.addText("br.mapATreeTicTacToeYouLose", "Eu consegui três símbolos em sequência! Quer tentar de novo?");
Database.addText("br.mapATreeTicTacToeTryAgainButton", "Sim, claro!");
Database.addText("br.mapATreeTicTacToeYouWin", "Nossa, não esperava por essa. Mas não dá para negar: você conseguiu uma sequência de três. Você venceu! Fique com essa chave. Ela abre uma das casas na aldeia ao sul da floresta.");
Database.addText("br.mapATreeTicTacToeAnymoreSweet", "Obrigado, esquilo! Você tem mais algum desafio?");
Database.addText("br.mapATreeNoMoreChallenge", "Infelizmente, não. Acabaram meus desafios... Mas foi legal brincar com você, muito obrigado!");
Database.addText("br.buttonExitQuestKeeping", "Sair da missão (e levar os itens com você)");
Database.addText("br.buttonExitQuestNoKeeping", "Sair da missão (e deixar os itens para trás)");
Database.addText("br.buttonExitQuestNoKeepingBecauseLose", "Sair da missão (e deixar os itens para trás, pois você fracassou)");
Database.addText("br.mapVillageLockedHouseComment", "Casa trancada");
Database.addText("br.mapVillageForgeIntroductionSpeech", "Olá! Eu sou um ferreiro. Tenho muitas armas e equipamentos para vender.");
Database.addText("br.mapVillageForgeIntroductionSpeechNoMoreToSell", "Olá! Eu sou um ferreiro. Infelizmente, não tenho nada para ver. Volte mais tarde.");
Database.addText("br.mapVillageFifthHouseNoWeaponSpeech", "Olá. Meu porão está cheio de ratos, preciso me livrar deles... Se ao menos alguém com uma arma pudesse me ajudar...");
Database.addText("br.mapVillageFifthHouseWeaponSpeech", "Ei, você! Vejo que tem uma arma! Se matar os ratos do meu porão, posso lhe dar uma recompensa!");
Database.addText("br.mapVillageFifthHouseAgree", "Então vamos");
Database.addText("br.mapVillageFifthHouseCellarDone", "Obrigado por se livrar dos ratos! Fique com esta baita recompensa: um mapa do mundo. Aposto que você precisa mais disso do que eu.");
Database.addText("br.mapVillageTheShopComment", "Loja");
Database.addText("br.mapBridgeComment", "Ponte");
Database.addText("br.mapFarmComment", "Fazenda de pirulitos");
Database.addText("br.mapCaveEntranceComment", "br.rada da caverna");
Database.addText("br.mapLighthouseComment", "Farol");
Database.addText("br.mapPierComment", "Cais");
Database.addText("br.mapTheHoleComment", "Buraco");
Database.addText("br.candyBoxRequestStatusBarUnlocked", "Solicitar um novo recurso ao desenvolvedor (30 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfg", "Solicitar outro recurso (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedSave", "Solicitar novamente (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedHealthBar", "Solicitar algo mais emocionante (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedMap", "Último recurso! Tomara que esse valha a pena. (10 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedComment", "Você desbloqueou a barra de status (acima)");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfgComment1", "Agora você pode acessar a guia de configuração.");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfgComment2", "Se quiser, você pode trocar o idioma do jogo.");
Database.addText("br.candyBoxRequestStatusBarUnlockedSaveComment", "Uma guia selvagem aparece!");
Database.addText("br.candyBoxRequestStatusBarUnlockedHealthBarComment", "Fique com esses 100 pontos de vida. Você vai precisar.");
Database.addText("br.cfgChooseLanguage", "Escolha o idioma:");
Database.addText("br.cfgInvertColors", "Inverter cores?");
Database.addText("br.gridItemMainMapName", "Mapa");
Database.addText("br.gridItemMainMapDescription", "Mapa do mundo");
Database.addText("br.gridItemPogoStickName", "Pula-pula");
Database.addText("br.gridItemPogoStickDescription", "Com ele, você poderá pular nas missões!");
Database.addText("br.gridItemTimeRingName", "Anel do Tempo");
Database.addText("br.gridItemTimeRingDescription", "Esse item concede uma nova habilidade nas missões: desacelerar o tempo. Se as coisas estiverem rápidas demais, use o Anel do Tempo!");
Database.addText("br.gridItemThirdHouseKeyName", "Chave da terceira casa");
Database.addText("br.gridItemThirdHouseKeyDescription", "Essa chave abre a terceira casa da aldeia.");
Database.addText("br.gridItemFeatherName", "Pena de ave do deserto");
Database.addText("br.gridItemFeatherDescription", "Essa pena mágica permite que você pule mais alto com o pula-pula!");
Database.addText("br.gridItemFeatherDescriptionNoPogoStick", "Por algum motivo desconhecido, você acha que essa pena seria muito útil se você tivesse um pula-pula...");
Database.addText("br.gridItemSpongeName", "Esponja mágica");
Database.addText("br.gridItemSpongeDescription", "Essa esponja mágica permite que você se esprema como uma esponja, reduzindo o seu tamanho.");
Database.addText("br.gridItemFortressKeyName", "Chave da Fortaleza do Deserto");
Database.addText("br.gridItemFortressKeyDescription", "Essa chave garante acesso à antiga fortaleza que fica ao norte do deserto. O que será que tem lá?");
Database.addText("br.gridItemHeartPendantName", "Pingente de coração");
Database.addText("br.gridItemHeartPendantDescription", "Esse pingente aumentará seus pontos de vida enquanto você usá-lo no pescoço.");
Database.addText("br.gridItemHeartPlugName", "Berloque de coração");
Database.addText("br.gridItemHeartPlugDescription", "Esse berloque feito de ferro, patas de aranha e \"fluido cardiológico\" envasado no centro aumentará em 20 por cento seus pontos de vida!");
Database.addText("br.gridItemBeginnersGrimoireName", "Grimório do Aprendiz");
Database.addText("br.gridItemBeginnersGrimoireDescription", "Esse grimório contém três feitiços bem fáceis de serem lançados, ideais para iniciantes. 1- Chuva ácida (uma grande quantidade de gotas ácidas caem em seus inimigos). 2- Bola de fogo (lança bola de fogo gigante contra seus inimigos). 3- Teleporte (transporta você para um local aleatório).");
Database.addText("br.gridItemAdvancedGrimoireName", "Grimório Avançado");
Database.addText("br.gridItemAdvancedGrimoireDescription", "Esse grimório contém dois feitiços. 1- Dissipar magia (anula todos os feitiços existentes em uma missão, tanto os seus quanto os dos inimigos). 2- Escudo de espinhos (cria um escudo de espinhos ao seu redor, causando dano aos inimigos que encostarem nele).");
Database.addText("br.gridItemBlackMagicGrimoireName", "Grimório de Magia Negra");
Database.addText("br.gridItemBlackMagicGrimoireDescription", "Você encontrou esse grimório na caverna, em um canto de difícil acesso; e estava lá por um motivo. Ele concede dois feitiços sombrios muito poderosos. O primeiro criará um muro gigante de obsidianas, ideal para impedir o avanço de inimigos. O segundo evocará uma horda de demônios que atacarão todos na missão, inclusive você. Tome cuidado com esse feitiço.");
Database.addText("br.gridItemUnicornHornName", "Chifre de unicórnio");
Database.addText("br.gridItemUnicornHornDescription", "Esse chifre mágico pertencia a um unicórnio. Os poderes de cura dele serão de grande ajuda. Dizem que o unicórnio se chamava Charlie.");
Database.addText("br.gridItemXinopherydonClawName", "Garra de xinoferedonte");
Database.addText("br.gridItemXinopherydonClawDescription", "Essa garra pertenceu a um xinoferedonte, um animal pré-histórico de duas cabeças que muitos acreditam ter existido. Ela dobrará o dano da sua arma.");
Database.addText("br.gridItemPitchforkName", "Forcado");
Database.addText("br.gridItemPitchforkDescription", "Esse forcado especial amacia o solo sem revirá-lo, preservando os ecossistemas subterrâneos. Ele triplica a produção da sua fazenda de pirulitos.");
Database.addText("br.gridItemShellPowderName", "Pó de conchas");
Database.addText("br.gridItemShellPowderDescription", "Muitos fazendeiros usam pó de conchas para acelerar o crescimento dos pirulitos. Ele triplica a produção da sua fazenda de pirulitos.");
Database.addText("br.gridItemPName", "Pedra P");
Database.addText("br.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("br.gridItemLName", "Pedra L");
Database.addText("br.gridItemLDescription", "ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("br.gridItemAName", "Pedra A");
Database.addText("br.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("br.gridItemYName", "Pedra Y");
Database.addText("br.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("br.gridItemRedSharkFinName", "Barbatana vermelha");
Database.addText("br.gridItemRedSharkFinDescription", "Essa barbatana mágica aumenta consideravelmente o dano do feitiço Bola de fogo. Finalmente ele será útil para alguma coisa.");
Database.addText("br.gridItemGreenSharkFinName", "Barbatana verde");
Database.addText("br.gridItemGreenSharkFinDescription", "Essa barbatana mágica leva o poder da natureza à sua fazenda! Multiplica por 5 a produção de pirulitos.");
Database.addText("br.gridItemPurpleSharkFinName", "Barbatana roxa");
Database.addText("br.gridItemPurpleSharkFinDescription", "Essa barbatana mágica concede um novo feitiço sombrio, que só pode ser usado uma vez por missão. Tome muito cuidado!");
Database.addText("br.gridItemTalkingCandyName", "Doce falante");
Database.addText("br.gridItemTalkingCandyDescription", "Esse doce falante apareceu quando você colocou as quatro pedras no alto da torre do castelo. Talvez ele saiba como abrir a caixa de doces...");
Database.addText("br.inventorySpecialNothingEqItem", "Nada");
Database.addText("br.eqItemWeaponWoodenSwordName", "Espada de madeira");
Database.addText("br.eqItemWeaponWoodenSwordDescription", "Uma espada simples, feita de madeira");
Database.addText("br.eqItemWeaponIronAxeName", "Machado de ferro");
Database.addText("br.eqItemWeaponIronAxeDescription", "Um machado de ferro bem afiado. Mais eficiente que a espada de madeira.");
Database.addText("br.eqItemWeaponPolishedSilverSwordName", "Espada de prata polida");
Database.addText("br.eqItemWeaponPolishedSilverSwordDescription", "Uma espada poderosa, coberta de espinhos.");
Database.addText("br.eqItemWeaponTrollBludgeonName", "Tacape de troll");
Database.addText("br.eqItemWeaponTrollBludgeonDescription", "Você tomou esse tacape do troll que protegia a ponte. Ele é bem lento, mas esmaga inimigos que é uma beleza.");
Database.addText("br.eqItemWeaponTribalSpearName", "Lança tribal");
Database.addText("br.eqItemWeaponTribalSpearDescription", "Você encontrou essa lança no corpo de um guerreiro morto, em um buraco no chão. É um tanto complicado de se manusear, mas é tudo uma questão de costume.");
Database.addText("br.eqItemWeaponSummoningTribalSpearName", "Lança tribal da evocação");
Database.addText("br.eqItemWeaponSummoningTribalSpearDescription", "Essa lança mágica, além de ser ligeiramente mais poderosa que a lança tribal normal, evocará frequentemente guerreiros tribais que ajudarão você nas missões.");
Database.addText("br.eqItemWeaponMonkeyWizardStaffName", "Cajado do macaco mago");
Database.addText("br.eqItemWeaponMonkeyWizardStaffDescription", "Esse cajado pertenceu ao macaco mago que estava pelado na caverna. Ele lança frequentemente feitiços contra seus inimigos.");
Database.addText("br.eqItemWeaponEnchantedMonkeyWizardStaffName", "Cajado do macaco mago (encantado)");
Database.addText("br.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Esse cajado é mais veloz que a versão normal, além de lançar muito mais feitiços.");
Database.addText("br.eqItemWeaponGiantSpoonName", "Colher gigante");
Database.addText("br.eqItemWeaponGiantSpoonDescription", "Essa colher gigante estava em uma chaleira gigante na Fortaleza do Deserto. Se algum dia ela foi usada como uma colher, então essa pessoa devia ser bem grande. Tomara que você não esbarre com ela.");
Database.addText("br.eqItemWeaponGiantSpoonOfDoomName", "Colher gigante da perdição");
Database.addText("br.eqItemWeaponGiantSpoonOfDoomDescription", "Essa colher gigante é ainda mais poderosa que as colheres normais encontradas em chaleiras gigantes, mas é bem lenta.");
Database.addText("br.eqItemWeaponScytheName", "Foice");
Database.addText("br.eqItemWeaponScytheDescription", "Dizem que essa foice pertenceu à própria Morte. Ela é extremamente rápida.");
Database.addText("br.eqItemHatMerchantHatName", "Chapéu do vendedor");
Database.addText("br.eqItemHatMerchantHatDescription", "Você comprou esse chapéu do vendedor de doces. Sabia que ele ama doces? Os doces encontrados em missões serão multiplicados por 7!");
Database.addText("br.eqItemHatSorceressHatName", "Chapéu da feiticeira");
Database.addText("br.eqItemHatSorceressHatDescription", "Você comprou esse chapéu da feiticeira. Ele aprimora os efeitos dos seus feitiços e das suas poções.");
Database.addText("br.eqItemHatOctopusKingCrownName", "Coroa do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownDescription", "Você se sente muito mais confiante com essa coroa. Ela não dá nenhuma vantagem nas missões, mas o importante é ter confiança!");
Database.addText("br.eqItemHatOctopusKingCrownWithJaspersName", "Coroa de jaspes do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownWithJaspersDescription", "Essa coroa encantada é feita de ouro e jaspes vermelhos. Nas missões, ela lançará poderosas bolas de fogo para todos os cantos. Ah, e ela brilha muito!");
Database.addText("br.eqItemHatOctopusKingCrownWithObsidianName", "Coroa de obsidianas do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownWithObsidianDescription", "Essa coroa encantada é feita de ouro e obsidianas. É linda! Nas missões, ela evocará esporadicamente um Rei Polvo para lutar ao seu lado. Tentáculos nunca são demais!");
Database.addText("br.eqItemGlovesLeatherGlovesName", "Luvas de couro");
Database.addText("br.eqItemGlovesLeatherGlovesDescription", "Essas luvas não fazem nada, mas são macias e confortáveis!");
Database.addText("br.eqItemGlovesRedEnchantedGlovesName", "Luvas vermelhas encantadas");
Database.addText("br.eqItemGlovesRedEnchantedGlovesDescription", "Essas luvas emitem um suave brilho vermelho quando está escuro. Nas missões, elas lançam pequenas bolas de fogo contra os inimigos. Não há como negar que isso é bem útil.");
Database.addText("br.eqItemGlovesPinkEnchantedGlovesName", "Luvas rosa encantadas");
Database.addText("br.eqItemGlovesPinkEnchantedGlovesDescription", "Essas luvas deixam uma marca rosa em tudo que tocam. Nas missões, elas curarão você continuamente.");
Database.addText("br.eqItemBootsRocketBootsName", "Botas-foguete");
Database.addText("br.eqItemBootsRocketBootsDescription", "Essas incríveis botas permitem que você pule no ar, ou seja, você pode praticamente voar!");
Database.addText("br.eqItemBootsLeatherBootsName", "Botas de couro");
Database.addText("br.eqItemBootsLeatherBootsDescription", "Botas simples de couro. Nada demais.");
Database.addText("br.eqItemBootsBootsOfIntrospectionName", "Botas da introspecção");
Database.addText("br.eqItemBootsBootsOfIntrospectionDescription", "Tire um tempo para respirar e se acalmar. Com essas botas, você nunca andará enquanto estiver com os pés no chão.");
Database.addText("br.eqItemBodyArmoursLightweightBodyArmourName", "Armadura leve");
Database.addText("br.eqItemBodyArmoursLightweightBodyArmourDescription", "Essa armadura oferece um pouco de proteção. Você ficará mais resistente aos ataques dos inimigos.");
Database.addText("br.eqItemBodyArmoursKnightBodyArmourName", "Armadura de cavaleiro");
Database.addText("br.eqItemBodyArmoursKnightBodyArmourDescription", "Essa pesada armadura oferece mais proteção. Você ficará muito resistente aos ataques dos inimigos.");
Database.addText("br.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Armadura de cavaleiro encantada");
Database.addText("br.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Essa armadura é muito especial. Você ficará MUITO mais resistente aos ataques inimigos, mas o dano da sua arma cairá pela metade.");
Database.addText("br.mapVillageForgeBuyWoodenSwordButton", "Comprar espada de madeira (150 doces)");
Database.addText("br.mapVillageForgeBuyWoodenSwordSpeech", "Obrigado! Essa espada é um tanto fraca, mas é melhor do que nada.");
Database.addText("br.mapVillageForgeBuyIronAxeButton", "Comprar machado de ferro (400 doces)");
Database.addText("br.mapVillageForgeBuyIronAxeSpeech", "Espero que goste do machado. Acabei de afiá-lo para você.");
Database.addText("br.mapVillageForgeBuyPolishedSilverSwordButton", "Comprar espada de prata polida (2.000 doces)");
Database.addText("br.mapVillageForgeBuyPolishedSilverSwordSpeech", "Como demorei para criar essa espada. Garanto que ela vale cada doce gasto.");
Database.addText("br.mapVillageForgeBuyLightweightBodyArmourButton", "Comprar armadura leve (15.000 doces)");
Database.addText("br.mapVillageForgeBuyLightweightBodyArmourSpeech", "Essa armadura vai proteger você dos ataques inimigos.");
Database.addText("br.mapVillageForgeBuyScytheButton", "Comprar foice (5.000.000 doces)");
Database.addText("br.mapVillageForgeBuyScytheSpeech", "Demorei meses para terminar essa foice. É uma verdadeira obra de arte. Aposto que você nunca encontrará arma mais rápida que essa. Boa sorte!");
Database.addText("br.wishingWellThrowFirstCandyButton", "Jogar um doce no poço");
Database.addText("br.wishingWellCandyIntroductionSpeech", "Olá, viajante! Sou o Poço dos Desejos. Concederei desejos em troca de guloseimas! Jogue doces dentro de mim para que eu cure seus ferimentos.");
Database.addText("br.wishingWellThrewCandiesSpeech", "Seus ferimentos foram curados!");
Database.addText("br.wishingWellNoWoundSpeech", "Você não está ferido!");
Database.addText("br.wishingWellThrowFirstLollipopButton", "Jogar um pirulito no poço");
Database.addText("br.wishingWellLollipopIntroductionSpeech", "Olá, viajante! Sou o Poço dos Desejos. Concederei desejos em troca de guloseimas! Jogue pirulitos dentro de mim para que eu os converta em doces.");
Database.addText("br.wishingWellThrewLollipopsSpeech", "Seus pirulitos são transformados em doces! Dois pirulitos por um doce.");
Database.addText("br.wishingWellThrowChocolateBarButton", "Jogar uma barra de chocolate no poço");
Database.addText("br.wishingWellChocolateBarIntroductionSpeech", "Olá, viajante! Sou o Poço dos Desejos. Concederei desejos em troca de guloseimas! Eu amo, AMO chocolate. Para cada chocolate que você jogar em mim, incluindo esse, eu encantarei um item seu.");
Database.addText("br.wishingWellThrewChocolateBarSpeech", "Qual objeto você deseja encantar?");
Database.addText("br.wishingWellThrowPainAuChocolatButton", "Jogar um pão de chocolate no poço");
Database.addText("br.wishingWellPainAuChocolatIntroductionSpeech", "Olá, viajante! Sou o Poço dos Desejos. Concederei desejos em troca de guloseimas! Para cada pão de chocolate que você jogar, eu lhe darei um dom especial. Pense bem antes de escolher!");
Database.addText("br.wishingWellThrewPainAuChocolatSpeech", "Obrigado pelo pão de chocolate! Escolha o seu dom.");
Database.addText("br.wishingWellChooseGift", "Escolha seu dom!");
Database.addText("br.wishingWellChooseGiftButton", "Escolher");
Database.addText("br.wishingWellGiftDoneSpeech", "Pronto! Você ganhou um dom. Ele será exibido nas estatísticas do inventário.");
Database.addText("br.wishingWellNoPossibleEnchantment", "Nenhum encantamento disponível");
Database.addText("br.wishingWellChooseEnchantment", "Escolha o encantamento");
Database.addText("br.wishingWellEnchantButton", "Encantar");
Database.addText("br.wishingWellEnchantmentDoneSpeech", "Prontinho! O item foi encantado.");
Database.addText("br.pierLighthouseButton", "Ir de barco ao farol");
Database.addText("br.pierTheSeaButton", "Pular no mar");
Database.addText("br.lonelyHouseOpenBox", "Abrir a caixa");
Database.addText("br.lonelyHouseShakeBox", "Sacudir a caixa");
Database.addText("br.lonelyHouseBreakLock", "Quebrar a fechadura");
Database.addText("br.lonelyHouseKickBox", "Chutar a caixa");
Database.addText("br.lonelyHouseAskTheBoxToOpenItself", "Pedir à caixa para que se abra");
Database.addText("br.lonelyHouseLureTheBoxWithACandy", "Oferecer um doce à caixa");
Database.addText("br.lonelyHouseTakeTheBox", "Levar a caixa embora. Você provavelmente precisará de uma chave.");
Database.addText("br.lonelyHouseOpenBoxResult", "A caixa está trancada.");
Database.addText("br.lonelyHouseShakeBoxResult", "Nada acontece.");
Database.addText("br.lonelyHouseBreakLockResult", "A fechadura é forte.");
Database.addText("br.lonelyHouseKickBoxResult", "Você machuca o pé, mas nada acontece.");
Database.addText("br.lonelyHouseAskTheBoxToOpenItselfResult", "...é uma caixa, você sabe disso, não é?");
Database.addText("br.lonelyHouseLureTheBoxWithACandyResult", "A caixa parece não se importar.");
Database.addText("br.lonelyHouseTakeTheBoxResult", "Deve ter algo de interessante dentro da caixa.");
Database.addText("br.lollipopFarmConstructMill", "Construir um moinho (10.000 pirulitos)");
Database.addText("br.lollipopFarmFeedMill", "Abastecer o moinho");
Database.addText("br.lollipopFarmCurrentCandiesProduction", "Produção atual de doces");
Database.addText("br.lollipopFarmDigPond", "Cavar um lago (100.000 pirulitos)");
Database.addText("br.lollipopFarmBuyLolligator", "Comprar um crocolito (1.200 doces)");
Database.addText("br.lollipopFarmLolligatorsConversionText", "Conversão doces -> pirulitos ativada");
Database.addText("br.lighthouseAskButton", "Perguntar");
Database.addText("br.lighthouseQuestionWho", "Quem é você?");
Database.addText("br.lighthouseQuestionWhoSpeech", "Sou um ciclope muito velho.");
Database.addText("br.lighthouseQuestionWhat", "O que você faz aqui?");
Database.addText("br.lighthouseQuestionWhatSpeech", "Passo os dias aqui, esperando algum barco chegar. Já faz tempo desde o último barco... Mas preciso ficar aqui, olhando o horizonte... Talvez mais algum chegue.");
Database.addText("br.lighthouseQuestionWhyEatCandies", "Por que eu comeria doces?");
Database.addText("br.lighthouseQuestionWhyEatCandiesSpeech", "Porque eles fazem bem para a saúde!");
Database.addText("br.lighthouseQuestionCandyBox", "O que é uma caixa de doces?");
Database.addText("br.lighthouseQuestionCandyBoxSpeech", "É uma caixa muito antiga... dizem que ela guarda todos os doces do mundo. Segundo a lenda, quem abrir a caixa terá tantos doces que tudo lhe será possível.");
Database.addText("br.lighthouseQuestionDragon", "O dragão me disse para vir aqui em busca de doces.");
Database.addText("br.lighthouseQuestionDragonSpeech", "Ah, bem... Eu não posso lhe dar doces diretamente, mas posso lhe dar algo essencial para se conseguir MUITOS doces. Mas terei de testá-lo antes disso. O que eu guardo não pode ser dado a qualquer um. Solucione esse quebra-cabeça e ele será seu.");
Database.addText("br.lighthouseFoundStone", "Parabéns! Você passou no teste e encontrou a pedra. Ela é muito preciosa, mas somente se você tiver outras três pedras como essa. Boa sorte!");
Database.addText("br.lighthouseFoundStoneAgain", "Bom trabalho, você solucionou o quebra-cabeça de novo. Gostou, foi?");
Database.addText("br.saveLocalSaveTitle", "Salvar no navegador");
Database.addText("br.saveLocalSaveWhy", "Escolha salvamento local se quiser continuar jogando no dispositivo e navegador atuais.");
Database.addText("br.saveLocalSaveWarning0", "O navegador não é compatível com HTML5.");
Database.addText("br.saveLocalSaveWarning1", "Atualize o navegador para usar o recurso de salvamento local.");
Database.addText("br.saveLocalSaveChooseSlot", "Escolha um lugar para salvar:");
Database.addText("br.saveLocalSaveAutosaveEnabled", "Salvamento automático ativado");
Database.addText("br.saveLocalSaveChooseWhatToDo", "Escolha o que fazer:");
Database.addText("br.saveLocalSaveSaveButton", "Salvar");
Database.addText("br.saveLocalSaveAutosaveButton", "Salvar a cada 10 minutos");
Database.addText("br.saveLocalSaveDisableAutosaveButton", "Desativar salvamento automático");
Database.addText("br.saveFileSaveTitle", "Salvar em texto");
Database.addText("br.saveFileSaveWhy0", "Escolha salvar em texto se:");
Database.addText("br.saveFileSaveWhy1", "quiser continuar jogando em outro dispositivo ou navegador.");
Database.addText("br.saveFileSaveWhy2", "quiser compartilhar seu jogo salvo com alguém.");
Database.addText("br.saveFileSaveWhy3", "por algum motivo você quiser apagar o cache do navegador");
Database.addText("br.saveFileSaveWhy4", "(isso apagará jogos salvos localmente)");
Database.addText("br.saveFileSaveButton", "Obter jogo atual em texto");
Database.addText("br.saveFileSaveWarning", "Agora copie e cole esse texto em algum lugar (ex.: um arquivo)");
Database.addText("br.saveLocalLoadTitle", "Carregar do navegador");
Database.addText("br.saveLocalLoadYouCan", "É possível carregar um jogo salvo localmente usando um dos links:");
Database.addText("br.saveLocalLoadThanksTo", "Graças à magia do HTML5, é possível usar esses links até mesmo off-line.");
Database.addText("br.saveFileLoadTitle", "Carregar de texto");
Database.addText("br.saveFileLoadPaste", "Cole o texto do jogo salvo e clique em \"Carregar\".");
Database.addText("br.saveFileLoadButton", "Carregar");
Database.addText("br.mountainsText0", "Você avistou algo nas montanhas!");
Database.addText("br.mountainsText1", "Parece algo interessante. Talvez seja útil.");
Database.addText("br.mountainsTextButton", "Escalar as montanhas até o troço");
Database.addText("br.mountainsTextAfter", "Você achou um pula-pula! Ele foi adicionado ao seu inventário.");
Database.addText("br.secondHouseIntroSpeech", "Olá, sou o vendedor de doces. Eu faço tudo por doces. Como posso ajudá-lo?");
Database.addText("br.secondHouseLollipop1Speech", "Esse pirulito de limão é o meu favorito! Ele custa 60 doces, mas vale a pena.");
Database.addText("br.secondHouseLollipop2Speech", "Esse pirulito de morango é uma delícia! Eu adoro a cor dele. Só custa 60 doces!");
Database.addText("br.secondHouseLollipop3Speech", "Aposto que você nunca experimentou um pirulito de abóbora! 60 doces e será todo seu.");
Database.addText("br.secondHouseLollipopButtonText", "Comprar esse pirulito (60 doces)");
Database.addText("br.secondHouseMerchantHatSpeech", "Eu até poderia vender meu chapéu, mas gosto muito dele. A não ser que seja por... 1 milhão de doces. O que me diz? Uma pechincha, não é mesmo?");
Database.addText("br.secondHouseMerchantHatButtonText", "Comprar o chapéu do vendedor (1.000.000 doces)");
Database.addText("br.secondHouseTimeRingSpeech", "Esse é o Anel do Tempo. Com ele, você poderá desacelerar o tempo quando estiver em apuros.");
Database.addText("br.secondHouseTimeRingButtonText", "Comprar o Anel do Tempo (500 doces)");
Database.addText("br.secondHouseLeatherGlovesSpeech", "Essas luvas são feitas de couro de camelo; altíssima qualidade. Tenho um monte delas no estoque, por isso são tão baratas... apenas 300 doces!");
Database.addText("br.secondHouseLeatherBootsButtonText", "Comprar um par de botas de couro (300 doces)");
Database.addText("br.secondHouseLeatherBootsSpeech", "Essas botas são do mais puro couro de camelo. Seus pés ficarão quentinhos.");
Database.addText("br.secondHouseLeatherGlovesButtonText", "Comprar um par de luvas de couro (300 doces)");
Database.addText("br.secondHouseChocolateBarSpeech", "Isso é uma barra de chocolate. Não sei para que serve, mas é bem rara... e cara! Por 800 doces, ela é sua.");
Database.addText("br.secondHouseChocolateBarButtonText", "Comprar a barra de chocolate (800 doces)");
Database.addText("br.outsideTheHoleButton", "Pular nesse buraco grande no chão");
Database.addText("br.theCaveExitText0", "Você finalmente chegou à saída da caverna.");
Database.addText("br.theCaveExitText1", "Você vê uma enorme floresta lá fora.");
Database.addText("br.theCaveExitButtonText", "Sair da caverna");
Database.addText("br.theCaveFirstSentenceWentStraight", "Você seguiu reto.");
Database.addText("br.theCaveFirstSentenceWentLeft", "Você virou à esquerda.");
Database.addText("br.theCaveFirstSentenceWentRight", "Você virou à direita.");
Database.addText("br.theCaveFirstSentenceYouAre", "Você está em uma caverna. Há três caminho à sua frente.");
Database.addText("br.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Você vê algo estranho no chão à sua frente.");
Database.addText("br.theCavePattern_ChocolateBarNowSeeChocolateBar", "Você vê uma barra de chocolate à sua frente.");
Database.addText("br.theCavePattern_TreasureMapSentence", "Você vê pedrinhas estranhamente dispostas no chão.");
Database.addText("br.theCavePattern_MonkeyWizardSentence", "Você se depara com um macaco mago pelado.");
Database.addText("br.theCavePattern_MonkeyWizardButton", "Desafiá-lo");
Database.addText("br.theCavePattern_OctopusKingSentence", "Você se depara com o Rei Polvo. Ele parece ser durão.");
Database.addText("br.theCavePattern_OctopusKingButton", "Desafiá-lo");
Database.addText("br.fortressInsideText0", "Você está dentro da Fortaleza do Deserto.");
Database.addText("br.fortressInsideText1", "Há três portas à sua frente.");
Database.addText("br.fortressInsideText2", "Cada uma delas leva a uma sala com um tesouro no fim.");
Database.addText("br.fortressInsideEnterRoom1", "br.rar na primeira sala");
Database.addText("br.fortressInsideEnterRoom2", "br.rar na segunda sala");
Database.addText("br.fortressInsideEnterRoom3", "br.rar na terceira sala");
Database.addText("br.treasureButtonDig", "Cavar");
Database.addText("br.treasureButtonYouFound", "Você encontrou três barras de chocolate!");
Database.addText("br.sorceressHutHello", "Olá, sou a feiticeira. Posso lhe ensinar algumas coisinhas sobre magia. Também posso lhe dar coisas interessantes ou criar feitiços para você. Mas tudo tem um preço... pirulitos! Muitos pirulitos!");
Database.addText("br.sorceressHutClickedGrimoire", "Esse é um grimório para aprendizes. Com ele, você poderá lançar feitiços simples porém úteis nas missões. Você vai precisar! Apenas 5.000 pirulitos.");
Database.addText("br.sorceressHutBuyGrimoireButton", "Comprar esse grimório (5.000 pirulitos)");
Database.addText("br.sorceressHutBuyGrimoireSpeech", "Obrigado pela compra! Você poderá lançar três feitiços com esse grimório. Boa sorte!");
Database.addText("br.sorceressHutClickedGrimoire2", "Esse é um grimório avançado. Com ele, você poderá lançar dois feitiços mais poderosos. Eu mesmo os escrevi; não foi nada fácil. Acho que 20.000 pirulitos é um bom preço.");
Database.addText("br.sorceressHutBuyGrimoire2Button", "Comprar esse grimório (20.000 pirulitos)");
Database.addText("br.sorceressHutBuyGrimoire2Speech", "Obrigado pela compra! Você poderá lançar dois feitiços com esse grimório. Use-os com sabedoria!");
Database.addText("br.sorceressHutClickedCauldron", "Esse é o meu caldeirão. É nele onde preparo as poções mágicas. Posso até vendê-lo, mas ele é muito valioso... que tal 100.000 pirulitos?");
Database.addText("br.sorceressHutBuyCauldronButton", "Comprar o caldeirão (100.000 pirulitos)");
Database.addText("br.sorceressHutBuyCauldronSpeech", "Muito obrigada! 100.000 pirulitos para mim! Fique com este livro de receitas. Ele será muito útil.");
Database.addText("br.sorceressHutClickedHat", "Belo chapéu, não acha? Mas não posso vendê-lo; ele é muuuito valioso. É sério, não insista. Não. Não, não posso fazer isso. Ah, tá... Talvez eu o troque por 1.000.000.000 de pirulitos. Você não vai ter como me pagar esse valor mesmo.");
Database.addText("br.sorceressHutBuyHatButton", "Comprar o chapéu (1.000.000.000 pirulitos)");
Database.addText("br.sorceressHutBuyHatSpeech", "Um bilhão de pirulitos para mim! Não tenho mais o chapéu... mas um bilhão de pirulitos, puxa vida! ... Valeu a pena.");
Database.addText("br.cauldronPreviousPageButton", "Página anterior");
Database.addText("br.cauldronNextPageButton", "Próxima página");
Database.addText("br.cauldronWhatYouWantToPut", "O que deseja colocar no caldeirão?");
Database.addText("br.cauldronWhatIsIn", "No caldeirão há:");
Database.addText("br.cauldronWhatYouCanDo", "O que deseja fazer?");
Database.addText("br.castleBigRoomComment", "Sala grande");
Database.addText("br.castleARoomComment", "Sala");
Database.addText("br.castleADarkRoomComment", "Sala escura");
Database.addText("br.castleCastleEntranceComment", "Portões do castelo");
Database.addText("br.castleTowerEntranceComment", "br.rada da torre");
Database.addText("br.castleNougatMonsterComment", "Atacar o monstro de torrone gigante");
Database.addText("br.castleGuardsComment", "Atacar os guardas");
Database.addText("br.castleStairsComment", "Escadaria");
Database.addText("br.buttonBackToTheCastle", "Voltar ao castelo");
Database.addText("br.castleBigRoomHovenSpeechSad", "Olá! Sou um velho forno à lenha. Eu costumava assar toneladas de pães, mas nunca mais fui usado. Será... Será que você pode me ajudar? Só preciso de algumas das suas guloseimas! Você não vai se arrepender! Eu juro.");
Database.addText("br.castleBigRoomHovenNotEnough", "Ah... Você não tem guloseimas suficientes. Não posso fazer nada, sou inútil. Um forno totalmente imprestável, é isso o que sou.");
Database.addText("br.castleBigRoomHovenSpeechMadePainAuChocolat", "Oba! Muito obrigado! Usei 100 doces e uma barra de chocolate e preparei... um pão de chocolate! É minha receita predileta. Espero que você goste!");
Database.addText("br.castleBigRoomHovenSpeechHappy", "Ei! Se quiser cozinhar mais, é só falar comigo! Será um prazer ajudar.");
Database.addText("br.castleBigRoomHovenSpeechHappyNotEnough", "Ah, você não tem guloseimas suficientes. Eu preciso de 100 doces e uma barra de chocolate. Volte quando tiver tudo.");
Database.addText("br.castleBigRoomHovenLetHovenTakeButton", "Deixar que o forno pegue tudo de que precisar.");
Database.addText("br.castleBigRoomHovenThanks", "Obrigado, forno!");
Database.addText("br.dragonStopTickling", "Ô, você aí! Pare de fazer cócegas, por favor.");
Database.addText("br.dragonStopTicklingButton", "Hã, erh... Desculpe-me. Achei que eu devia derrotar você.");
Database.addText("br.dragonTalking", "Eu sou um dragão e esse é meu castelo. Você deve ser muito corajoso por ter entrado aqui... Será um prazer ajudar alguém tão destemido. O que você mais deseja?");
Database.addText("br.dragonTalkingChallengeButton", "Desafio");
Database.addText("br.dragonTalkingFameButton", "Fama");
Database.addText("br.dragonTalkingCandiesButton", "Doces");
Database.addText("br.dragonTalkingChallengeSpeech", "Ah, então gosta de desafios? O que me diz de dar um pulinho no inferno? Dizem que Satã é um desafio e tanto. Suba nas minhas costas que eu levarei você até lá.");
Database.addText("br.dragonTalkingFameSpeech", "O melhor jeito de se tornar famoso é desafiar o próprio criador do jogo. Eu sei onde ele mora; posso levar você até lá. Mas não será uma luta fácil.");
Database.addText("br.dragonTalkingCandiesSpeech", "No fim, todos queremos doces, não é mesmo? Tenho um amigo que pode ajudar. É fácil reconhecê-lo... Ele só tem um olho. Diga a ele que você me conhece.");
Database.addText("br.dragonTalkingChallengeAnswer", "Vamos então!");
Database.addText("br.dragonTalkingFameAnswer", "Estou pronto.");
Database.addText("br.dragonTalkingCandiesAnswer", "Está bem, obrigado!");
Database.addText("br.buttonBackToCastle", "Voltar ao castelo");
Database.addText("br.talkingCandySpeechNoBox", "Ei! Eu sou o doce falante. Você quase terminou o jogo, só falta encontrar a caixa de doces. Ela está em uma casa perto da aldeia. É a última parte!");
Database.addText("br.talkingCandySpeech1", "Oi! Eu sou o doce falante. Parabéns, você terminou o jogo! Abrirei a caixa de doces para você como recompensa. Posso?");
Database.addText("br.talkingCandySpeech2", "Prontinho! Você já pode entrar. Espero que tenha gostado do jogo. :)");
Database.addText("br.talkingCandyButton", "Sim!!");
Database.addText("br.lighthousePuzzleResetButton", "Recomeçar");
Database.addText("cz.mapVillageComment", "Vesnice");
Database.addText("cz.mapFortressComment", "Pouštní chrám");
Database.addText("cz.mapATreeComment", "Strom");
Database.addText("cz.mapTheDesertComment", "Poušť");
Database.addText("cz.mapWishingWellComment", "Studna");
Database.addText("cz.mapLonelyHouseComment", "Osamělý barák");
Database.addText("cz.mapForestComment", "Les");
Database.addText("cz.mapCastleEntranceComment", "Vstup do hradu");
Database.addText("cz.mapCastleComment", "Hrad");
Database.addText("cz.mapDragonComment", "Drak");
Database.addText("cz.candyBoxEatCandiesButton", "Sníst všechny bonbónky");
Database.addText("cz.candyBoxThrowCandiesButton", "Hodit 10 bonbónů na zem");
Database.addText("cz.mapVillageAHouseComment", "Dům");
Database.addText("cz.mapVillageForgeComment", "Kovárna");
Database.addText("cz.buttonBackToTheMap", "Zpět na mapu");
Database.addText("cz.mapSorceressHutComment", "Perníková chaloupka");
Database.addText("cz.buttonBackToTheVillage", "Zpátky do vesnice");
Database.addText("cz.mapATreeIntroductionSpeech", "Ahoj, já jsem veverka. Vím, že miluješ sladkosti, a můžu ti jich dát spoustu! Ale v tomhle lese se cítím strašně sama...");
Database.addText("cz.mapATreeIntroductionButton", "Můžu ti pomoct?");
Database.addText("cz.mapATreeFirstQuestion", "Budu ti dávat hádanky. Pokud odpovíš správně, dostaneš slaďoučkou odměnu! První otázka: Máš opravdu, ale opravdu rád bonbónky? (Odpovídej v angličtině)");
Database.addText("cz.mapATreeSecondQuestion", "Správně! Tady máš 20 bonbónů. A teď schválně, jak pokračuje série písmen: S, E, I, D, N, A?");
Database.addText("cz.mapATreeThirdQuestion", "C jako Cukroví! Tady máš 100 bonbónů. Další otázka: Kolik bonbónů má nejbonbónovatější člověk na světě?");
Database.addText("cz.mapATreeFourthQuestion", "Ano! Tady máš 500 bonbónů! Další odměna bude ještě zajímavější. A teď hádanka: Ve starobylém lese roste velmi starý strom, na kterém žijí nejchytřejší zvířata na světě. Říká se, že onen strom má 60 kořenů, 360 větví a 2160 listů. Kolik má jizev na kmeni?");
Database.addText("cz.mapATreeFifthQuestion", "Gratuluji! Ano, mluvila jsem o svém stromě. Tady máš 3 lízátka. Dobrou chuť! Další hádanka, poslouchej pozorně: Za úplňku hodím žlutý klobouk do rudého moře. Co se stane se žlutým kloboukem?");
Database.addText("cz.mapATreeTicTacToeIntro", "Správně! To nebylo tak těžké, že? Tady máš tři tabulky čokolády. Ale teď trochu změna. Zahrajeme si hru, co říkáš?");
Database.addText("cz.mapATreeTicTacToeIntroButton", "Jasně, proč ne!");
Database.addText("cz.mapATreeTicTacToeLetsPlay", "Zahrajeme si piškvorky. Hrát budeme na mřížce o velikosti 3x3. Ty si vezmeš křížky, já kolečka. Budeme se střídat v tazích a cílem je mít tři značky v řadě. Nechám tě táhnout prvního!");
Database.addText("cz.mapATreeTicTacToeNobodyWins", "Tak jsme zaplnili celou herní plochu a nikomu z nás se nepovedlo vyhrát! Chceš to zkusit znova?");
Database.addText("cz.mapATreeTicTacToeYouLose", "Mám tři, vyhrála jsem! Chceš to zkusit znova?");
Database.addText("cz.mapATreeTicTacToeTryAgainButton", "Ano, chci!");
Database.addText("cz.mapATreeTicTacToeYouWin", "Ups, takový tah jsem teda nečekala. Ale máš tři v řadě, to nemůžu popřít. Vyhrál jsi! Tady máš odměnu; Otevře ti dveře od jednoho z domů ve vesnici.");
Database.addText("cz.mapATreeTicTacToeAnymoreSweet", "Děkuji, veverko! Znáš ještě nějaké hádanky?");
Database.addText("cz.mapATreeNoMoreChallenge", "Bohužel ne, už jsem vyčerpala celou svoji zásobu... Ale byla s tebou sranda, děkuju moc!");
Database.addText("cz.buttonExitQuestKeeping", "Ukončit výpravu (a nechat si, cos našel)");
Database.addText("cz.buttonExitQuestNoKeeping", "Ukončit výpravu (ale nic nedostaneš)");
Database.addText("cz.buttonExitQuestNoKeepingBecauseLose", "Ukončit výpravu (umřel jsi, takže nic nedostaneš)");
Database.addText("cz.mapVillageLockedHouseComment", "Zamčený dům");
Database.addText("cz.mapVillageForgeIntroductionSpeech", "Ahoj! Já jsem kovář. Můžu ti prodat všemožné druhy zbraní a výzbroje.");
Database.addText("cz.mapVillageForgeIntroductionSpeechNoMoreToSell", "Ahoj! Já jsem kovář. Bohužel už nemám nic na prodej. Ale když se vrátíš později, možná za tu dobu něco vyrobím.");
Database.addText("cz.mapVillageFifthHouseNoWeaponSpeech", "Ahoj. Můj sklep je plný krys, potřebuju se jich zbavit... Kdyby tu tak byl někdo, kdo by se o to mohl postarat...");
Database.addText("cz.mapVillageFifthHouseWeaponSpeech", "Hej, ty! Vidím, že u sebe máš zbraň! Mohl bys mě zbavit krys ve sklepě? Odměním se ti!");
Database.addText("cz.mapVillageFifthHouseAgree", "Tak jdeme na to!");
Database.addText("cz.mapVillageFifthHouseCellarDone", "Děkuju, že jsi mě zbavil těch krys! Za odměnu ti dám něco velmi cenného: Mapu světa. Myslím, že ji využiješ víc, než já.");
Database.addText("cz.mapVillageTheShopComment", "Obchod");
Database.addText("cz.mapBridgeComment", "Most");
Database.addText("cz.mapFarmComment", "Farma na lízátka");
Database.addText("cz.mapCaveEntranceComment", "Vstup do jeskyně");
Database.addText("cz.mapLighthouseComment", "Maják");
Database.addText("cz.mapPierComment", "Molo");
Database.addText("cz.mapTheHoleComment", "Díra v zemi");
Database.addText("cz.candyBoxRequestStatusBarUnlocked", "Požádat vývojáře o novou funkci (30 bonbónů)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfg", "Požádat o další (5 bonbónů)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedSave", "Požádat ještě o další (5 bonbónů)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedHealthBar", "Požádat o něco zajímavějšího (5 bonbónů)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedMap", "Poslední žádost! Snad to tentokrát bude stát za to. (10 bonbónů)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedComment", "Odemknul jsi stavový řádek! (Nahoře)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfgComment1", "Teď máš přístup k nastavení.");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfgComment2", "Jestli chceš, můžeš změnit jazyk.");
Database.addText("cz.candyBoxRequestStatusBarUnlockedSaveComment", "A teď dokonce můžeš uložit!");
Database.addText("cz.candyBoxRequestStatusBarUnlockedHealthBarComment", "Tady máš 100 bodů zdraví. Budou se ti hodit.");
Database.addText("cz.cfgChooseLanguage", "Výběr jazyka:");
Database.addText("cz.cfgInvertColors", "Invertovat barvy?");
Database.addText("cz.gridItemMainMapName", "Mapa");
Database.addText("cz.gridItemMainMapDescription", "Mapa světa");
Database.addText("cz.gridItemPogoStickName", "Skákací tyč");
Database.addText("cz.gridItemPogoStickDescription", "Tahle tyč ti umožní skákat během výprav!");
Database.addText("cz.gridItemTimeRingName", "Prsten času");
Database.addText("cz.gridItemTimeRingDescription", "Díky tomuhle můžeš během výprav zpomalit čas. Pokud je toho na tebe moc, použij prsten času!");
Database.addText("cz.gridItemThirdHouseKeyName", "Klíč od třetího domu");
Database.addText("cz.gridItemThirdHouseKeyDescription", "Tento klíč ti umožní vstoupit do třetího domu ve vesnici. Jak nečekané!");
Database.addText("cz.gridItemFeatherName", "Supí pírko");
Database.addText("cz.gridItemFeatherDescription", "Tohle kouzelné pírko ti umožní skákat výš, než normálně.");
Database.addText("cz.gridItemFeatherDescriptionNoPogoStick", "Nevíš proč, ale máš pocit, že by se ti tohle pírko k něčemu hodilo, kdybys měl skákací tyč...");
Database.addText("cz.gridItemSpongeName", "Kouzelná houba");
Database.addText("cz.gridItemSpongeDescription", "Díky tomuhle se můžeš zmáčknout jako houba, takže budeš menší.");
Database.addText("cz.gridItemFortressKeyName", "Klíč od pouštního chrámu");
Database.addText("cz.gridItemFortressKeyDescription", "Odemyká brány starobylé pevnosti na severním kraji pouště. Kdo ví, co tam najdeš?");
Database.addText("cz.gridItemHeartPendantName", "Srdcový náhrdelník");
Database.addText("cz.gridItemHeartPendantDescription", "Tento náhrdelník zvýší tvé zdraví, pokud ho nosíš na krku.");
Database.addText("cz.gridItemHeartPlugName", "Srdeční čip");
Database.addText("cz.gridItemHeartPlugDescription", "Tento čip byl vyroben ze železa, pavoučích nohou a speciální záhadné tekutiny zapečetěné uvnitř. Tvé zdraví je zvýšené o 20 procent!");
Database.addText("cz.gridItemBeginnersGrimoireName", "Kniha kouzel pro začátečníky");
Database.addText("cz.gridItemBeginnersGrimoireDescription", "Tato kniha tě naučí tři poměrně jednoduchá kouzla. První je kyselý déšť, který ti umožní vyvolat obrovské množství kyselinových kapek. Druhé kouzlo je ohnivá koule, kterou můžeš vypustit před sebe a vážně zranit jednoho nepřítele. A třetí je kouzlo teleportace. Dávej pozor, nedá se odhadnout, kde skončíš.");
Database.addText("cz.gridItemAdvancedGrimoireName", "Kniha kouzel pro pokročilé");
Database.addText("cz.gridItemAdvancedGrimoireDescription", "Tato kniha tě naučí dvě pokročilá kouzla: Zničení magie a ostnatý štít. První kouzlo vymaže ostatní kouzla, ať už jsi je vyčaroval ty, nebo tví nepřátelé. Druhé kouzlo kolem tebe vyvolá štít z létajících ostnů, které ublíží každému, kdo se k tobě přiblíží.");
Database.addText("cz.gridItemBlackMagicGrimoireName", "Kniha černé magie");
Database.addText("cz.gridItemBlackMagicGrimoireDescription", "V jeskyni jsi našel knihu černé magie. Bylo hodně těžké ji získat, a to z dobrého důvodu. Obsahuje totiž dvě nebezpečná temná kouzla. První před tebou vytvoří obří zeď z obsidiánových kostek, což může být užitečné pro zpomalení nepřátel. Druhé vyvolá démony, kteří se pokusí zabít všechno, co se hýbe (včetně tebe). Buď s ním opatrný.");
Database.addText("cz.gridItemUnicornHornName", "Roh jednorožce");
Database.addText("cz.gridItemUnicornHornDescription", "Tento kouzelný roh ti pomůže svou léčivou magií. Ten jednorožec se prý jmenoval Charlie.");
Database.addText("cz.gridItemXinopherydonClawName", "Dráp xinopherydona");
Database.addText("cz.gridItemXinopherydonClawDescription", "Tento hrozivý dráp patřil xinopherydonovi, prastarému dvouhlavému zvířeti, které všichni měli za vyhynulé. Tvá zbraň bude dvakrát ničivější.");
Database.addText("cz.gridItemPitchforkName", "Vidle");
Database.addText("cz.gridItemPitchforkDescription", "Tyto speciální vidle ti umožní prohrábnout hlínu, aniž bys narušil podzemní ekosystémy. Produkce lízátek na tvé farmě je třikrát větší.");
Database.addText("cz.gridItemShellPowderName", "Prášek ze škeble");
Database.addText("cz.gridItemShellPowderDescription", "Tento prášek je často používán lízátkovými farmáři jako hnojivo. Produkce tvé lízátkové farmy se díky němu ztrojnásobí!");
Database.addText("cz.gridItemPName", "Kámen P");
Database.addText("cz.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("cz.gridItemLName", "Kámen L");
Database.addText("cz.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("cz.gridItemAName", "Kámen A");
Database.addText("cz.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("cz.gridItemYName", "Kámen Y");
Database.addText("cz.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("cz.gridItemRedSharkFinName", "Červená žraločí ploutev");
Database.addText("cz.gridItemRedSharkFinDescription", "Tato kouzelná ploutev velmi posílí ohnivé koule, které sesíláš. Konečně to kouzlo k něčemu bude.");
Database.addText("cz.gridItemGreenSharkFinName", "Zelená žraločí ploutev");
Database.addText("cz.gridItemGreenSharkFinDescription", "Tato kouzelná ploutev sešle na tvou farmu požehnaní samotné Matky Přírody! Tvá produkce lízátek je pětkrát větší.");
Database.addText("cz.gridItemPurpleSharkFinName", "Fialová žraločí ploutev");
Database.addText("cz.gridItemPurpleSharkFinDescription", "Tato kouzelná ploutev ti umožní sesílat nové temné kouzlo, které můžeš použít pouze jedenkrát za výpravu. Buď s ním sakra opatrný!");
Database.addText("cz.gridItemTalkingCandyName", "Mluvící bonbónek");
Database.addText("cz.gridItemTalkingCandyDescription", "Tento bonbónek se objevil poté, co jsi na vrchol věže donesl všechny čtyři kameny. Možná ti pomůže otevřít truhlu se sladkostmi...");
Database.addText("cz.inventorySpecialNothingEqItem", "Nic");
Database.addText("cz.eqItemWeaponWoodenSwordName", "Dřevěný meč");
Database.addText("cz.eqItemWeaponWoodenSwordDescription", "Jednoduchý meč vyrobený ze dřeva");
Database.addText("cz.eqItemWeaponIronAxeName", "Železná sekera");
Database.addText("cz.eqItemWeaponIronAxeDescription", "Prostá železná sekera, je ale dobře nabroušená. Je samozřejmě účinnější, než dřevěný meč.");
Database.addText("cz.eqItemWeaponPolishedSilverSwordName", "Naleštěný stříbrný meč");
Database.addText("cz.eqItemWeaponPolishedSilverSwordDescription", "Velmi mocný meč. Na čepeli má výhružně vypadající ostny.");
Database.addText("cz.eqItemWeaponTrollBludgeonName", "Trollův kyj");
Database.addText("cz.eqItemWeaponTrollBludgeonDescription", "Tenhle kyj jsi sebral z rukou trolla, který hlídal most. Je to pomalá zbraň, ale dává slušné rány.");
Database.addText("cz.eqItemWeaponTribalSpearName", "Divošské kopí");
Database.addText("cz.eqItemWeaponTribalSpearDescription", "Tohle kopí jsi sebral mrtvole domorodého válečníka, ztraceného v hlubinách obří díry. Je to skvělá zbraň, když si na ni zvykneš.");
Database.addText("cz.eqItemWeaponSummoningTribalSpearName", "Vyvolávačovo divošské kopí");
Database.addText("cz.eqItemWeaponSummoningTribalSpearDescription", "Tohle kopí bylo očarováno. Je o trochu mocnější, a taky v pravidelných intervalech přivolává domorodé válečníky, kteří ti pomůžou na výpravách.");
Database.addText("cz.eqItemWeaponMonkeyWizardStaffName", "Hůl opičího mága");
Database.addText("cz.eqItemWeaponMonkeyWizardStaffDescription", "Tato hůl patřila nahatému opičímu mágovi. Umí sama kouzlit, vyrábí naváděné fialové výboje.");
Database.addText("cz.eqItemWeaponEnchantedMonkeyWizardStaffName", "Očarovaná hůl opičího mága");
Database.addText("cz.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "S touto holí můžeš mávat o něco rychleji, a taky zvládne vyčarovat daleko více výbojů.");
Database.addText("cz.eqItemWeaponGiantSpoonName", "Obří lžíce");
Database.addText("cz.eqItemWeaponGiantSpoonDescription", "Tuto obří lžíci jsi našel v obřím čajníku v pouštním chrámu. Není jisté, jestli ji někdo vůbec někdy použil jako lžíci, ale jestli jo, tak musel být zatraceně velký. Někoho takového bys nechtěl potkat.");
Database.addText("cz.eqItemWeaponGiantSpoonOfDoomName", "Obří Lžíce Zkázy");
Database.addText("cz.eqItemWeaponGiantSpoonOfDoomDescription", "Tato obří lžíce je ještě mocnější, než obyčejná obří lžíce, kterou jde najít například v obřím čajníku. Je ale docela pomalá.");
Database.addText("cz.eqItemWeaponScytheName", "Kosa");
Database.addText("cz.eqItemWeaponScytheDescription", "Říká se, že tato kosa patřila samotnému Smrťovi. Dá se s ní sekat extrémně rychle.");
Database.addText("cz.eqItemHatMerchantHatName", "Obchodníkův klobouk");
Database.addText("cz.eqItemHatMerchantHatDescription", "Tento klobouk jsi koupil od obchodníka se sladkostmi. Obchodník miluje bonbónky. Pokud máš na sobě tento klobouk, množství bonbónů nalezených na výpravách bude vynásobeno sedmi!");
Database.addText("cz.eqItemHatSorceressHatName", "Špičatý klobouk");
Database.addText("cz.eqItemHatSorceressHatDescription", "Tento klobouk původně patřil čarodějce. Výrazně posílí tvá kouzla a lektvary.");
Database.addText("cz.eqItemHatOctopusKingCrownName", "Koruna krále chobotnic");
Database.addText("cz.eqItemHatOctopusKingCrownDescription", "Při nošení této koruny jsi daleko sebejistější. Při výpravách ti to moc nepomůže, ale sebedůvěra je přece důležitá!");
Database.addText("cz.eqItemHatOctopusKingCrownWithJaspersName", "Koruna krále chobotnic, zdobená jaspisy");
Database.addText("cz.eqItemHatOctopusKingCrownWithJaspersDescription", "Tato očarovaná koruna je vyrobena ze zlata a červených jaspisů. Při výpravách bude kolem sebe metat mocné ohnivé koule. A navíc se nádherně leskne!");
Database.addText("cz.eqItemHatOctopusKingCrownWithObsidianName", "Koruna krále chobotnic, zdobená obsidiánem");
Database.addText("cz.eqItemHatOctopusKingCrownWithObsidianDescription", "Tato očarovaná koruna je vyrobena ze zlata a obsidiánu. Je to přímo skvostný umělecký výtvor. Při výpravách bude pravidelně vyvolávat Krále chobotnic, který ti pomůže v boji.");
Database.addText("cz.eqItemGlovesLeatherGlovesName", "Kožené rukavice");
Database.addText("cz.eqItemGlovesLeatherGlovesDescription", "Tyhle rukavice v podstatě nic nedělají. Ale aspoň jsou pohodlné a měkké!");
Database.addText("cz.eqItemGlovesRedEnchantedGlovesName", "Červené očarované rukavice");
Database.addText("cz.eqItemGlovesRedEnchantedGlovesDescription", "Tyto očarované rukavice rudě svítí ve tmě. Při výpravách budou náhodně vypouštět malé ohnivé koule, což se může hodit, pokud se na tebe sápe nějaká obluda.");
Database.addText("cz.eqItemGlovesPinkEnchantedGlovesName", "Růžové očarované rukavice");
Database.addText("cz.eqItemGlovesPinkEnchantedGlovesDescription", "Tyto očarované rukavice nechají růžovou stopu na čemkoliv, čeho se dotkneš. Na výpravách tě budou průběžně uzdravovat.");
Database.addText("cz.eqItemBootsRocketBootsName", "Raketové boty");
Database.addText("cz.eqItemBootsRocketBootsDescription", "Tyto úžasné raketové boty ti umožní skákat ve vzduchu, takže v podstatě lítáš!");
Database.addText("cz.eqItemBootsLeatherBootsName", "Kožené boty");
Database.addText("cz.eqItemBootsLeatherBootsDescription", "Jednoduché kožené boty. Není na nich nic zvláštního.");
Database.addText("cz.eqItemBootsBootsOfIntrospectionName", "Boty meditace");
Database.addText("cz.eqItemBootsBootsOfIntrospectionDescription", "Uvolni se a zhluboka se nadechni. Pokud nosíš tyto boty, tak se nikdy nebudeš hýbat, pokud stojíš na zemi.");
Database.addText("cz.eqItemBodyArmoursLightweightBodyArmourName", "Lehký hrudní plát");
Database.addText("cz.eqItemBodyArmoursLightweightBodyArmourDescription", "Tato zbroj ti nabídne základní ochranu před nepřátelskými útoky. Budeš o trošku odolnější.");
Database.addText("cz.eqItemBodyArmoursKnightBodyArmourName", "Rytířská zbroj");
Database.addText("cz.eqItemBodyArmoursKnightBodyArmourDescription", "Tato silná zbroj tě spolehlivě ochrání před všemi druhy zbraní. Tvá odolnost proti nepřátelským útokům bude velmi vysoká.");
Database.addText("cz.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Očarovaná rytířská zbroj");
Database.addText("cz.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Tohle je velmi zvláštní druh zbroje. Budeš VELMI odolný proti nepřátelským útokům, ale tvá zbraň bude mít poloviční účinek.");
Database.addText("cz.mapVillageForgeBuyWoodenSwordButton", "Koupit dřevěný meč (150 bonbónů)");
Database.addText("cz.mapVillageForgeBuyWoodenSwordSpeech", "Děkuji za koupi! Tenhle meč je sice poměrně slabý, ale je to začátek.");
Database.addText("cz.mapVillageForgeBuyIronAxeButton", "Koupit železnou sekyru (400 bonbónů)");
Database.addText("cz.mapVillageForgeBuyIronAxeSpeech", "Doufám, že se ti tahle sekyra bude líbit. Zrovna jsem ji pro tebe nabrousil!");
Database.addText("cz.mapVillageForgeBuyPolishedSilverSwordButton", "Koupit naleštěný stříbrný meč (2 000 bonbónů)");
Database.addText("cz.mapVillageForgeBuyPolishedSilverSwordSpeech", "Výroba tohohle meče mi zabrala docela slušnou dobu. Ujišťuji tě, že to za tu cenu stojí.");
Database.addText("cz.mapVillageForgeBuyLightweightBodyArmourButton", "Koupit lehký hrudní plát (15 000 bonbónů)");
Database.addText("cz.mapVillageForgeBuyLightweightBodyArmourSpeech", "Díky této zbroji budeš odolnější proti nepřátelským útokům.");
Database.addText("cz.mapVillageForgeBuyScytheButton", "Koupit kosu (5 000 000 bonbónů)");
Database.addText("cz.mapVillageForgeBuyScytheSpeech", "Trvalo mi to několik měsíců, než jsem vyrobil tuhle kosu. Tomuhle říkám umění! Je to asi nejrychlejší zbraň, kterou kdy najdeš. Hodně štěstí!");
Database.addText("cz.wishingWellThrowFirstCandyButton", "Hodit do studny bonbón");
Database.addText("cz.wishingWellCandyIntroductionSpeech", "Vítej, poutníku! Jsem kouzelná studna. Výměnou za sladkosti ti splním tvá přání! Když do mě hodíš bonbóny, vyléčím tvá zranění.");
Database.addText("cz.wishingWellThrewCandiesSpeech", "Tvá zranění byla vyléčena!");
Database.addText("cz.wishingWellNoWoundSpeech", "Ale vždyť jsi úplně zdravý!");
Database.addText("cz.wishingWellThrowFirstLollipopButton", "Hodit do studny lízátko");
Database.addText("cz.wishingWellLollipopIntroductionSpeech", "Vítej, poutníku! Jsem kouzelná studna. Výměnou za sladkosti ti splním tvá přání! Když do mě hodíš lízátka, přeměním je na bonbóny.");
Database.addText("cz.wishingWellThrewLollipopsSpeech", "Tvá lízátka byla přeměněna na bonbóny! Dvě lízátka za jeden bonbón.");
Database.addText("cz.wishingWellThrowChocolateBarButton", "Hodit do studny tabulku čokolády");
Database.addText("cz.wishingWellChocolateBarIntroductionSpeech", "Vítej, poutníku! Jsem kouzelná studna. Výměnou za sladkosti ti splním tvá přání! Miluju čokoládu. Ne, přímo ji zbožňuju! Za každou tabulku, kterou do mě hodíš, ti očaruju jednu věc. A ta první se taky počítá!");
Database.addText("cz.wishingWellThrewChocolateBarSpeech", "Co bys rád očaroval?");
Database.addText("cz.wishingWellThrowPainAuChocolatButton", "Hodit do studny pain au chocolat");
Database.addText("cz.wishingWellPainAuChocolatIntroductionSpeech", "Vítej, poutníku! Jsem kouzelná studna. Výměnou za sladkosti ti splním tvá přání! Mňam, co je tohle? Pain au chocolat? Kde jsi to sehnal? Chutná to skvěle! Hmm, za tyhle dobroty ti dám jedno ze tří velmi unikátních požehnání. Vol rozvážně.");
Database.addText("cz.wishingWellThrewPainAuChocolatSpeech", "Děkuju ti za pain au chocolat! Teď si můžeš vybrat požehnání.");
Database.addText("cz.wishingWellChooseGift", "Zvol si požehnání!");
Database.addText("cz.wishingWellChooseGiftButton", "Zvolit");
Database.addText("cz.wishingWellGiftDoneSpeech", "Hotovo! Teď jsi zase o něco mocnější. Mé požehnání se ti zobrazí v panelu statistik ve tvém inventáři.");
Database.addText("cz.wishingWellNoPossibleEnchantment", "Žádné možné očarování");
Database.addText("cz.wishingWellChooseEnchantment", "Vyber si očarování");
Database.addText("cz.wishingWellEnchantButton", "Očarovat");
Database.addText("cz.wishingWellEnchantmentDoneSpeech", "A je to! Tvůj předmět byl očarován.");
Database.addText("cz.pierLighthouseButton", "Doplout k majáku na lodi");
Database.addText("cz.pierTheSeaButton", "Skočit do moře");
Database.addText("cz.lonelyHouseOpenBox", "Otevřít truhlu");
Database.addText("cz.lonelyHouseShakeBox", "Zatřást truhlou");
Database.addText("cz.lonelyHouseBreakLock", "Vypáčit zámek");
Database.addText("cz.lonelyHouseKickBox", "Kopnout do truhly");
Database.addText("cz.lonelyHouseAskTheBoxToOpenItself", "Poprosit ji, zda by se neotevřela sama");
Database.addText("cz.lonelyHouseLureTheBoxWithACandy", "Nalákat truhlu bonbónem");
Database.addText("cz.lonelyHouseTakeTheBox", "Vzít truhlu s sebou, k jejímu otevření asi bude potřeba klíč");
Database.addText("cz.lonelyHouseOpenBoxResult", "Truhla je zamčená");
Database.addText("cz.lonelyHouseShakeBoxResult", "Nic se nestane");
Database.addText("cz.lonelyHouseBreakLockResult", "Zámek nejde vypáčit");
Database.addText("cz.lonelyHouseKickBoxResult", "Nic se nestane, akorát tě teď trochu bolí noha");
Database.addText("cz.lonelyHouseAskTheBoxToOpenItselfResult", "... mluvíš na blbou krabici, uvědomuješ si to?");
Database.addText("cz.lonelyHouseLureTheBoxWithACandyResult", "Truhlu zřejmě bonbóny nezajímají");
Database.addText("cz.lonelyHouseTakeTheBoxResult", "V téhle... v téhle... Candy Box bude určitě něco zajímavého.");
Database.addText("cz.lollipopFarmConstructMill", "Postavit mlýn (10 000 lízátek)");
Database.addText("cz.lollipopFarmFeedMill", "Nasypat lízátka do mlýnice");
Database.addText("cz.lollipopFarmCurrentCandiesProduction", "Momentální produkce bonbónů");
Database.addText("cz.lollipopFarmDigPond", "Vykopat rybník (100 000 lízátek)");
Database.addText("cz.lollipopFarmBuyLolligator", "Koupit lízogátora (1200 bonbónů)");
Database.addText("cz.lollipopFarmLolligatorsConversionText", "Konverze z bonbónů na lízátka aktivní");
Database.addText("cz.lighthouseAskButton", "Zeptat se");
Database.addText("cz.lighthouseQuestionWho", "Kdo jsi?");
Database.addText("cz.lighthouseQuestionWhoSpeech", "Jsem velmi starý kyklop.");
Database.addText("cz.lighthouseQuestionWhat", "Co tady děláš?");
Database.addText("cz.lighthouseQuestionWhatSpeech", "Žiju tady roky a roky, a čekám, až připluje loď. Už je to dlouho, co jsem viděl loď, ale musím tady zůstat a čekat, protože jednoho dne možná připluje.");
Database.addText("cz.lighthouseQuestionWhyEatCandies", "Proč bych jedl bonbóny?");
Database.addText("cz.lighthouseQuestionWhyEatCandiesSpeech", "Protože jsou dobré pro tvoje zdraví!");
Database.addText("cz.lighthouseQuestionCandyBox", "Co je  Candy Box?");
Database.addText("cz.lighthouseQuestionCandyBoxSpeech", "Je to velmi stará truhla, ve které podle legendy jsou všechny sladkosti světa. Říká se, že ten, komu se podaří ji otevřít, bude mít k dispozici tolik bonbónů, že by dokázal cokoliv.");
Database.addText("cz.lighthouseQuestionDragon", "Drak mi řekl, abych za tebou přišel, že mi prý pomůžeš dostat více bonbónů.");
Database.addText("cz.lighthouseQuestionDragonSpeech", "Aha, dobrá... No, nemůžu ti dát bonbóny přímo, ale můžu ti dát něco, co ti pomůže dostat tolik bonbónů, kolik si jen můžeš přát. Ale předtím si tě musím prověřit, protože nemůžu tuhle věc dát jen tak někomu. Vyřeš tenhle hlavolam a bude tvoje.");
Database.addText("cz.lighthouseFoundStone", "Gratuluji! Prošel jsi mým testem a našel jsi kámen. Je to unikát, ale bude užitečný jenom, pokud najdeš tři další, které k němu patří. Hodně štěstí!");
Database.addText("cz.lighthouseFoundStoneAgain", "Hele, ty jsi ten hlavolam vyřešil i podruhé. Dobrá práce, zdá se, že se ti líbí.");
Database.addText("cz.saveLocalSaveTitle", "Uložit lokálně");
Database.addText("cz.saveLocalSaveWhy", "Vyber si lokální uložení, pokud chceš v budoucnu hrát na stejném počítači a ve stejném prohlížeči.");
Database.addText("cz.saveLocalSaveWarning0", "Tvůj prohlížeč zřejmě nepodporuje HTML5.");
Database.addText("cz.saveLocalSaveWarning1", "Pro uložení hry bude potřeba aktualizovat prohlížeč.");
Database.addText("cz.saveLocalSaveChooseSlot", "Zvol si pozici, na kterou chceš hru uložit:");
Database.addText("cz.saveLocalSaveAutosaveEnabled", "Automatické ukládání zapnuto");
Database.addText("cz.saveLocalSaveChooseWhatToDo", "Vyber, co chceš udělat:");
Database.addText("cz.saveLocalSaveSaveButton", "Uložit");
Database.addText("cz.saveLocalSaveAutosaveButton", "Ukládat každých 10 minut");
Database.addText("cz.saveLocalSaveDisableAutosaveButton", "Vypnout automatické ukládání");
Database.addText("cz.saveFileSaveTitle", "Textové ukládání");
Database.addText("cz.saveFileSaveWhy0", "Zvol textové ukládání, pokud:");
Database.addText("cz.saveFileSaveWhy1", "Chceš pokračovat ve hře na jiném počítači nebo v jiném prohlížeči");
Database.addText("cz.saveFileSaveWhy2", "Chceš svou hru sdílet s někým jiným");
Database.addText("cz.saveFileSaveWhy3", "Z nějakého důvodu potřebuješ vymazat cache");
Database.addText("cz.saveFileSaveWhy4", "(čímž se vymažou i lokálně uložené hry)");
Database.addText("cz.saveFileSaveButton", "Vygenerovat ukládací text");
Database.addText("cz.saveFileSaveWarning", "Teď ten text někam zkopíruj a ulož");
Database.addText("cz.saveLocalLoadTitle", "Načíst lokálně uloženou hru");
Database.addText("cz.saveLocalLoadYouCan", "Pro načtení můžeš použít následující odkaz:");
Database.addText("cz.saveLocalLoadThanksTo", "Díky kouzlům, kterých je HTML5 schopný, bys měl být schopný načíst hru i offline.");
Database.addText("cz.saveFileLoadTitle", "Načíst text");
Database.addText("cz.saveFileLoadPaste", "Zkopíruj sem svůj vygenerovaný text a klikni na „Načíst“");
Database.addText("cz.saveFileLoadButton", "Načíst");
Database.addText("cz.mountainsText0", "Zpozoroval jsi něco v horách!");
Database.addText("cz.mountainsText1", "Vypadá to zajímavě. Možná by se to mohlo hodit.");
Database.addText("cz.mountainsTextButton", "Jít do hor a sebrat onu věc");
Database.addText("cz.mountainsTextAfter", "Našel jsi skákací tyč! Byla přidána do tvého inventáře.");
Database.addText("cz.secondHouseIntroSpeech", "Ahoj, jsem obchodník s bonbóny. Pro bonbóny bych udělal cokoliv! Co potřebuješ?");
Database.addText("cz.secondHouseLollipop1Speech", "Tohle je lízátko s citrónovou příchutí. Moje oblíbené! Stojí 60 bonbónů, ale stojí za to.");
Database.addText("cz.secondHouseLollipop2Speech", "Tohle je lízátko s jahodovou příchutí. Je to mňamka, a má krásnou červenou barvu! Jenom za 60 bonbónů!");
Database.addText("cz.secondHouseLollipop3Speech", "Tohle je lízátko s dýňovou příchutí. Vsadím se, že jsi takové ještě neochutnal! 60 bonbónů a je tvoje.");
Database.addText("cz.secondHouseLollipopButtonText", "Koupi toto lízátko (60 bonbónů)");
Database.addText("cz.secondHouseMerchantHatSpeech", "Mohl bych ti prodat i svůj klobouk, ale víš, on je dost vzácný... Budeš mi za něj muset dát hodně bonbónů. Tak třeba jeden milion. To zní jako férová nabídka, ne?");
Database.addText("cz.secondHouseMerchantHatButtonText", "Koupit obchodníkův klobouk (1 000 000 bonbónů)");
Database.addText("cz.secondHouseTimeRingSpeech", "Tohle je prsten času. Je tak trochu kouzelný, umožní ti zpomalit čas, když se ocitneš v nesnázích.");
Database.addText("cz.secondHouseTimeRingButtonText", "Koupit prsten času (500 bonbónů)");
Database.addText("cz.secondHouseLeatherGlovesSpeech", "Tyto rukavice jsou z prvotřídní velbloudí kůže. Mám jich na skladě hodně, proto jsou tak levné: Jenom 300 bonbónů!");
Database.addText("cz.secondHouseLeatherBootsButtonText", "Koupit pár kožených bot (300 bonbónů)");
Database.addText("cz.secondHouseLeatherBootsSpeech", "Tyhle kvalitní boty z velbloudí kůže udrží tvé nohy v teple.");
Database.addText("cz.secondHouseLeatherGlovesButtonText", "Koupit kožené rukavice (300 bonbónů)");
Database.addText("cz.secondHouseChocolateBarSpeech", "Tohle je tabulka čokolády. Nevím, na co je, ale je poměrně dost vzácná, což vysvětluje její cenu. 800 bonbónů a je tvoje!");
Database.addText("cz.secondHouseChocolateBarButtonText", "Koupit tabulku čokolády (800 bonbónů)");
Database.addText("cz.outsideTheHoleButton", "Skočit do velké díry v zemi");
Database.addText("cz.theCaveExitText0", "Konečně ses dostal na druhý konec jeskyně.");
Database.addText("cz.theCaveExitText1", "Venku vidíš velký, hustý les.");
Database.addText("cz.theCaveExitButtonText", "Vyjít ven z jeskyně");
Database.addText("cz.theCaveFirstSentenceWentStraight", "Šel jsi rovně.");
Database.addText("cz.theCaveFirstSentenceWentLeft", "Zahnul jsi doleva.");
Database.addText("cz.theCaveFirstSentenceWentRight", "Zahnul jsi doprava.");
Database.addText("cz.theCaveFirstSentenceYouAre", "Teď jsi v jeskyni. Před sebou vidíš tři možné cesty.");
Database.addText("cz.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Na zemi leží jakási podivná věc.");
Database.addText("cz.theCavePattern_ChocolateBarNowSeeChocolateBar", "Před tebou leží tabulka čokolády.");
Database.addText("cz.theCavePattern_TreasureMapSentence", "Na zemi vidíš jakýsi podivný shluk kamenů.");
Database.addText("cz.theCavePattern_MonkeyWizardSentence", "Narazil jsi na nahatého opičího mága.");
Database.addText("cz.theCavePattern_MonkeyWizardButton", "Vyzvat ho na souboj");
Database.addText("cz.theCavePattern_OctopusKingSentence", "Narazil jsi na ošklivého Krále Chobotnic. Vypadá hrozivě.");
Database.addText("cz.theCavePattern_OctopusKingButton", "Vyzvat... to na souboj");
Database.addText("cz.fortressInsideText0", "Jsi uvnitř pouštního chrámu.");
Database.addText("cz.fortressInsideText1", "Můžeš si vybrat jedny ze tří dveří.");
Database.addText("cz.fortressInsideText2", "Každé z nich vedou do místnosti s velkým pokladem.");
Database.addText("cz.fortressInsideEnterRoom1", "Vstoupit do první místnosti");
Database.addText("cz.fortressInsideEnterRoom2", "Vstoupit do druhé místnosti");
Database.addText("cz.fortressInsideEnterRoom3", "Vstoupit do třetí místnosti");
Database.addText("cz.treasureButtonDig", "Vykopat díru");
Database.addText("cz.treasureButtonYouFound", "Našel jsi tři tabulky čokolády!");
Database.addText("cz.sorceressHutHello", "Ahoj, já jsem čarodějka. Můžu tě naučit něco o magii. Taky ti můžu prodat pár zajímavých věcí, nebo pro tebe něco vykouzlit. Ale nic není zadarmo! Budu po tobě chtít lízátka. Hodně lízátek.");
Database.addText("cz.sorceressHutClickedGrimoire", "Tohle je kouzelná kniha určená pro začátečníky. Na výpravách budeš moci vyvolat pár jednoduchých, ale užitečných kouzel. Stoprocentně se ti budou hodit! Za pouhých 5 000 lízátek je ta kniha tvoje.");
Database.addText("cz.sorceressHutBuyGrimoireButton", "Koupit tuto knihu (5 000 lízátek)");
Database.addText("cz.sorceressHutBuyGrimoireSpeech", "Děkuji! Teď  budeš moci používat tři jednoduchá kouzla. Hodně štěstí na výpravách!");
Database.addText("cz.sorceressHutClickedGrimoire2", "Tohle je kniha kouzel pro pokročilé. Díky ní budeš moci používat dvě složitá kouzla. Sepsala jsem ji sama, takže funčnost zaručena! Myslím, že 20 000 je férová cena.");
Database.addText("cz.sorceressHutBuyGrimoire2Button", "Koupit tuto knihu (20 000 lízátek)");
Database.addText("cz.sorceressHutBuyGrimoire2Speech", "Dobrý obchod! Do tvého arzenálu přibyla další dvě kouzla, užívej jich moudře!");
Database.addText("cz.sorceressHutClickedCauldron", "Tohle je můj kotlík. Umožňuje mi vařit kouzelné lektvary. Mohla bych ti ho prodat, ale je celkem drahý... Bude tě to stát 100 000 lízátek.");
Database.addText("cz.sorceressHutBuyCauldronButton", "Koupit kotlík (100 000 lízátek)");
Database.addText("cz.sorceressHutBuyCauldronSpeech", "Díky moc! Tady máš kotlík a návod na vaření. A já mám dalších 100 000 lízátek!");
Database.addText("cz.sorceressHutClickedHat", "Mám pěkný klobouk, že? Ale nemůžu ti ho prodat. Je příliš vzácný. Ne, opravdu nemůžu. Netrvej na tom. Ne. Ne ne ne ne, fakt ti ho nemůžu prodat. Éh, tak dobrá, ale dáš mi za něj 1 000 000 000 lízátek. Tohle stejně asi nebudeš schopný zaplatit.");
Database.addText("cz.sorceressHutBuyHatButton", "Koupit špičatý klobouk (1 000 000 000 lízátek)");
Database.addText("cz.sorceressHutBuyHatSpeech", "Miliarda! Miliarda lízátek, hurá! Ale... už nemám svůj klobouk... Ale celá miliarda lízátek, sakra, tohle za to stálo!");
Database.addText("cz.cauldronPreviousPageButton", "Předchozí stránka");
Database.addText("cz.cauldronNextPageButton", "Následující stránka");
Database.addText("cz.cauldronWhatYouWantToPut", "Co chceš dát do kotlíku");
Database.addText("cz.cauldronWhatIsIn", "Co je v kotlíku");
Database.addText("cz.cauldronWhatYouCanDo", "Co můžeš udělat");
Database.addText("cz.castleBigRoomComment", "Velká místnost");
Database.addText("cz.castleARoomComment", "Místnost");
Database.addText("cz.castleADarkRoomComment", "Temná místnost");
Database.addText("cz.castleCastleEntranceComment", "Vchod do hradu");
Database.addText("cz.castleTowerEntranceComment", "Vchod do věže");
Database.addText("cz.castleNougatMonsterComment", "Zaútočit na nugátové monstrum");
Database.addText("cz.castleGuardsComment", "Zaútočit na stráže");
Database.addText("cz.castleStairsComment", "Schody");
Database.addText("cz.buttonBackToTheCastle", "Zpátky do hradu");
Database.addText("cz.castleBigRoomHovenSpeechSad", "Ahoj! Jsem velmi stará pec. Kdysi jsem pekla spoustu velmi dobrého pečiva, ale dnes už mě nikdo nepoužívá. Možná... možná bys mi mohl pomoct? Můžu si od tebe vzít nějaké ty sladkosti? Neboj, nebudeš litovat! Mně můžeš věřit.");
Database.addText("cz.castleBigRoomHovenNotEnough", "Oh... nemáš dost sladkostí, nemůžu udělat nic. Jsem prostě zbytečná. Od teď mi říkej „zbytečná pec“.");
Database.addText("cz.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Děkuju moc! Použila jsem 100 bonbónů a tabulku čokolády, a koukej, co jsem upekla! Pain au chocolat! Je to moje oblíbené pečivo, doufám, že ti bude taky chutnat!");
Database.addText("cz.castleBigRoomHovenSpeechHappy", "Jestli budeš chtít napéct víc, stačí říct! Ráda ti pomůžu.");
Database.addText("cz.castleBigRoomHovenSpeechHappyNotEnough", "Ajaj, bohužel nemáš dost sladkostí. Potřebuju 100 bonbónů a tabulku čokolády. Určitě se vrať, až to seženeš!");
Database.addText("cz.castleBigRoomHovenLetHovenTakeButton", "Nechat pec, ať si vezme sladkosti, které potřebuje");
Database.addText("cz.castleBigRoomHovenThanks", "Děkuju!");
Database.addText("cz.dragonStopTickling", "Hej ty tam dole! To lechtá, nech toho!");
Database.addText("cz.dragonStopTicklingButton", "Eh, promiň, já myslel, že tě mám zabít");
Database.addText("cz.dragonTalking", "Jsem drak a tenhle hrad patří mně. Vidím, že ses dostal dovnitř, musíš být velmi statečný... Někomu jako ty milerád pomůžu. Po čem nejvíce toužíš?");
Database.addText("cz.dragonTalkingChallengeButton", "Po výzvě");
Database.addText("cz.dragonTalkingFameButton", "Po slávě");
Database.addText("cz.dragonTalkingCandiesButton", "Po bonbónech");
Database.addText("cz.dragonTalkingChallengeSpeech", "Aha, takže ty chceš výzvu? A co takhle si to rozdat se samotným ďáblem? Skoč mi na záda a já tě zanesu do pekla!");
Database.addText("cz.dragonTalkingFameSpeech", "Nejlepší způsob, jak se proslavit, je porazit samotného vývojáře. Vím, kde bydlí, a klidně tě tam dovezu. Ale připrav se, že to nebude snadný boj.");
Database.addText("cz.dragonTalkingCandiesSpeech", "To je to, po čem všichni toužíme. Chceš bonbóny? Můj starý kamarád by ti s tím mohl pomoct. Poznáš ho snadno, má jenom jedno oko. Prostě mu řekni, že mě znáš.");
Database.addText("cz.dragonTalkingChallengeAnswer", "Tak pojďme!");
Database.addText("cz.dragonTalkingFameAnswer", "Jsem připravený.");
Database.addText("cz.dragonTalkingCandiesAnswer", "Dobrá, díky!");
Database.addText("cz.buttonBackToCastle", "Zpátky do hradu");
Database.addText("cz.talkingCandySpeechNoBox", "Ahojky! Jsem mluvící bonbónek. Už jsi skoro vyhrál hru. Teď už jenom musíš najít Candy Box. Je v osamělém domku na sever od vesnice. Tohle je poslední krok!");
Database.addText("cz.talkingCandySpeech1", "Ahojky! Jsem mluvící bonbónek. Gratuluji, vyhrál jsi hru! Tvá odměna je následující: Otevřu pro tebe Candy Box. Mám to udělat?");
Database.addText("cz.talkingCandySpeech2", "Hotovo! Teď se můžeš podívat dovnitř. Doufám, že se ti hra líbila :)");
Database.addText("cz.talkingCandyButton", "Ano!!");
Database.addText("cz.lighthousePuzzleResetButton", "Reset");
Database.addText("﻿de.mapVillageComment", "Das Dorf");
Database.addText("de.mapFortressComment", "Die Wüstenfestung");
Database.addText("de.mapATreeComment", "Ein Baum");
Database.addText("de.mapTheDesertComment", "Die Wüste");
Database.addText("de.mapWishingWellComment", "Der Wunschbrunnen");
Database.addText("de.mapLonelyHouseComment", "Ein verlassenes Haus");
Database.addText("de.mapForestComment", "Der Wald");
Database.addText("de.mapCastleEntranceComment", "Schlosseingang");
Database.addText("de.mapCastleComment", "Das Schloss");
Database.addText("de.mapDragonComment", "Der Drache");
Database.addText("de.candyBoxEatCandiesButton", "Alle Bonbons aufessen");
Database.addText("de.candyBoxThrowCandiesButton", "10 Bonbons auf den Boden werfen");
Database.addText("de.mapVillageAHouseComment", "Ein Haus");
Database.addText("de.mapVillageForgeComment", "Die Schmiede");
Database.addText("de.buttonBackToTheMap", "Zurück zur Karte");
Database.addText("de.mapSorceressHutComment", "Hexenhütte");
Database.addText("de.buttonBackToTheVillage", "Zurück zum Dorf");
Database.addText("de.mapATreeIntroductionSpeech", "Hallo, ich bin das Eichhörnchen. Ich kann dir Bonbons und viele andere Dinge anbieten. Ich weiß, wie sehr du Süßes magst. Aber ich fühle mich in diesem Wald einsam.");
Database.addText("de.mapATreeIntroductionButton", "Wie kann ich dir helfen?");
Database.addText("de.mapATreeFirstQuestion", "Ich werde dir Fragen stellen. Wenn du sie korrekt beantwortest, werden die süßesten Süßspeisen deine sein. Die erste : Magst du wirklich Bonbons?? (Antworte auf Englisch)");
Database.addText("de.mapATreeSecondQuestion", "Das ist richtig! Hier sind 20 Bonbons für dich. Vervollständige nun diese Aneinandereihung von Buchstaben und du wirst eine neue Belohnung erhalten : S, E, I, D, N, A, ?");
Database.addText("de.mapATreeThirdQuestion", "Candies! Hier hast du 100 Bonbons. Nächste Frage : Wie viele Bonbons besitzt die größte Naschkatze auf der ganzen Welt?");
Database.addText("de.mapATreeFourthQuestion", "Hier sind 500 Bonbons! Die nächste Belohnung dürfte sogar noch interessanter sein... Hier ist das Rätsel : In einem uralten Wald wächst ein sehr alter Baum, auf dem die intelligentesten Tier dieser Welt leben. Es heißt, dieser Baum habe 60 Wurzeln, 360 Äste und 2160 Blätter. Wie viele Markierungen kannst du auf seinem Stamm finden?");
Database.addText("de.mapATreeFifthQuestion", "Gratulation! Ich sprach in der Tat von meinem Baum. Hier sind 3 Lutscher für dich. Nütze sie wohlüberlegt! Das nächste Rätsel, hör gut zu : Im Vollmond werfe ich einen gelben Hut ins rote Meer. Was geschieht mit diesem gelben Hut?");
Database.addText("de.mapATreeTicTacToeIntro", "Gute Antwort! Das war nicht allzu schwer. Hier sind 3 Schokoriegel für dich. Für die nächste Belohnung müssen wir die Regeln ein klein wenig ändern. Du wirst ein Spiel mit mir spielen müssen! Bist du bereit?");
Database.addText("de.mapATreeTicTacToeIntroButton", "Na klar!");
Database.addText("de.mapATreeTicTacToeLetsPlay", "Dieses Spiel heißt Tic Tac Toe. Wir spielen auf einem 3×3-Spielbrett. Du wirst das X-Zeichen und ich das O-Zeichen benutzen. Jeder von uns wird seine eigenen Zeichen setzen und das Ziel ist es, 3 gleiche Zeichen in einer Reihe zu haben. Ich werde dich beginnen lassen!");
Database.addText("de.mapATreeTicTacToeNobodyWins", "Das Spielbrett ist komplett gefüllt und wir haben beide nicht drei in einer Reihe : keiner gewinnt! Willst du es erneut versuchen?");
Database.addText("de.mapATreeTicTacToeYouLose", "Ich habe drei in einer Reihe! Ich habe gewonnen. Willst du es erneut versuchen?");
Database.addText("de.mapATreeTicTacToeTryAgainButton", "Natürlich will ich das!");
Database.addText("de.mapATreeTicTacToeYouWin", "Wow, das war ein unerwarteter Zug. Aber du hast drei in einer Reihe, das kann ich nicht bestreiten. Du hast gewonnen! Nimm diesen Schlüssel! Er öffnet eines der Häuser im Dorf unter dem Wald.");
Database.addText("de.mapATreeTicTacToeAnymoreSweet", "Danke, Eichhörnchen! Noch mehr Herausforderungen?");
Database.addText("de.mapATreeNoMoreChallenge", "Leider nicht, ich habe keine weiteren Herausforderungen für dich... Mit dir zu Spielen war spaßig, danke dafür!");
Database.addText("de.buttonExitQuestKeeping", "Verlasse die Quest (und behalte deine Beute)");
Database.addText("de.buttonExitQuestNoKeeping", "Verlasse die Quest (und verliere deine Beute)");
Database.addText("de.buttonExitQuestNoKeepingBecauseLose", "Verlasse die Quest (und verliere deine Beute, weil du gescheitert bist)");
Database.addText("de.mapVillageLockedHouseComment", "Ein abgeschlossenes Haus");
Database.addText("de.mapVillageForgeIntroductionSpeech", "Hi! Ich bin ein Schmied. Ich kann dir verschiedene Waffen und Ausrüstungsteile verkaufen.");
Database.addText("de.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hi! Ich bin ein Schmied. Leider kann ich gerade nichts zum Verkauf anbieten. Möchtest du vielleicht später wiederkommen?");
Database.addText("de.mapVillageFifthHouseNoWeaponSpeech", "Hallo. Mein Keller ist voller Ratten, die ich loswerden muss... wenn mir nur jemand mit einer Waffe helfen könnte...");
Database.addText("de.mapVillageFifthHouseWeaponSpeech", "He, du! Ich sehe, dass du eine Waffe trägst. Wenn du die Ratten, die mich in meinem Keller belästigen, tötest, werde ich dich belohnen!");
Database.addText("de.mapVillageFifthHouseAgree", "Dann nichts wie los!");
Database.addText("de.mapVillageFifthHouseCellarDone", "Vielen Dank, dass du sie losgeworden bist. Hier ist etwas sehr Wertvolles als Belohnung : eine Weltkarte. Ich denke, dass du mehr damit anfangen kannst als ich.");
Database.addText("de.mapVillageTheShopComment", "Der Laden");
Database.addText("de.mapBridgeComment", "Die Brücke");
Database.addText("de.mapFarmComment", "Die Lutscherfarm");
Database.addText("de.mapCaveEntranceComment", "Der Höhleneingang");
Database.addText("de.mapLighthouseComment", "Der Leuchtturm");
Database.addText("de.mapPierComment", "Der Pier");
Database.addText("de.mapTheHoleComment", "Der Graben");
Database.addText("de.candyBoxRequestStatusBarUnlocked", "Den Entwickler um eine neue Funktion bitten (30 Süßigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfg", "Um eine weitere bitten (5 Süßigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedSave", "Noch einmal bitten (5 Süßigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedHealthBar", "Um etwas Aufregenderes bitten (5 Süßigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedMap", "Der letzte Wunsch! Er muss einfach die Bonbons wert sein. (10 Süßigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedComment", "Du hast eine Statusleiste freigeschaltet! (siehe oben)");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfgComment1", "Du hast jetzt Zugriff auf den Konfigurations-Tab.");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfgComment2", "Du kannst die Sprache ändern, wenn du das möchtest.");
Database.addText("de.candyBoxRequestStatusBarUnlockedSaveComment", "Ein wildes Speichern-Tab erscheint!");
Database.addText("de.candyBoxRequestStatusBarUnlockedHealthBarComment", "Hier sind 100 Lebenspunkte für dich. Sie werden nützlich sein.");
Database.addText("de.cfgChooseLanguage", "Wähle eine Sprache :");
Database.addText("de.cfgInvertColors", "Farben invertieren?");
Database.addText("de.gridItemMainMapName", "Die Karte");
Database.addText("de.gridItemMainMapDescription", "Karte der Welt");
Database.addText("de.gridItemPogoStickName", "Springstock");
Database.addText("de.gridItemPogoStickDescription", "Dieser Gegenstand erlaubt es dir, in Quests zu springen.");
Database.addText("de.gridItemTimeRingName", "Ein Zeitring");
Database.addText("de.gridItemTimeRingDescription", "Dieser Gegenstand gibt dir eine neue Fähigkeit in Quests : Du kannst die Zeit verlangsamen. Benutze deinen Zeitring, wenn es dir zu schnell geht!");
Database.addText("de.gridItemThirdHouseKeyName", "Der dritte Hausschlüssel");
Database.addText("de.gridItemThirdHouseKeyDescription", "Dieser Schlüssel erlaubt es dir, das dritte Haus im Dorf zu betreten.");
Database.addText("de.gridItemFeatherName", "Eine Wüstenvogelfeder");
Database.addText("de.gridItemFeatherDescription", "Diese magische Feder erlaubt es dir, höher zu springen, wenn du deinen Springstock benutzt!");
Database.addText("de.gridItemFeatherDescriptionNoPogoStick", "Aus irgendeinem Grund hast du das Gefühl, dass diese Feder mit einem Springstock nützlich sein könnte...");
Database.addText("de.gridItemSpongeName", "Ein magischer Schwamm");
Database.addText("de.gridItemSpongeDescription", "Dieser magische Schwamm erlaubt es dir, dich wie ein Schwamm zusammenzuziehen und dadurch zu schrumpfen.");
Database.addText("de.gridItemFortressKeyName", "Der Wüstenfestungsschlüssel");
Database.addText("de.gridItemFortressKeyDescription", "Dieser Schlüssel erlaubt es dir, die antike Festung oberhalb der Wüste zu betreten. Wer weiß schon, was man dort entdecken könnte?");
Database.addText("de.gridItemHeartPendantName", "Ein Herzamulett");
Database.addText("de.gridItemHeartPendantDescription", "Dieses Herzamulett wird deine Lebenspunkte erhöhen, solang du es um deinen Hals trägst.");
Database.addText("de.gridItemHeartPlugName", "Ein Herzstecker");
Database.addText("de.gridItemHeartPlugDescription", "Dieser Herzstecker besteht aus Eisen, Spinnenbeinen und einer speziellen \"Herzlauge\", die in der Mitte eingeschlossen ist. Er erhöht deine Lebenspunkte um 20 Prozent!");
Database.addText("de.gridItemBeginnersGrimoireName", "Magie für Memmen");
Database.addText("de.gridItemBeginnersGrimoireDescription", "Dieses Buch verleiht dir drei Zaubersprüche, die sich einfach beschwören lassen. Es scheint in der Tat für Anfänger geschrieben worden zu sein. Folgende Zaubersprüche wirst du benutzen können : Saurer Regen (eine große Menge an Säure fällt auf deine Gegner), Feuerball (ein riesiger Magieball aus Feuer fliegt in Richtung deiner Gegner) und Teleport (du wirst an eine zufällige Position teleportiert).");
Database.addText("de.gridItemAdvancedGrimoireName", "Zaubern für Fortgeschrittene");
Database.addText("de.gridItemAdvancedGrimoireDescription", "Dieses Buch für Fortgeschrittene verleiht dir zwei Zaubersprüche : Magie auslöschen und Dornenschild. Der erste wird jegliche Magie von dir oder deinen Gegnern während eines Quests verhindern. Der zweite wird um dich herum einen Schild aus fliegenden Dornen erschaffen, welcher deinen Gegnern bei Kontakt Schaden hinzufügt");
Database.addText("de.gridItemBlackMagicGrimoireName", "Buch der schwarzen Magie");
Database.addText("de.gridItemBlackMagicGrimoireDescription", "Du hast dieses Zauberbuch aus einer Höhle geborgen, was nicht einfach war - und das hat seinen Grund. Es verleiht dir nämlich zwei mächtige dunkle Zaubersprüche. Der erste wird vor dir einen riesigen Wall aus Obsidiansteinen erschaffen, was nützlich sein kann, um Gegner zu verlangsamen. Der zweite wird einen Schwarm von Dämonen heraufbeschwören, die jeden während eines Quests angreifen werden, auch dich. Sei vorsichtig damit.");
Database.addText("de.gridItemUnicornHornName", "Elfenbein des Einhorns");
Database.addText("de.gridItemUnicornHornDescription", "Dieses magische Horn gehörte einst einem Einhorn. Seine mächtigen Heilkräfte werden dir eine große Hilfe sein. Du hast gehört, dass das Einhorn den Namen Charlie hatte.");
Database.addText("de.gridItemXinopherydonClawName", "Klaue eines Xinopherydons");
Database.addText("de.gridItemXinopherydonClawDescription", "Diese Klaue gehörte einem Xinopherydon, einer zweiköpfigen vorzeitlichen Kreatur, die als ausgestorben galt. Sie wird den Schaden deiner ausgerüsteten Waffe verdoppeln.");
Database.addText("de.gridItemPitchforkName", "Eine Heugabel");
Database.addText("de.gridItemPitchforkDescription", "Mit dieser besonderen Heugabel kannst du den Ackerboden auflockern, ohne ihn komplett zu ruinieren. Dadurch wird das unterirdische Ökosystem geschützt. Sie wird die Produktion deiner Lutscherfarm verdreifachen.");
Database.addText("de.gridItemShellPowderName", "Muschelpulver");
Database.addText("de.gridItemShellPowderDescription", "Muschelpulver wird häufig von Bauern benutzt, um das Wachstum von Lutschern zu verbessern. Dieses Pulver wird die Produktion deiner Lutscherfarm verdreifachen!");
Database.addText("de.gridItemPName", "Der P-Stein");
Database.addText("de.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("de.gridItemLName", "Der L-Stein");
Database.addText("de.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("de.gridItemAName", "Der A-Stein");
Database.addText("de.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("de.gridItemYName", "Der Y-Stein");
Database.addText("de.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("de.gridItemRedSharkFinName", "Eine rote magische Haiflosse");
Database.addText("de.gridItemRedSharkFinDescription", "Diese magische Flosse wird den Schaden deines Feuerballs stark erhöhen. Schlussendlich wird Feuerball also doch noch nützlich.");
Database.addText("de.gridItemGreenSharkFinName", "Eine grüne magische Haiflosse");
Database.addText("de.gridItemGreenSharkFinDescription", "Diese magische Flosse verleiht deiner Lutscherfarm die Kraft der Natur! Deine Produktion wird sich verfünffachen.");
Database.addText("de.gridItemPurpleSharkFinName", "Eine violette magische Haiflosse");
Database.addText("de.gridItemPurpleSharkFinDescription", "Diese magische Flosse wird dir einen neuen Spruch der schwarzen Magie verleihen! Du kannst ihn höchsten einmal pro Quest verwenden. Sei vorsichtig damit!");
Database.addText("de.gridItemTalkingCandyName", "Ein sprechendes Bonbon");
Database.addText("de.gridItemTalkingCandyDescription", "Dieses sprechende Bonbon ist aufgetaucht, nachdem du die vier Steine auf die Spitze des Schlossturms gebracht hast. Es hilft dir vielleicht dabei, die Candy Box zu öffnen...");
Database.addText("de.inventorySpecialNothingEqItem", "Nichts");
Database.addText("de.eqItemWeaponWoodenSwordName", "Hölzernes Schwert");
Database.addText("de.eqItemWeaponWoodenSwordDescription", "Ein einfaches Schwert aus Holz");
Database.addText("de.eqItemWeaponIronAxeName", "Eiserne Axt");
Database.addText("de.eqItemWeaponIronAxeDescription", "Eine simple Axt aus Eisen. Gut geschliffen. Stärker als das hölzerne Schwert.");
Database.addText("de.eqItemWeaponPolishedSilverSwordName", "Poliertes Silberschwert");
Database.addText("de.eqItemWeaponPolishedSilverSwordDescription", "Ein mächtiges Schwert, mit Nägeln besetzt.");
Database.addText("de.eqItemWeaponTrollBludgeonName", "Keule des Trolls");
Database.addText("de.eqItemWeaponTrollBludgeonDescription", "Du hast diese Keule von dem Troll genommen, der die Brücke bewacht hat. Sie ist zwar langsam, aber man kann damit wirkungsvoll Gegner verprügeln.");
Database.addText("de.eqItemWeaponTribalSpearName", "Stammesspeer");
Database.addText("de.eqItemWeaponTribalSpearDescription", "Du hast diesen Speer neben der Leiche eines Stammeskriegers gefunden, der sich in einem großen Graben verirrt hat. Es ist schwierig, sich darauf einzulassen, aber sobald du dich daran gewöhnt hast, ist er sicherlich eine gute Waffe.");
Database.addText("de.eqItemWeaponSummoningTribalSpearName", "Beschwörer-Stammesspeer");
Database.addText("de.eqItemWeaponSummoningTribalSpearDescription", "Dieser magische Stammesspeer ist stärker als ein gewöhnlicher Speer und wird während Quests immer wieder Stammeskrieger beschwören, die dir helfen werden.");
Database.addText("de.eqItemWeaponMonkeyWizardStaffName", "Stab des Affenmagiers");
Database.addText("de.eqItemWeaponMonkeyWizardStaffDescription", "Dieser Stab gehörte einem nackten Affenmagier, dem du in der Höhle begegnet bist. Er wirft automatisch Zaubersprüche gegen deine Gegner.");
Database.addText("de.eqItemWeaponEnchantedMonkeyWizardStaffName", "Stab des Affenmagiers (verzaubert)");
Database.addText("de.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Dieser Stab ist schneller als die nicht-verzauberte Variante, er wird also viel mehr Sprüche zaubern.");
Database.addText("de.eqItemWeaponGiantSpoonName", "Ein riesiger Löffel");
Database.addText("de.eqItemWeaponGiantSpoonDescription", "Dieser riesige Löffel war in einer riesigen Teekanne in der Wüstenfestung. Du kannst nicht sagen, ob er jemals verwendet wurde, aber wenn, dann muss es jemand sehr Großes gewesen sein. Treffen möchtest du ihn eher nicht.");
Database.addText("de.eqItemWeaponGiantSpoonOfDoomName", "Riesiger Löffel des Untergangs");
Database.addText("de.eqItemWeaponGiantSpoonOfDoomDescription", "Dieser riesige Löffel ist sogar noch stärker als ein gewöhnlicher riesiger Löffel, den man beispielsweise in einer riesigen Teekanne finden könnte. Leider ist er ziemlich langsam.");
Database.addText("de.eqItemWeaponScytheName", "Die Sense");
Database.addText("de.eqItemWeaponScytheDescription", "Es wird erzählt, dass diese Sense dem Tod selbst gehört hätte. Sie ist extrem schnell.");
Database.addText("de.eqItemHatMerchantHatName", "Hut des Händlers");
Database.addText("de.eqItemHatMerchantHatDescription", "Dieser Hut wurde dir vom Bonbon-Verkäufer verkauft. Der Bonbon-Verkäufer liebt Bonbons. Dieser Hut wird die Zahl deiner in Quests gefundenen Bonbons versiebenfachen!");
Database.addText("de.eqItemHatSorceressHatName", "Der Hexenhut");
Database.addText("de.eqItemHatSorceressHatDescription", "Dieser Hut wurde dir von der Hexe verkauft. Er wird deine Zaubersprüche und -tränke verstärken.");
Database.addText("de.eqItemHatOctopusKingCrownName", "Krone des Oktopuskönigs");
Database.addText("de.eqItemHatOctopusKingCrownDescription", "Du fühlst dich selbstbewusster, wenn du diese Krone trägst. Sie gibt dir keinerlei Vorteile in Quests, aber Selbstbewusstsein ist wichtig!");
Database.addText("de.eqItemHatOctopusKingCrownWithJaspersName", "Mit Jaspis besetzte Krone des Oktopuskönigs");
Database.addText("de.eqItemHatOctopusKingCrownWithJaspersDescription", "Diese verzauberte Krone wurde aus Gold gefertigt und mit Jaspisperlen besetzt. In Quests wirst du mit ihr mächtige Feuerbälle werfen können. Außerdem funkelt sie so schön!");
Database.addText("de.eqItemHatOctopusKingCrownWithObsidianName", "Mit Obsidian besetzte Krone des Oktopuskönigs");
Database.addText("de.eqItemHatOctopusKingCrownWithObsidianDescription", "Diese verzauberte Krone ist aus Gold und Obsidian gefertigt. Sie ist wunderschön. In Quests wird sie den Oktopuskönig beschwören, der für kurze Zeit an deiner Seite kämpfen wird. Welch ein tentakulöser Verbündeter!");
Database.addText("de.eqItemGlovesLeatherGlovesName", "Lederhandschuhe");
Database.addText("de.eqItemGlovesLeatherGlovesDescription", "Diese Handschuhe bringen eigentlich gar nichts. Aber sie sind immerhin weich und bequem!");
Database.addText("de.eqItemGlovesRedEnchantedGlovesName", "Rote verzauberte Handschuhe");
Database.addText("de.eqItemGlovesRedEnchantedGlovesDescription", "Diese verzauberten Handschuhe strahlen ein rötliches Licht aus, wenn du dich im Dunklen befindest. In Quests werden sie hin und wieder kleinere Feuerbälle gegen deine Gegner werfen, was definitiv hilfreich sein kann.");
Database.addText("de.eqItemGlovesPinkEnchantedGlovesName", "Pinkfarbene verzauberte Handschuhe");
Database.addText("de.eqItemGlovesPinkEnchantedGlovesDescription", "Diese verzauberten Handschuhe hinterlassen eine pinkfarbene Markierung auf allem, was du berührst. In Quests heilen sie dich durchgehend.");
Database.addText("de.eqItemBootsRocketBootsName", "Raketenstiefel");
Database.addText("de.eqItemBootsRocketBootsDescription", "Diese fantastischen Raketenstiefel erlauben es dir, in der Luft zu springen, sodass du im Prinzip fliegst.");
Database.addText("de.eqItemBootsLeatherBootsName", "Lederstiefel");
Database.addText("de.eqItemBootsLeatherBootsDescription", "Einfache Lederstiefel. Nichts besonderes.");
Database.addText("de.eqItemBootsBootsOfIntrospectionName", "Stiefel der Selbstprüfung");
Database.addText("de.eqItemBootsBootsOfIntrospectionDescription", "Nimm dir Zeit, atme durch und beruhige dich. Wenn du diese Stiefel trägst, wirst du dich nicht bewegen, während du den Boden berührst.");
Database.addText("de.eqItemBodyArmoursLightweightBodyArmourName", "Leichter Brustharnisch");
Database.addText("de.eqItemBodyArmoursLightweightBodyArmourDescription", "Dieser Brustharnisch wird dir ein wenig Schutz bieten. Du wirst den Attacken deiner Feinde etwas einfacher standhalten können.");
Database.addText("de.eqItemBodyArmoursKnightBodyArmourName", "Brustpanzer des Ritters");
Database.addText("de.eqItemBodyArmoursKnightBodyArmourDescription", "Dieser starke Brustpanzer wird dich beschützen. Die Angriffe deiner Feinde werden dir weniger anhaben können.");
Database.addText("de.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Verzauberter Brustpanzer des Ritters");
Database.addText("de.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Diese Rüstung ist etwas ganz Besonderes. Du wirst kaum noch Schaden nehmen, aber die Stärke deiner aktiven Waffe wird um die Hälfte reduziert.");
Database.addText("de.mapVillageForgeBuyWoodenSwordButton", "Ein hölzernes Schwert kaufen (150 Bonbons)");
Database.addText("de.mapVillageForgeBuyWoodenSwordSpeech", "Danke für deinen Kauf! Dieses hölzerne Schwert ist relativ schwach, aber für den Anfang reicht es.");
Database.addText("de.mapVillageForgeBuyIronAxeButton", "Eine eiserne Axt kaufen (400 Bonbons)");
Database.addText("de.mapVillageForgeBuyIronAxeSpeech", "Ich hoffe, dass dir diese eiseren Axt gefallen wird. Ich habe sie extra für dich geschliffen!");
Database.addText("de.mapVillageForgeBuyPolishedSilverSwordButton", "Ein poliertes Silberschwert kaufen (2 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyPolishedSilverSwordSpeech", "Es hat mich viel Zeit gekostet, dieses Schwert herzustellen. Ich kann dir versichern, dass es sein Geld wert ist.");
Database.addText("de.mapVillageForgeBuyLightweightBodyArmourButton", "Einen leichten Brustharnisch kaufen (15 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyLightweightBodyArmourSpeech", "Dieser Brustharnisch wird dir Schutz gegen deine Feinde bieten.");
Database.addText("de.mapVillageForgeBuyScytheButton", "Eine Sense kaufen (5 000 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyScytheSpeech", "Es hat mich mehrere Monate gekostet, um diese Sense herzustellen. Sie ist ein wahres Kunstwerk. Sie ist wahrscheinlich die schnellste Waffe, die du jemals benutzen wirst. Viel Glück!");
Database.addText("de.wishingWellThrowFirstCandyButton", "Wirf ein Bonbon in den Brunnen");
Database.addText("de.wishingWellCandyIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen Süßes gewähre ich dir Wünsche! Wenn du Bonbons in mich wirfst, werde ich deine Wunden heilen.");
Database.addText("de.wishingWellThrewCandiesSpeech", "Deine Wunden sind nun geheilt!");
Database.addText("de.wishingWellNoWoundSpeech", "Du hast keine Wunden, die geheilt werden müssen!");
Database.addText("de.wishingWellThrowFirstLollipopButton", "Wirf einen Lutscher in den Brunnen");
Database.addText("de.wishingWellLollipopIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen Süßes gewähre ich dir Wünsche! Wenn du Lutscher in mich wirfst, werde ich sie dir in Bonbons umwandeln.");
Database.addText("de.wishingWellThrewLollipopsSpeech", "Deine Lutscher wurden in Bonbons verwandelt! Zwei Lutscher für ein Bonbon.");
Database.addText("de.wishingWellThrowChocolateBarButton", "Wirf einen Schokoriegel in den Brunnen");
Database.addText("de.wishingWellChocolateBarIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen Süßes gewähre ich dir Wünsche! Ich liebe Schokoriegel. Das tue ich wirklich. Für jeden Schokoriegel, den du in mich wirfst, inklusive diesem, wirst du mit einer magischen Verzauberung entlohnt werden.");
Database.addText("de.wishingWellThrewChocolateBarSpeech", "Welchen Gegenstand möchtest du verzaubern?");
Database.addText("de.wishingWellThrowPainAuChocolatButton", "Wirf ein Schokocrossaint in den Brunnen");
Database.addText("de.wishingWellPainAuChocolatIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen Süßes gewähre ich dir Wünsche! Wenn du ein Schokocrossaint in mich wirfst, erhälst du ein ganz besonderes Geschenk. Wähle mit Bedacht.");
Database.addText("de.wishingWellThrewPainAuChocolatSpeech", "Danke für das Schokocrossaint! Du darfst nun dein Geschenk auswählen.");
Database.addText("de.wishingWellChooseGift", "Wähle dein Geschenk!");
Database.addText("de.wishingWellChooseGiftButton", "Auswählen");
Database.addText("de.wishingWellGiftDoneSpeech", "Fertig! Du hast jetzt ein neues Geschenk. Es wird auf dem Statusmonitor deines Inventars erscheinen.");
Database.addText("de.wishingWellNoPossibleEnchantment", "Keine Verzauberung möglich");
Database.addText("de.wishingWellChooseEnchantment", "Wähle eine Verzauberung");
Database.addText("de.wishingWellEnchantButton", "Verzaubern");
Database.addText("de.wishingWellEnchantmentDoneSpeech", "Na bitte! Dein Gegenstand wurde verzaubert.");
Database.addText("de.pierLighthouseButton", "Mit dem Boot zum Leuchtturm fahren");
Database.addText("de.pierTheSeaButton", "Ins Meer springen");
Database.addText("de.lonelyHouseOpenBox", "Die Kiste öffnen");
Database.addText("de.lonelyHouseShakeBox", "Die Kiste schüttern");
Database.addText("de.lonelyHouseBreakLock", "Das Schloss zerbrechen");
Database.addText("de.lonelyHouseKickBox", "Die Kiste treten");
Database.addText("de.lonelyHouseAskTheBoxToOpenItself", "Die Kiste bitten, sich selbst zu öffnen");
Database.addText("de.lonelyHouseLureTheBoxWithACandy", "Die Kiste mit Süßigkeiten anlocken");
Database.addText("de.lonelyHouseTakeTheBox", "Nimm die Kiste mit, du wirst vermutlich ohnehin einen Schlüssel brauchen, um sie zu öffnen.");
Database.addText("de.lonelyHouseOpenBoxResult", "Die Kiste ist verschlossen");
Database.addText("de.lonelyHouseShakeBoxResult", "Nichts passiert");
Database.addText("de.lonelyHouseBreakLockResult", "Das Schloss hält stand");
Database.addText("de.lonelyHouseKickBoxResult", "Ihr Fuß schmerzt ein wenig, aber nichts passiert");
Database.addText("de.lonelyHouseAskTheBoxToOpenItselfResult", "...bist du dir darüber im Klaren, dass du mit einer Kiste redest?");
Database.addText("de.lonelyHouseLureTheBoxWithACandyResult", "Es scheint die Kiste nicht zu interessieren");
Database.addText("de.lonelyHouseTakeTheBoxResult", "In dieser Candy Box ist wahrscheinlich etwas Interessantes.");
Database.addText("de.lollipopFarmConstructMill", "Eine Mühle bauen (10 000 Lutscher)");
Database.addText("de.lollipopFarmFeedMill", "Die Mühle auffüllen");
Database.addText("de.lollipopFarmCurrentCandiesProduction", "Aktuelle Bonbon-Produktion :");
Database.addText("de.lollipopFarmDigPond", "Einen Tümpel graben (100 000 Lutscher)");
Database.addText("de.lollipopFarmBuyLolligator", "Einen Lolligator kaufen (1 200 Bonbons)");
Database.addText("de.lollipopFarmLolligatorsConversionText", "Umwandlung Bonbons -> Lutscher aktiviert");
Database.addText("de.lighthouseAskButton", "Fragen");
Database.addText("de.lighthouseQuestionWho", "Wer bist du?");
Database.addText("de.lighthouseQuestionWhoSpeech", "Ich bin ein sehr alter Zyklop.");
Database.addText("de.lighthouseQuestionWhat", "Was tust du hier?");
Database.addText("de.lighthouseQuestionWhatSpeech", "Ich verbringe hier den ganzen Tag und warte darauf, dass ein Boot kommt. Es ist lange her, dass ich zum letzten Mal ein Boot gesehen habe. Aber ich muss hier bleiben und in das Meer blicken, weil ein Boot kommen könnte.");
Database.addText("de.lighthouseQuestionWhyEatCandies", "Weshalb würde ich Bonbons essen wollen?");
Database.addText("de.lighthouseQuestionWhyEatCandiesSpeech", "Weil sie gut für deine Gesundheit sind!");
Database.addText("de.lighthouseQuestionCandyBox", "Was ist eine Candy Box?");
Database.addText("de.lighthouseQuestionCandyBoxSpeech", "Das ist eine sehr alte Kiste, von der behauptet wird, sie enthielte alle Süßigkeiten dieser Welt. Der Legende nach solle derjenige, der sie öffnen könnte, alle Bonbons bekommen, die er sich vorstellen könne.");
Database.addText("de.lighthouseQuestionDragon", "Der Drache hat mir gesagt, ich solle hier herkommen, wenn ich Bonbons will.");
Database.addText("de.lighthouseQuestionDragonSpeech", "Oh, ich verstehe... Na ja, ich kann dir die Bonbons nicht direkt anbieten, aber ich kann dir etwas geben, mit dem du letztendlich eine MENGE an Bonbons haben wirst. Ich muss dich zuvor lediglich einem Test unterziehen, weil ich nicht jedem das geben kann, was ich besitze. Löse dieses Puzzle und es wird dein sein.");
Database.addText("de.lighthouseFoundStone", "Herzlichen Glückwunsch! Du hast den Test bestanden und einen Stein gefunden. Er ist sehr wertvoll, aber du benötigst drei weitere, um etwas damit anfangen zu können. Viel Glück bei der Suche!");
Database.addText("de.lighthouseFoundStoneAgain", "Gut gemacht, du hast das Puzzle erneut gelöst. Es scheint dir zu gefallen.");
Database.addText("de.saveLocalSaveTitle", "Browser-Spielstände");
Database.addText("de.saveLocalSaveWhy", "Wähle einen lokalen Spielstand, wenn du mit deinem jetzigen Gerät oder Browser weiterspielen möchten.");
Database.addText("de.saveLocalSaveWarning0", "Dein Browser scheint HTML5 nicht zu unterstützen.");
Database.addText("de.saveLocalSaveWarning1", "Du solltest deinen Browser updaten, um Unterstützung für lokale Spielstände zu erhalten.");
Database.addText("de.saveLocalSaveChooseSlot", "Wähle einen Spielstand aus :");
Database.addText("de.saveLocalSaveAutosaveEnabled", "Automatisches Speichern aktiviert");
Database.addText("de.saveLocalSaveChooseWhatToDo", "Wähle aus, was du tun möchtest :");
Database.addText("de.saveLocalSaveSaveButton", "Speichern");
Database.addText("de.saveLocalSaveAutosaveButton", "Alle 10 Minuten speichern");
Database.addText("de.saveLocalSaveDisableAutosaveButton", "Automatisches Speichern deaktivieren");
Database.addText("de.saveFileSaveTitle", "Text-Spielstände");
Database.addText("de.saveFileSaveWhy0", "Benutze diese Funktion, wenn :");
Database.addText("de.saveFileSaveWhy1", "Du auf einem anderen Gerät oder Browser weiterspielen möchten");
Database.addText("de.saveFileSaveWhy2", "Du deinen Spielstand mit jemand anderem teilen möchten");
Database.addText("de.saveFileSaveWhy3", "Du aus irgendeinem Grund deinen Browser-Cache leeren möchten");
Database.addText("de.saveFileSaveWhy4", "(was deine lokalen Spielstände löschen wird)");
Database.addText("de.saveFileSaveButton", "Aktuellen Spielstand als Text generieren");
Database.addText("de.saveFileSaveWarning", "Kopiere diesen Text nun irgendwohin! (beispielsweise in eine Datei)");
Database.addText("de.saveLocalLoadTitle", "Browser-Spielstände laden");
Database.addText("de.saveLocalLoadYouCan", "Mithilfe der folgenden Links kannst du einen lokalen Spielstand laden :");
Database.addText("de.saveLocalLoadThanksTo", "Dank HTML5-Magie ist es möglich, diese Links auch offline zu benutzen.");
Database.addText("de.saveFileLoadTitle", "Text-Spielstände laden");
Database.addText("de.saveFileLoadPaste", "Kopiere deinen Text-Spielstand in das untere Feld und klicke dann auf den \"Laden\"-Button");
Database.addText("de.saveFileLoadButton", "Laden");
Database.addText("de.mountainsText0", "Du hast etwas in den Bergen erblickt!");
Database.addText("de.mountainsText1", "Das sieht interessant aus. Vielleicht könnte es hilfreich sein.");
Database.addText("de.mountainsTextButton", "Die Berge besteigen, um den Gegenstand zu erlangen");
Database.addText("de.mountainsTextAfter", "Du hast einen Springstock gefunden! Er wurde deinem Inventar hinzugefügt.");
Database.addText("de.secondHouseIntroSpeech", "Hallo, ich bin der Bonbon-Verkäufer. Für Bonbons würde ich alles tun. Was brauchst du?");
Database.addText("de.secondHouseLollipop1Speech", "Dies ist ein Lutscher mit Zitronengeschmack. Mein Lieblingslutscher! Er kostet 60 Bonbons, aber er ist es wert.");
Database.addText("de.secondHouseLollipop2Speech", "Dies ist ein Lutscher mit Erdbeergeschmack. Er schmeckt gut. Ich mag seine rote Farbe. Nur 60 Bonbons!");
Database.addText("de.secondHouseLollipop3Speech", "Dies ist ein Lutscher mit Kürbisgeschmack. Ich wette, einen solchen hast du noch nie probiert! 60 Bonbons und es ist deiner.");
Database.addText("de.secondHouseLollipopButtonText", "Diesen Lutscher kaufen (60 Bonbons)");
Database.addText("de.secondHouseMerchantHatSpeech", "Ich könnte dir meinen Hut verkaufen, aber es ist sehr wertvoll, weißt du... Du wirst mir eine Menge Bonbons dafür geben müssen. Sagen wir 1 Million Bonbons. Das erscheint fair, nicht wahr?");
Database.addText("de.secondHouseMerchantHatButtonText", "Hut des Händlers kaufen (1 000 000 Bonbons)");
Database.addText("de.secondHouseTimeRingSpeech", "Dies ist ein Zeitring. Er ist irgendwie magisch. Er erlaubt es dir, die Zeit zu verlangsamen, wenn du dich in Gefahr befindest.");
Database.addText("de.secondHouseTimeRingButtonText", "Zeitring kaufen (500 Bonbons)");
Database.addText("de.secondHouseLeatherGlovesSpeech", "Diese Handschuhe wurden aus Kamelleder gefertigt, sie haben eine hohe Qualität. Ich habe viele von ihnen auf Lager, deshalb sind sie so günstig : nur 300 Bonbons!");
Database.addText("de.secondHouseLeatherBootsButtonText", "Lederstiefel kaufen (300 Bonbons)");
Database.addText("de.secondHouseLeatherBootsSpeech", "Diese hochwertigen Stiefel wurden aus Kamelleder gefertigt und werden deine Füße warmhalten.");
Database.addText("de.secondHouseLeatherGlovesButtonText", "Lederhandschuhe kaufen (300 Bonbons)");
Database.addText("de.secondHouseChocolateBarSpeech", "Dies ist ein Schokoriegel. Ich weiß nicht, wofür er benutzt wird, aber er scheint relativ selten zu sein, was auch den Preis erklärt. 800 Bonbons und er ist deiner.");
Database.addText("de.secondHouseChocolateBarButtonText", "Schokoriegel kaufen (800 candies)");
Database.addText("de.outsideTheHoleButton", "Jump in this big hole in the ground");
Database.addText("de.theCaveExitText0", "Du hast endlich den Ausgang der Höhle erreicht.");
Database.addText("de.theCaveExitText1", "Draußen kannst du einen dichten Wald erkennen.");
Database.addText("de.theCaveExitButtonText", "Höhle verlassen");
Database.addText("de.theCaveFirstSentenceWentStraight", "Du bist geradeaus gegangen.");
Database.addText("de.theCaveFirstSentenceWentLeft", "Du hast den linken Weg genommen.");
Database.addText("de.theCaveFirstSentenceWentRight", "Du hast den rechten Weg genommen.");
Database.addText("de.theCaveFirstSentenceYouAre", "Du bist in einer Höhle. Vor dir erstrecken sich drei Wege.");
Database.addText("de.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Du hast einen merkwürdigen Gegenstand vor dir auf dem Boden erspäht.");
Database.addText("de.theCavePattern_ChocolateBarNowSeeChocolateBar", "Du hast einen Schokoriegel vor dir entdeckt.");
Database.addText("de.theCavePattern_TreasureMapSentence", "Du siehst kleine Steine, die auf dem Boden ungewöhnlich platziert wurden.");
Database.addText("de.theCavePattern_MonkeyWizardSentence", "Du stößt zufällig auf einen nackten Affenmagier.");
Database.addText("de.theCavePattern_MonkeyWizardButton", "Fordere ihn heraus");
Database.addText("de.theCavePattern_OctopusKingSentence", "Du stößt zufällig auf den Oktopuskönig. Er wirkt ekelerregend.");
Database.addText("de.theCavePattern_OctopusKingButton", "Fordere ihn heraus");
Database.addText("de.fortressInsideText0", "Du bist in der Wüstenfestung");
Database.addText("de.fortressInsideText1", "Du kannst zwischen drei Türen wählen.");
Database.addText("de.fortressInsideText2", "Jede von ihnen führt in einen großen Raum mit einem Schatz am Ende.");
Database.addText("de.fortressInsideEnterRoom1", "Ersten Raum betreten");
Database.addText("de.fortressInsideEnterRoom2", "Zweiten Raum betreten");
Database.addText("de.fortressInsideEnterRoom3", "Dritten Raum betreten");
Database.addText("de.treasureButtonDig", "Graben");
Database.addText("de.treasureButtonYouFound", "Du hast drei Schokoriegel gefunden!");
Database.addText("de.sorceressHutHello", "Hallo, ich bin die Hexe. Ich könnte dir ein oder zwei Dinge über die Magie verraten. Außerdem kann ich dir interessante Gegenstände geben oder Zaubersprüche für dich sprechen. Aber alles hat seinen Preis! Und dieser Preis werden Lutscher sein. Viele von ihnen.");
Database.addText("de.sorceressHutClickedGrimoire", "Dieses Zauberbuch ist für blutige Anfänger. Wenn du es in Quests aktiv hast, wirst du eine Reihe einfacher, aber nützlicher Sprüche benutzen können. Du wirst es brauchen! Nur 5 000 Lutscher.");
Database.addText("de.sorceressHutBuyGrimoireButton", "Magie für Memmen kaufen (5 000 Lutscher)");
Database.addText("de.sorceressHutBuyGrimoireSpeech", "Danke für den Kauf! Du wirst drei Sprüche mit diesem Zauberbuch sprechen können. Viel Glück!");
Database.addText("de.sorceressHutClickedGrimoire2", "Dieses Zauberbuch richtet sich an Fortgeschrittene. Wenn du es in Quests aktiv hast, wirst du zwei Sprüche benutzen können. Ich selbst habe es geschrieben, was nicht einfach war. 20 000 Lutscher sind ein fairer Preis.");
Database.addText("de.sorceressHutBuyGrimoire2Button", "Zaubern für Fortgeschrittene kaufen (20 000 Lutscher)");
Database.addText("de.sorceressHutBuyGrimoire2Speech", "Danke für den Kauf! Du wirst zwei Sprüche mit diesem Zauberbuch sprechen können. Wähle sie mit Bedacht!");
Database.addText("de.sorceressHutClickedCauldron", "Dies ist mein Kessel. Er erlaubt es mir, magische Zaubertränke zu brauen. Ich könnte ihn dir verkaufen, aber er ist sehr wertvoll... er wird dich 100 000 Lutscher kosten.");
Database.addText("de.sorceressHutBuyCauldronButton", "Kessel kaufen (100 000 Lutscher)");
Database.addText("de.sorceressHutBuyCauldronSpeech", "Danke vielmals! 100 000 Lutscher für mich! Ich habe dir außerdem eine Anleitung beigelegt. Sie wird nützlich sein.");
Database.addText("de.sorceressHutClickedHat", "Ich habe in der Tat einen schönen Hut. Aber ich kann ihn dir nicht verkaufen, dafür ist er vieeeel zu wertvoll. Wirklich, ich kann nicht. Leg es nicht darauf an. Nein. Nein nein nein, ich sollte das nicht tun. Ach na schön, ich werde ihn dir verkaufen, aber für 1 000 000 000 Lutscher. Das wirst du vermutlich ohnehin nicht bezahlen können.");
Database.addText("de.sorceressHutBuyHatButton", "Hut kaufen (1 000 000 000 Lutscher)");
Database.addText("de.sorceressHutBuyHatSpeech", "Eine Milliarde Lutscher für miiiich! Ich habe den Hut zwar nicht mehr, aber dafür eine Milliarde Lutscher, wow! ... Das war es wert.");
Database.addText("de.cauldronPreviousPageButton", "Vorherige Seite");
Database.addText("de.cauldronNextPageButton", "Nächste Seite");
Database.addText("de.cauldronWhatYouWantToPut", "In den Kessel geben :");
Database.addText("de.cauldronWhatIsIn", "Inhalt des Kessels :");
Database.addText("de.cauldronWhatYouCanDo", "Aktionen :");
Database.addText("de.castleBigRoomComment", "Ein großer Raum");
Database.addText("de.castleARoomComment", "Ein Raum");
Database.addText("de.castleADarkRoomComment", "Ein dunkler Raum");
Database.addText("de.castleCastleEntranceComment", "Der Schlosseingang");
Database.addText("de.castleTowerEntranceComment", "Der Turmeingang");
Database.addText("de.castleNougatMonsterComment", "Das riesige Nougat-Monster angreifen");
Database.addText("de.castleGuardsComment", "Die Wächter angreifen");
Database.addText("de.castleStairsComment", "Treppen");
Database.addText("de.buttonBackToTheCastle", "Zurück ins Schloss");
Database.addText("de.castleBigRoomHovenSpeechSad", "Hallo! Ich bin ein sehr alter Brotofen! Für gewöhnlich habe ich Tonnen leckerer Teigwaren gebacken, aber es benutzt mich keiner mehr. Vielleicht... vielleicht könntest du mir helfen? Gib mir einfach einige deiner Süßigkeiten. Keine Sorge, du wirst es nicht bereuen. Du kannst mir vertrauen.");
Database.addText("de.castleBigRoomHovenNotEnough", "Oh... du hast nicht genügend Bonbons, ich kann nichts für dich tun. Ich bin einfach nutzlos. Den nutzlosen Brotofen, so solltest du mich nennen.");
Database.addText("de.castleBigRoomHovenSpeechMadePainAuChocolat", "Juhu! Danke vielmals! Ich habe 100 Bonbons und einen Schokoriegel benutzt, um für dich... ein Schokocroissant gebacken! Das ist mein Lieblingsgebäck. Ich hoffe, dass auch du es magst.");
Database.addText("de.castleBigRoomHovenSpeechHappy", "Hey! Wenn ich dir weiteres Gebäck backen soll, sag einfach Bescheid. Ich würde dir gerne helfen.");
Database.addText("de.castleBigRoomHovenSpeechHappyNotEnough", "Oh, leider hast du nicht genügend Süßigkeiten. Du brauchst 100 Bonbons und einen Schokoriegel. Komm wieder, wenn du das hast.");
Database.addText("de.castleBigRoomHovenLetHovenTakeButton", "Gib dem Ofen alle Süßigkeiten, die er verlangt");
Database.addText("de.castleBigRoomHovenThanks", "Danke, Ofen!");
Database.addText("de.dragonStopTickling", "Hey, du! Hör bitte auf mich zu kitzeln.");
Database.addText("de.dragonStopTicklingButton", "Äh, öhm, Entschuldigung. Ich dachte, ich solle dich angreifen.");
Database.addText("de.dragonTalking", "Ich bin der Drache und dies ist mein Schloss. Du musstest sehr tapfer sein, um es überhaupt zu betreten. Jemandem wie dir würde ich gerne helfen. Nach was suchst du?");
Database.addText("de.dragonTalkingChallengeButton", "Herausforderung");
Database.addText("de.dragonTalkingFameButton", "Ruhm");
Database.addText("de.dragonTalkingCandiesButton", "Bonbons");
Database.addText("de.dragonTalkingChallengeSpeech", "Oh, du willst also eine Herausforderung? Dann solltest du die Hölle besuchen, es ist nämlich bekannt, dass der Teufel ein harter Gegner ist. Spring auf meinen Rücken und ich werde dich dorthin bringen!");
Database.addText("de.dragonTalkingFameSpeech", "Der einfachste Weg, um berühmt zu werden, ist es, dem Entwickler selbst entgegenzutreten. Aber gib Acht, das wird nicht einfach sein.");
Database.addText("de.dragonTalkingCandiesSpeech", "Letztendlich sind Süßigkeiten das, was wir alle wollen, nicht wahr? Ich denke, ein Freund von mir könnte dir damit helfen. Du wirst ihn leicht erkennen, er hat nämlich nur ein Auge. Sag ihm einfach, dass du mich kennst.");
Database.addText("de.dragonTalkingChallengeAnswer", "Auf geht's!");
Database.addText("de.dragonTalkingFameAnswer", "Ich bin bereit.");
Database.addText("de.dragonTalkingCandiesAnswer", "Okay, danke!");
Database.addText("de.buttonBackToCastle", "Zurück ins Schloss");
Database.addText("de.talkingCandySpeechNoBox", "Hallo, ich bin das sprechende Bonbon. Du hast das Spiel fast gewonnen. Du musst nur noch die Candy Box finden. Sie befindet sich in einem Haus außerhalb des Dorfes. Dies ist der letzte Schritt!");
Database.addText("de.talkingCandySpeech1", "Hallo! Ich bin das sprechende Bonbon. Herzlichen Glückwunsch, du hast das Spiel gewonnen! Ich werde die Candy Box für dich öffnen, dies ist deine Belohnung. Soll ich fortfahren?");
Database.addText("de.talkingCandySpeech2", "Fertig! Du steht nun für dich offen. Ich hoffe, dass dir das Spiel gefallen hat :)");
Database.addText("de.talkingCandyButton", "Ja!!");
Database.addText("de.lighthousePuzzleResetButton", "Zurücksetzen");
Database.addText("﻿el.mapVillageComment", "Ένα χωριό");
Database.addText("el.mapFortressComment", "Το φρούριο της ερήμου.");
Database.addText("el.mapATreeComment", "Ένα δέντρο");
Database.addText("el.mapTheDesertComment", "Η έρημος");
Database.addText("el.mapWishingWellComment", "Το πηγάδι των ευχών");
Database.addText("el.mapLonelyHouseComment", "Ένα μοναχικό σπίτι");
Database.addText("el.mapForestComment", "Το δάσος");
Database.addText("el.mapCastleEntranceComment", "Η είσοδος του κάστρου");
Database.addText("el.mapCastleComment", "Το κάστρο");
Database.addText("el.mapDragonComment", "Ο δράκος");
Database.addText("el.candyBoxEatCandiesButton", "Φάε όλα τα ζαχαρωτά");
Database.addText("el.candyBoxThrowCandiesButton", "Ρίξε 10 ζαχαρωτά στο έδαφος");
Database.addText("el.mapVillageAHouseComment", "Ένα σπίτι");
Database.addText("el.mapVillageForgeComment", "Το σιδηρουργίο");
Database.addText("el.buttonBackToTheMap", "Πίσω στο χάρτη");
Database.addText("el.mapSorceressHutComment", "Η καλύβα του μάγου");
Database.addText("el.buttonBackToTheVillage", "Πίσω στο χωριό");
Database.addText("el.mapATreeIntroductionSpeech", "Γεια, είμαι ο Σκίουρος. Μπορώ να σου προσφέρω ζαχαρωτά και πολλά άλλα πράγματα. Το ξέρω ότι λατρεύεις τα ζαχαρωτά, αλλά νιώθω μόνος σε αυτό το δάσος.");
Database.addText("el.mapATreeIntroductionButton", "Πώς μπορώ να σε βοηθήσω;");
Database.addText("el.mapATreeFirstQuestion", "Θα σου κάνω ερωτήσεις. Αν απαντήεις σωστά στις ερωτήσεις θα ανταμειφθείς με τα πιο γλυκά ζαχαρωτα! Πρώτη : Σου αρέσουν πραγματικά τα ζαχαρωτά;(απάντηση στα αγγλικά)");
Database.addText("el.mapATreeSecondQuestion", "Σωστά! Ορίστε 20 ζαχαρωτά. Τώρα συμπλήρωσε αυτή την ακολουθία γρμμάτων και θα πάρεις ένα νέο βραβείο : S, E, I, D, N, A, ?");
Database.addText("el.mapATreeThirdQuestion", "Ζαχαρωτά! Ορίστε, 100 ζαχαρωτά για εσένα. Επόμενη ερώτηση : πόσα  ζαχαρωτά έχει ο πιο ζαχαρωτένιος άνθρωπος στον κόσμο;");
Database.addText("el.mapATreeFourthQuestion", "Να 500 ζαχαρωτά για εσένα! Το επόμενο βραβείο θα είναι ακόμα πιο ενδιαφέρον...  Να ο γρίφος : Σε ένα αρχαίο δάσος,μεγαλώνει ένα πολύ γέρικο δεντρο στο οποίο ζουν τα πιο εφυη ζώα σε αυτόν τον πλανήτη. Λένε ότι αυτό το δέντρο έχει 60 ρίζες, 360 κλαδιά και 2160 φύλλα. Πόσα σημάδια μπορείς να βρείς στον κορμό του;");
Database.addText("el.mapATreeFifthQuestion", "Συγχαρητήρια! Μιλούσα για αυτό δεντρο, πράγματι. Ορίστε 3 γλειφιτζούρια. Χρησιμοποίησέ τα σωστά! Επόμενος γρίφος, άκου προσεκτικά : Όταν είναι πανσέληνος, ρίχνω ένα κίτρινο καπέλο στην κόκκινη θάλασσα. Τι συμβαίνει στο κίτρινο καπέλο;");
Database.addText("el.mapATreeTicTacToeIntro", "Σωστή απάντηση! Δεν ήταν και πολύ δύσκολο. Να 3 σοκολάτες για εσένα! Για το επόμενο βραβείο θα αλλάξουμε τους κανόνες λίγο. Θα πρέπει να παίξεις ένα παιχνίδι μαζί μου! Είσαι έτοιμος;");
Database.addText("el.mapATreeTicTacToeIntroButton", "Είμαι!");
Database.addText("el.mapATreeTicTacToeLetsPlay", "Το παιχνίδι είναι τρίλιζα. Θα παίξουμε σε ένα 3x3 δάπεδο. Θα χρησιμοποιείς τα σημάδια Χ, ενώ εγω τα σημάδια Ο. Τοποθετούμε τα σημάδια μας εναλλάξ και ο σκοπός είναι να βάλουμε 3 σημάδια στη σειρα. Θα σε αφήσω να ξεκινήσεις πρώτος!");
Database.addText("el.mapATreeTicTacToeNobodyWins", "Το δάπεδο έχει γεμίσει και κανένας μας δεν έβαλε 3 στη σειρά : δεν κερδίζει κανένας! Θέλεις να δοκιμάσεις ξανά;");
Database.addText("el.mapATreeTicTacToeYouLose", "Έβαλε 3 στη σειρά! Κέρδισα. Θέλεις να δοκιμάσεις ξανά;");
Database.addText("el.mapATreeTicTacToeTryAgainButton", "Ναι, θέλω!");
Database.addText("el.mapATreeTicTacToeYouWin", "Οο, αυτό ήταν και αν ήταν μια απρόβλεπτη κίνηση. Αλλά έβαλες 3 στη σειρά, δεν μπορώ να διαφονήσω. Κέρδισες! Πάρε αυτό το κλειδί! Είναι για ένα από τα σπίτια στο χωριό κάτω από το δάσος.");
Database.addText("el.mapATreeTicTacToeAnymoreSweet", "Ευχαριστώ σκίουρε! Καμία άλλη δοκιμασία;");
Database.addText("el.mapATreeNoMoreChallenge", "Δυστηχώς όχι, δεν έχω άλλες προκλήσεις για εσένα. Το να παίξω μαζί σου είχε πολύ πλάκα, ευχαριστώ!");
Database.addText("el.buttonExitQuestKeeping", "Βγες από την αποστολή (και κράτησε ό,τι βρήκες)");
Database.addText("el.buttonExitQuestNoKeeping", "Βγες από την αποστολή (δεν θα κρατήσεις αυτά που βρήκες)");
Database.addText("el.buttonExitQuestNoKeepingBecauseLose", "Βγες από την αποστολή (δεν θα κρατήσεις αυτά που βρήκες επειδή απέτυχες.)");
Database.addText("el.mapVillageLockedHouseComment", "Ένα κλειδωμένο σπιτι");
Database.addText("el.mapVillageForgeIntroductionSpeech", "Γειά, είμαι ο σιδηρουργος! Μπορώ να σου πουλήσω διάφορα όπλα και εξοπλισμό.");
Database.addText("el.mapVillageForgeIntroductionSpeechNoMoreToSell", "Γειά, είμαι ο σιδηρουργος. Δυστηχώς, δεν έχω τίποτα άλλο να πουλήσω. Έλα αργότερα ίσως.");
Database.addText("el.mapVillageFifthHouseNoWeaponSpeech", "Γεια. Το κελάρι μου είναι γεμάτο αρουραίους, πρέπει να τους ξεφορτωθώ... αν μόνο υπήρχει κάποιος με ένα όπλο για να με βοηθήσει...");
Database.addText("el.mapVillageFifthHouseWeaponSpeech", "Εε, εσυ! Βλέπω πως έχεις ένα όπλο! Αν σκοτώσεις τους αρουραίους που τριγυρνούν το κελάρι θα σε ανταμείψω!");
Database.addText("el.mapVillageFifthHouseAgree", "Πάμε τότε!");
Database.addText("el.mapVillageFifthHouseCellarDone", "Σε ευχαριστώ που τους ξεφορτώθηκες! Ορίστε κάτι πολύ πολύτιμο για ανταμειβή : ένας χάρτης του κόσμου. Πιστεύω πως θα τον χρησιμοποιήσεις περισσότερο απ'ότι εγώ.");
Database.addText("el.mapVillageTheShopComment", "Το μαγαζί");
Database.addText("el.mapBridgeComment", "Η γέφυρα");
Database.addText("el.mapFarmComment", "Η φάρμα γλειφυτζουριών");
Database.addText("el.mapCaveEntranceComment", "Η είσοδος της σπυλιάς");
Database.addText("el.mapLighthouseComment", "Ο φάρος");
Database.addText("el.mapPierComment", "Το λιμάνι");
Database.addText("el.mapTheHoleComment", "Η Τρύπα");
Database.addText("el.candyBoxRequestStatusBarUnlocked", "Ζήτησε ένα νέο χαρακτηριστικό από τον δημιουργό (30 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedCfg", "Ζήτησε ακόμα ένα (5 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedSave", "Ζήτα για ακόμα μια φορά(5 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedHealthBar", "Ζήτα κάτι πιο συναρπαστικό (5 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedMap", "Τελευταίο αίτημα! Αυτό πρέπει να κοστίζει πολλά ζαχαρωτά. (10 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedComment", "Ξεκλείδωσες μια μπάρα κατάστασης! (από πάνω)");
Database.addText("el.candyBoxRequestStatusBarUnlockedCfgComment1", "Τώρα έχεις πρόσβαση στη καρτέλα ρυθμίσεων");
Database.addText("el.candyBoxRequestStatusBarUnlockedCfgComment2", "Μπορείς να αλλάξεις τη γλώσσα, αν θέλεις.");
Database.addText("el.candyBoxRequestStatusBarUnlockedSaveComment", "Μία άγρια καρτέλα αποθήκευσης εμφανίστηκε!");
Database.addText("el.candyBoxRequestStatusBarUnlockedHealthBarComment", "Ορίστε 100 πόντοι ζωής. Θα ειναι χρήσιμοι.");
Database.addText("el.cfgChooseLanguage", "Διάλεξε γλώσσα :");
Database.addText("el.cfgInvertColors", "Αντιστροφή χρωμάτων;");
Database.addText("el.gridItemMainMapName", "Ο Χάρτης");
Database.addText("el.gridItemMainMapDescription", "Χάρτης του κόσμου");
Database.addText("el.gridItemPogoStickName", "Καλάμι πηδήματος");
Database.addText("el.gridItemPogoStickDescription", "Αυτό το αντικείμενου σου επιτρέπει να αναπηδάς στις αποστολές!");
Database.addText("el.gridItemTimeRingName", "Ένα δαχτηλίδι χρόνου");
Database.addText("el.gridItemTimeRingDescription", "Αυτό το αντικείμενο σου δίνει μια νέα δυνατότητα στις αποστολές : μπορείς να επιβραδύνεις το χρόνο. Αν τα πράγματα συμβαίνουν υπερβολικά γρήγορα για εσένα, χρησιμοποίησε το δαχτυλίδι χρόνου σου!");
Database.addText("el.gridItemThirdHouseKeyName", "Το τρίτο κλειδί σπιτιού");
Database.addText("el.gridItemThirdHouseKeyDescription", "Αυτό το κλειδί σου επιτρέπει να μπείς στο τρίτο σπίτι του χωριού.");
Database.addText("el.gridItemFeatherName", "Ένα φρερό πουλιού της ερήμου");
Database.addText("el.gridItemFeatherDescription", "Το μαγικό φτερό σου επιτρέπει να αναμηδάς ψηλότερα όταν χρησιμοποιείς το Καλάμι Πηδήματος!");
Database.addText("el.gridItemFeatherDescriptionNoPogoStick", "Για έναν ανεξήγητο λόγο, νιώθεις ότι αυτό το φτερό θα ήταν χρήσιμο άμα είχες ένα καλάμι πηδήματος...");
Database.addText("el.gridItemSpongeName", "Ένα μαγικό σφουγγάρι");
Database.addText("el.gridItemSpongeDescription", "Αυτό το μαγικό σφουγγάρι σου επιτρέπει να ζουλάς τον εαυτό σου σαν σπόγκο έτσι ώστε να μικρήνει το μέγεθός σου.");
Database.addText("el.gridItemFortressKeyName", "Το κλειδί του κάστρου της ερήμου");
Database.addText("el.gridItemFortressKeyDescription", "Αυτό το κλειδί σου επιτρέπει να μπεις στο αρχαίο κάστρο πάνω από την έρημο. Ποιός ξέρει τι θα μπορούσες να βρείς εκεί;");
Database.addText("el.gridItemHeartPendantName", "Ένα κολιέ καρδιάς");
Database.addText("el.gridItemHeartPendantDescription", "Αυτό το κολιέ καρδιάς θα αυξήσει τους πόντους ζωής σου εφόσων το φοράς στο λαιμό σου.");
Database.addText("el.gridItemHeartPlugName", "Ένα βήσμα καρδιάς");
Database.addText("el.gridItemHeartPlugDescription", "Αυτό το βήσμα καρδιάς, φτιαγμένο με σίδερο, πόδια αράχνης και ένα ιδιαίτερο \"υγρό καρδιάς\" κλεισμένο στο κέντρο, θα αυξήσει τους πόντους ζωής σου κατά 20 τοις εκατό!");
Database.addText("el.gridItemBeginnersGrimoireName", "Το μαγικό βιβλίο του πρωτάρη");
Database.addText("el.gridItemBeginnersGrimoireDescription", "Αυτό το μαγικό βιβλίο σου προσφέρει τρία ξόρκια, εύκολα να εκτελεστούν. Είναι πραγματικά φτιαγμένο για πρωτάρηδες. Θα έχεις την δυνατότητα να χρησιμοποιήσεις το ξόρκι όξινης βροχής (μια μεγάλη ποσότητα από οξυ θα πέσει στους εχθρους σου), το ξόρκι φλόγινης μπάλας (μία γιγάντια μαγική μπάλα φτιαγμένη από φωτιά θα πετάξει προς τους εχθρούς σου) και το ξόρκι τηλεμεταφοράς (το οποίο θα σε τηλεμεταφέρει σε μία μη προβλέψιμη τοποθεσία)");
Database.addText("el.gridItemAdvancedGrimoireName", "Το ανώτερο μαγικό βιβλίο");
Database.addText("el.gridItemAdvancedGrimoireDescription", "Αυτό το ανώτερο μαγικό βιβλίο σου προσφέρει δύο ξόρκια : το διαγραφή μαγείας ξόρκι και το ξόρκι αγκαθωτής ασπίδας. Το πρώτο θα διαγράψει όλη τη μαγεία από μία αποστολή σε μία φάση, συμπεριλαμβανομένων όλων των ξώρκιων που εκτέλεσες και τη μαγεία των εχθρών σου. Το δεύτερο θα δημιουργήσει γύρω σου μια ασπίδα από αιωρούμενα αγκάθια η οποία θα προκαλεί ζημιά στους εχθρούς σου, όταν έρχονται σε επαφή με αυτήν.");
Database.addText("el.gridItemBlackMagicGrimoireName", "Το μαύρο μαγικό βιβλίο");
Database.addText("el.gridItemBlackMagicGrimoireDescription", "Βρήκες αυτό το μαγικό βιβλίο σε μία σπυλιά, ήταν πολύ δύσκολο να το πάρεις, για κάποιο λόγο.  Σου προσφέρει δύο δυνατά ξόρκια μαύρης μαγείας. Το πρώτο θα δημιουργήει μπροστά σου έναν γιγάντιο τοίχο φτιαγμένο από τούβλα οψιδιανού, ο οποίος μπορεί να είναι χρήσιμος στο να κάνεις τους αντιπάλους σου πιο αργούς. Το δεύτερο θα καλέσει ένα κοπάδι από δαίμονες οι οποίοι θα επιτίθονται σε όλους στην αποστολή, συμπεριλαμβανομένου και εσένα. Να είσαι προσεχτικός με αυτό.");
Database.addText("el.gridItemUnicornHornName", "Ένα κέρατο μονόκερου");
Database.addText("el.gridItemUnicornHornDescription", "Αυτό το μαγικό κέρατο άνηκε σε έναν μονόκερο.  Οι δυνατές θεραπευτικές δυνάμεις του, θα σε βοηθήσουν πολύ. Άκουσες πως ο μονόκερος ονομαζόταν Charlie.");
Database.addText("el.gridItemXinopherydonClawName", "Μία δαγκάνα xinopherydon");
Database.addText("el.gridItemXinopherydonClawDescription", "Αυτή η δαγκάνα άνηκε σε ένα xinopherydon, ένα αρχαίο δικέφαλο ζώο που όλοι πιστεύουν πως έχει εξαφανιστεί. Θα διπλασιάσει την ζημιά που ασλεί το όπλο που χρησιμοποιείς.");
Database.addText("el.gridItemPitchforkName", "Ένα δίκρανο");
Database.addText("el.gridItemPitchforkDescription", "Αυτό το ιδιαίτερο δίκρανο σου επιτρέπει να λυάνεις το χώμα χωρίς να χρειάζεται να το αναποδογηρήσεις, ως εκ τούτου, διατηρείς υπόγεια οικσυστήματα χώματος. Θα τριπλασιάσει την παραγωγή γλυφειτζουριών σου.");
Database.addText("el.gridItemShellPowderName", "Σκόνη κοχυλιού");
Database.addText("el.gridItemShellPowderDescription", "Η σκόνη κοχυλιού συχνά χρησιμοποιήτε από αγρότες για να βελτιώσει την ανάπτυξη των γλυφειτζουριών τους. Αυτή η σκόνη θα πολλαπλασιάσει την παραγωγή γλειφυτζουριών σου κατά τρία!");
Database.addText("el.gridItemPName", "Η πέτρα P");
Database.addText("el.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("el.gridItemLName", "Η πέτρα L");
Database.addText("el.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("el.gridItemAName", "Η πέτρα Α");
Database.addText("el.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("el.gridItemYName", "Η πέτρα Υ");
Database.addText("el.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("el.gridItemRedSharkFinName", "Ένα μαγικό κόκκινο πτερύγιο καρχαρία");
Database.addText("el.gridItemRedSharkFinDescription", "Αυτό το μαγικό πτερύγιο θα αυξήσει σε μεγάλο βαθμό την ζημιά που ασκεί το ξόρκι φλόγινης σφαίρας σου. Επιτέλους, αυτή η φλόγινη σφαίρα θα γίνει χρήσιμη.");
Database.addText("el.gridItemGreenSharkFinName", "Ένα μαγικό πράσινο πτερύγιο καρχαρία");
Database.addText("el.gridItemGreenSharkFinDescription", "Αυτό το μαγικό πτερύγιο θα φέρει τη δύναμη της φύσεως στη φάρμα γλειφυτζουριών σου! Η παραγωγικότητά σου θα πολλαπλασιαστει κατά 5.");
Database.addText("el.gridItemPurpleSharkFinName", "Ένα μαγικό μωβ πτερύγιο καρχαρία");
Database.addText("el.gridItemPurpleSharkFinDescription", "Αυτό το μαγικό πτερύγιο θα σου προσφέρει ένα νέπ ξόρκι μαύρης μαγείας. Μπορείς να το χρησιμοποιήσεις μόνο μία φορά σε κάθε περιπέτεια. Πρόσεχε με αυτο!");
Database.addText("el.gridItemTalkingCandyName", "Ένα ομιλούντο ζαχαρωτό");
Database.addText("el.gridItemTalkingCandyDescription", "Αυτό το ομιλούντο ζαχαρωτό εμφανίστηκε αφού έβαλες τις τέσσερις πέτρες στην κορυφή του κάστρου. Μπορεί να σε βοηθήσει να ανοίξεις το candy box...");
Database.addText("el.inventorySpecialNothingEqItem", "Τίποτα");
Database.addText("el.eqItemWeaponWoodenSwordName", "Ξύλινο σπαθί");
Database.addText("el.eqItemWeaponWoodenSwordDescription", "Ένα απλό σπαθί φτιαγμένο από ξύλο");
Database.addText("el.eqItemWeaponIronAxeName", "Σιδερένιο τσεκούρι");
Database.addText("el.eqItemWeaponIronAxeDescription", "Ένα απλό σιδερένιο τσεκούρι. Καλά ακονισμένο. Πιο δυνατό από το ξύλινο σπαθί.");
Database.addText("el.eqItemWeaponPolishedSilverSwordName", "Γυαλισμένο ασημένιο σπαθί");
Database.addText("el.eqItemWeaponPolishedSilverSwordDescription", "Ένα δυνατό σπαθί καλυμένο με αγκάθια.");
Database.addText("el.eqItemWeaponTrollBludgeonName", "Το ρόπαλο του Troll");
Database.addText("el.eqItemWeaponTrollBludgeonDescription", "Πήρες αυτό το ρόπαλο από το troll που προστάτευε τη γέφυρα. Είναι αργό, αλλά λιώνει τους εχθρούς σου αρκετά αποτελεσματικά.");
Database.addText("el.eqItemWeaponTribalSpearName", "Ένα δόρι της φυλής");
Database.addText("el.eqItemWeaponTribalSpearDescription", "Βρήκες αυτό το δόρι στο πτώμα ενός μαχητή της φυλής που ήταν χαμένος σε μία μεγάλη τρύπα στο έδαφος. Έιναι λίγο σύσκολο να το χειριστείς στην αρχή, αλλά μόλις το συνηθήσεις, είναι ένα καλό όπλο.");
Database.addText("el.eqItemWeaponSummoningTribalSpearName", "Ένα κλητευτικό δόρι της φυλής");
Database.addText("el.eqItemWeaponSummoningTribalSpearDescription", "Αυτό το μαγικό δόρι φυλής, πέρα του ότι είναι πιο δυνατό από το κανονικό δόρι φυλής, θα εμφανίζει συχνά μαχητές φυλής οι οποίοι θα σε βοηθήσουν κατά τη διάρκει τψν αποστολών σου.");
Database.addText("el.eqItemWeaponMonkeyWizardStaffName", "Το ραβδί του βασιλιά μαΪμού");
Database.addText("el.eqItemWeaponMonkeyWizardStaffDescription", "Αυτό το ραβδί άνηκε στον γυμνο βασιλιά μαϊμού που βρήκες στη σπηλιά. Εκτελεί συχνά ξώρκια μόνο του, με στόχο τους εχθρούς σου.");
Database.addText("el.eqItemWeaponEnchantedMonkeyWizardStaffName", "Το ραβδί του βασιλιά μαΪμού (μαγεμένο)");
Database.addText("el.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Αυτό το ραβδί είναι πιο γρήγορο από τη μη-μαγεμένη εκδοχή και εκτελεί πιο πολλά ξόρκια.");
Database.addText("el.eqItemWeaponGiantSpoonName", "Ένα γιγάντιο κουτάλι");
Database.addText("el.eqItemWeaponGiantSpoonDescription", "Αυτό το γιγάντιο κουτάλι βρισκόταν σε μία γιγάντια κούπα τσαγιού στο κάστρο της ερήμου. Δεν ξέρεις αν κάποιος το χρησιμοποίησε ποτέ σαν κουτάλι, αν ναι, πρέπει να ήταν κάποιος πολύ μεγάλος. Δεν θέλεις μάλλον να τον γνωρίσεις.");
Database.addText("el.eqItemWeaponGiantSpoonOfDoomName", "Το γιγάντιο Κουτάλι της Καταδίκης");
Database.addText("el.eqItemWeaponGiantSpoonOfDoomDescription", "Αυτό το γιγάντιο κουτάλι είναι ακόμα πιο δυνατό από το κανονικό γιγάντιο κουτάλι που μπορεις να βρεις σε μία κούπα τσαγιού. Είναι αρκετά αργό βέβαια.");
Database.addText("el.eqItemWeaponScytheName", "Ένα δρεπάνι");
Database.addText("el.eqItemWeaponScytheDescription", "Λένε πως αυτό το δρεπάνι άνηκε στον Χάρο αυτοπροσώπος. Είναι εξαιρετικά γρήγορο.");
Database.addText("el.eqItemHatMerchantHatName", "Το καπέλο του πωλητή");
Database.addText("el.eqItemHatMerchantHatDescription", "Αυτό το καπέλο σου πωλήθηκε από τον πωλητή ζαχαρωτών. Ο πωλητής ζαχαρωτών λατρεύει τα ζαχαρωτά. Αυτό το καπέλο θα πολλαπλασιάζει κατά 7 τα ζαχαρωτά που βρίσκεις στις αποστολές!");
Database.addText("el.eqItemHatSorceressHatName", "Το καπέλο της μάγισσας");
Database.addText("el.eqItemHatSorceressHatDescription", "Αυτό το καπέλο σου πωλήθηκε από την μάγισσα. It will enhance the effects of your spells and potions.");
Database.addText("el.eqItemHatOctopusKingCrownName", "Η κορόνα του βασιλιά Χταποδιού");
Database.addText("el.eqItemHatOctopusKingCrownDescription", "Όταν φοράς αυτή την κορόνα έχεις πιο πολύ αυτοπεποίθηση. Δεν δίνει κανένα πλεονέκτημα στις αποστολές αλλα η αυτοπεποίθηση είναι σημαντική. It doesn't give any advantage in quests, but self-confidence is important!");
Database.addText("el.eqItemHatOctopusKingCrownWithJaspersName", "Η κορόνα του βασιλιά Χταποδιού με πολύτιμους λίθους");
Database.addText("el.eqItemHatOctopusKingCrownWithJaspersDescription", "Αυτή η μαγεμένη κορόνα είναι φτιαγμένη από χρυσό και κόκκινους πολύτιμους λίθους. Σε αποστολές, θα εκτοξεύει συχνά δυνατές μαγικές μπάλες φωτιάς γύρω σου. Και επίσης, λάμπει!");
Database.addText("el.eqItemHatOctopusKingCrownWithObsidianName", "Η κορόνα του βασιλιά Χταποδιού με οψιδιανό");
Database.addText("el.eqItemHatOctopusKingCrownWithObsidianDescription", "Αυτή η μαγεμένη κορόνα είναι φτιαγμένη από χρυσό και οψιδιανό. Είναι πανέμορφη. Σε αποστολές, θα εμφανίζει ένα Βασιλιά Χταπόδι ο οποίος θα μάχεται στο πλευρό σου που. Τι πλοκαμίσιος σύμμαχος!");
Database.addText("el.eqItemGlovesLeatherGlovesName", "Μάλλινα γάντια");
Database.addText("el.eqItemGlovesLeatherGlovesDescription", "Αυτά τα γάντια δεν κάνουν βασικά τίποτα. Άλλα τουλάχιστον είναι μαλακά και άνετα!");
Database.addText("el.eqItemGlovesRedEnchantedGlovesName", "Κόκκινα Μαγεμένα Γάντια");
Database.addText("el.eqItemGlovesRedEnchantedGlovesDescription", "Αυτά τα μαγεμένα γάντια παράγουν ένα απαλό κόκκινο φως όταν είναι σκοτεινά γύρω σου. Σε αποστολές, τυχαία θα εκτοξεύουν πύρινες μπάλες πρως τους εχθρούς σου, το οποίο σίγουρα θα είναι χρήσιμο.");
Database.addText("el.eqItemGlovesPinkEnchantedGlovesName", "Ρόζ μαγεμένα γάντια");
Database.addText("el.eqItemGlovesPinkEnchantedGlovesDescription", "Αυτά τα μαγεμένα γάντια αφήνουν ένα ροζ σημάδι σε ό,τι αγκίζεις. Στις αποστολές, θα σου δίνουν ζωή συνεχώς.");
Database.addText("el.eqItemBootsRocketBootsName", "Μπότες Πυραύλων");
Database.addText("el.eqItemBootsRocketBootsDescription", "Αυτές οι καταπληκτικές μπότες πυραύλων σου επιτρέπουν να πηδάς ενώ βρίσκεσαι στον αέρα, οπότε είναι σαν να πετάς!");
Database.addText("el.eqItemBootsLeatherBootsName", "Μάλλινες Μπότες");
Database.addText("el.eqItemBootsLeatherBootsDescription", "Απλές μάλλινες μπότες. Τίποτα ιδιαίτερο σχετικά με αυτές.");
Database.addText("el.eqItemBootsBootsOfIntrospectionName", "Μπότες της αυτοεξέτασης");
Database.addText("el.eqItemBootsBootsOfIntrospectionDescription", "Ανάπνευσε και ηρέμησε. Αν φοράς αυτές τις μπότες, δεν θα κινήσαι ποτέ αρκεί να ακουμπάς το πάτομα.");
Database.addText("el.eqItemBodyArmoursLightweightBodyArmourName", "Μία ελαφριά πανοπλία");
Database.addText("el.eqItemBodyArmoursLightweightBodyArmourDescription", "Αυτή η πανοπλία θα σου προσφέρει λίγη προστασία. Θα αντέχεις λίγο παραπάνω απέναντι σε εχθρικές επιθέσεις.");
Database.addText("el.eqItemBodyArmoursKnightBodyArmourName", "Μία πανοπλία ιππότη");
Database.addText("el.eqItemBodyArmoursKnightBodyArmourDescription", "Αυτή η δυνατή πανοπλία θα σε προστατέψει. Θα αντέχεις παραπάνω απέναντι σε εχθρικές επιθέσεις.");
Database.addText("el.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Μία μαγεμένη πανοπλία ιππότη");
Database.addText("el.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Αυτή η πανοπλία είναι πολύ ιδιαίτερη. Θα αντέχεις ΠΟΛΥ παραπανω απέναντι σε εχθρικές απιθέσεις, αλλά η ζημιά που κάνει το όπλο σου θα διαιρεθεί δια δύο.");
Database.addText("el.mapVillageForgeBuyWoodenSwordButton", "Αγόρασε ένα ξύλινο σπαθί (150 ζαχαρωτά)");
Database.addText("el.mapVillageForgeBuyWoodenSwordSpeech", "Ευχαριστώ για την αγορά! Αυτό το ξύλινο σπαθί είναι αρκετά αδύναμο, αλλα είναι μια αρχή.");
Database.addText("el.mapVillageForgeBuyIronAxeButton", "Αγόρασε ένα σιδερένιο τσεκούρι (400 ζαχαρωτά)");
Database.addText("el.mapVillageForgeBuyIronAxeSpeech", "Ελπίζω να σου αρέσει αυτό το σιδερένιο τσεκούρι. Μόλις σου το ακόνισα!");
Database.addText("el.mapVillageForgeBuyPolishedSilverSwordButton", "Αγόρασε ενα ακονισμένο ασιμένιο σπαθί (2 000 ζαχαρωτά)");
Database.addText("el.mapVillageForgeBuyPolishedSilverSwordSpeech", "Μου πήρε πολύ καιρό να φτιάξω αυτό το σπαθίIt took me a lot of time to create this sword. I assure you that it's worth its price.");
Database.addText("el.mapVillageForgeBuyLightweightBodyArmourButton", "Αγόρασε μία ελαφριά πανοπλία σώματος (15 000 ζαχαρωτά)");
Database.addText("el.mapVillageForgeBuyLightweightBodyArmourSpeech", "Αυτή η πανοπλία σώματος θα σου προσφέρει προστασία απέναντι στους εχθρούς σου.");
Database.addText("el.mapVillageForgeBuyScytheButton", "Αγόρασε ένα δρεπάνι (5 000 000 ζαχαρωτά)");
Database.addText("el.mapVillageForgeBuyScytheSpeech", "Μου πήρε αρκετούς μήνες να φτιάξω αυτό το δρεπάνι. Είναι ενα πραγματικό έργο τέχνης. Αυτό είναι μάλλον το γρηγορότερο όπλο που θα μπορέσεις να χρησιμοποιήσεις. Καλή τύχη!");
Database.addText("el.wishingWellThrowFirstCandyButton", "Πέτα ένα ζαχαρωτό μέσα στο πηγάδι.");
Database.addText("el.wishingWellCandyIntroductionSpeech", "Γεια σου, περιπλνώμενε! Είμαι το πηγάδι των ευχών. Θα σου εκπληρώσω ευχές με αντάλαγμα μερικά γλυκά! Όταν πετάξεις ζαχαρωτά μέσα μου θα θεραπεύσω τα τραύματά σου.");
Database.addText("el.wishingWellThrewCandiesSpeech", "Τα τραύματά σου θεραπεύτηκαν!");
Database.addText("el.wishingWellNoWoundSpeech", "Δεν έχεις τραύματα για θεραπεία!");
Database.addText("el.wishingWellThrowFirstLollipopButton", "Πέτα ένα γλειφιτζούρι στο πηγάδι");
Database.addText("el.wishingWellLollipopIntroductionSpeech", "Γεια σου, περιπλνώμενε! Είμαι το πηγάδι των ευχών. Θα σου εκπληρώσω ευχές με αντάλαγμα μερικά γλυκά! Όταν πετάξεις γλειφιτζούρια μέσα μου θα τα μετατρέψω σε ζαχαρωτά.");
Database.addText("el.wishingWellThrewLollipopsSpeech", "Τα γλειφιτζούρια σου μετατράπηκαν σε ζαχαρωτα! Δύο γλειφιτζούρια για ένα ζαχαρωτό.");
Database.addText("el.wishingWellThrowChocolateBarButton", "Πέτα μία μπάρα σοκολάτας μέσα στο πηγάδι");
Database.addText("el.wishingWellChocolateBarIntroductionSpeech", "Γεια σου, περιπλνώμενε! Είμαι το πηγάδι των ευχών. Θα σου εκπληρώσω ευχές με αντάλαγμα μερικά γλυκά! Λατρεύω τις μπάρες σοκολάτας. Πραγματικά τις λατρεύω. Για κάθε μπάρα σοκολάτας που ρίχνεις μέσα μου, συμπεριλαμβανόμενης και αυτής, θα σου χαρίσω ένα μάγεμα για ένα αντικείμενό σου.");
Database.addText("el.wishingWellThrewChocolateBarSpeech", "Ποιο αντικείμενο θα ήθελες να μαγέψεις;");
Database.addText("el.wishingWellThrowPainAuChocolatButton", "Πέτα ένα pain au chocolat στο πηγάδι");
Database.addText("el.wishingWellPainAuChocolatIntroductionSpeech", "Γεια σου, περιπλνώμενε! Είμαι το πηγάδι των ευχών. Θα σου εκπληρώσω ευχές με αντάλαγμα μερικά γλυκά! Όταν πετάξεις ένα pain au schocolat μέσα μου, θα σου δωθεί ένα πολύ ιδιαίτερο δώρο. Διάλεξε προσεκτικά.");
Database.addText("el.wishingWellThrewPainAuChocolatSpeech", "Ευχαριστώ για το pain au chocolat! Μπορείς τώρα να διαλέξεις το δώρο σου.");
Database.addText("el.wishingWellChooseGift", "Διάλεξε το δώρο σου!");
Database.addText("el.wishingWellChooseGiftButton", "Διάλεξε");
Database.addText("el.wishingWellGiftDoneSpeech", "Έτοιμο! Τώρα μπορείς να έχεις ένα νέο δώρο. Θα εμφανιστεί στον πίνακα στατιστικών στι λίστα αντικεμένων σου.");
Database.addText("el.wishingWellNoPossibleEnchantment", "Κανένα δυνατό μάγεμα");
Database.addText("el.wishingWellChooseEnchantment", "Διάλεξε ένα μάγεμα");
Database.addText("el.wishingWellEnchantButton", "Μάγεψε");
Database.addText("el.wishingWellEnchantmentDoneSpeech", "Ορίστε! Το αντικείμενό σου είναι μαγεμένο.");
Database.addText("el.pierLighthouseButton", "Πήγαινε στο φάρο με βάρκα");
Database.addText("el.pierTheSeaButton", "Πήδα στη θάλασαα");
Database.addText("el.lonelyHouseOpenBox", "Άνοιξε το κουτί");
Database.addText("el.lonelyHouseShakeBox", "Κούνα το κουτί");
Database.addText("el.lonelyHouseBreakLock", "Σπάσε το κουτί");
Database.addText("el.lonelyHouseKickBox", "Κλώτσα το κουτί");
Database.addText("el.lonelyHouseAskTheBoxToOpenItself", "Ζήτα από το κουτί να ανοιχτεί");
Database.addText("el.lonelyHouseLureTheBoxWithACandy", "Δελέασε το κουτί με ένα ζαχαρωτό");
Database.addText("el.lonelyHouseTakeTheBox", "Πάρε το κουτί μαζί σου, μάλλον χρειάζεσε ένα κλειδί έτσι κι αλλιώς");
Database.addText("el.lonelyHouseOpenBoxResult", "Το κουτί είναι κλειδωμένο");
Database.addText("el.lonelyHouseShakeBoxResult", "Τίποτα δεν συμβαίνει");
Database.addText("el.lonelyHouseBreakLockResult", "Η κλειδαριά αντιστέκεται");
Database.addText("el.lonelyHouseKickBoxResult", "Το πόδι σου πονάει λίγο άλλα τίποτα δεν συμβαίνει");
Database.addText("el.lonelyHouseAskTheBoxToOpenItselfResult", "...το καταλαβαίνεις ότι μιλας σε ένα κουτι;");
Database.addText("el.lonelyHouseLureTheBoxWithACandyResult", "Το κουτί δεν φαίνεται να ενδιαφέρεται");
Database.addText("el.lonelyHouseTakeTheBoxResult", "Πρέπει να υπάρχει κάτι ενδιαφέρον σε αυτο το candy box.");
Database.addText("el.lollipopFarmConstructMill", "Χτίσε ένα μύλο (10 000 γλειφυτζούρια)");
Database.addText("el.lollipopFarmFeedMill", "Τάισε το μύλο");
Database.addText("el.lollipopFarmCurrentCandiesProduction", "Τωρινή παραγωγή ζαχαρωτών");
Database.addText("el.lollipopFarmDigPond", "Σκάψε μία λιμνούλα (100 000 γλειφυτζούρια)");
Database.addText("el.lollipopFarmBuyLolligator", "Αγόρασε έναν γλειφιγκάρορα (1200 ζαχαρωτά)");
Database.addText("el.lollipopFarmLolligatorsConversionText", "Μετατροπή ζαχαρωτά -> γλειφυτζούρια ενεργοποιημένη");
Database.addText("el.lighthouseAskButton", "Ρώτα");
Database.addText("el.lighthouseQuestionWho", "Ποιος είσαι;");
Database.addText("el.lighthouseQuestionWhoSpeech", "Είμαι ένας ηλικιωμένος κύκλωπας");
Database.addText("el.lighthouseQuestionWhat", "Τι κάνεις εδώ;");
Database.addText("el.lighthouseQuestionWhatSpeech", "Ζω εδώ όλη μέρα περιμένοντας μία βάρκα να έρθει. Είναι πολύς καιρός από τότε που είδα μία βάρκα, αλλά πρέπει να μείνω εδώ, κοιτόντας την θάλασσα, επειδή μια βάρκα μπορεί να έρθει.");
Database.addText("el.lighthouseQuestionWhyEatCandies", "Γιατί να έτρωγα ζαχαρωτά;");
Database.addText("el.lighthouseQuestionWhyEatCandiesSpeech", "Γιατί είναι καλά για την υγεία σου!");
Database.addText("el.lighthouseQuestionCandyBox", "Τι είναι ένα candy box;");
Database.addText("el.lighthouseQuestionCandyBoxSpeech", "Είναι ένα πολύ παλιό κουτί το οποίο λένε ότι περιέχει όλα τα ζαχαρωτά του κόσμου. Οι θρύλοι λένε ότι όποιος καταφέρει να το ανοίξει θα είχε τόσα πολλά ζαχαρώτα όπου οτιδήποτε θα ήταν δυνατόν.");
Database.addText("el.lighthouseQuestionDragon", "Ο δράκος μου είπε να έρθω εδώ επειδή θέλω ζαχαρωτά.");
Database.addText("el.lighthouseQuestionDragonSpeech", "Αα, κατάλαβα, Εγώ βέβαια δεν μπορώ να σε προμυθεύσω με ζαχαρωτά απευθείας, αλλά μπορώ να σου δώσω κάτι χρήσιμο το οποίο θα σε βοηθήσει να αποκτήσεις ΠΟΛΛΑ ζαχαρωτά. Απλώς πρέπει να σε τεστάρω πριν στο δώσω. Επειδή αυτό που έχω δεν μπορεί να δωθεί στον καθένα. Λύσε αυτόν το γρύφο και θα είναι δικό σου.");
Database.addText("el.lighthouseFoundStone", "Συγχαρητήρια! Πέρασες το τεστ και βρήκες την πέτρα. Είναι πολύ πολύτιμη, αλλά είναι χρήσιμη μόνο αν έχεις τρεις άλλες πέτρες σαν κι αυτή. Καλή τύχη!");
Database.addText("el.lighthouseFoundStoneAgain", "Καλή δουλειά, έλυσες το γρύφο κι'άλλη φόρα. Φαίνεται να σου αρέσει αυτό.");
Database.addText("el.saveLocalSaveTitle", "Αποθήκευση φυλομετρυτή");
Database.addText("el.saveLocalSaveWhy", "Διάλεξε τοπική αποθήκευση αν θες να συνεχίζεις να παίζεις στην τωρινή σου συσκευή ή φυλομετρητή.");
Database.addText("el.saveLocalSaveWarning0", "Ο φυλομετρητής σου δεν φαίνεται να υποστηρίζει HTML5.");
Database.addText("el.saveLocalSaveWarning1", "Καλύτερα να αναβαθμίσεις τον φυλομετρητή σου για να χρησιμοποιήσεις τη δυνατότηα τοπικής αποθήκευσης.");
Database.addText("el.saveLocalSaveChooseSlot", "Διάλεξε μια υποδοχή αποθήκευσης :");
Database.addText("el.saveLocalSaveAutosaveEnabled", "Αυτόματη αποθήκευση ενεργοποιημένη");
Database.addText("el.saveLocalSaveChooseWhatToDo", "Διάλεξε τι να κανεις:");
Database.addText("el.saveLocalSaveSaveButton", "Αποθήκευση");
Database.addText("el.saveLocalSaveAutosaveButton", "Αποθήκευση κάθε 10 λεπτά");
Database.addText("el.saveLocalSaveDisableAutosaveButton", "Αυτόματη αποθήκευση απενεργοποιημένη");
Database.addText("el.saveFileSaveTitle", "Αποθήκευση σε μορφή κειμένου");
Database.addText("el.saveFileSaveWhy0", "Διάλεξε την αποθήκευση σε μορφή κειμένου αν :");
Database.addText("el.saveFileSaveWhy1", "Θέλεις να συνεχίσεις σε μία διαφορετική συσκευή ή φυλομετρητή");
Database.addText("el.saveFileSaveWhy2", "Θέλεις να μοιραστείς την πρόοδο σου στο παιχνίδι με κάποιον άλλον");
Database.addText("el.saveFileSaveWhy3", "Για κάποιο λόγο θες να αδειάσεις τη μνήμη του φυλομετρητή σου");
Database.addText("el.saveFileSaveWhy4", "(κάτι το οποία θα διαγράψει τις τοπικές αποθηκεύσεις σου)");
Database.addText("el.saveFileSaveButton", "Πάρε το τωρινό παιχνίδι σε μορφή κειμένου");
Database.addText("el.saveFileSaveWarning", "Τώρα αντέγραψε το κείμενο αυτό κάπου! (σε ένα αρχείο για παράδειγμα)");
Database.addText("el.saveLocalLoadTitle", "Φόρτωση από φυλομετρητή");
Database.addText("el.saveLocalLoadYouCan", "Μπορείς να φορτώσεις μία τοπική αποθήκευση χρησιμοποιώντας έναν από τους παρακάτω συνδέσμους :");
Database.addText("el.saveLocalLoadThanksTo", "Χάρης στη μαγεία του HTML5, θα μπορείς να χρησιμοποιήσεις αυτούς τους συνδέσμους ακόμα και χωρίς σύνδεση στο ιντερνετ.");
Database.addText("el.saveFileLoadTitle", "Φόρτωση παιχνιδιού σε μορφή κειμένου");
Database.addText("el.saveFileLoadPaste", "Επικόλλησε την αποθήκευση σου παρακάτω και κάνε κλικ στο κουμοί \"Φόρτωση\"");
Database.addText("el.saveFileLoadButton", "Φόρτωση");
Database.addText("el.mountainsText0", "Διέκρινες κάτι στα βουνά!");
Database.addText("el.mountainsText1", "Φαίνεται ενδιαφέρον. Μπορεί να είναι χρήσιμο.");
Database.addText("el.mountainsTextButton", "Ανέβα στα βουνά για να πάρεις το πράγμα");
Database.addText("el.mountainsTextAfter", "Βρήκες ένα καλάμι πηδήματος!");
Database.addText("el.secondHouseIntroSpeech", "Γεια, είμαι ο έμπορος ζαχαρωτών. Θα έκανα τα πάντα για ζαχαρωτά. Τι χρειάζεσαι;");
Database.addText("el.secondHouseLollipop1Speech", "Αυτό είναι ένα γλειφυτζούρι με γεύση λεμόνι. Το αγαπημένο μου! Κοστίζει 60 ζαχαρωτά, αλλά αξίζει.");
Database.addText("el.secondHouseLollipop2Speech", "Αυτό είναι ένα γλειφυτζούρι με γεύση φράουλα. Έχει ωραία γεύση. Μου αρέσει το κόκκινο χρώμα του. Μόνο 60 ζαχαρωτά!");
Database.addText("el.secondHouseLollipop3Speech", "Αυτό είναι ένα γέιφυτζούρι με γεύση κολοκύθα. Πάω στοιχήμα πως δεν έχεις δοκιμάσει ποτέ! 60 ζαχαρωτά καιείναι δικό σου.");
Database.addText("el.secondHouseLollipopButtonText", "Αγόρασε αυτό το γλειφυτζούρι. (60 ζαχαρωτά)");
Database.addText("el.secondHouseMerchantHatSpeech", "Θα μπορούσα να σου πουλήσω το καπέλο μου, αλλά είναι πολύ πολύτιμο, ξέρεις... Θα πρέπει να μου δώσεις πολλά ζαχαρωτά για να το πάρεις. Ας πούμε ένα εκατομύριο ζαχαρωτά. Ακούγεται δίκαιο, έτσι;");
Database.addText("el.secondHouseMerchantHatButtonText", "Αγόρασε το καπέλο του εμπόρου. ( 1 000 000 ζαχαρωτά)");
Database.addText("el.secondHouseTimeRingSpeech", "Αυτό είναι το δαχτυλίδι του χρόνου. Είναι κάπως μαγικό. Σου επιτρέπει να κάνεις το χρόνο να κυλά πιο αργά όταν βρίσκεσαι σε κίνδυνο.");
Database.addText("el.secondHouseTimeRingButtonText", "Αγόρασε το δαχτυλίδι του χρόνου (500 ζαχαρωτά)");
Database.addText("el.secondHouseLeatherGlovesSpeech", "Αυτά τα μάλλινα γάντια είναι φτιαγμένα από δέρμα καμήλας, αυτό είναι υψυλής ποιότητας. Έχω πολλά σε διαθεσιμότητα, γι'αυτό είναι τόσο φθηνά: μόνο 300 ζαχαρωτά!");
Database.addText("el.secondHouseLeatherBootsButtonText", "Αγόρασε ένα ζευγάρι μάλλινες μπότες (300 ζαχαρωτά)");
Database.addText("el.secondHouseLeatherBootsSpeech", "Αυτές οι υψυλής ποιότητας μάλλινες μπότες, φτιαγμένες από δέρμα καμήλας, θα κρατήσουν τα πόδια σου ζεστά.");
Database.addText("el.secondHouseLeatherGlovesButtonText", "Αγόρασε ένα ζευγάρι μάλλινα γάντια. (300 ζαχαρωτά)");
Database.addText("el.secondHouseChocolateBarSpeech", "Αυτή είναι μια μπάρα σοκολάτας. Δεν ξέρω για τί χρησιμοποιήτε, αλλά είναι αρκετά σπάνια, κάτι το οποίο εξηγεί την τιμή. 800 ζαχαρωτά και είναι δική σου!");
Database.addText("el.secondHouseChocolateBarButtonText", "Αγόρασε την μπάρα σοκολάτας (800 ζαχαρωτά)");
Database.addText("el.outsideTheHoleButton", "Πήδα σε αυτήν τη μεγάλη τρύπα στο έδαφος");
Database.addText("el.theCaveExitText0", "Τελικά έφτασες στην έξοδο της σπηλιάς.");
Database.addText("el.theCaveExitText1", "Μπορείς να δεις ένα μεγάλο δάσος έξω από εδώ.");
Database.addText("el.theCaveExitButtonText", "Βγές από την σπηλιά");
Database.addText("el.theCaveFirstSentenceWentStraight", "Προχώρησες ευθεία μπροστά.");
Database.addText("el.theCaveFirstSentenceWentLeft", "Πέρασες απο το αριστερό πέρασμα.");
Database.addText("el.theCaveFirstSentenceWentRight", "Πέρασες απο το δεξιό πέρασμα.");
Database.addText("el.theCaveFirstSentenceYouAre", "Είσαι μέσα σε μία σπηλιά. Υπάρχουν τρία μονοπάτια μπροστά σου.");
Database.addText("el.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Βλέπεις ένα παράξενο πράγμα στο έδαφος μπροστά σου.");
Database.addText("el.theCavePattern_ChocolateBarNowSeeChocolateBar", "Βλέπεις μία μπάρα σοκολάτας μπροστά σου.");
Database.addText("el.theCavePattern_TreasureMapSentence", "Βλέπεις μικρούς βράχους στημένους με περίεργο τρόπο στο έδαφος.");
Database.addText("el.theCavePattern_MonkeyWizardSentence", "Βλέπεις έναν γυμνό μάγο μαϊμού.");
Database.addText("el.theCavePattern_MonkeyWizardButton", "Προκάλεσέ τον");
Database.addText("el.theCavePattern_OctopusKingSentence", "Βλέπεις το Βασιλιά Χταπόδι. Φαίνεται απαίσιος.");
Database.addText("el.theCavePattern_OctopusKingButton", "Προκάλεσέ τον");
Database.addText("el.fortressInsideText0", "Είσαι μέσα στο κάστρο της άμμου");
Database.addText("el.fortressInsideText1", "Μπορείς να διαλέξεις μεταξύ τριών πορτών.");
Database.addText("el.fortressInsideText2", "Each of them leads to a big room with a treasure at the end.");
Database.addText("el.fortressInsideEnterRoom1", "Μπες στο πρώτο δωμάτιο");
Database.addText("el.fortressInsideEnterRoom2", "Μπες στο δεύτερο δωμάτιο");
Database.addText("el.fortressInsideEnterRoom3", "Μπες στο τρίτο δωμάτιο");
Database.addText("el.treasureButtonDig", "Σκάψε");
Database.addText("el.treasureButtonYouFound", "Βρήκες τρεις μπάρες σοκολάτας!");
Database.addText("el.sorceressHutHello", "Γεια, είμαι η μάγισσα. Θα μπορούσα να σου μάθω ένα-δυο πράγματα για τη μαγεία. Μπορώ επίσης να σου δώσω μερικά ενδιαφέροντα πράγματα, ή να εκτελέσω ξόρκια για σένα. Αλλά τα πάντα έχουν μία τιμή! Και αυτή η τιμή είναι γλειφυτζούρια. Πολλά από αυτά.");
Database.addText("el.sorceressHutClickedGrimoire", "Αυτό είναι ένα βιβλίο για ξόρκια φτιαγμένο για πρωτάρηδες. Με το να το κουβαλάς μαζί σου σε αποστολές, θα μπορείς να εκτελείς απλά αλλά χρήσιμα ξόρκια. Το χρειάζεσαι! Μόνο 5 000 γλειφυτζούρια.");
Database.addText("el.sorceressHutBuyGrimoireButton", "Αγόρασε αυτό το βιβλίο για ξόρκια(5 000 γλειφυτζούρια)");
Database.addText("el.sorceressHutBuyGrimoireSpeech", "Ευχαριστώ που το αγόρασες! Θα μπορείς να εκτελέσεις τρία ξόρκια με αυτό το βιβλίο για ξόρκια. Καλή τύχη!");
Database.addText("el.sorceressHutClickedGrimoire2", "Αυτό είναι ένα σύνθετο βιβλίο για ξόρκια. Με το να το κουβαλάς μαζί σου σε αποστολές, θα μπορείς να εκτελείς δύο σύνθετα ξόρκια. Το έγραψα μόνη μου, κάτι το οποίο δεν ήταν εύκολο. 20 000 γλειφυτζούρια είναι μία δίκαια τιμή.");
Database.addText("el.sorceressHutBuyGrimoire2Button", "Αγόρασε αυτό το βιβλίο για ξόρκια(20 000 γλειφυτζούρια)");
Database.addText("el.sorceressHutBuyGrimoire2Speech", "Ευχαριστώ για την αγορά! Θα μπορείς να εκτελείς δύο ξόρκια με αυτό το βιβλίο για ξόρκια. Χρησιμοποίησε τα σοφά!");
Database.addText("el.sorceressHutClickedCauldron", "Αυτό είναι το καζάνι μου. Μου επιτρέπει να φτιάχνω φίλτρα. Θα μπορούσα να στο πουλήσω, αλλά είναι πολύ πολύτιμο... θα σου κοστίσει 100 000 γλειφυτζούρια.");
Database.addText("el.sorceressHutBuyCauldronButton", "Αγόρασε το καζάνι (100 000 γλειφυτζούρια)");
Database.addText("el.sorceressHutBuyCauldronSpeech", "Ευχαριστώ πολύ! 100 000 γλειφυτζούρια για εμένα! Επίσης σου έδωσα έναν οδηγό. Θα είναι χρήσιμος.");
Database.addText("el.sorceressHutClickedHat", "Έχω ένα ωραίο καπέλο, πράγματι! Αλλά πραγματικά δεν μπορώ να σου το πουλήσω. Είναι υπερβολικάαα πολύτιμο. Πράγματι, δεν μπορώ. Μην επιμένεις. Όχι. Όχι όχι όχι. Δεν θα έπρεπε να το κάνω. Ε σιγά, θα το ανταλλάξω, αλλά για 1 000 000 000 γλειφυτζούρια. Μάλλον δεν θα μπορέσεις να πληρώσεις τόσα πολλά έτσι κι αλλιώς.");
Database.addText("el.sorceressHutBuyHatButton", "Αγόρασε το καπέλο (1 000 000 000 γλειφυτζούρια)");
Database.addText("el.sorceressHutBuyHatSpeech", "Ένα δισεκατομύριο γλειφυτζούρια για εμέεεεενα! Αλλά δεν έχω ένα καπέλο πια.. αλλά ένα δισεκατομύριο ζαχαρωτά, γουάου! .. Άξιζε.");
Database.addText("el.cauldronPreviousPageButton", "Προηγούμενη σελίδα");
Database.addText("el.cauldronNextPageButton", "Επόμενη σελίδα");
Database.addText("el.cauldronWhatYouWantToPut", "Τι θέλεις να βαλεις στο καζάνι");
Database.addText("el.cauldronWhatIsIn", "Τι είναι μέσα στο καζάνι");
Database.addText("el.cauldronWhatYouCanDo", "Τι μπορείς να κάνεις με αυτό");
Database.addText("el.castleBigRoomComment", "Ένα μεγάλο δωμάτιο");
Database.addText("el.castleARoomComment", "Ένα δωμάτιο");
Database.addText("el.castleADarkRoomComment", "Ένα σκοτεινο δωμάτιο");
Database.addText("el.castleCastleEntranceComment", "Η είσοδος του κάστρου.");
Database.addText("el.castleTowerEntranceComment", "Η είσοδος του πύργου.");
Database.addText("el.castleNougatMonsterComment", "Attack the giant nougat monster");
Database.addText("el.castleGuardsComment", "Δείρε τους φύλακες");
Database.addText("el.castleStairsComment", "Σκάλες");
Database.addText("el.buttonBackToTheCastle", "Πίσω στο κάστρο");
Database.addText("el.castleBigRoomHovenSpeechSad", "Γεια! Είμαι ένας πολύ παλιός φούρνος. Παλιά έψηνα πάρα πολλά αρτοσκευάσματα, αλλά κανένας δεν με χρησιμοποιεί πια. Ίσως...ίσως εσύ μπορείς να με βοηθήσεις. Απλά ασε να πάρω μερικά ζαχαρωτά από εσένα! Μην ανυσυχείς, δεν θα το μετανιώσεις. Μπορείς να με εμπιστευτείς.");
Database.addText("el.castleBigRoomHovenNotEnough", "Α... δεν έχεις αρκετά γλυκά, δεν μπορώ να κάνω τίποτα. Είμαι απλώς άχρηστος. Είμαι ο άχρηστος φούρνος, έτσι θα πρέπει να με λες.");
Database.addText("el.castleBigRoomHovenSpeechMadePainAuChocolat", "Ναι! Ευχαριστώ πολύ. Χρησιμοποίησα 100 ζαχαρωτά και μία μπάρα σοκολάτας, και σου έφτιαξα μία pain au chocolat! Είναι το αγαπημένο μου αρτοσκεύασμα, ελπίζω να σου αρέσει και εσένα!");
Database.addText("el.castleBigRoomHovenSpeechHappy", "Ε! Αν θες να σου μαγειρέψω κι'άλλο αρτοσκεύασμα, απλώς πες μου. Θα ήθελα πολύ να σε βοηθήσω.");
Database.addText("el.castleBigRoomHovenSpeechHappyNotEnough", "Α, δεν έχεις αρκετά γλυκά, δυστυχώς. Χρειάζομαι 100 ζαχαρωτά και μία μπάρα σοκολάτας. Γύρνα πίσω όταν τα έχεις αυτά!");
Database.addText("el.castleBigRoomHovenLetHovenTakeButton", "Άσε τον φούρνο να πάρει όσα ζαχαρωτά θέλει");
Database.addText("el.castleBigRoomHovenThanks", "Ευχαριστώ, φούρνε");
Database.addText("el.dragonStopTickling", "Ε,εσυ! Σταμάτα να με γαργαλάς σε παρακαλω.");
Database.addText("el.dragonStopTicklingButton", "Ωχ, συγνώμη, νόμιζα πως έπρεπε να σου επιτεθώ.");
Database.addText("el.dragonTalking", "Είμαι ο δράκος και αυτό είναι το κάστρο μου. Βλέπω ότι καταφερες να μπεις, πρέπει να είσαι πολύ γενναίος... θα το ήθελα πολύ να βοηθήσω κάποιθον σαν κι εσένα. Τι ακριβώς ψάχνεις;");
Database.addText("el.dragonTalkingChallengeButton", "Πρόκληση");
Database.addText("el.dragonTalkingFameButton", "Δόξα");
Database.addText("el.dragonTalkingCandiesButton", "Ζαχαρωτά");
Database.addText("el.dragonTalkingChallengeSpeech", "Α, οπότε θέλεις μία πρόκλση; Νομίζω ότι πρέπει να πας μία βόλτα στην κόλαση, λέγεται πως ο διάβολος είναι άξιος αντίπαλος. Πήδα στην πλάτη μου και θα σε πάω εκεί!");
Database.addText("el.dragonTalkingFameSpeech", "Ο καλύτερος τρόπος να γίνεις διάσημος είναι να αντιπετωπίσεις τον προγραμματιστή. Ξέρω που μένει και θα μπορούσα να σε πάω εκεί. Αλλά να είναι προετοιμασμένος, αυτό δεν θα είναι εύκολο.");
Database.addText("el.dragonTalkingCandiesSpeech", "Γενικά, το πράγμα που όλοι θέλουμε είναι ζαχαρωτά, έτσι δεν είναι; Πιστεύω ένας φίλος μου θα μπορούσε να σε βοηθήσει με αυτό. Θα τον αναγνωρίσεις εύκολα, έχει μόνο ένα μάτι. Απλώς πες του ότι με ξέρεις.");
Database.addText("el.dragonTalkingChallengeAnswer", "Πάμε τότε!");
Database.addText("el.dragonTalkingFameAnswer", "Είμαι έτοιμος");
Database.addText("el.dragonTalkingCandiesAnswer", "Εντάξει, ευχαριστώ!");
Database.addText("el.buttonBackToCastle", "Πίσω στο κάστρο");
Database.addText("el.talkingCandySpeechNoBox", "Γεια! Είμαι το ομιλούντο ζαχαρωτό. Έχεις σχεδόν τερματίσει το παιχνίδι. Πρέπει απλώς να βρεις το candy box. Είναι σε ένα σπίτι έξω από το χωριό. Αυτό είναι το τελευταίο βήμα!");
Database.addText("el.talkingCandySpeech1", "Γεια! Είμαι το ομιλούντο ζαχαρωτό. Συγχαρητήρια, κέρδισες το παιχίδι! Θα ανοίξω το candy box σου, αυτό είναι το βραβείο σου. Να συνεχίσω;");
Database.addText("el.talkingCandySpeech2", "Έτοιμο! Μπορείς να μπεις τώρα. Ελπίζω να σου άρεσε το παιχνίδι :)");
Database.addText("el.talkingCandyButton", "Ναι!!");
Database.addText("el.lighthousePuzzleResetButton", "Επαναφορά");
Database.addText("en.mapVillageComment", "The Village");
Database.addText("en.mapFortressComment", "The desert fortress");
Database.addText("en.mapATreeComment", "A tree");
Database.addText("en.mapTheDesertComment", "The desert");
Database.addText("en.mapWishingWellComment", "The wishing well");
Database.addText("en.mapLonelyHouseComment", "A lonely house");
Database.addText("en.mapForestComment", "The forest");
Database.addText("en.mapCastleEntranceComment", "Castle's entrance");
Database.addText("en.mapCastleComment", "The castle");
Database.addText("en.mapDragonComment", "The dragon");
Database.addText("en.candyBoxEatCandiesButton", "Eat all the candies");
Database.addText("en.candyBoxThrowCandiesButton", "Throw 10 candies on the ground");
Database.addText("en.mapVillageAHouseComment", "A house");
Database.addText("en.mapVillageForgeComment", "The forge");
Database.addText("en.buttonBackToTheMap", "Back to the map");
Database.addText("en.mapSorceressHutComment", "Sorceress' hut");
Database.addText("en.buttonBackToTheVillage", "Back to the village");
Database.addText("en.mapATreeIntroductionSpeech", "Hello, I'm The Squirrel. I can provide you candies, and lots of things. I know how much you love candies. But I feel alone in this forest.");
Database.addText("en.mapATreeIntroductionButton", "How can I help you ?");
Database.addText("en.mapATreeFirstQuestion", "I will ask you questions. If you answer correctly, the sweetest sweets will be yours! First one : do you really love candies? (answer in english)");
Database.addText("en.mapATreeSecondQuestion", "That's right! Here's 20 candies for you. Now complete this sequence of letters and you'll get a new reward : S, E, I, D, N, A, ?");
Database.addText("en.mapATreeThirdQuestion", "Candies! Here's 100 candies for you. Next question : how many candies does the candiest person in the world possess?");
Database.addText("en.mapATreeFourthQuestion", "Here's 500 candies for you! Next reward should be even more interesting...  Here's the riddle : In an ancient forest grows a very old tree, on which live the most intelligent animals in this world. It is said that this tree has 60 roots, 360 branches and 2160 leaves. How many marks can you find on its trunk?");
Database.addText("en.mapATreeFifthQuestion", "Congratulations! I was talking about my tree, indeed. Here are 3 lollipops for you. Make good use of them! Next riddle, listen carefully : Under a full moon, I throw a yellow hat into the red sea. What happens to the yellow hat?");
Database.addText("en.mapATreeTicTacToeIntro", "Well answered! That wasn't so hard. Here's three chocolate bars for you! For the next reward, we'll change the rules a little bit. You'll have to play a game with me! Are you ready?");
Database.addText("en.mapATreeTicTacToeIntroButton", "Sure I am!");
Database.addText("en.mapATreeTicTacToeLetsPlay", "The game is Tic-Tac-Toe. We play on a 3 by 3 game board. You will use the X sign while I will use the O sign. We place our signs alternately, and the goal is to get three signs in a row. I'll let you go first!");
Database.addText("en.mapATreeTicTacToeNobodyWins", "The board is filled entirely and we both failed to get three in a row : nobody wins! Do you want to try again?");
Database.addText("en.mapATreeTicTacToeYouLose", "I got three in a row! I won. Do you want to try again?");
Database.addText("en.mapATreeTicTacToeTryAgainButton", "Yes I do!");
Database.addText("en.mapATreeTicTacToeYouWin", "Wow, that's an unexpected move. But you got three in a row, I can't argue. You won! Take this key! It opens one of the houses in the village below the forest.");
Database.addText("en.mapATreeTicTacToeAnymoreSweet", "Thanks, squirrel! Any more challenge?");
Database.addText("en.mapATreeNoMoreChallenge", "Sadly no, I have no more challenge for you... Playing with you was very fun, thank you for that!");
Database.addText("en.buttonExitQuestKeeping", "Exit the quest (and keep what you found)");
Database.addText("en.buttonExitQuestNoKeeping", "Exit the quest (you won't keep what you found)");
Database.addText("en.buttonExitQuestNoKeepingBecauseLose", "Exit the quest (you won't keep what you found because you failed)");
Database.addText("en.mapVillageLockedHouseComment", "A locked house");
Database.addText("en.mapVillageForgeIntroductionSpeech", "Hi! I'm a blacksmith. I can sell you various weapons and pieces of equipment.");
Database.addText("en.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hi! I'm a blacksmith. Sadly, I have nothing more to sell. Come back later, maybe?");
Database.addText("en.mapVillageFifthHouseNoWeaponSpeech", "Hello. My cellar is full of rats, I need to get rid of them... if only someone with a weapon could help me...");
Database.addText("en.mapVillageFifthHouseWeaponSpeech", "Hey, you! I see you carry a weapon! If you kill the rats pestering my cellar, I'll reward you!");
Database.addText("en.mapVillageFifthHouseAgree", "Let's go, then!");
Database.addText("en.mapVillageFifthHouseCellarDone", "Thank you for getting rid of them! Here's something very precious as a reward : a map of the world. I think you will use it more than I do.");
Database.addText("en.mapVillageTheShopComment", "The shop");
Database.addText("en.mapBridgeComment", "The bridge");
Database.addText("en.mapFarmComment", "The lollipop farm");
Database.addText("en.mapCaveEntranceComment", "The cave entrance");
Database.addText("en.mapLighthouseComment", "The lighthouse");
Database.addText("en.mapPierComment", "The pier");
Database.addText("en.mapTheHoleComment", "The Hole");
Database.addText("en.candyBoxRequestStatusBarUnlocked", "Request a new feature to the developer (30 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfg", "Request another one (5 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedSave", "Request once again (5 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedHealthBar", "Request for something more exciting (5 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedMap", "Final request! This one has to be worth the candies. (10 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedComment", "You've unlocked a status bar! (above)");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfgComment1", "You now have access to a configuration tab.");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfgComment2", "You can change the language, if you want to.");
Database.addText("en.candyBoxRequestStatusBarUnlockedSaveComment", "A wild saving tab appears!");
Database.addText("en.candyBoxRequestStatusBarUnlockedHealthBarComment", "Here's 100 health points for you. They're going to be useful.");
Database.addText("en.cfgChooseLanguage", "Choose the language :");
Database.addText("en.cfgInvertColors", "Invert colors?");
Database.addText("en.gridItemMainMapName", "The Map");
Database.addText("en.gridItemMainMapDescription", "Map of the world");
Database.addText("en.gridItemPogoStickName", "Pogo stick");
Database.addText("en.gridItemPogoStickDescription", "This item allows you to jump in quests!");
Database.addText("en.gridItemTimeRingName", "A time ring");
Database.addText("en.gridItemTimeRingDescription", "This item gives you a new ability in quests : you can slow down the time. If things are going too fast for you, use your time ring!");
Database.addText("en.gridItemThirdHouseKeyName", "The third house key");
Database.addText("en.gridItemThirdHouseKeyDescription", "This key allows you to enter the third house in the village.");
Database.addText("en.gridItemFeatherName", "A desert bird feather");
Database.addText("en.gridItemFeatherDescription", "This magic feather allows you to jump higher when you use your pogo stick!");
Database.addText("en.gridItemFeatherDescriptionNoPogoStick", "For an unknown reason, you feel that this feather could be useful if you had a pogo stick...");
Database.addText("en.gridItemSpongeName", "A magical sponge");
Database.addText("en.gridItemSpongeDescription", "This magical sponge allows you to squeeze yourself just like a sponge, therefore reducing your size.");
Database.addText("en.gridItemFortressKeyName", "The desert fortress key");
Database.addText("en.gridItemFortressKeyDescription", "This key allows you to enter the very ancient fortress located above the desert. Who knows what you could find there?");
Database.addText("en.gridItemHeartPendantName", "A heart pendant");
Database.addText("en.gridItemHeartPendantDescription", "This heart pendant will increase your health points as long as you keep it around your neck.");
Database.addText("en.gridItemHeartPlugName", "A heart plug");
Database.addText("en.gridItemHeartPlugDescription", "This heart plug, made from iron, spider legs, and a special \"heart liquor\" sealed in the center, will increase your health points by 20 percent!");
Database.addText("en.gridItemBeginnersGrimoireName", "The beginners' grimoire");
Database.addText("en.gridItemBeginnersGrimoireDescription", "This grimoire provides you three spells, quite easy to cast. It is really made for beginners. You will be able to use the acid rain spell (a large quantity of acid drops will fall on your enemies), the fireball spell (a giant magic ball made of fire will fly towards your enemies), and the teleport spell (which will teleport you to an unpredictable location).");
Database.addText("en.gridItemAdvancedGrimoireName", "The advanced grimoire");
Database.addText("en.gridItemAdvancedGrimoireDescription", "This advanced grimoire provides you two spells : the erase magic spell and the thorns shield spell. The first one will erase all the magic from a quest at some point, including the spells you casted and your enemy's magic. The second one will create a shield of floating thorns around you which will inflict damage to your enemies upon contact.");
Database.addText("en.gridItemBlackMagicGrimoireName", "The black magic grimoire");
Database.addText("en.gridItemBlackMagicGrimoireDescription", "You found this grimoire in a cave, it was very hard to reach, and that was for a reason. It provides you two powerful black magic spells. The first one will create a giant wall made of obsidian bricks in front of you, which can be useful to slow down your enemies. The second one will summon a swarm of demons attacking everyone in the quest, including you. Be careful with this one.");
Database.addText("en.gridItemUnicornHornName", "A unicorn horn");
Database.addText("en.gridItemUnicornHornDescription", "This magical horn belonged to a unicorn. Its powerful healing powers will help you a lot. You heard that this unicorn was named Charlie.");
Database.addText("en.gridItemXinopherydonClawName", "A xinopherydon claw");
Database.addText("en.gridItemXinopherydonClawDescription", "This claw belonged to a xinopherydon, a two-headed ancient animal everyone believed to be extinct. It will double the damage of the weapon you're using.");
Database.addText("en.gridItemPitchforkName", "A pitchfork");
Database.addText("en.gridItemPitchforkDescription", "This special pitchfork allows you to loosen the soil without turning it over, therefore preserving below-ground soil ecosystems. It will triple the production of your lollipop farm.");
Database.addText("en.gridItemShellPowderName", "Shell powder");
Database.addText("en.gridItemShellPowderDescription", "Shell powder is often used by farmers to improve the growth speed of their lollipops. This powder will multiply your lollipop farm production by three!");
Database.addText("en.gridItemPName", "The P stone");
Database.addText("en.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("en.gridItemLName", "The L stone");
Database.addText("en.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("en.gridItemAName", "The A stone");
Database.addText("en.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("en.gridItemYName", "The Y stone");
Database.addText("en.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("en.gridItemRedSharkFinName", "A magical red shark fin");
Database.addText("en.gridItemRedSharkFinDescription", "This magical fin will greatly increase the damage of your fireball spell. Finally this fireball becomes useful.");
Database.addText("en.gridItemGreenSharkFinName", "A magical green shark fin");
Database.addText("en.gridItemGreenSharkFinDescription", "This magical fin will bring the power of nature to your lollipop farm! Your production will be multiplied by 5.");
Database.addText("en.gridItemPurpleSharkFinName", "A magical purple shark fin");
Database.addText("en.gridItemPurpleSharkFinDescription", "This magical fin will provide you a new black magic spell. You can only use it once per quest. Be very careful with this one!");
Database.addText("en.gridItemTalkingCandyName", "A talking candy");
Database.addText("en.gridItemTalkingCandyDescription", "This talking candy appeared after you put the four stones at the top of the castle's tower. He might help you to open the candy box...");
Database.addText("en.inventorySpecialNothingEqItem", "Nothing");
Database.addText("en.eqItemWeaponWoodenSwordName", "Wooden Sword");
Database.addText("en.eqItemWeaponWoodenSwordDescription", "A simple sword made of wood");
Database.addText("en.eqItemWeaponIronAxeName", "Iron axe");
Database.addText("en.eqItemWeaponIronAxeDescription", "A simple iron axe. Well sharpened. More powerful than the wooden sword.");
Database.addText("en.eqItemWeaponPolishedSilverSwordName", "Polished silver sword");
Database.addText("en.eqItemWeaponPolishedSilverSwordDescription", "A powerful sword, covered by spikes.");
Database.addText("en.eqItemWeaponTrollBludgeonName", "The troll's bludgeon");
Database.addText("en.eqItemWeaponTrollBludgeonDescription", "You took this bludgeon from the troll guarding the bridge. It is slow, but smashes your enemies quite efficiently.");
Database.addText("en.eqItemWeaponTribalSpearName", "A tribal spear");
Database.addText("en.eqItemWeaponTribalSpearDescription", "You found this tribal spear on the corpse of a tribe warrior lost in a big hole in the ground. It's a bit hard to handle at first, but once you're used to it, it's a good weapon.");
Database.addText("en.eqItemWeaponSummoningTribalSpearName", "A summoning tribal spear");
Database.addText("en.eqItemWeaponSummoningTribalSpearDescription", "This magical tribal spear, in addition to being slighty more powerful than the normal tribal spear, will frequently summon tribe warriors which will help you during your quests.");
Database.addText("en.eqItemWeaponMonkeyWizardStaffName", "The monkey wizard staff");
Database.addText("en.eqItemWeaponMonkeyWizardStaffDescription", "This staff belonged to the naked monkey wizard you found in the cave. It will frequently cast spells by itself, targeting your enemies.");
Database.addText("en.eqItemWeaponEnchantedMonkeyWizardStaffName", "The monkey wizard staff (enchanted)");
Database.addText("en.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "This staff is faster than the non-enchanted version, and will also cast a lot more spells.");
Database.addText("en.eqItemWeaponGiantSpoonName", "A giant spoon");
Database.addText("en.eqItemWeaponGiantSpoonDescription", "This giant spoon was in a giant teapot in the desert fortress. You don't know if anyone ever used it as a spoon, but if so, it must have been someone really big. You probably don't want to meet him.");
Database.addText("en.eqItemWeaponGiantSpoonOfDoomName", "The giant Spoon of Doom");
Database.addText("en.eqItemWeaponGiantSpoonOfDoomDescription", "This giant spoon is even more powerful than the regular giant spoon you could find, for example, in a teapot. It's quite slow, however.");
Database.addText("en.eqItemWeaponScytheName", "A scythe");
Database.addText("en.eqItemWeaponScytheDescription", "It is said that this scythe belonged to the Death itself. It is extremely fast.");
Database.addText("en.eqItemHatMerchantHatName", "The merchant hat");
Database.addText("en.eqItemHatMerchantHatDescription", "This hat was sold to you by the candy merchant. The candy merchant loves candies. This hat will multiply by 7 the candies you find in quests!");
Database.addText("en.eqItemHatSorceressHatName", "The sorceress hat");
Database.addText("en.eqItemHatSorceressHatDescription", "This hat was sold to you by the sorceress. It will enhance the effects of your spells and potions.");
Database.addText("en.eqItemHatOctopusKingCrownName", "The Octopus King crown");
Database.addText("en.eqItemHatOctopusKingCrownDescription", "When you wear this crown, you feel a lot more confident. It doesn't give any advantage in quests, but self-confidence is important!");
Database.addText("en.eqItemHatOctopusKingCrownWithJaspersName", "The Octopus King crown with jaspers");
Database.addText("en.eqItemHatOctopusKingCrownWithJaspersDescription", "This enchanted crown is made from gold and red jaspers. In quests, it will frequently cast powerful magic fireballs around you. And also, it's shining!");
Database.addText("en.eqItemHatOctopusKingCrownWithObsidianName", "The Octopus King crown with obsidian");
Database.addText("en.eqItemHatOctopusKingCrownWithObsidianDescription", "This enchanted crown is made from gold and obsidian. It is beautiful. In quests, it will summon an Octopus King fighting on your side once in a while. What a tentaculous ally!");
Database.addText("en.eqItemGlovesLeatherGlovesName", "Leather gloves");
Database.addText("en.eqItemGlovesLeatherGlovesDescription", "These gloves basically do nothing. But they're soft and comfortable, at least!");
Database.addText("en.eqItemGlovesRedEnchantedGlovesName", "Red enchanted gloves");
Database.addText("en.eqItemGlovesRedEnchantedGlovesDescription", "These enchanted gloves emit a soft red light when it's dark around you. In quests, they will randomly cast small fireballs towards your enemies, which can definitely be useful.");
Database.addText("en.eqItemGlovesPinkEnchantedGlovesName", "Pink enchanted gloves");
Database.addText("en.eqItemGlovesPinkEnchantedGlovesDescription", "These enchanted gloves leave a pink mark on everything you touch. In quests, they will heal you continuously.");
Database.addText("en.eqItemBootsRocketBootsName", "Rocket boots");
Database.addText("en.eqItemBootsRocketBootsDescription", "These awesome rocket boots allow you to jump in mid-air, so that you're basically flying!");
Database.addText("en.eqItemBootsLeatherBootsName", "Leather boots");
Database.addText("en.eqItemBootsLeatherBootsDescription", "Simple leather boots. Nothing special about them.");
Database.addText("en.eqItemBootsBootsOfIntrospectionName", "Boots of introspection");
Database.addText("en.eqItemBootsBootsOfIntrospectionDescription", "Take the time to breathe and calm down. If you wear these boots, you will never move as long as you touch the ground.");
Database.addText("en.eqItemBodyArmoursLightweightBodyArmourName", "A lightweight body armour");
Database.addText("en.eqItemBodyArmoursLightweightBodyArmourDescription", "This body armour will offer you a weak protection. You will be slighty more resistant to your enemies attacks.");
Database.addText("en.eqItemBodyArmoursKnightBodyArmourName", "A knight body armour");
Database.addText("en.eqItemBodyArmoursKnightBodyArmourDescription", "This strong body armour will protect you. You will be more resistant to your enemies attacks.");
Database.addText("en.eqItemBodyArmoursEnchantedKnightBodyArmourName", "An enchanted knight body armour");
Database.addText("en.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "This armour is very special. You will be a LOT more resistant to your enemies attacks, but the damage of the weapon you are using will be divided by two.");
Database.addText("en.mapVillageForgeBuyWoodenSwordButton", "Buy a wooden sword (150 candies)");
Database.addText("en.mapVillageForgeBuyWoodenSwordSpeech", "Thanks for buying! This wooden sword is quite weak, but it's a start.");
Database.addText("en.mapVillageForgeBuyIronAxeButton", "Buy an iron axe (400 candies)");
Database.addText("en.mapVillageForgeBuyIronAxeSpeech", "I hope you'll like this iron axe. I have just sharpened it for you!");
Database.addText("en.mapVillageForgeBuyPolishedSilverSwordButton", "Buy a polished silver sword (2 000 candies)");
Database.addText("en.mapVillageForgeBuyPolishedSilverSwordSpeech", "It took me a lot of time to create this sword. I assure you that it's worth its price.");
Database.addText("en.mapVillageForgeBuyLightweightBodyArmourButton", "Buy a lightweight body armour (15 000 candies)");
Database.addText("en.mapVillageForgeBuyLightweightBodyArmourSpeech", "This body armour will offer you a protection against your enemies.");
Database.addText("en.mapVillageForgeBuyScytheButton", "Buy a scythe (5 000 000 candies)");
Database.addText("en.mapVillageForgeBuyScytheSpeech", "It took me several months to make this scythe. It's a real piece of art. This is probably the fastest weapon you will ever be able to use. Good luck!");
Database.addText("en.wishingWellThrowFirstCandyButton", "Throw a candy in the well");
Database.addText("en.wishingWellCandyIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you'll throw candies into me, I will heal your wounds.");
Database.addText("en.wishingWellThrewCandiesSpeech", "Your wounds are now healed!");
Database.addText("en.wishingWellNoWoundSpeech", "You have no wounds to heal!");
Database.addText("en.wishingWellThrowFirstLollipopButton", "Throw a lollipop in the well");
Database.addText("en.wishingWellLollipopIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you'll throw lollipops into me, I will convert them into candies.");
Database.addText("en.wishingWellThrewLollipopsSpeech", "Your lollipops are converted into candies! Two lollipops for one candy.");
Database.addText("en.wishingWellThrowChocolateBarButton", "Throw a chocolate bar in the well");
Database.addText("en.wishingWellChocolateBarIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! I love chocolate bars. I really love them. For each chocolate bar you will throw into me, including this one, you will be granted one magical enchantment.");
Database.addText("en.wishingWellThrewChocolateBarSpeech", "Which object would you like to enchant?");
Database.addText("en.wishingWellThrowPainAuChocolatButton", "Throw a pain au chocolat in the well");
Database.addText("en.wishingWellPainAuChocolatIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you throw a pain au chocolat into me, you will be given a very special gift. Choose wisely.");
Database.addText("en.wishingWellThrewPainAuChocolatSpeech", "Thanks for the pain au chocolat! You can now choose your gift.");
Database.addText("en.wishingWellChooseGift", "Choose your gift!");
Database.addText("en.wishingWellChooseGiftButton", "Choose");
Database.addText("en.wishingWellGiftDoneSpeech", "Done! You now have a new gift. It will appear in your inventory stats panel.");
Database.addText("en.wishingWellNoPossibleEnchantment", "No possible enchantment");
Database.addText("en.wishingWellChooseEnchantment", "Choose the enchantment");
Database.addText("en.wishingWellEnchantButton", "Enchant");
Database.addText("en.wishingWellEnchantmentDoneSpeech", "There it is! Your object is enchanted.");
Database.addText("en.pierLighthouseButton", "Go to the lighthouse by boat");
Database.addText("en.pierTheSeaButton", "Jump into the sea");
Database.addText("en.lonelyHouseOpenBox", "Open the box");
Database.addText("en.lonelyHouseShakeBox", "Shake the box");
Database.addText("en.lonelyHouseBreakLock", "Break the lock");
Database.addText("en.lonelyHouseKickBox", "Kick the box");
Database.addText("en.lonelyHouseAskTheBoxToOpenItself", "Ask the box to open itself");
Database.addText("en.lonelyHouseLureTheBoxWithACandy", "Lure the box with a candy");
Database.addText("en.lonelyHouseTakeTheBox", "Take the box with you, you probably need a key to open it anyway");
Database.addText("en.lonelyHouseOpenBoxResult", "The box is locked");
Database.addText("en.lonelyHouseShakeBoxResult", "Nothing happens");
Database.addText("en.lonelyHouseBreakLockResult", "The lock resists");
Database.addText("en.lonelyHouseKickBoxResult", "Your foot hurts a little bit, but nothing happens");
Database.addText("en.lonelyHouseAskTheBoxToOpenItselfResult", "...you're talking to a box, you know that?");
Database.addText("en.lonelyHouseLureTheBoxWithACandyResult", "The box doesn't seem to care");
Database.addText("en.lonelyHouseTakeTheBoxResult", "There's probably something interesting in this candy box.");
Database.addText("en.lollipopFarmConstructMill", "Build a mill (10 000 lollipops)");
Database.addText("en.lollipopFarmFeedMill", "Feed the mill");
Database.addText("en.lollipopFarmCurrentCandiesProduction", "Current candies production");
Database.addText("en.lollipopFarmDigPond", "Dig a pond (100 000 lollipops)");
Database.addText("en.lollipopFarmBuyLolligator", "Buy a lolligator (1200 candies)");
Database.addText("en.lollipopFarmLolligatorsConversionText", "Conversion candies -> lollipops activated");
Database.addText("en.lighthouseAskButton", "Ask");
Database.addText("en.lighthouseQuestionWho", "Who are you?");
Database.addText("en.lighthouseQuestionWhoSpeech", "I'm a very old cyclops.");
Database.addText("en.lighthouseQuestionWhat", "What are you doing here?");
Database.addText("en.lighthouseQuestionWhatSpeech", "I live here all day long, waiting for a boat to come. It's been a long time since I've seen a boat, but I must stay here, staring at the sea, because a boat may come.");
Database.addText("en.lighthouseQuestionWhyEatCandies", "Why would I eat candies?");
Database.addText("en.lighthouseQuestionWhyEatCandiesSpeech", "Because they're good for your health!");
Database.addText("en.lighthouseQuestionCandyBox", "What is a candy box?");
Database.addText("en.lighthouseQuestionCandyBoxSpeech", "It is a very old box that is said to contain all the candies in the world. The legends say that whoever manages to open it would have so much candies that anything could be possible.");
Database.addText("en.lighthouseQuestionDragon", "The dragon told me to come here because I want candies.");
Database.addText("en.lighthouseQuestionDragonSpeech", "Oh, I see... Well, I cannot provide you candies directly, but I can give you something essential for you to ultimately get a LOT of candies. I just need to test you before that. Because what I have can't be given to everyone. Solve this puzzle and it will be yours.");
Database.addText("en.lighthouseFoundStone", "Congratulations! You passed the test and found the stone. It's very precious, but is only useful if you have three other stones like this one. Good luck!");
Database.addText("en.lighthouseFoundStoneAgain", "Good job, you did the puzzle once again. You seem to like that.");
Database.addText("en.saveLocalSaveTitle", "Browser save");
Database.addText("en.saveLocalSaveWhy", "Choose local save if you want to keep playing on your current device and browser.");
Database.addText("en.saveLocalSaveWarning0", "Your browser does not seem to support HTML5.");
Database.addText("en.saveLocalSaveWarning1", "You should update your browser in order to use the local saving feature.");
Database.addText("en.saveLocalSaveChooseSlot", "Choose a save slot :");
Database.addText("en.saveLocalSaveAutosaveEnabled", "Autosave enabled");
Database.addText("en.saveLocalSaveChooseWhatToDo", "Choose what to do :");
Database.addText("en.saveLocalSaveSaveButton", "Save");
Database.addText("en.saveLocalSaveAutosaveButton", "Save every 10 minutes");
Database.addText("en.saveLocalSaveDisableAutosaveButton", "Disable autosave");
Database.addText("en.saveFileSaveTitle", "Text save");
Database.addText("en.saveFileSaveWhy0", "Choose text save if :");
Database.addText("en.saveFileSaveWhy1", "You want to continue playing on another device or browser");
Database.addText("en.saveFileSaveWhy2", "You want to share your save with someone else");
Database.addText("en.saveFileSaveWhy3", "For some reason you want to empty your browser cache");
Database.addText("en.saveFileSaveWhy4", "(which will erase your local saves)");
Database.addText("en.saveFileSaveButton", "Get the current game as text");
Database.addText("en.saveFileSaveWarning", "Now copy this text somewhere! (in a file, for example)");
Database.addText("en.saveLocalLoadTitle", "Browser load");
Database.addText("en.saveLocalLoadYouCan", "You can load a local save by using the following links :");
Database.addText("en.saveLocalLoadThanksTo", "Thanks to HTML5 magic, you should be able to use these links even offline.");
Database.addText("en.saveFileLoadTitle", "Text load");
Database.addText("en.saveFileLoadPaste", "Paste your save below, then click the \"Load\" button");
Database.addText("en.saveFileLoadButton", "Load");
Database.addText("en.mountainsText0", "You spotted something in the mountains!");
Database.addText("en.mountainsText1", "It looks interesting. Maybe it could be useful.");
Database.addText("en.mountainsTextButton", "Climb the mountains to get the thing");
Database.addText("en.mountainsTextAfter", "You found a pogo stick! It has been added to your inventory.");
Database.addText("en.secondHouseIntroSpeech", "Hello, I'm the candy merchant. I would do anything for candies. What do you need?");
Database.addText("en.secondHouseLollipop1Speech", "This is a lemon-flavored lollipop. My favourite! It costs 60 candies, but it's worth it.");
Database.addText("en.secondHouseLollipop2Speech", "This one is a strawberry-flavored lollipop. It tastes good. I like its red color. Only 60 candies!");
Database.addText("en.secondHouseLollipop3Speech", "This is a pumpkin-flavored lollipop. I bet you never tried one! 60 candies and it's yours.");
Database.addText("en.secondHouseLollipopButtonText", "Buy this lollipop (60 candies)");
Database.addText("en.secondHouseMerchantHatSpeech", "I could sell you my hat, but it is very precious, you know... You will have to give me a lot of candies for it. Let's say 1 million candies. It seems fair, right?");
Database.addText("en.secondHouseMerchantHatButtonText", "Buy the merchant's hat (1 000 000 candies)");
Database.addText("en.secondHouseTimeRingSpeech", "This is a time ring. It's kind of magical. It allows you to slow down the time when you're in trouble.");
Database.addText("en.secondHouseTimeRingButtonText", "Buy the time ring (500 candies)");
Database.addText("en.secondHouseLeatherGlovesSpeech", "These leather gloves are made from camel leather, this is high quality. I have a lot of them in stock, that's why they are so cheap : only 300 candies!");
Database.addText("en.secondHouseLeatherBootsButtonText", "Buy a pair of leather boots (300 candies)");
Database.addText("en.secondHouseLeatherBootsSpeech", "These high quality leather boots, made from camel leather, will keep your feet warm.");
Database.addText("en.secondHouseLeatherGlovesButtonText", "Buy a pair of leather gloves (300 candies)");
Database.addText("en.secondHouseChocolateBarSpeech", "This is a chocolate bar. I don't know what it is used for, but it happens to be quite rare, which explains the price. 800 candies and it's yours!");
Database.addText("en.secondHouseChocolateBarButtonText", "Buy the chocolate bar (800 candies)");
Database.addText("en.outsideTheHoleButton", "Jump in this big hole in the ground");
Database.addText("en.theCaveExitText0", "You finally reached the cave's exit.");
Database.addText("en.theCaveExitText1", "You can see a big forest outside of here.");
Database.addText("en.theCaveExitButtonText", "Exit the cave");
Database.addText("en.theCaveFirstSentenceWentStraight", "You went straight on.");
Database.addText("en.theCaveFirstSentenceWentLeft", "You took the left path.");
Database.addText("en.theCaveFirstSentenceWentRight", "You took the right path.");
Database.addText("en.theCaveFirstSentenceYouAre", "You are in a cave. There are three paths ahead of you.");
Database.addText("en.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "You spot a strange thing on the ground in front of you.");
Database.addText("en.theCavePattern_ChocolateBarNowSeeChocolateBar", "You spot a chocolate bar in front of you.");
Database.addText("en.theCavePattern_TreasureMapSentence", "You see small rocks strangely arranged on the floor.");
Database.addText("en.theCavePattern_MonkeyWizardSentence", "You stumble upon a naked monkey wizard.");
Database.addText("en.theCavePattern_MonkeyWizardButton", "Challenge him");
Database.addText("en.theCavePattern_OctopusKingSentence", "You stumble upon the Octopus King. It seems nasty.");
Database.addText("en.theCavePattern_OctopusKingButton", "Challenge it");
Database.addText("en.fortressInsideText0", "You are inside the desert fortress.");
Database.addText("en.fortressInsideText1", "You can choose between three doors.");
Database.addText("en.fortressInsideText2", "Each of them leads to a big room with a treasure at the end.");
Database.addText("en.fortressInsideEnterRoom1", "Enter the first room");
Database.addText("en.fortressInsideEnterRoom2", "Enter the second room");
Database.addText("en.fortressInsideEnterRoom3", "Enter the third room");
Database.addText("en.treasureButtonDig", "Dig");
Database.addText("en.treasureButtonYouFound", "You found three chocolate bars!");
Database.addText("en.sorceressHutHello", "Hello, I'm the sorceress. I could teach you one thing or two about magic. I can also give you some interesting things, or cast spells for you. But everything has a price! And this price will be lollipops. A lot of them.");
Database.addText("en.sorceressHutClickedGrimoire", "This is a grimoire made for beginners. By carrying it with you in quests, you will be able to cast simple but useful spells. You need this! Only 5 000 lollipops.");
Database.addText("en.sorceressHutBuyGrimoireButton", "Buy this grimoire (5 000 lollipops)");
Database.addText("en.sorceressHutBuyGrimoireSpeech", "Thanks for buying! You will be able to cast three spells with this grimoire. Good luck!");
Database.addText("en.sorceressHutClickedGrimoire2", "This is an advanced grimoire. By carrying it with you in quests, you will be able to cast two advanced spells. I wrote it myself, which wasn't easy. 20 000 lollipops is a fair price.");
Database.addText("en.sorceressHutBuyGrimoire2Button", "Buy this grimoire (20 000 lollipops)");
Database.addText("en.sorceressHutBuyGrimoire2Speech", "Thanks for buying! You will be able to cast two spells with this grimoire. Use them wisely!");
Database.addText("en.sorceressHutClickedCauldron", "This is my cauldron. It allows me to brew magic potions. I could sell it to you, but it's very precious... it will cost you 100 000 lollipops.");
Database.addText("en.sorceressHutBuyCauldronButton", "Buy the cauldron (100 000 lollipops)");
Database.addText("en.sorceressHutBuyCauldronSpeech", "Thanks a lot! 100 000 lollipops for me! I also gave you a brewing manual. It's going to be useful.");
Database.addText("en.sorceressHutClickedHat", "I have a nice hat, indeed! But I really can't sell it to you. It is waaaay too precious. Really, I can't. Don't insist. No. No no no I shouldn't do that. Oh well, I'll trade it, but for 1 000 000 000 lollipops. You probably won't be able to pay that anyway.");
Database.addText("en.sorceressHutBuyHatButton", "Buy the hat (1 000 000 000 lollipops)");
Database.addText("en.sorceressHutBuyHatSpeech", "One billion lollipops for meeeeee! But I don't have a hat anymore.. but one billion lollipops, wow! .. It was worth it.");
Database.addText("en.cauldronPreviousPageButton", "Previous page");
Database.addText("en.cauldronNextPageButton", "Next page");
Database.addText("en.cauldronWhatYouWantToPut", "What you want to put in the cauldron");
Database.addText("en.cauldronWhatIsIn", "What is in the cauldron");
Database.addText("en.cauldronWhatYouCanDo", "What you can do with it");
Database.addText("en.castleBigRoomComment", "A big room");
Database.addText("en.castleARoomComment", "A room");
Database.addText("en.castleADarkRoomComment", "A dark room");
Database.addText("en.castleCastleEntranceComment", "The castle's entrance");
Database.addText("en.castleTowerEntranceComment", "The tower's entrance");
Database.addText("en.castleNougatMonsterComment", "Attack the giant nougat monster");
Database.addText("en.castleGuardsComment", "Attack the guards");
Database.addText("en.castleStairsComment", "Stairs");
Database.addText("en.buttonBackToTheCastle", "Back to the castle");
Database.addText("en.castleBigRoomHovenSpeechSad", "Hello! I'm a very old bread oven. I used to cook tons of good pastries, but no one is using me anymore. Maybe... maybe you could help me? Just let me take some sweets from you! Don't worry, you won't regret it! You can trust me.");
Database.addText("en.castleBigRoomHovenNotEnough", "Oh... you don't have enough sweets, I can't do anything. I'm just useless. I'm the useless bread oven, that's how you should call me.");
Database.addText("en.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Thanks a lot! I used 100 candies and a chocolate bar, and I made you... a pain au chocolat! It's my favourite pastry, I hope you'll like it too!");
Database.addText("en.castleBigRoomHovenSpeechHappy", "Hey! If you want me to cook another pastry, just tell me! I'd love to help you.");
Database.addText("en.castleBigRoomHovenSpeechHappyNotEnough", "Oh, you don't have enough sweets, sadly. I need 100 candies and a chocolate bar. Come back when you'll have that!");
Database.addText("en.castleBigRoomHovenLetHovenTakeButton", "Let the oven take all the sweets it wants to take");
Database.addText("en.castleBigRoomHovenThanks", "Thanks, oven!");
Database.addText("en.dragonStopTickling", "Hey, you! Stop tickling me, please.");
Database.addText("en.dragonStopTicklingButton", "Uh, oh, sorry, I thought I was supposed to attack you");
Database.addText("en.dragonTalking", "I am the dragon and this is my castle. I see that you managed to enter, you must be very brave... I'd love to help someone like you. What are you looking for?");
Database.addText("en.dragonTalkingChallengeButton", "Challenge");
Database.addText("en.dragonTalkingFameButton", "Fame");
Database.addText("en.dragonTalkingCandiesButton", "Candies");
Database.addText("en.dragonTalkingChallengeSpeech", "Oh, so you want challenge? I think you should make a trip to hell itself, it is known that the devil is a tough challenger. Jump on my back and I'll take you there!");
Database.addText("en.dragonTalkingFameSpeech", "The best way to become famous is to face the developer himself. I know where he lives and I could take you there. But be prepared, this won't be easy.");
Database.addText("en.dragonTalkingCandiesSpeech", "Ultimately, the thing we all want is candies, isn't it? I think a friend of mine could help you with that. You will recognise him easily, he has only one eye. Just tell him that you know me.");
Database.addText("en.dragonTalkingChallengeAnswer", "Let's go then!");
Database.addText("en.dragonTalkingFameAnswer", "I am ready.");
Database.addText("en.dragonTalkingCandiesAnswer", "Okay, thanks!");
Database.addText("en.buttonBackToCastle", "Back to the castle");
Database.addText("en.talkingCandySpeechNoBox", "Hey! I'm the talking candy. You almost won the game. You just need to find the candy box. It's in a house outside the village. This is the last step!");
Database.addText("en.talkingCandySpeech1", "Hey! I'm the talking candy. Congratulations, you won the game! I will open your candy box for you, this is your reward. Should I proceed?");
Database.addText("en.talkingCandySpeech2", "Done! You can now enter it. I hope you liked the game :)");
Database.addText("en.talkingCandyButton", "Yes!!");
Database.addText("en.lighthousePuzzleResetButton", "Reset");
Database.addText("es.mapVillageComment", "El Pueblo");
Database.addText("es.mapFortressComment", "La Fortaleza del desierto");
Database.addText("es.mapATreeComment", "Un árbol");
Database.addText("es.mapTheDesertComment", "El Desierto");
Database.addText("es.mapWishingWellComment", "El Pozo de los Deseos");
Database.addText("es.mapLonelyHouseComment", "Una casa solitaria");
Database.addText("es.mapForestComment", "El Bosque");
Database.addText("es.mapCastleEntranceComment", "Entrada del Castillo");
Database.addText("es.mapCastleComment", "El Castillo");
Database.addText("es.mapDragonComment", "El Dragón");
Database.addText("es.candyBoxEatCandiesButton", "Comerse los caramelos");
Database.addText("es.candyBoxThrowCandiesButton", "Tirar 10 caramelos al suelo");
Database.addText("es.mapVillageAHouseComment", "Una casa");
Database.addText("es.mapVillageForgeComment", "La Herrería");
Database.addText("es.buttonBackToTheMap", "Volver al mapa");
Database.addText("es.mapSorceressHutComment", "La Cabaña de la Hechicera");
Database.addText("es.buttonBackToTheVillage", "Volver al Pueblo");
Database.addText("es.mapATreeIntroductionSpeech", "Hola, soy la Ardilla. Puedo conseguirte caramelos y un montón de cosas. Sé cuánto te gustan los caramelos... pero estoy muy sola en este bosque.");
Database.addText("es.mapATreeIntroductionButton", "¿En qué puedo ayudarte?");
Database.addText("es.mapATreeFirstQuestion", "Voy a hacerte preguntas. Si respondes correctamente, te daré los mejores caramelos del mundo. Primera pregunta: ¿de verdad te gustan los caramelos? (Responde en español y sin tildes)");
Database.addText("es.mapATreeSecondQuestion", "¡Correcto! Aquí tienes 20 caramelos. Ahora debes completar esta secuencia de letras para conseguir otra recompensa: S, O, L, E, M, A, R, A, ?");
Database.addText("es.mapATreeThirdQuestion", "¡C A R A M E L O S, sí! Toma 100 caramelos. Siguiente pregunta: ¿cuántos caramelos tiene la persona más caramelada del mundo?");
Database.addText("es.mapATreeFourthQuestion", "¡Otros 500 caramelos! Quizá la próxima recompensa sea aún más jugosa... Esta es la adivinanza: En un antiguo bosque crece un árbol muy anciano, donde viven los animales más inteligentes del mundo. Dicen que tiene 60 raíces, 360 ramas y 2160 hojas. ¿Cuántas marcas hay en su tronco?");
Database.addText("es.mapATreeFifthQuestion", "¡Felicidades! Por supuesto, estaba hablando de mi árbol. Toma 3 piruletas, ¡úsalas bien! Escucha con atención, que viene otra adivinanza: Bajo la luna llena, lanzo un sombrero amarillo al mar Rojo. ¿Qué le pasa al sombrero?");
Database.addText("es.mapATreeTicTacToeIntro", "¡Respuesta correcta! No era tan difícil... Toma 3 tabletas de chocolate. Para la recompensa que viene ahora vamos a cambiar las reglas: tienes que jugar conmigo. ¿Estás listo?");
Database.addText("es.mapATreeTicTacToeIntroButton", "Vamos allá");
Database.addText("es.mapATreeTicTacToeLetsPlay", "El juego es tres en raya. Vamos a jugar en un tablero de 3 por 3, tú pones las X y yo los O. Cada vez le toca a uno, y hay que ocupar tres casillas seguidas. ¡Te dejo empezar!");
Database.addText("es.mapATreeTicTacToeNobodyWins", "Hemos llenado el tablero y ninguno ha hecho tres en raya... ¡Quedamos en tablas! ¿Quieres volver a intentarlo?");
Database.addText("es.mapATreeTicTacToeYouLose", "¡Tengo tres en raya! He ganado. ¿Quieres volver a intentarlo?");
Database.addText("es.mapATreeTicTacToeTryAgainButton", "Venga");
Database.addText("es.mapATreeTicTacToeYouWin", "Vaya, eso ha sido un movimiento inesperado. Pero tienes tres en raya, no puedo quejarme. ¡Has ganado, toma esta llave! Abre una casa del pueblo que está más allá del bosque.");
Database.addText("es.mapATreeTicTacToeAnymoreSweet", "¡Gracias, Ardilla! ¿Tienes más pruebas para mí?");
Database.addText("es.mapATreeNoMoreChallenge", "Pues ya no me quedan pruebas... Pero lo he pasado muy bien jugando contigo, gracias :-)");
Database.addText("es.buttonExitQuestKeeping", "Salir de la misión (se guardará lo que has encontrado)");
Database.addText("es.buttonExitQuestNoKeeping", "Salir de la misión (sin guardar lo que has encontrado)");
Database.addText("es.buttonExitQuestNoKeepingBecauseLose", "Salir de la misión (sin guardar, porque has perdido)");
Database.addText("es.mapVillageLockedHouseComment", "Una casa cerrada");
Database.addText("es.mapVillageForgeIntroductionSpeech", "¡Hola! Soy el Herrero, vendo armas y equipamiento.");
Database.addText("es.mapVillageForgeIntroductionSpeechNoMoreToSell", "¡Hola! Soy el Herrero. Lamentablemente, no puedo venderte nada más. ¿Qué tal si vuelves luego?");
Database.addText("es.mapVillageFifthHouseNoWeaponSpeech", "Hola. Mi sótano está lleno de ratas, necesito librarme de ellas... Ojalá alguien con un arma pudiera ayudarme...");
Database.addText("es.mapVillageFifthHouseWeaponSpeech", "Eh, ¡pero si tú llevas una! Si matas a las que tengo en el sótano, te recompensaré como es debido.");
Database.addText("es.mapVillageFifthHouseAgree", "¡A por ellas!");
Database.addText("es.mapVillageFifthHouseCellarDone", "¡Gracias por acabar con las ratas! Aquí tienes una valiosa recompensa: un Mapa del mundo. Seguro que lo usas más que yo.");
Database.addText("es.mapVillageTheShopComment", "La Tienda");
Database.addText("es.mapBridgeComment", "El Puente");
Database.addText("es.mapFarmComment", "La Granja de piruletas");
Database.addText("es.mapCaveEntranceComment", "Entrada de la Cueva");
Database.addText("es.mapLighthouseComment", "El Faro");
Database.addText("es.mapPierComment", "El Puerto");
Database.addText("es.mapTheHoleComment", "El Hoyo");
Database.addText("es.candyBoxRequestStatusBarUnlocked", "Pedir una opción nueva al desarrollador (30 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedCfg", "Pedir otra (5 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedSave", "Pedir otra más (5 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedHealthBar", "Pedir algo aún mejor (5 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedMap", "¡Última petición! Seguro que vale la pena. (10 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedComment", "¡Has desbloqueado la barra de estado! (Mira arriba)");
Database.addText("es.candyBoxRequestStatusBarUnlockedCfgComment1", "Ahora puedes acceder a la configuración.");
Database.addText("es.candyBoxRequestStatusBarUnlockedCfgComment2", "Si quieres, puedes cambiar el idioma.");
Database.addText("es.candyBoxRequestStatusBarUnlockedSaveComment", "¡Una pestaña salvaje apareció!");
Database.addText("es.candyBoxRequestStatusBarUnlockedHealthBarComment", "Has ganado 100 puntos de vida. Te serán útiles.");
Database.addText("es.cfgChooseLanguage", "Elige el idioma:");
Database.addText("es.cfgInvertColors", "¿Invertir colores?");
Database.addText("es.gridItemMainMapName", "El Mapa");
Database.addText("es.gridItemMainMapDescription", "Mapa del mundo");
Database.addText("es.gridItemPogoStickName", "Pogo");
Database.addText("es.gridItemPogoStickDescription", "Este objeto te permite saltar en las misiones.");
Database.addText("es.gridItemTimeRingName", "Anillo del tiempo");
Database.addText("es.gridItemTimeRingDescription", "Con este objeto tendrás una nueva habilidad: podrás ralentizar el tiempo. Si te parece que el juego va demasiado deprisa, úsalo.");
Database.addText("es.gridItemThirdHouseKeyName", "Llave de la tercera casa");
Database.addText("es.gridItemThirdHouseKeyDescription", "Con esta llave puedes entrar en la tercera casa del Pueblo.");
Database.addText("es.gridItemFeatherName", "Pluma de pájaro del desierto");
Database.addText("es.gridItemFeatherDescription", "Esta pluma mágica te hará saltar más alto cuando uses el Pogo.");
Database.addText("es.gridItemFeatherDescriptionNoPogoStick", "Por alguna razón, te parece que esta pluma sería útil si tuvieras un pogo...");
Database.addText("es.gridItemSpongeName", "Esponja mágica");
Database.addText("es.gridItemSpongeDescription", "Con esta esponja mágica te escurrirás (como una esponja) y reducirás tu tamaño.");
Database.addText("es.gridItemFortressKeyName", "Llave de la Fortaleza del desierto");
Database.addText("es.gridItemFortressKeyDescription", "Esta llave te permite entrar en la remota fortaleza que se encuentra al norte del Desierto. ¿Quién sabe lo que podrías encontrar allí?");
Database.addText("es.gridItemHeartPendantName", "Colgante corazón");
Database.addText("es.gridItemHeartPendantDescription", "Este colgante de corazón aumenta tus puntos de salud mientras lo lleves puesto.");
Database.addText("es.gridItemHeartPlugName", "Sello corazón");
Database.addText("es.gridItemHeartPlugDescription", "Este sello de hierro, patas de araña y \\\"cardioesencia\\\" en su núcleo aumentará tus puntos de salud en un 20 %.");
Database.addText("es.gridItemBeginnersGrimoireName", "Grimorio para principiantes");
Database.addText("es.gridItemBeginnersGrimoireDescription", "Este grimorio contiene tres hechizos bastante sencillos; es un libro especialmente pensado para principiantes. Permite usar Lluvia ácida (una capa de ácido caerá sobre tus enemigos), Bola de fuego (una enorme bola de fuego mágica irá volando hacia ellos) y Teletransporte (que te transportará a un lugar aleatorio).");
Database.addText("es.gridItemAdvancedGrimoireName", "Grimorio avanzado");
Database.addText("es.gridItemAdvancedGrimoireDescription", "El Grimorio avanzado consta de dos hechizos: Borramagia y Escudo de Espinas. El primero eliminará la magia en una misión en el momento en que lo uses, y con ella los hechizos que lanzaste y los poderes mágicos de tu adversario; el segundo formará un escudo de espinas flotantes a tu alrededor que daña a los enemigos que lo toquen.");
Database.addText("es.gridItemBlackMagicGrimoireName", "Grimorio de magia negra");
Database.addText("es.gridItemBlackMagicGrimoireDescription", "Encontraste este grimorio en una cueva, y por algo está tan bien escondido: contiene dos poderosos hechizos de magia negra. El primero levanta un muro gigantesco de bloques de obsidiana entre tú y tus enemigos, puedes utilizarlo para ganar tiempo; el segundo invoca a una hueste de demonios que atacará a cualquiera, también a ti... así que piénsatelo bien.");
Database.addText("es.gridItemUnicornHornName", "Cuerno de unicornio");
Database.addText("es.gridItemUnicornHornDescription", "Este cuerno mágico pertenecía a un unicornio. Su gran poder curativo te será de gran ayuda. Por lo visto, el unicornio se llamaba Charlie :-/");
Database.addText("es.gridItemXinopherydonClawName", "Zarpa de xinopherydon");
Database.addText("es.gridItemXinopherydonClawDescription", "Pertenece a un xinopherydon, animal primitivo de dos cabezas que se creía extinto. Puede doblar la potencia del arma que utilices.");
Database.addText("es.gridItemPitchforkName", "Horquilla");
Database.addText("es.gridItemPitchforkDescription", "Una horquilla especial para ahuecar la tierra sin necesidad de retirarla, conservando así los ecosistemas del subsuelo. Triplica la producción de tu granja de piruletas.");
Database.addText("es.gridItemShellPowderName", "Shell powder");
Database.addText("es.gridItemShellPowderDescription", "Los granjeros lo utilizan para acelerar el crecimiento de las piruletas. ¡Multiplicará tu producción por tres!");
Database.addText("es.gridItemPName", "Piedra P");
Database.addText("es.gridItemPDescription", "-\\\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\\\P  FFp(N/X \\\"D° (D ~ -Z DI}I \\\"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\\\OL&Y_)T|");
Database.addText("es.gridItemLName", "Piedra L");
Database.addText("es.gridItemLDescription", "\\\"ED^S~\\\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \\\"\\\\  - }XuX  IFHS Z(V~\\\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \\\" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\\\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("es.gridItemAName", "Piedra A");
Database.addText("es.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \\\"G L+eIN#J(|RE TRL- \\\\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \\\"S A-\\\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\\\M=_VTM\\\\W-e_VEQ  {");
Database.addText("es.gridItemYName", "Piedra Y");
Database.addText("es.gridItemYDescription", "IK  OA#  U   \\\\ }CY!NBX^(  U\\\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\\\ G  UV ) QLT K O_ AN{QG U(PG_°\\\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("es.gridItemRedSharkFinName", "Escama mágica de tiburón (roja)");
Database.addText("es.gridItemRedSharkFinDescription", "Aumenta sustancialmente el daño de Bola de fuego (por fin sirve para algo...)");
Database.addText("es.gridItemGreenSharkFinName", "Escama mágica de tiburón (verde)");
Database.addText("es.gridItemGreenSharkFinDescription", "Siente el poder de la naturaleza con esta escama mágica, que multiplica por 5 la producción de tu granja de piruletas.");
Database.addText("es.gridItemPurpleSharkFinName", "Escama mágica de tiburón (violeta)");
Database.addText("es.gridItemPurpleSharkFinDescription", "Te proporciona un nuevo hechizo de magia negra que solo puedes usar una vez por misión. ¡Ten mucho cuidado!");
Database.addText("es.gridItemTalkingCandyName", "Caramelo parlante");
Database.addText("es.gridItemTalkingCandyDescription", "Apareció cuando colocaste las cuatro piedras en lo alto de la Torre del Castillo. Podría ayudarte a abrir la Candy Box...");
Database.addText("es.inventorySpecialNothingEqItem", "Nada");
Database.addText("es.eqItemWeaponWoodenSwordName", "Espada de madera");
Database.addText("es.eqItemWeaponWoodenSwordDescription", "No es más que una espada de madera");
Database.addText("es.eqItemWeaponIronAxeName", "Hacha de hierro");
Database.addText("es.eqItemWeaponIronAxeDescription", "Un hacha de hierro. Bien afilada y más poderosa que la Espada de madera.");
Database.addText("es.eqItemWeaponPolishedSilverSwordName", "Espada pulida de plata");
Database.addText("es.eqItemWeaponPolishedSilverSwordDescription", "Una poderosa espada cubierta de púas.");
Database.addText("es.eqItemWeaponTrollBludgeonName", "Cachiporra del Troll");
Database.addText("es.eqItemWeaponTrollBludgeonDescription", "Se la quitaste al troll que vigilaba el puente. Es lenta, pero aplastará a tus enemigos.");
Database.addText("es.eqItemWeaponTribalSpearName", "Lanza tribal");
Database.addText("es.eqItemWeaponTribalSpearDescription", "La encontraste en el cuerpo sin vida de un guerrero que murió en un gran hoyo. Al principio es difícil manejarla, pero en cuanto te acostumbres será un arma eficaz.");
Database.addText("es.eqItemWeaponSummoningTribalSpearName", "Lanza tribal de invocación");
Database.addText("es.eqItemWeaponSummoningTribalSpearDescription", "Además de ser un poco más poderosa que la normal, esta lanza tribal permite invocar guerreros de la tribu para que te ayuden en las misiones.");
Database.addText("es.eqItemWeaponMonkeyWizardStaffName", "Cetro del Mono Mago");
Database.addText("es.eqItemWeaponMonkeyWizardStaffDescription", "Pertenecía al mono mago desnudo que encontraste en la Cueva. Por sí solo, lanza hechizos que alcanzarán a tus enemigos.");
Database.addText("es.eqItemWeaponEnchantedMonkeyWizardStaffName", "Centro encantado del Mono Mago");
Database.addText("es.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Es más rápido que la versión no encantada, y lanza muchos más hechizos.");
Database.addText("es.eqItemWeaponGiantSpoonName", "Cuchara gigante");
Database.addText("es.eqItemWeaponGiantSpoonDescription", "Esta cuchara estaba en una tetera gigante en la Fortaleza del desierto. No sabes si la habrán utilizado como tal alguna vez, pero si es así, debía tratarse de alguien MUY grande. Y no quieres conocerlo.");
Database.addText("es.eqItemWeaponGiantSpoonOfDoomName", "Cuchara gigante del Destino");
Database.addText("es.eqItemWeaponGiantSpoonOfDoomDescription", "Es aún más poderosa que la cuchara gigante normal. Sin embargo, es bastante lenta.");
Database.addText("es.eqItemWeaponScytheName", "Guadaña");
Database.addText("es.eqItemWeaponScytheDescription", "Cuentan que esta Guadaña pertenecía a la mismísima Muerte. Es extremadamente rápida.");
Database.addText("es.eqItemHatMerchantHatName", "Sombrero del Mercader");
Database.addText("es.eqItemHatMerchantHatDescription", "El Mercader te vendió este sombrero. Y como le encanta el dulce, este sombrero multiplica por 7 el número de caramelos que consigas en las misiones.");
Database.addText("es.eqItemHatSorceressHatName", "Sombrero de la Hechicera");
Database.addText("es.eqItemHatSorceressHatDescription", "La Hechicera te vendió este sombrero. Incrementa el poder de tus hechizos y pociones.");
Database.addText("es.eqItemHatOctopusKingCrownName", "Corona del Rey Pulpo");
Database.addText("es.eqItemHatOctopusKingCrownDescription", "Cuando llevas esta corona, confías mucho más en tus posibilidades. Puede que no dé ninguna ventaja estratégica, ¡pero la confianza en uno mismo es importante!");
Database.addText("es.eqItemHatOctopusKingCrownWithJaspersName", "Corona del Rey Pulpo jaspeada");
Database.addText("es.eqItemHatOctopusKingCrownWithJaspersDescription", "Esta corona encantada está hecha de oro y jaspe rojo. En las misiones, te permite lanzar poderosas bolas de fuego mágicas. ¡Y encima brilla!");
Database.addText("es.eqItemHatOctopusKingCrownWithObsidianName", "Corona del Rey Pulpo de obsidiana");
Database.addText("es.eqItemHatOctopusKingCrownWithObsidianDescription", "Esta corona encantada está hecha de oro y obsidiana, es una belleza. En las misiones, permite invocar al Rey Pulpo cada cierto tiempo para que luche a tu lado. ¡A más brazos, más espadas!");
Database.addText("es.eqItemGlovesLeatherGlovesName", "Guantes de cuero");
Database.addText("es.eqItemGlovesLeatherGlovesDescription", "No hacen nada especial. Por lo menos son suavitos, y cómodos.");
Database.addText("es.eqItemGlovesRedEnchantedGlovesName", "Guantes rojos encantados");
Database.addText("es.eqItemGlovesRedEnchantedGlovesDescription", "Estos guantes encantados desprenden una suave luz roja en la oscuridad. En las misiones, lanzan pequeñas bolas de fuego a tus enemigos de forma aleatoria, te resultarán muy útiles.");
Database.addText("es.eqItemGlovesPinkEnchantedGlovesName", "Guantes rosas encantados");
Database.addText("es.eqItemGlovesPinkEnchantedGlovesDescription", "Estos guantes encantados dejan una marca roja en todo lo que toques. Durante las misiones, no dejarán de curarte.");
Database.addText("es.eqItemBootsRocketBootsName", "Botas-cohete");
Database.addText("es.eqItemBootsRocketBootsDescription", "Estas botas son geniales, porque te permiten saltar en el aire. ¡Prácticamente volarás!");
Database.addText("es.eqItemBootsLeatherBootsName", "Botas de cuero");
Database.addText("es.eqItemBootsLeatherBootsDescription", "Unas simples botas de cuero.");
Database.addText("es.eqItemBootsBootsOfIntrospectionName", "Botas de introspección");
Database.addText("es.eqItemBootsBootsOfIntrospectionDescription", "Respira hondo y cálmate. Si llevas estas botas, no te moverás mientras estés tocando el suelo.");
Database.addText("es.eqItemBodyArmoursLightweightBodyArmourName", "Armadura ligera");
Database.addText("es.eqItemBodyArmoursLightweightBodyArmourDescription", "Ofrece una protección reducida. Serás un poco más resistente a los ataques.");
Database.addText("es.eqItemBodyArmoursKnightBodyArmourName", "Armadura de caballero");
Database.addText("es.eqItemBodyArmoursKnightBodyArmourDescription", "Es una armadura fuerte con la que estarás protegido. Serás más resistente a los ataques.");
Database.addText("es.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Armadura de caballero encantada");
Database.addText("es.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Esta armadura es muy especial. Serás MUCHO más resistente a los ataques de tus rivales, pero la potencia de tu arma se reducirá a la mitad.");
Database.addText("es.mapVillageForgeBuyWoodenSwordButton", "Comprar Espada de madera (150 caramelos)");
Database.addText("es.mapVillageForgeBuyWoodenSwordSpeech", "¡Gracias por tu compra! Es una espada bastante floja, pero no está mal para empezar.");
Database.addText("es.mapVillageForgeBuyIronAxeButton", "Comprar Hacha de hierro (400 caramelos)");
Database.addText("es.mapVillageForgeBuyIronAxeSpeech", "Espero que te guste esta Hacha de hierro. ¡La acabo de afilar!");
Database.addText("es.mapVillageForgeBuyPolishedSilverSwordButton", "Comprar Espada pulida de plata (2000 caramelos)");
Database.addText("es.mapVillageForgeBuyPolishedSilverSwordSpeech", "Fabricar esta espada me llevó mucho tiempo. Te aseguro que vale lo que cuesta.");
Database.addText("es.mapVillageForgeBuyLightweightBodyArmourButton", "Comprar Armadura ligera (15 000 caramelos)");
Database.addText("es.mapVillageForgeBuyLightweightBodyArmourSpeech", "Esta armadura te protegerá de los enemigos.");
Database.addText("es.mapVillageForgeBuyScytheButton", "Comprar Guadaña (5 000 000 caramelos)");
Database.addText("es.mapVillageForgeBuyScytheSpeech", "He tardado años en forjar esta Guadaña. Es una verdadera obra maestra. Es probablemente el arma más rápida que jamás podrás blandir. ¡Buena suerte!");
Database.addText("es.wishingWellThrowFirstCandyButton", "Tirar un caramelo al pozo");
Database.addText("es.wishingWellCandyIntroductionSpeech", "¡Hola, caminante! Soy el Pozo de los deseos. ¡Te concederé deseos a cambio de dulces! Cuando tires caramelos dentro de mí, curaré tus heridas.");
Database.addText("es.wishingWellThrewCandiesSpeech", "¡Tus heridas están curadas!");
Database.addText("es.wishingWellNoWoundSpeech", "¡No tienes heridas que curar!");
Database.addText("es.wishingWellThrowFirstLollipopButton", "Tirar una piruleta al pozo");
Database.addText("es.wishingWellLollipopIntroductionSpeech", "¡Hola, caminante! Soy el Pozo de los deseos. ¡Te concederé deseos a cambio de dulces! Cuando tires piruletas dentro de mí, las convertiré en caramelos.");
Database.addText("es.wishingWellThrewLollipopsSpeech", "¡Tus piruletas se convierten en caramelos! ¡Dos piruletas por caramelo.");
Database.addText("es.wishingWellThrowChocolateBarButton", "Tirar una tableta de chocolate al pozo");
Database.addText("es.wishingWellChocolateBarIntroductionSpeech", "¡Hola, caminante! Soy el Pozo de los deseos. ¡Te concederé deseos a cambio de dulces! Me encantan las tabletas de chocolate. Me pirran. Por cada tableta que tires dentro de mí, incluida esta, te concederé un encantamiento mágico.");
Database.addText("es.wishingWellThrewChocolateBarSpeech", "¿Qué objeto te gustaría encantar?");
Database.addText("es.wishingWellThrowPainAuChocolatButton", "Tirar un pain au chocolat al pozo");
Database.addText("es.wishingWellPainAuChocolatIntroductionSpeech", "¡Hola, caminante! Soy el Pozo de los deseos. ¡Te concederé deseos a cambio de dulces! Cuando tires un pain au chocolat dentro de mí, te daré un don muy especial. Elige sabiamente.");
Database.addText("es.wishingWellThrewPainAuChocolatSpeech", "¡Gracias por el pain au chocolat! Puedes escoger tu don.");
Database.addText("es.wishingWellChooseGift", "¡Escoge tu don!");
Database.addText("es.wishingWellChooseGiftButton", "Escoger");
Database.addText("es.wishingWellGiftDoneSpeech", "¡Listo! Ahora tienes un nuevo don. Aparecerá en el panel de estadísticas de tu inventario.");
Database.addText("es.wishingWellNoPossibleEnchantment", "No se puede encantar");
Database.addText("es.wishingWellChooseEnchantment", "Elige el encantamiento");
Database.addText("es.wishingWellEnchantButton", "Encantar");
Database.addText("es.wishingWellEnchantmentDoneSpeech", "¡Ya está! Tu objeto está encantado.");
Database.addText("es.pierLighthouseButton", "Ir al Faro en barca");
Database.addText("es.pierTheSeaButton", "Saltar al mar");
Database.addText("es.lonelyHouseOpenBox", "Abrir la caja");
Database.addText("es.lonelyHouseShakeBox", "Agitar la caja");
Database.addText("es.lonelyHouseBreakLock", "Romper la cerradura");
Database.addText("es.lonelyHouseKickBox", "Pegar una patada a la caja");
Database.addText("es.lonelyHouseAskTheBoxToOpenItself", "Pedir a la caja que se abra sola");
Database.addText("es.lonelyHouseLureTheBoxWithACandy", "Tentar a la caja con un caramelo");
Database.addText("es.lonelyHouseTakeTheBox", "Llevarte la caja, seguramente necesites una llave de todas formas");
Database.addText("es.lonelyHouseOpenBoxResult", "La caja está cerrada con llave");
Database.addText("es.lonelyHouseShakeBoxResult", "No ocurre nada");
Database.addText("es.lonelyHouseBreakLockResult", "La cerradura resiste");
Database.addText("es.lonelyHouseKickBoxResult", "El pie te duele un poco, pero no ocurre nada");
Database.addText("es.lonelyHouseAskTheBoxToOpenItselfResult", "... sabes que estás hablando con una caja, ¿verdad?");
Database.addText("es.lonelyHouseLureTheBoxWithACandyResult", "A la caja parece no importarle");
Database.addText("es.lonelyHouseTakeTheBoxResult", "Probablemente hay algo interesante en esta Candy Box.");
Database.addText("es.lollipopFarmConstructMill", "Construir un molino (10 000 piruletas)");
Database.addText("es.lollipopFarmFeedMill", "Surtir al molino");
Database.addText("es.lollipopFarmCurrentCandiesProduction", "Producción de caramelos actual");
Database.addText("es.lollipopFarmDigPond", "Cavar un estanque (100 000 piruletas)");
Database.addText("es.lollipopFarmBuyLolligator", "Comprar un piruledrilo (1200 caramelos)");
Database.addText("es.lollipopFarmLolligatorsConversionText", "Conversión caramelos -> piruletas activada");
Database.addText("es.lighthouseAskButton", "Preguntar");
Database.addText("es.lighthouseQuestionWho", "¿Quién eres?");
Database.addText("es.lighthouseQuestionWhoSpeech", "Soy un cíclope muy viejo.");
Database.addText("es.lighthouseQuestionWhat", "¿Qué haces aquí?");
Database.addText("es.lighthouseQuestionWhatSpeech", "Siempre vivo aquí, esperando a que un barco venga. Ha pasado mucho tiempo desde que viese un barco, pero debo quedarme aquí, mirando al mar, porque mi barco podría llegar.");
Database.addText("es.lighthouseQuestionWhyEatCandies", "¿Por qué querría comer caramelos?");
Database.addText("es.lighthouseQuestionWhyEatCandiesSpeech", "¡Porque son buenos para la salud!");
Database.addText("es.lighthouseQuestionCandyBox", "¿Qué es una Candy Box?");
Database.addText("es.lighthouseQuestionCandyBoxSpeech", "Es una caja muy antigua. Dicen que contiene todos los caramelos del mundo. La leyenda cuenta que quien consiga abrirla tendrá tantos caramelos que cualquier cosa sería posible.");
Database.addText("es.lighthouseQuestionDragon", "El Dragon me dijo que viniera aquí porque quiero caramelos.");
Database.addText("es.lighthouseQuestionDragonSpeech", "Ah, ya veo... Bueno, no puedo darte caramelos de forma directa, pero sí algo que es esencial para conseguir un MONTÓN de caramelos. Pero primero hay que ponerte a prueba. Porque lo que tengo no se le puede dar a cualquiera. Resuelve este puzle y será tuyo.");
Database.addText("es.lighthouseFoundStone", "¡Enhorabuena! Has pasado la prueba y encontrado la piedra. Es muy valiosa, pero solo es útil si tienes las otras tres piedras como esta. ¡Buena suerte!");
Database.addText("es.lighthouseFoundStoneAgain", "Buen trabajo, has resuelto el puzle de nuevo. Parece que te gusta.");
Database.addText("es.saveLocalSaveTitle", "Guardar por el navegador");
Database.addText("es.saveLocalSaveWhy", "Elige el guardado local si quieres seguir jugando en tu dispositivo y navegador actuales.");
Database.addText("es.saveLocalSaveWarning0", "Parece que tu navegador no soporta HTML5.");
Database.addText("es.saveLocalSaveWarning1", "Deberías actualizar tu navegador para poder usar la función de guardado local.");
Database.addText("es.saveLocalSaveChooseSlot", "Elige un slot para guardar:");
Database.addText("es.saveLocalSaveAutosaveEnabled", "Autoguardado activado");
Database.addText("es.saveLocalSaveChooseWhatToDo", "Elige qué hacer:");
Database.addText("es.saveLocalSaveSaveButton", "Guardar");
Database.addText("es.saveLocalSaveAutosaveButton", "Guardar cada 10 minutos");
Database.addText("es.saveLocalSaveDisableAutosaveButton", "Desactivar autoguardado");
Database.addText("es.saveFileSaveTitle", "Guardar por texto");
Database.addText("es.saveFileSaveWhy0", "Elige guardado por texto si:");
Database.addText("es.saveFileSaveWhy1", "Quieres seguir jugando en otro dispositivo o navegador");
Database.addText("es.saveFileSaveWhy2", "Si quieres compartir tu partida con alguien");
Database.addText("es.saveFileSaveWhy3", "Por alguna razón quieres vaciar la caché de tu navegador");
Database.addText("es.saveFileSaveWhy4", "(borrará tus partidas guardadas locales)");
Database.addText("es.saveFileSaveButton", "Obtener la partida actual en texto");
Database.addText("es.saveFileSaveWarning", "Ahora copia este texto en algún sitio (en un archivo, por ejemplo)");
Database.addText("es.saveLocalLoadTitle", "Cargar por navegador");
Database.addText("es.saveLocalLoadYouCan", "Puedes cargar una partida guardada local usando los enlaces siguientes:");
Database.addText("es.saveLocalLoadThanksTo", "Gracias a la magia de HTML5, deberías poder usar estos enlaces incluso sin estar conectado.");
Database.addText("es.saveFileLoadTitle", "Cargar por texto");
Database.addText("es.saveFileLoadPaste", "Pega el texto de la partida debajo y pulsa el botón \\\"Cargar\\\"");
Database.addText("es.saveFileLoadButton", "Cargar");
Database.addText("es.mountainsText0", "¡Has visto algo en las montañas!");
Database.addText("es.mountainsText1", "Parece interesante. Podría ser útil.");
Database.addText("es.mountainsTextButton", "Escalar la montaña para conseguirlo");
Database.addText("es.mountainsTextAfter", "¡Has encontrado un Pogo! Se ha añadido a tu inventario.");
Database.addText("es.secondHouseIntroSpeech", "Hola, soy el Mercader de caramelos. Haría cualquier cosa por caramelos. ¿Qué necesitas?");
Database.addText("es.secondHouseLollipop1Speech", "Esta es una piruleta con sabor a limón. ¡Mi favorita! Cuesta 60 caramelos, pero los merece.");
Database.addText("es.secondHouseLollipop2Speech", "Esta es una piruleta con sabor a fresa. Está rica. Me gusta su color rojo. ¡Solo 60 caramelos!");
Database.addText("es.secondHouseLollipop3Speech", "Esta piruleta sabe a calabaza. ¡Apuesto a que nunca has probado una! 60 caramelos y es tuya.");
Database.addText("es.secondHouseLollipopButtonText", "Comprar esta piruleta (60 caramelos)");
Database.addText("es.secondHouseMerchantHatSpeech", "Podría venderte mi sombrero, pero es bastante valioso, ¿sabes? Tendrás que darme un montón de caramelos por él. Digamos 1 millón de caramelos. Parece justo, ¿no?");
Database.addText("es.secondHouseMerchantHatButtonText", "Comprar el Sombrero del Mercader (1 000 000 caramelos)");
Database.addText("es.secondHouseTimeRingSpeech", "Este es un Anillo del tiempo. Es mágico. Te permite ralentizar el tiempo cuando estás en apuros.");
Database.addText("es.secondHouseTimeRingButtonText", "Comprar el Anillo del tiempo (500 caramelos)");
Database.addText("es.secondHouseLeatherGlovesSpeech", "Estos guantes de cuero están hechos de piel de camello, son de buena calidad. Tengo muchas existencias, por eso están tan baratos: ¡solo 300 caramelos!");
Database.addText("es.secondHouseLeatherBootsButtonText", "Comprar un par de Botas de cuero (300 caramelos)");
Database.addText("es.secondHouseLeatherBootsSpeech", "Estas botas de cuero de buena calidad están hechas de piel de camello. Mantendrán tus pies calientes.");
Database.addText("es.secondHouseLeatherGlovesButtonText", "Comprar un par de Guantes de cuero (300 caramelos)");
Database.addText("es.secondHouseChocolateBarSpeech", "Esta es una tableta de chocolate. No sé para qué sirve, pero resulta que es bastante rara, lo que explica su precio. ¡800 caramelos y es tuya!");
Database.addText("es.secondHouseChocolateBarButtonText", "Comprar la tableta de chocolate (800 caramelos)");
Database.addText("es.outsideTheHoleButton", "Saltar en este gran hoyo que hay en el suelo");
Database.addText("es.theCaveExitText0", "Por fin llegaste a la salida de la cueva.");
Database.addText("es.theCaveExitText1", "Se ve un gran bosque desde aquí.");
Database.addText("es.theCaveExitButtonText", "Salir de la cueva");
Database.addText("es.theCaveFirstSentenceWentStraight", "Sigues de frente.");
Database.addText("es.theCaveFirstSentenceWentLeft", "Tomas el camino de la izquierda.");
Database.addText("es.theCaveFirstSentenceWentRight", "Tomas el camino de la derecha.");
Database.addText("es.theCaveFirstSentenceYouAre", "Estás en una cueva. Hay tres caminos frente a ti.");
Database.addText("es.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Ves algo raro en el suelo delante de ti.");
Database.addText("es.theCavePattern_ChocolateBarNowSeeChocolateBar", "Ves una tableta de chocolate delante de ti.");
Database.addText("es.theCavePattern_TreasureMapSentence", "Ves pequeñas rocas dispuestas de una forma extraña.");
Database.addText("es.theCavePattern_MonkeyWizardSentence", "Te topas con un mono mago desnudo.");
Database.addText("es.theCavePattern_MonkeyWizardButton", "Desafiarlo");
Database.addText("es.theCavePattern_OctopusKingSentence", "Te topas con el Rey Pulpo. Parece repugnante.");
Database.addText("es.theCavePattern_OctopusKingButton", "Desafiarlo");
Database.addText("es.fortressInsideText0", "Estás dentro de la Fortaleza del desierto.");
Database.addText("es.fortressInsideText1", "Puedes elegir entre tres puertas.");
Database.addText("es.fortressInsideText2", "Cada una de ellas lleva a una gran sala con un tesoro al final.");
Database.addText("es.fortressInsideEnterRoom1", "Entrar en la primera sala");
Database.addText("es.fortressInsideEnterRoom2", "Entrar en la segunda sala");
Database.addText("es.fortressInsideEnterRoom3", "Entrar en la tercera sala");
Database.addText("es.treasureButtonDig", "Cavar");
Database.addText("es.treasureButtonYouFound", "¡Has encontrado tres tabletas de chocolate!");
Database.addText("es.sorceressHutHello", "Hola, soy la Hechicera. Podría enseñarte un par de cosas de magia. También te puedo dar algún objeto interesante o lanzar un hechizo para ti. ¡Pero todo tiene un precio! Y el precio serán piruletas. Un montón de piruletas.");
Database.addText("es.sorceressHutClickedGrimoire", "Este es un Grimorio hecho para principiantes. Si lo llevas en tus misiones, podrás lanzar hechizos simples pero útiles. ¡Lo necesitas! Solo 5000 piruletas.");
Database.addText("es.sorceressHutBuyGrimoireButton", "Comprar este Grimorio (5 000 piruletas)");
Database.addText("es.sorceressHutBuyGrimoireSpeech", "¡Gracias por comprarlo! Con este Grimorio podrás lanzar tres hechizos. ¡Mucha suerte!");
Database.addText("es.sorceressHutClickedGrimoire2", "Este es un Grimorio avanzado. Si lo llevas en tus misiones, podrás lanzar dos hechizos avanzados. Lo escribí yo misma y no fue fácil. 20 000 piruletas es un precio justo.");
Database.addText("es.sorceressHutBuyGrimoire2Button", "Comprar este Grimorio (20 000 piruletas)");
Database.addText("es.sorceressHutBuyGrimoire2Speech", "¡Gracias por comprarlo! Con este Grimorio podrás lanzar dos hechizos. ¡Úsalos sabiamente!");
Database.addText("es.sorceressHutClickedCauldron", "Este es mi caldero. Me permite preparar pociones mágicas. Podría vendértelo, pero es muy valioso... Te costará 100 000 piruletas.");
Database.addText("es.sorceressHutBuyCauldronButton", "Comprar el Caldero (100 000 piruletas)");
Database.addText("es.sorceressHutBuyCauldronSpeech", "¡Muchas gracias! ¡100 000 piruletas para mí! También te he dado un manual de preparación de pociones. Te será útil.");
Database.addText("es.sorceressHutClickedHat", "¡La verdad es que mi sombrero es muy chulo! Pero no te lo puedo vender. Es muyyyyy valioso. En serio, no puedo. No insistas. No. No, no, no debería hacerlo. Venga, te lo cambiaré, pero por 1 000 000 000 piruletas. De todas formas, probablemente no puedas pagar eso.");
Database.addText("es.sorceressHutBuyHatButton", "Comprar el Sombrero de la Hechicera (1 000 000 000 piruletas)");
Database.addText("es.sorceressHutBuyHatSpeech", "¡Mil millones de piruletas para mííííí! Pero ya no tengo ese sombrero... pero mil millones de piruletas, ¡guau...! Ha merecido la pena.");
Database.addText("es.cauldronPreviousPageButton", "Página anterior");
Database.addText("es.cauldronNextPageButton", "Página siguiente");
Database.addText("es.cauldronWhatYouWantToPut", "Cosas que quieres meter en el caldero");
Database.addText("es.cauldronWhatIsIn", "Cosas que hay en el caldero");
Database.addText("es.cauldronWhatYouCanDo", "Lo que puedes hacer con ellas");
Database.addText("es.castleBigRoomComment", "Una sala grande");
Database.addText("es.castleARoomComment", "Una sala");
Database.addText("es.castleADarkRoomComment", "Una sala oscura");
Database.addText("es.castleCastleEntranceComment", "La entrada al Castillo");
Database.addText("es.castleTowerEntranceComment", "La entrada a la Torre");
Database.addText("es.castleNougatMonsterComment", "Atacar al Monstruo de guirlache gigante");
Database.addText("es.castleGuardsComment", "Atacar a los guardias");
Database.addText("es.castleStairsComment", "Escaleras");
Database.addText("es.buttonBackToTheCastle", "Volver al Castillo");
Database.addText("es.castleBigRoomHovenSpeechSad", "¡Hola! Soy un horno de pan muy viejo. Solía hornear miles de pasteles muy ricos, pero ya no me usa nadie. Quizás... quizás puedas ayudarme. ¡Simplemente dame unos pocos dulces! No te preocupes, ¡no te arrepentirás! Puedes confiar en mí.");
Database.addText("es.castleBigRoomHovenNotEnough", "Vaya... No tienes suficientes dulces, no puedo hacer nada. Así soy inútil. Soy el horno de pan inútil, así es como deberías llamarme.");
Database.addText("es.castleBigRoomHovenSpeechMadePainAuChocolat", "¡Sí! ¡Muchas gracias! He usado 100 caramelos y una tableta de chocolate, y te he hecho... ¡un pain au chocolat! Es mi dulce preferido. ¡Espero que a ti tambien te guste!");
Database.addText("es.castleBigRoomHovenSpeechHappy", "Si quieres que te haga más dulces, ¡solo dímelo! Me encantaría ayudarte.");
Database.addText("es.castleBigRoomHovenSpeechHappyNotEnough", "Vaya, es una pena que no tengas suficientes dulces. Necesito 100 caramelos y una Tableta de chocolate. ¡Vuelve cuando lo tengas!");
Database.addText("es.castleBigRoomHovenLetHovenTakeButton", "Darle al Horno los dulces que quiera");
Database.addText("es.castleBigRoomHovenThanks", "¡Gracias, Horno!");
Database.addText("es.dragonStopTickling", "¡Eh, tú! Por favor, deja de hacerme cosquillas.");
Database.addText("es.dragonStopTicklingButton", "Oh, vaya, perdona. Pensaba que debía atacarte.");
Database.addText("es.dragonTalking", "Soy el Dragón y este es mi castillo. Veo que has conseguido entrar, debes de ser muy valiente... Me encantaría ayudar a alguien como tú. ¿Qué estás buscando?");
Database.addText("es.dragonTalkingChallengeButton", "Desafío");
Database.addText("es.dragonTalkingFameButton", "Fama");
Database.addText("es.dragonTalkingCandiesButton", "Caramelos");
Database.addText("es.dragonTalkingChallengeSpeech", "Ah, ¿así que quieres un desafío? Creo que deberías viajar al mismo Infierno. Por todos es sabido que el Diablo es un oponente duro. ¡Súbete a mi espalda y te llevaré!");
Database.addText("es.dragonTalkingFameSpeech", "La mejor forma de hacerse famoso es enfrentarse al mismo desarrollador. Sé dónde vive y te puedo llevar allí. Pero prepárate, no será fácil.");
Database.addText("es.dragonTalkingCandiesSpeech", "Últimamente, todo lo que queremos son caramelos, ¿no? Creo que un amigo mío podría ayudarte con eso. Lo reconocerás fácilmente: solo tiene un ojo. Simplemente dile que me conoces.");
Database.addText("es.dragonTalkingChallengeAnswer", "¡Entonces vamos!");
Database.addText("es.dragonTalkingFameAnswer", "Estoy listo");
Database.addText("es.dragonTalkingCandiesAnswer", "¡Vale, gracias!");
Database.addText("es.buttonBackToCastle", "Volver al Castillo");
Database.addText("es.talkingCandySpeechNoBox", "¡Ey! Soy el Caramelo parlante. Casi te pasas el juego. Solo te falta encontrar la Candy Box. Está en una casa fuera del Pueblo. ¡Este es el último paso!");
Database.addText("es.talkingCandySpeech1", "¡Ey! Soy el Caramelo parlante. Enhorabuena, ¡te has pasado el juego! Abriré la Candy Box por ti. Este es tu premio. ¿Quieres que continúe?");
Database.addText("es.talkingCandySpeech2", "¡Hecho! Ahora puedes entrar en ella. Espero que el juego te haya gustado :)");
Database.addText("es.talkingCandyButton", "¡¡Sí!!");
Database.addText("es.lighthousePuzzleResetButton", "Reiniciar");
Database.addText("fr.mapVillageComment", "Le Village");
Database.addText("fr.mapFortressComment", "La forteresse du désert");
Database.addText("fr.mapATreeComment", "Un arbre");
Database.addText("fr.mapTheDesertComment", "Le désert");
Database.addText("fr.mapWishingWellComment", "Le puits aux souhaits");
Database.addText("fr.mapLonelyHouseComment", "Une maison solitaire");
Database.addText("fr.mapForestComment", "La forêt");
Database.addText("fr.mapCastleEntranceComment", "Entrée du château");
Database.addText("fr.mapCastleComment", "Le château");
Database.addText("fr.mapDragonComment", "Le dragon");
Database.addText("fr.candyBoxEatCandiesButton", "Manger tous les bonbons");
Database.addText("fr.candyBoxThrowCandiesButton", "Jeter 10 bonbons par terre");
Database.addText("fr.mapVillageLockedHouseComment", "Une maison verrouillée");
Database.addText("fr.mapVillageAHouseComment", "Une maison");
Database.addText("fr.mapVillageForgeComment", "La forge");
Database.addText("fr.buttonBackToTheMap", "Revenir à la carte");
Database.addText("fr.mapSorceressHutComment", "Hutte de la sorcière");
Database.addText("fr.buttonBackToTheVillage", "Revenir au village");
Database.addText("fr.mapATreeIntroductionSpeech", "Bonjour, je suis l'Écureuil. Je peux te fournir des bonbons, et un tas d'autres choses. Je sais à quel point tu aimes les bonbons. Mais je me sens seul dans cette forêt.");
Database.addText("fr.mapATreeIntroductionButton", "Comment puis-je t'aider ?");
Database.addText("fr.mapATreeFirstQuestion", "Je vais te poser des questions. Si tu réponds correctement, les plus douces sucreries seront à toi ! Première question : aimes-tu vraiment les bonbons ? (répondre en anglais)");
Database.addText("fr.mapATreeSecondQuestion", "C'est bon ! Voici 20 bonbons pour toi. Maintenant complète cette suite de lettres : S, E, I, D, N, A, ?");
Database.addText("fr.mapATreeThirdQuestion", "Candies! Voici 100 bonbons pour toi. Question suivante : combien de bonbons possède la personne la plus bonbon du monde ?");
Database.addText("fr.mapATreeFourthQuestion", "Voici 500 bonbons pour toi ! La prochaine récompense devrait être encore plus intéressante... Voici l'énigme : Dans une ancienne forêt pousse un très vieil arbre, sur lequel vivent les animaux les plus intelligents de ce monde. On dit que cet arbre possède 60 racines, 360 branches et 2160 feuilles. Combien de marques peut-on trouver sur son tronc ?");
Database.addText("fr.mapATreeFifthQuestion", "Bravo ! Je parlais de mon arbre, effectivement. Voici 3 sucettes pour toi. Fais-en bon usage ! Prochaine énigme : écoute attentivement : Sous la pleine lune, je jette un chapeau jaune dans la mer rouge. Qu'arrive-t-il au chapeau jaune ?");
Database.addText("fr.mapATreeTicTacToeIntro", "Bien répondu ! Ce n'était pas trop dur. Voici trois barres de chocolat pour toi ! Pour la prochaine récompense, on va changer un peu les règles. Tu vas devoir jouer à un jeu avec moi ! Es-tu prêt ?");
Database.addText("fr.mapATreeTicTacToeIntroButton", "Bien sûr que je le suis !");
Database.addText("fr.mapATreeTicTacToeLetsPlay", "Le jeu est Tic-Tac-Toe. On joue sur un plateau de 3 par 3. Tu utiliseras le signe X et moi le signe O. On place nos signes alternativement, et le but est d'en aligner trois. Je te laisse commencer !");
Database.addText("fr.mapATreeTicTacToeNobodyWins", "Le plateau est entièrement remplit et on a tous les deux échoué à aligner trois signes : personne ne gagne ! Tu veux rejouer ?");
Database.addText("fr.mapATreeTicTacToeYouLose", "J'en ai aligné trois ! J'ai gagné. Tu veux rejouer ?");
Database.addText("fr.mapATreeTicTacToeTryAgainButton", "Oui je veux !");
Database.addText("fr.mapATreeTicTacToeYouWin", "Wow, c'est un coup innatendu. Mais tu en as aligné trois, je ne peux rien dire. Tu as gagné ! Prends cette clé ! Elle ouvre l'une des maisons du village sous la forêt.");
Database.addText("fr.mapATreeTicTacToeAnymoreSweet", "Merci, écureuil ! Un autre défi ?");
Database.addText("fr.mapATreeNoMoreChallenge", "Malheureusement non, je n'ai plus de défi pour toi... Jouer avec toi était vraiment amusant, je t'en remercie !");
Database.addText("fr.buttonExitQuestKeeping", "Quitter la quête (et gardez ce que vous avez trouvé)");
Database.addText("fr.buttonExitQuestNoKeeping", "Quitter la quête (vous ne garderez pas ce que vous avez trouvé)");
Database.addText("fr.buttonExitQuestNoKeepingBecauseLose", "Quitter la quête (vous ne garderez pas ce que vous avez trouvé car vous avez échoué)");
Database.addText("fr.mapVillageForgeIntroductionSpeech", "Bonjour ! Je suis un forgeron. Je peux vous vendre diverses armes et pièces d'équipement.");
Database.addText("fr.mapVillageForgeIntroductionSpeechNoMoreToSell", "Bonjour ! Je suis un forgeron. Je n'ai plus rien à vous vendre. Revenez plus tard, peut-être ?");
Database.addText("fr.mapVillageFifthHouseNoWeaponSpeech", "Bonjour. Ma cave est pleine de rats, j'ai besoin de quelqu'un pour m'en débarrasser... si seulement quelqu'un avec une arme pouvait m'aider...");
Database.addText("fr.mapVillageFifthHouseWeaponSpeech", "Eh, vous ! Je vois que vous portez une arme ! Si vous tuez les rats qui infestent ma cave, je vous récompenserai !");
Database.addText("fr.mapVillageFifthHouseAgree", "C'est parti !");
Database.addText("fr.mapVillageFifthHouseCellarDone", "Merci de m'en avoir débarrassé ! Voici quelque chose de très précieux en récompense : une carte du monde. Je pense que vous en aurez plus l'usage que moi.");
Database.addText("fr.mapVillageTheShopComment", "Le magasin");
Database.addText("fr.mapBridgeComment", "Le pont");
Database.addText("fr.mapFarmComment", "La ferme à sucettes");
Database.addText("fr.mapCaveEntranceComment", "L'entrée de la grotte");
Database.addText("fr.mapLighthouseComment", "Le phare");
Database.addText("fr.mapPierComment", "La jetée");
Database.addText("fr.mapTheHoleComment", "Le Trou");
Database.addText("fr.candyBoxRequestStatusBarUnlocked", "Demander une nouvelle fonctionnalité au développeur (30 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfg", "En demander une autre (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedSave", "Demander encore (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedHealthBar", "Demander quelque chose de plus intéressant (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedMap", "Dernière demande ! Celle-là a intérêt de valoir le coup. (10 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedComment", "Vous avez débloqué une barre d'état ! (en haut)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfgComment1", "Vous avez maintenant accès à un onglet de configuration.");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfgComment2", "Vous pouvez changer la langue, si vous le voulez.");
Database.addText("fr.candyBoxRequestStatusBarUnlockedSaveComment", "Un onglet de sauvegarde sauvage apparait !");
Database.addText("fr.candyBoxRequestStatusBarUnlockedHealthBarComment", "Voici 100 points de vie pour vous. Ils vont vous être utiles.");
Database.addText("fr.cfgChooseLanguage", "Choisissez la langue :");
Database.addText("fr.cfgInvertColors", "Inverser les couleurs ?");
Database.addText("fr.gridItemMainMapName", "La Carte");
Database.addText("fr.gridItemMainMapDescription", "Carte du monde");
Database.addText("fr.gridItemPogoStickName", "Bâton sauteur");
Database.addText("fr.gridItemPogoStickDescription", "Cet objet vous permet de sauter pendant les quêtes !");
Database.addText("fr.gridItemTimeRingName", "Un anneau temporel");
Database.addText("fr.gridItemTimeRingDescription", "Cet objet vous donne une nouvelle capacité pendant les quêtes : vous pouvez ralentir le temps. Si les choses vont trop vite pour vous, utilisez votre anneau temporel !");
Database.addText("fr.gridItemThirdHouseKeyName", "La clé de la troisième maison");
Database.addText("fr.gridItemThirdHouseKeyDescription", "Cette clé vous permet d'entrer dans la troisième maison du village");
Database.addText("fr.gridItemFeatherName", "Une plume d'oiseau du désert");
Database.addText("fr.gridItemFeatherDescription", "Cette plume magique vous permet de sauter plus haut quand vous utilisez votre bâton sauteur !");
Database.addText("fr.gridItemFeatherDescriptionNoPogoStick", "Pour une raison inconnue, vous sentez que cette plume pourrait être utile si vous aviez un bâton sauteur...");
Database.addText("fr.gridItemSpongeName", "Une éponge magique");
Database.addText("fr.gridItemSpongeDescription", "Cette éponge magique vous permet de vous presser vous-même comme une éponge, réduisant ainsi votre taille.");
Database.addText("fr.gridItemFortressKeyName", "La clé de la forteresse du désert");
Database.addText("fr.gridItemFortressKeyDescription", "Cette clé vous permet d'entrer dans la très ancienne forteresse située au-dessus du désert. Qui sait ce que vous pourriez y trouver ?");
Database.addText("fr.gridItemHeartPendantName", "Un pendentif en forme de coeur");
Database.addText("fr.gridItemHeartPendantDescription", "Ce pendentif va augmenter vos points de vie tant que vous le garderez autour du cou.");
Database.addText("fr.gridItemHeartPlugName", "Module cardiaque");
Database.addText("fr.gridItemHeartPlugDescription", "Ce module cardiaque, fabriqué à l'aide de fer, de pattes d'araignée et d'une \"liqueur cardiaque\" spéciale scellée en son centre, va augmenter votre nombre de points de vie de 20 pourcents !");
Database.addText("fr.gridItemBeginnersGrimoireName", "Le grimoire des débutants");
Database.addText("fr.gridItemBeginnersGrimoireDescription", "Ce grimoire vous fournit trois sorts, assez faciles à lancer. Il est vraiment fait pour les débutants. Vous serez capables d'utiliser le sort de pluie d'acide (une importante quantité de gouttes d'acide tombera sur vos ennemis), le sort de boule de feu (une boule magique géante faite de feu volera en direction de vos ennemis) et le sort de téléportation (qui vous téléportera en un endroit imprévisible).");
Database.addText("fr.gridItemAdvancedGrimoireName", "Le grimoire avancé");
Database.addText("fr.gridItemAdvancedGrimoireDescription", "Ce grimoire avancé vous fournit deux sorts : le sort d'effacement de la magie et le sort de bouclier d'épines. Le premier effacera toute la magie d'une quête à un moment donné, y compris les sorts que vous avez lancé et la magie de vos ennemis. Le second créera autour de vous un bouclier d'épines flottantes qui infligeront des dommages à vos ennemis au contact.");
Database.addText("fr.gridItemBlackMagicGrimoireName", "Le grimoire de magie noire");
Database.addText("fr.gridItemBlackMagicGrimoireDescription", "Vous avez trouvé ce grimoire dans une cave, il était très difficile d'accès, et ce n'était pas pour rien. Il vous fournit deux puissants sorts de magie noire. Le premier créera devant vous un mur géant fait de briques d'obsidienne, ce qui peut être utile pour ralentir vos ennemis. Le second invoquera une horde de démons attaquant tout le monde dans la quête, y compris vous. Faites attention avec celui-ci.");
Database.addText("fr.gridItemUnicornHornName", "Une corne de licorne");
Database.addText("fr.gridItemUnicornHornDescription", "Cette corne magique appartenait à une licorne. Ses puissants pouvoirs de guérison vont beaucoup vous aider. On vous a dit que la licorne s'appelait Charlie.");
Database.addText("fr.gridItemXinopherydonClawName", "Une griffe de xinopherydon");
Database.addText("fr.gridItemXinopherydonClawDescription", "Cette griffe appartenait à un xinopherydon, un ancien animal à deux têtes que tout le monde croit éteint. Elle doublera les dommages de l'arme que vous utilisez.");
Database.addText("fr.gridItemPitchforkName", "Une fourche");
Database.addText("fr.gridItemPitchforkDescription", "Cette fourche spéciale vous permet d'ameublir la terre sans avoir à le retourner, préservant ainsi les écosystèmes du sol. Cela triplera la production de votre ferme à sucettes.");
Database.addText("fr.gridItemShellPowderName", "Poudre de coquillage");
Database.addText("fr.gridItemShellPowderDescription", "La poudre de coquillage est souvent utilisée par les paysans pour améliorer la vitesse de pousse de leurs sucettes. Cette poudre multipliera votre production de sucettes par trois !");
Database.addText("fr.gridItemPName", "La pierre P");
Database.addText("fr.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("fr.gridItemLName", "La pierre L");
Database.addText("fr.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("fr.gridItemAName", "La pierre A");
Database.addText("fr.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("fr.gridItemYName", "La pierre Y");
Database.addText("fr.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("fr.gridItemRedSharkFinName", "Un aileron de requin magique rouge");
Database.addText("fr.gridItemRedSharkFinDescription", "Cet aileron magique va grandement augmenter les dégâts de votre sort de boule de feu. Cette boule de feu devient enfin utile.");
Database.addText("fr.gridItemGreenSharkFinName", "Un aileron de requin magique vert");
Database.addText("fr.gridItemGreenSharkFinDescription", "Cet aileron magique apportera le pouvoir de la nature à votre ferme à sucettes! Votre production sera multipliée par 5.");
Database.addText("fr.gridItemPurpleSharkFinName", "Un aileron de requin magique violet");
Database.addText("fr.gridItemPurpleSharkFinDescription", "Cet aileron magique vous apportera un nouveau sort de magie noire. Vous ne pouvez l'utiliser qu'une fois par quête. Faites attention avec celui-là !");
Database.addText("fr.gridItemTalkingCandyName", "Un bonbon qui parle");
Database.addText("fr.gridItemTalkingCandyDescription", "Ce bonbon qui parle est apparu après que vous ayez placé les quatre pierres en haut de la tour du château. Il pourrait vous être utile pour ouvrir la candy box...");
Database.addText("fr.inventorySpecialNothingEqItem", "Rien");
Database.addText("fr.eqItemWeaponWoodenSwordName", "Épée en bois");
Database.addText("fr.eqItemWeaponWoodenSwordDescription", "Une simple épée en bois");
Database.addText("fr.eqItemWeaponIronAxeName", "Hache en fer");
Database.addText("fr.eqItemWeaponIronAxeDescription", "Une simple hache en fer. Bien aiguisée. Plus puissante que l'épée en bois.");
Database.addText("fr.eqItemWeaponPolishedSilverSwordName", "Épée en argent travaillée");
Database.addText("fr.eqItemWeaponPolishedSilverSwordDescription", "Une épée puissante, recouverte de piques.");
Database.addText("fr.eqItemWeaponTrollBludgeonName", "Le gourdin du troll");
Database.addText("fr.eqItemWeaponTrollBludgeonDescription", "Vous avez pris ce gourdin au troll gardant le pont. Il est lent, mais écrase vos ennemis assez efficacement.");
Database.addText("fr.eqItemWeaponTribalSpearName", "Une lance tribale");
Database.addText("fr.eqItemWeaponTribalSpearDescription", "Vous avez trouvé cette lance tribale sur le corps d'un guerrier tribal perdu dans un gros trou dans le sol. Elle est un peu difficile à manipuler au début, mais une fois qu'on s'est habitué, c'est une bonne arme.");
Database.addText("fr.eqItemWeaponSummoningTribalSpearName", "Une lance tribale d'invocation");
Database.addText("fr.eqItemWeaponSummoningTribalSpearDescription", "Cette lance tribale magique, en plus d'être un peu plus puissante que la lance tribale normale, va invoquer fréquemment des guerriers tribals pour vous aider pendant pendant vos quêtes.");
Database.addText("fr.eqItemWeaponMonkeyWizardStaffName", "Le bâton du singe-magicien");
Database.addText("fr.eqItemWeaponMonkeyWizardStaffDescription", "Ce bâton appartenait au singe-magicien nu que vous avez trouvé dans la grotte. Il va régulièrement lancer des sorts de lui-même en direction de vos ennemis.");
Database.addText("fr.eqItemWeaponEnchantedMonkeyWizardStaffName", "Le bâton du singe-magicien (enchanté)");
Database.addText("fr.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ce bâton est plus rapide que la version non enchantée, et va également lancer beaucoup plus de sorts.");
Database.addText("fr.eqItemWeaponGiantSpoonName", "Une cuillère géante");
Database.addText("fr.eqItemWeaponScytheName", "Une faux");
Database.addText("fr.eqItemWeaponScytheDescription", "On dit que cette faux appartenait à la mort elle-même. Elle est extrêmement rapide.");
Database.addText("fr.eqItemWeaponGiantSpoonDescription", "Cette cuillère géante était à l'intérieure d'une théière géante dans la forteresse du désert. Vous ne savez pas si quiconque la déjà utilisée en tant que cuillère, mais si c'est le cas, ça devait quelqu'un d'énorme. Vous ne voulez probablement pas le rencontrer.");
Database.addText("fr.eqItemWeaponGiantSpoonOfDoomName", "La Cuillère géante du Destin");
Database.addText("fr.eqItemWeaponGiantSpoonOfDoomDescription", "Cette cuillère géante est encore plus puissante que la cuillère géante normale que vous pourriez trouver, par exemple, dans une théière. Elle est assez lente, cependant.");
Database.addText("fr.eqItemHatMerchantHatName", "Le chapeau du marchand");
Database.addText("fr.eqItemHatMerchantHatDescription", "Ce chapeau vous a été vendu par le marchand de bonbons. Le marchand de bonbons adore les bonbons. Ce chapeau multipliera par 7 les bonbons que vous trouvez pendant les quêtes !");
Database.addText("fr.eqItemHatSorceressHatName", "Le chapeau de la sorcière");
Database.addText("fr.eqItemHatSorceressHatDescription", "Ce chapeau vous a été vendu par la sorcière. Il améliorera les effets de vos sorts et potions.");
Database.addText("fr.eqItemHatOctopusKingCrownName", "La couronne du Roi Poulpe");
Database.addText("fr.eqItemHatOctopusKingCrownDescription", "Quand vous portez cette couronne, vous vous sentez beaucoup plus confiant. Elle n'apporte aucun avantage en quête, mais la confiance en soi c'est important !");
Database.addText("fr.eqItemHatOctopusKingCrownWithJaspersName", "La couronne du Roi Poulpe surmontée de jaspes");
Database.addText("fr.eqItemHatOctopusKingCrownWithJaspersDescription", "Cette couronne enchantée est faite d'or et de jaspes rouges. Pendant les quêtes, elle va lancer fréquemment de puissantes boules de feu magiques autour de vous. Et en plus, elle brille !");
Database.addText("fr.eqItemHatOctopusKingCrownWithObsidianName", "La couronne du Roi Poulpe surmontée d'obsidienne");
Database.addText("fr.eqItemHatOctopusKingCrownWithObsidianDescription", "Cette couronne enchantée est faite d'or et d'obsidienne. Elle est superbe. Pendant les quêtes, elle invoquera de temps en temps un Roi Poulpe combattant à vos côtés. Quel allié tentaculaire !");
Database.addText("fr.eqItemGlovesLeatherGlovesName", "Gants en cuir");
Database.addText("fr.eqItemGlovesLeatherGlovesDescription", "Ces gants ne font tout simplement rien. Mais ils sont doux et agréables à porter, au moins !");
Database.addText("fr.eqItemGlovesRedEnchantedGlovesName", "Gants enchantés rouges");
Database.addText("fr.eqItemGlovesRedEnchantedGlovesDescription", "Ces gants enchantés émettent une faible lueur rouge quand il fait sombre autour de vous. Pendant les quêtes, ils vont aléatoirement lancer de petites boules de feu en direction de vos enemis, ce qui peut clairement être utile.");
Database.addText("fr.eqItemGlovesPinkEnchantedGlovesName", "Gants enchantés roses");
Database.addText("fr.eqItemGlovesPinkEnchantedGlovesDescription", "Ces gants enchantés laissent une trace rose sur tout ce que vous touchez. Pendant les quêtes, ils vous soigneront continuellement.");
Database.addText("fr.eqItemBootsRocketBootsName", "Bottes roquettes");
Database.addText("fr.eqItemBootsRocketBootsDescription", "Ces bottes roquettes géniales vous permettent de sauter en plein air, comme si vous voliez !");
Database.addText("fr.eqItemBootsLeatherBootsName", "Bottes en cuir");
Database.addText("fr.eqItemBootsLeatherBootsDescription", "De simples bottes en cuir. Rien de spécial.");
Database.addText("fr.eqItemBootsBootsOfIntrospectionName", "Les bottes d'introspection");
Database.addText("fr.eqItemBootsBootsOfIntrospectionDescription", "Prenez le temps de respirer et de vous calmer. Si vous portez ces bottes, vous ne bougerez plus tant que vous toucherez le sol.");
Database.addText("fr.eqItemBodyArmoursLightweightBodyArmourName", "Une armure légère");
Database.addText("fr.eqItemBodyArmoursLightweightBodyArmourDescription", "Cette armure vous offrira une faible protection. Vous serez légèrement plus résistant face aux attaques de vos ennemis.");
Database.addText("fr.eqItemBodyArmoursKnightBodyArmourName", "Une armure de chevalier");
Database.addText("fr.eqItemBodyArmoursKnightBodyArmourDescription", "Cette solide armure vous protégera. Vous serez plus résistant face aux attaques de vos ennemis.");
Database.addText("fr.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Une armure de chevalier enchantée");
Database.addText("fr.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Cette armure est très spéciale. Vous serez BEAUCOUP plus résistant face aux attaques de vos ennemis, mais les dommages de l'arme que vous utilisez seront divisés par deux.");
Database.addText("fr.mapVillageForgeBuyWoodenSwordButton", "Acheter une épée en bois (150 bonbons)");
Database.addText("fr.mapVillageForgeBuyWoodenSwordSpeech", "Merci pour l'achat ! Cette épée en bois est peu puissante, mais c'est un début.");
Database.addText("fr.mapVillageForgeBuyIronAxeButton", "Acheter une hache en fer (400 bonbons)");
Database.addText("fr.mapVillageForgeBuyIronAxeSpeech", "J'espère que vous aimerez cette hache en argent, je viens juste de l'aiguiser pour vous !");
Database.addText("fr.mapVillageForgeBuyPolishedSilverSwordButton", "Acheter une épée en argent travaillée (2 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyPolishedSilverSwordSpeech", "Ça m'a pris beaucoup de temps pour créer cette épée. Je vous assure qu'elle vaut son prix.");
Database.addText("fr.mapVillageForgeBuyLightweightBodyArmourButton", "Acheter une armure légère (15 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyLightweightBodyArmourSpeech", "Cette armure vous apportera une protection contre vos ennemis.");
Database.addText("fr.mapVillageForgeBuyScytheButton", "Acheter une faux (5 000 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyScytheSpeech", "Cela m'a demandé plusieurs mois pour réaliser cette faux. C'est une vraie oeuvre d'art. C'est probablement l'arme la plus rapide que vous serez jamais capable d'utiliser. Bonne chance !");
Database.addText("fr.wishingWellThrowFirstCandyButton", "Jeter un bonbon dans le puits");
Database.addText("fr.wishingWellCandyIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en échange de sucreries ! Quand tu jetteras des bonbons dans moi, je soignerai tes blessures.");
Database.addText("fr.wishingWellThrewCandiesSpeech", "Tes blessures sont soignées !");
Database.addText("fr.wishingWellNoWoundSpeech", "Tu n'as pas de blessure à soigner !");
Database.addText("fr.wishingWellThrowFirstLollipopButton", "Jeter une sucette dans le puits");
Database.addText("fr.wishingWellLollipopIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en échange de sucreries ! Quand tu jetteras des sucettes dans moi, je les convertirai en bonbons.");
Database.addText("fr.wishingWellThrewLollipopsSpeech", "Tes sucettes sont converties en bonbons ! Deux sucettes pour un bonbon.");
Database.addText("fr.wishingWellThrowChocolateBarButton", "Jeter une barre de chocolat dans le puits");
Database.addText("fr.wishingWellChocolateBarIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en échange de sucreries ! J'adore les barres de chocolat. Je les adore vraiment. Pour chaque barre de chocolat que tu jettera en moi, y compris celle-ci, un enchantement magique te sera accordé.");
Database.addText("fr.wishingWellThrewChocolateBarSpeech", "Quel objet souhaites-tu enchanter ?");
Database.addText("fr.wishingWellThrowPainAuChocolatButton", "Jeter un pain au chocolat dans le puits");
Database.addText("fr.wishingWellPainAuChocolatIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en échange de sucreries ! Quand tu jetteras un pain en chocolat dans moi, tu seras doté d'un don très spécial. Choisis sagement.");
Database.addText("fr.wishingWellThrewPainAuChocolatSpeech", "Merci pour la pain au chocolat ! Tu peux maintenant choisir ton don.");
Database.addText("fr.wishingWellChooseGift", "Choisis ton don !");
Database.addText("fr.wishingWellChooseGiftButton", "Choisir");
Database.addText("fr.wishingWellGiftDoneSpeech", "C'est fait ! Tu as maintenant un nouveau don. Il apparaitra dans le panneau de statistiques de ton inventaire.");
Database.addText("fr.wishingWellNoPossibleEnchantment", "Pas d'enchantement possible");
Database.addText("fr.wishingWellChooseEnchantment", "Choisissez l'enchantement");
Database.addText("fr.wishingWellEnchantButton", "Enchanter");
Database.addText("fr.wishingWellEnchantmentDoneSpeech", "Et voilà ! Ton objet est enchanté.");
Database.addText("fr.pierLighthouseButton", "Aller au phare par bateau");
Database.addText("fr.pierTheSeaButton", "Sauter dans la mer");
Database.addText("fr.lonelyHouseOpenBox", "Ouvrir la boîte");
Database.addText("fr.lonelyHouseShakeBox", "Secouer la boîte");
Database.addText("fr.lonelyHouseBreakLock", "Casser le verrou");
Database.addText("fr.lonelyHouseKickBox", "Donner un coup de pied dans la boîte");
Database.addText("fr.lonelyHouseAskTheBoxToOpenItself", "Demander à la boîte de s'ouvrir d'elle-même");
Database.addText("fr.lonelyHouseLureTheBoxWithACandy", "Appâter la boîte avec un bonbon");
Database.addText("fr.lonelyHouseTakeTheBox", "Prendre la boîte avec vous, il faut probablement une clé pour l'ouvrir de toute façon");
Database.addText("fr.lonelyHouseOpenBoxResult", "La boîte est verouillée");
Database.addText("fr.lonelyHouseShakeBoxResult", "Rien ne se passe");
Database.addText("fr.lonelyHouseBreakLockResult", "Le verrou résiste");
Database.addText("fr.lonelyHouseKickBoxResult", "Votre pied vous fait un peu mal, mais rien ne se passe");
Database.addText("fr.lonelyHouseAskTheBoxToOpenItselfResult", "...vous parlez à une boîte, vous savez ?");
Database.addText("fr.lonelyHouseLureTheBoxWithACandyResult", "La boîte n'a pas l'air d'y prêter attention");
Database.addText("fr.lonelyHouseTakeTheBoxResult", "Il y a probablement quelque chose d'intéressant dans cette candy box.");
Database.addText("fr.lollipopFarmConstructMill", "Construire un moulin (10 000 sucettes)");
Database.addText("fr.lollipopFarmFeedMill", "Nourrir le moulin");
Database.addText("fr.lollipopFarmCurrentCandiesProduction", "Production actuelle de bonbons");
Database.addText("fr.lollipopFarmDigPond", "Creuser un bassin (100 000 sucettes)");
Database.addText("fr.lollipopFarmBuyLolligator", "Acheter un lolligator (1200 bonbons)");
Database.addText("fr.lollipopFarmLolligatorsConversionText", "Conversion bonbons -> sucettes activée");
Database.addText("fr.lighthouseAskButton", "Demander");
Database.addText("fr.lighthouseQuestionWho", "Qui êtes-vous ?");
Database.addText("fr.lighthouseQuestionWhoSpeech", "Je suis un très vieux cyclope.");
Database.addText("fr.lighthouseQuestionWhat", "Que faites-vous ici ?");
Database.addText("fr.lighthouseQuestionWhatSpeech", "Je vis ici toute la journée, attendant l'arrivée d'un bateau. Cela fait très longtemps que je n'en ai pas vu, mais je dois rester ici, à fixer la mer, car un bateau pourrait arriver.");
Database.addText("fr.lighthouseQuestionWhyEatCandies", "Pourquoi est-ce que je devrais manger des bonbons ?");
Database.addText("fr.lighthouseQuestionWhyEatCandiesSpeech", "Parce que c'est bon pour la santé !");
Database.addText("fr.lighthouseQuestionCandyBox", "Qu'est-ce qu'une candy box ?");
Database.addText("fr.lighthouseQuestionCandyBoxSpeech", "C'est une très vieille boîte qu'on dit contenir tous les bonbons du monde. D'après les légendes, quiconque arrivera à l'ouvrir possèderait tellement de bonbons que tout serait possible.");
Database.addText("fr.lighthouseQuestionDragon", "Le dragon m'a dit de venir ici parce que je veux des bonbons.");
Database.addText("fr.lighthouseQuestionDragonSpeech", "Oh, je vois... Eh bien, je ne peux peux pas t'en donner directement, mais je peux te donner quelque chose d'indispensable pour qu'au final tu aies BEAUCOUP de bonbons. Je dois juste te tester auparavant. Parce que ce que j'ai ne peut être donné à n'importe qui. Résous ce puzzle et ce sera à toi.");
Database.addText("fr.lighthouseFoundStone", "Bravo! Tu as passé le test et trouvé la pierre. Elle est très précieuse, mais n'est utile que si tu as trois autres pierres du même genre. Bonne chance !");
Database.addText("fr.lighthouseFoundStoneAgain", "Bravo, tu as encore réussi le puzzle. Tu as l'air d'aimer ça.");
Database.addText("fr.saveLocalSaveTitle", "Sauvegarde par navigateur");
Database.addText("fr.saveLocalSaveWhy", "Choisissez la sauvegarde locale si vous voulez continuer de jouer sur cet appareil et ce navigateur.");
Database.addText("fr.saveLocalSaveWarning0", "Votre navigateur ne semble pas supporter le HTML5.");
Database.addText("fr.saveLocalSaveWarning1", "Vous devez mettre à jour votre navigateur pour pouvoir sauvegarder localement.");
Database.addText("fr.saveLocalSaveChooseSlot", "Choisissez un emplacement de sauvegarde :");
Database.addText("fr.saveLocalSaveAutosaveEnabled", "Sauvegarde auto activée");
Database.addText("fr.saveLocalSaveChooseWhatToDo", "Choisissez que faire :");
Database.addText("fr.saveLocalSaveSaveButton", "Sauvegarder");
Database.addText("fr.saveLocalSaveAutosaveButton", "Sauvegarder toutes les 10 minutes");
Database.addText("fr.saveLocalSaveDisableAutosaveButton", "Désactiver la sauvegarde auto");
Database.addText("fr.saveFileSaveTitle", "Sauvegarde sous forme de texte");
Database.addText("fr.saveFileSaveWhy0", "Choisissez la sauvegarde sous forme de texte si :");
Database.addText("fr.saveFileSaveWhy1", "Vous voulez continuer de jouer sur un autre appareil ou navigateur");
Database.addText("fr.saveFileSaveWhy2", "Vous voulez partager votre sauvegarde avec quelqu'un d'autre");
Database.addText("fr.saveFileSaveWhy3", "Pour une raison quelconque vous voulez vider le cache de votre navigateur");
Database.addText("fr.saveFileSaveWhy4", "(ce qui effacerait vos sauvegardes locales)");
Database.addText("fr.saveFileSaveButton", "Obtenir la partie actuelle sous forme de texte");
Database.addText("fr.saveFileSaveWarning", "Maintenant copiez ce texte quelque part ! (dans un fichier, par exemple)");
Database.addText("fr.saveLocalLoadTitle", "Chargement par navigateur");
Database.addText("fr.saveLocalLoadYouCan", "Vous pouvez charger une sauvegarde locale en utilisant les liens suivants :");
Database.addText("fr.saveLocalLoadThanksTo", "Grâce à la magie du HTML5, vous devriez pouvoir utiliser ces liens même hors-ligne.");
Database.addText("fr.saveFileLoadTitle", "Chargement sous forme de texte");
Database.addText("fr.saveFileLoadPaste", "Collez votre sauvegarde ci-dessous, puis cliquez sur le bouton \"Load\"");
Database.addText("fr.saveFileLoadButton", "Charger");
Database.addText("fr.mountainsText0", "Vous avez repéré un truc dans les montagnes !");
Database.addText("fr.mountainsText1", "Ça a l'air intéressant. Peut-être que ça pourrait être utile.");
Database.addText("fr.mountainsTextButton", "Escalader les montagnes pour récupérer le truc");
Database.addText("fr.mountainsTextAfter", "Vous avez trouvé un bâton sauteur ! Il a été ajouté à votre inventaire.");
Database.addText("fr.secondHouseIntroSpeech", "Bonjour, je suis le marchand de bonbons. Je ferais n'importe quoi contre des bonbons. De quoi avez-vous besoin ?");
Database.addText("fr.secondHouseLollipop1Speech", "C'est une sucette goût citron. Ma préférée ! Elle coûte 60 bonbons, mais ça vaut le coup.");
Database.addText("fr.secondHouseLollipop2Speech", "Celle-ci est une sucette goût fraise. Ça a bon goût. J'aime bien sa couleur rouge. Seulement 60 bonbons !");
Database.addText("fr.secondHouseLollipop3Speech", "C'est une sucette goût citrouille. Je parie que vous n'en avez jamais goûté ! 60 bonbons et elle est à vous.");
Database.addText("fr.secondHouseLollipopButtonText", "Acheter cette sucette (60 bonbons)");
Database.addText("fr.secondHouseMerchantHatSpeech", "Je pourrais vous vendre mon chapeau, mais il est très précieux, vous savez... Vous allez devoir me donner beaucoup de bonbons en échange. Disons un million de bonbons. Ça parait honête, non ?");
Database.addText("fr.secondHouseMerchantHatButtonText", "Acheter le chapeau du marchand (1 000 000 de bonbons)");
Database.addText("fr.secondHouseTimeRingSpeech", "C'est un anneau temporel. Il est un peu magique. Il vous permet de ralentir le temps en cas de problème.");
Database.addText("fr.secondHouseTimeRingButtonText", "Acheter l'anneau temporel (500 bonbons)");
Database.addText("fr.secondHouseLeatherGlovesSpeech", "Ces gants en cuir sont fait avec du cuir de chameau, c'est de la bonne qualité. J'en ai beaucoup en stock, c'est pour ça qu'ils sont si peu chers : seulement 300 bonbons !");
Database.addText("fr.secondHouseLeatherGlovesButtonText", "Acheter une paire de gants en cuir (300 bonbons)");
Database.addText("fr.secondHouseLeatherBootsButtonText", "Acheter une paire de bottes en cuir (300 bonbons)");
Database.addText("fr.secondHouseLeatherBootsSpeech", "Ces bottes en cuir de haute qualité, faites en cuir de chameau, garderont vos pieds au chaud.");
Database.addText("fr.secondHouseChocolateBarSpeech", "C'est une barre de chocolat. Je ne sais pas à quoi ça sert, mais il se trouve que c'est assez rare, ce qui explique le prix. 800 bonbons et elle est à vous !");
Database.addText("fr.secondHouseChocolateBarButtonText", "Acheter la barre de chocolat (800 bonbons)");
Database.addText("fr.outsideTheHoleButton", "Sauter dans ce gros trou dans le sol");
Database.addText("fr.theCaveExitText0", "Vous avez enfin atteint la sortie de la grotte");
Database.addText("fr.theCaveExitText1", "Vous pouvez voir une grande forêt au dehors");
Database.addText("fr.theCaveExitButtonText", "Sortir de la grotte");
Database.addText("fr.theCaveFirstSentenceWentStraight", "Vous êtes allé tout droit.");
Database.addText("fr.theCaveFirstSentenceWentLeft", "You avez choisi le chemin de gauche.");
Database.addText("fr.theCaveFirstSentenceWentRight", "Vous avez choisi le chemin de droite.");
Database.addText("fr.theCaveFirstSentenceYouAre", "Vous êtes dans une grotte. Trois chemins s'offrent à vous.");
Database.addText("fr.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Vous repérez une chose étrange sur le sol en face de vous.");
Database.addText("fr.theCavePattern_ChocolateBarNowSeeChocolateBar", "Vous repérez une barre de chocolat en face de vous.");
Database.addText("fr.theCavePattern_TreasureMapSentence", "Vous voyez des petits cailloux étrangement disposés sur le sol.");
Database.addText("fr.theCavePattern_MonkeyWizardSentence", "Vous tombez sur un singe-magicien nu.");
Database.addText("fr.theCavePattern_MonkeyWizardButton", "Le défier");
Database.addText("fr.theCavePattern_OctopusKingSentence", "Vous tombez sur le Roi Poulpe. Il a l'air méchant.");
Database.addText("fr.theCavePattern_OctopusKingButton", "Le défier");
Database.addText("fr.fortressInsideText0", "Vous êtes à l'intérieur de la forteresse du désert.");
Database.addText("fr.fortressInsideText1", "Vous pouvez choisir entre trois portes.");
Database.addText("fr.fortressInsideText2", "Chacune d'elles mène à une grande pièce avec un trésor à la clé.");
Database.addText("fr.fortressInsideEnterRoom1", "Entrer dans la première pièce");
Database.addText("fr.fortressInsideEnterRoom2", "Entrer dans la deuxième pièce");
Database.addText("fr.fortressInsideEnterRoom3", "Entrer dans la troisième pièce");
Database.addText("fr.treasureButtonDig", "Creuser");
Database.addText("fr.treasureButtonYouFound", "Vous avez trouvé trois barres de chocolat !");
Database.addText("fr.sorceressHutHello", "Bonjour, je suis la sorcière. Je pourrais vous apprendre une chose ou deux à propos de la magie. Je pourrais vous donner des choses intéressantes, ou lancer des sorts pour vous. Mais tout a un prix ! Et ce prix sera des sucettes. Beaucoup de sucettes.");
Database.addText("fr.sorceressHutClickedGrimoire", "C'est un grimoire fait pour les débutants. En l'emportant avec vous pendant les quêtes, vous pourrez lancer des sorts simples mais utiles. Vous en avez besoin ! Seulement 5 000 sucettes.");
Database.addText("fr.sorceressHutBuyGrimoireButton", "Acheter ce grimoire (5 000 sucettes)");
Database.addText("fr.sorceressHutBuyGrimoireSpeech", "Merci pour l'achat ! Vous pourrez lancer trois sorts avec ce grimoire. Bonne chance !");
Database.addText("fr.sorceressHutClickedGrimoire2", "C'est un grimoire avancé. En l'emportant avec vous pendant les quêtes, vous pourrez lancer deux sorts avancés. Je l'ai rédigé moi-même, ce qui n'était pas simple. 20 000 sucettes est un prix honnête.");
Database.addText("fr.sorceressHutBuyGrimoire2Button", "Acheter ce grimoire (20 000 sucettes)");
Database.addText("fr.sorceressHutBuyGrimoire2Speech", "Merci de l'achat ! Vous pourrez lancer deux sorts avec ce grimoire. Utilisez-les sagement !");
Database.addText("fr.sorceressHutClickedCauldron", "C'est mon chaudron. Il me permet de préparer des potions magiques. Je pourrais vous le vendre, mais il est très précieux... il vous en coûtera 100 000 sucettes.");
Database.addText("fr.sorceressHutBuyCauldronButton", "Acheter le chaudron (100 000 sucettes)");
Database.addText("fr.sorceressHutBuyCauldronSpeech", "Merci beaucoup ! 100 000 sucettes pour moi ! Je vous ai aussi donné un manuel de préparation de potions. Il va vous être utile.");
Database.addText("fr.sorceressHutClickedHat", "J'ai un beau chapeau, en effet ! Mais je ne peux vraiment pas vous le vendre. Il est bieeeen trop précieux. Vraiment, je ne peux pas. N'insistez pas. Non. Non non non je ne devrais pas faire ça. Oh, bon, je l'échangerai, mais contre 1 000 000 000 de sucettes. Vous ne serez probablement pas capable de payer ça de toute façon.");
Database.addText("fr.sorceressHutBuyHatButton", "Acheter le chapeau (1 000 000 000 de sucettes)");
Database.addText("fr.sorceressHutBuyHatSpeech", "Une milliard de sucettes pour moiiii ! Mais je n'ai plu de chapeau... mais un milliard de sucettes, woah ! .. Ça valait le coup.");
Database.addText("fr.cauldronPreviousPageButton", "Page précédente");
Database.addText("fr.cauldronNextPageButton", "Page suivante");
Database.addText("fr.cauldronWhatYouWantToPut", "Ce que vous voulez mettre dans le chaudron");
Database.addText("fr.cauldronWhatIsIn", "Ce qui est dans le chaudron");
Database.addText("fr.cauldronWhatYouCanDo", "Ce que vous pouvez faire avec");
Database.addText("fr.castleBigRoomComment", "Une grande pièce");
Database.addText("fr.castleARoomComment", "Une pièce");
Database.addText("fr.castleADarkRoomComment", "Une pièce sombre");
Database.addText("fr.castleCastleEntranceComment", "L'entrée du château");
Database.addText("fr.castleTowerEntranceComment", "L'entrée de la tour");
Database.addText("fr.castleNougatMonsterComment", "Attaquer le monstre en nougat géant");
Database.addText("fr.castleGuardsComment", "Attaquer les gardes");
Database.addText("fr.castleStairsComment", "Escaliers");
Database.addText("fr.buttonBackToTheCastle", "Revenir au château");
Database.addText("fr.castleBigRoomHovenSpeechSad", "Salut ! Je suis un très vieux four à pain. J'avais l'habitude de cuire des tas de bonnes pâtisseries, mais plus personne ne m'utilise. Peut-être... peut-être que tu pourrais m'aider ? Laisse-moi juste te prendre quelques sucreries ! Ne t'en fais pas, tu ne vas pas lre regretter. Tu peux me faire confiance.");
Database.addText("fr.castleBigRoomHovenNotEnough", "Oh... tu n'as pas assez de sucreries, je ne peux rien faire. Je suis juste inutile. Je suis le four à pain inutile, c'est comme ça que tu devrais m'appeler.");
Database.addText("fr.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay ! Merci baucoup ! J'ai utilisé 100 bonbons et une barre de chocolat, et je t'ai fait... un pain au chocolat ! C'est ma pâtisserie préférée, j'espère que tu aimes ça aussi !");
Database.addText("fr.castleBigRoomHovenSpeechHappy", "Hey ! Si tu veux que je cuise une autre pâtisserie, dis-le moi ! J'adorerais t'aider.");
Database.addText("fr.castleBigRoomHovenSpeechHappyNotEnough", "Oh, tu n'as pas assez de sucreries, malheureusement. J'ai besoin de 100 bonbons et d'une barre de chocolat. Reviens quand tu auras ça !");
Database.addText("fr.castleBigRoomHovenLetHovenTakeButton", "Laisser le four prendre toutes les sucreries qu'il veut prendre");
Database.addText("fr.castleBigRoomHovenThanks", "Merci, four !");
Database.addText("fr.dragonStopTickling", "Eh, toi ! Arrête de me chatouiller, s'il te plaît.");
Database.addText("fr.dragonStopTicklingButton", "Uh, oh, désolé, j'ai cru que je devais vous attaquer");
Database.addText("fr.dragonTalking", "Je suis le dragon et ceci est mon château. Je vois que vous avez réussi à entrer, vous devez être très courageux... J'adorerais aider quelqu'un comme vous. Que recherchez-vous ?");
Database.addText("fr.dragonTalkingChallengeButton", "Du défi");
Database.addText("fr.dragonTalkingFameButton", "La gloire");
Database.addText("fr.dragonTalkingCandiesButton", "Des bonbons");
Database.addText("fr.dragonTalkingChallengeSpeech", "Oh, comme ça vous voulez du défi ? Je pense que vous devriez faire un tour en enfer, il est de notoriété publique que le diable est un adversaire coriace. Sautez sur mon dos et je vous y emmènerai !");
Database.addText("fr.dragonTalkingFameSpeech", "Le meilleur moyen de devenir célèbre est d'affronter le développeur lui-même. Je sais où il vit que je pourrais vous y emmener. Mais soyez prêt, ce ne sera pas facile.");
Database.addText("fr.dragonTalkingCandiesSpeech", "Au final, la chose que nous voulons tous ce sont des bonbons, n'est-ce pas ? Je pense qu'un des mes amis pourrait vous aider. Vous le reconnaitrez aisément, il n'a qu'un seul oeil. Dites-lui juste que vous me connaissez.");
Database.addText("fr.dragonTalkingChallengeAnswer", "C'est parti !");
Database.addText("fr.dragonTalkingFameAnswer", "Je suis prêt.");
Database.addText("fr.dragonTalkingCandiesAnswer", "D'accord, merci !");
Database.addText("fr.buttonBackToCastle", "Revenir au château");
Database.addText("fr.talkingCandySpeechNoBox", "Hey ! Je suis le bonbon qui parle. Tu as presque terminé le jeu. Tu dois juste trouver la candy box. Elle est dans une maison en dehors du village. C'est la dernière étape !");
Database.addText("fr.talkingCandySpeech1", "Hey ! Je suis le bonbon qui parle. Bravo, tu as terminé le jeu ! Je vais ouvrir ta candy box pour toi, c'est ta récompense. Je peux y aller ?");
Database.addText("fr.talkingCandySpeech2", "C'est fait ! Tu peux y entrer maintenant. J'espère que tu as aimé le jeu :)");
Database.addText("fr.talkingCandyButton", "Oui !!");
Database.addText("fr.lighthousePuzzleResetButton", "Recommencer");
Database.addText("hu.mapVillageComment", "A falu");
Database.addText("hu.mapFortressComment", "A sivatagi erőd");
Database.addText("hu.mapATreeComment", "Egy fa");
Database.addText("hu.mapTheDesertComment", "A sivatag");
Database.addText("hu.mapWishingWellComment", "Egy kívánságkút");
Database.addText("hu.mapLonelyHouseComment", "Egy magányos ház");
Database.addText("hu.mapForestComment", "Az erdő");
Database.addText("hu.mapCastleEntranceComment", "A kastély bejárata");
Database.addText("hu.mapCastleComment", "A kastély");
Database.addText("hu.mapDragonComment", "Egy sárkány");
Database.addText("hu.candyBoxEatCandiesButton", "Minden cukrot megesz");
Database.addText("hu.candyBoxThrowCandiesButton", "10 cukrot a földre dob");
Database.addText("hu.mapVillageAHouseComment", "Egy ház");
Database.addText("hu.mapVillageForgeComment", "A kohó");
Database.addText("hu.buttonBackToTheMap", "Vissza a térképre");
Database.addText("hu.mapSorceressHutComment", "Egy banya kunyhója");
Database.addText("hu.buttonBackToTheVillage", "Vissza a faluba");
Database.addText("hu.mapATreeIntroductionSpeech", "Üdv, én vagyok a mókus. Tudok neked cukorkát és rengeteg egyebet adni. Tudom, hogy mennyire szereted a cukorkát. De én olyan magányos vagyok ebben az erdőben.");
Database.addText("hu.mapATreeIntroductionButton", "Hogyan segíthetek neked?");
Database.addText("hu.mapATreeFirstQuestion", "Kérdéseket fogok feltenni neked. Ha helyesen válaszolsz, megkapod a legédesebb édességeket! Az első : tényleg szereted a cukorkákat? (angolul válaszolj)");
Database.addText("hu.mapATreeSecondQuestion", "Pontosan! Tessék, itt van 20 cukorka. Egészítsd ki ezt a betűsorozatot és egy újabb jutalmat kapsz: A, K, R, O, K, U, ?");
Database.addText("hu.mapATreeThirdQuestion", "Cukorka! Már kapsz is tőlem 100 darabot. Következő kérdés : hány cukorkája van a világ legcukrosabb emberének?");
Database.addText("hu.mapATreeFourthQuestion", "Tessék, 500 cukorka neked! A következő jutalom még érdekesebb lesz... Itt egy rejtvény : Egy ősi erdőben nő egy nagyon öreg fa, amin a világ leginteligensebb állatai élnek. Állítólag ennek a fának 60 gyökere, 360 ága és 2160 levele van. Hány jelölés van a fa törzsén?");
Database.addText("hu.mapATreeFifthQuestion", "Gratulálok! Valóban a saját fámról beszéltem. Itt van neked 3 nyalóka. Okosan használd fel őket! Itt a következő rejtvény : Ha teliholdkor beledobom a sárga sapkámat a vörös tengerbe, mi történik a sárga sapkámmal? (angolul válaszolj)");
Database.addText("hu.mapATreeTicTacToeIntro", "Helyes a válasz! Nem is volt annyira nehéz. Adok neked három csokoládé rudat! A következő jutalomhoz kissé megváltoztatjuk a szabályokat. Játszanod kell velem! Készen állsz?");
Database.addText("hu.mapATreeTicTacToeIntroButton", "Naná!");
Database.addText("hu.mapATreeTicTacToeLetsPlay", "Amőbázni fogunk, háromszor hármas táblán. Te leszel az X, és én leszek a O. Felváltva fogunk játszani, és a cél az, hogy három jelet rakjunk le egymás után egy sorba. Te kezdesz elsőként!");
Database.addText("hu.mapATreeTicTacToeNobodyWins", "Teljesen betelt a tábla, és egyikünk se tudott hármat sorba rakni: senki se nyert! Újra akarod próbálni?");
Database.addText("hu.mapATreeTicTacToeYouLose", "Hármat raktam egy sorba! Én győztem. Újra akarod próbálni?");
Database.addText("hu.mapATreeTicTacToeTryAgainButton", "Igen, akarom!");
Database.addText("hu.mapATreeTicTacToeYouWin", "Váó, hát ez egy nem várt mozdulat volt. De nem ellenkezhetek, hiszen hármat raktál egy sorba. Győztél! Fogd ezt a kulcsot! Ez a falu egyik házának ajtaját nyitja.");
Database.addText("hu.mapATreeTicTacToeAnymoreSweet", "Köszönöm mókus! Van még kihívásod a számomra?");
Database.addText("hu.mapATreeNoMoreChallenge", "Sajnos nincs már számodra más kihívásom... De jó móka volt játszani veled, köszönöm!");
Database.addText("hu.buttonExitQuestKeeping", "Kilépsz a küldetésből (és megtartod amit találtál)");
Database.addText("hu.buttonExitQuestNoKeeping", "Kilépsz a küldetésből (és nem tartod meg amit találtál)");
Database.addText("hu.buttonExitQuestNoKeepingBecauseLose", "Kilépsz a küldetésből (és nem tartod meg amit találtál mert elbuktál)");
Database.addText("hu.mapVillageLockedHouseComment", "Egy bezárt ház");
Database.addText("hu.mapVillageForgeIntroductionSpeech", "Üdv! Én egy kovács vagyok. Eladhatok neked pár fegyvert és felszerelést.");
Database.addText("hu.mapVillageForgeIntroductionSpeechNoMoreToSell", "Üdv! Én egy kovács vagyok. Sajnos nincs mit eladnom a számodra. Talán gyere vissza később!");
Database.addText("hu.mapVillageFifthHouseNoWeaponSpeech", "Üdv. A pincém tele van patkányokkal, és el kellene intéznem őket... bárcsak valaki akinél fegyver van segíthetne nekem...");
Database.addText("hu.mapVillageFifthHouseWeaponSpeech", "Hé, te! Úgy látom nálad van fegyver! Ha megölöd a patkányokat akik a pincémben ólálkodnak, akkor megjutalmazlak!");
Database.addText("hu.mapVillageFifthHouseAgree", "Menjünk hát!");
Database.addText("hu.mapVillageFifthHouseCellarDone", "Köszönöm, hogy elintézted őket! Itt van egy nagyon értékes jutalom a számodra : a világ térképe. Szerintem te többet fogod használni mint én.");
Database.addText("hu.mapVillageTheShopComment", "A bolt");
Database.addText("hu.mapBridgeComment", "A híd");
Database.addText("hu.mapFarmComment", "A nyalóka farm");
Database.addText("hu.mapCaveEntranceComment", "Egy barlang bejárata");
Database.addText("hu.mapLighthouseComment", "A világítótorony");
Database.addText("hu.mapPierComment", "A kikötő");
Database.addText("hu.mapTheHoleComment", "A gödör");
Database.addText("hu.candyBoxRequestStatusBarUnlocked", "Kérj egy új dolgot a készítőtől (30 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfg", "Kérj még egyet (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedSave", "Kérj újra egyet (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedHealthBar", "Kérj valami sokkal izgalmasabbat (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedMap", "Az utolsó kérés! Ez meg fogja érni a cukorkákat. (10 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedComment", "Elérhető lett a státusz fül! (fent)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfgComment1", "Mostantól eléred a konfigurációs fület.");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfgComment2", "Megváltoztathatod a játék nyelvét, ha akarod.");
Database.addText("hu.candyBoxRequestStatusBarUnlockedSaveComment", "Hirtelen felbukkant egy mentés fül!");
Database.addText("hu.candyBoxRequestStatusBarUnlockedHealthBarComment", "Itt van 100 életerő pont. Nagyon hasznosak lesznek.");
Database.addText("hu.cfgChooseLanguage", "Válassz nyelvet :");
Database.addText("hu.cfgInvertColors", "Megfordítod a színeket?");
Database.addText("hu.gridItemMainMapName", "A térkép");
Database.addText("hu.gridItemMainMapDescription", "Egy térkép a világról");
Database.addText("hu.gridItemPogoStickName", "Pogo rúd");
Database.addText("hu.gridItemPogoStickDescription", "Ezzel a tárggyal ugrálni tudsz a küldetéseken!");
Database.addText("hu.gridItemTimeRingName", "Egy idő gyűrű");
Database.addText("hu.gridItemTimeRingDescription", "Ez a tárgy egy új képességgel ruház fel a küldetéseken : le tudod lassítani az időt. Ha túl gyors számodra az akció, használd az idő gyűrűt!");
Database.addText("hu.gridItemThirdHouseKeyName", "A harmadik ház kulcsa");
Database.addText("hu.gridItemThirdHouseKeyDescription", "Ezzel a kulccsal bejuthatsz a falu harmadik házába.");
Database.addText("hu.gridItemFeatherName", "Egy sivatagi madár tolla");
Database.addText("hu.gridItemFeatherDescription", "hu.ek a varázslatos tollnak a segítségével magasabbra ugorhatsz a pogo rúddal!");
Database.addText("hu.gridItemFeatherDescriptionNoPogoStick", "Valamilyen furcsa oknál fogva úgy érzed, hogy ez a toll nagyon hasznos lehet számodra, ha lenne pogo rudad...");
Database.addText("hu.gridItemSpongeName", "Egy varázslatos szivacs");
Database.addText("hu.gridItemSpongeDescription", "hu.ek a varázslatos szivacsnak a segítségével összenyomhatod magadat, akárcsak egy szivacs, így kisebb leszel.");
Database.addText("hu.gridItemFortressKeyName", "A sivatagi erőd kulcsa");
Database.addText("hu.gridItemFortressKeyDescription", "Ezzel a kulccsal beléphetsz a nagyon ősi erődbe, ami a sivatag felett található. Ki tudja, hogy mit találsz ott?");
Database.addText("hu.gridItemHeartPendantName", "Egy szív alakú nyakék");
Database.addText("hu.gridItemHeartPendantDescription", "Ez a szív alakú nyakék megnöveli a maximális életerő pontjaidat amíg hordod.");
Database.addText("hu.gridItemHeartPlugName", "Egy szív alakú dugó");
Database.addText("hu.gridItemHeartPlugDescription", "Ez egy szív alakú dugó, ami vasból, póklábakból és speciális \"szív likőrből\" készült, és megnöveli a maximális életerő pontjaidat 20 százalékkal!");
Database.addText("hu.gridItemBeginnersGrimoireName", "Kezdők varázskönyve");
Database.addText("hu.gridItemBeginnersGrimoireDescription", "Ez a varázskönyv három varázslattal ruház fel téged, amiket könnyű varázsolni. Valójában kezdőknek készült. Használhatod a sav eső varázslatot (rengeteg savas esőcsepp esik rá az ellenfeleidre), a tűzgolyó varázslatot (egy óriási tűzgolyó repül az ellenfeleid felé), valamint a teleportálás varázslatot (amivel kiszámíthatatlan helyre teleportálhatsz).");
Database.addText("hu.gridItemAdvancedGrimoireName", "Haladók varázskönyve");
Database.addText("hu.gridItemAdvancedGrimoireDescription", "A haladók varázskönyve két varázslattal ruház fel téged : a törlés mágiával és a tüskés pajzs mágiával. Az első mindenféle mágiát eltöröl a küldetésben, még azt is, amit te és ellenfeled használt. A második lebegő tüskés pajzsot alkot körülötted, amik érintésre megsebzik az ellenfeleidet.");
Database.addText("hu.gridItemBlackMagicGrimoireName", "Fekete mágiás varázskönyv");
Database.addText("hu.gridItemBlackMagicGrimoireDescription", "Ezt a varázskönyvet egy barlangban találtad, egy nagyon nehezen elérhető helyen, és érthető, hogy miért. Ez két erős fekete mágiát tartalmaz. Az elsővel elédvarázsol egy óriási obszidián falat, ami hasznos lehet ellenfeleid lelassítására. A második egy démon rajt idéz meg, akik mindenkit megtámadnak a küldetésen belül, még téged is. Ezzel légy óvatos.");
Database.addText("hu.gridItemUnicornHornName", "Egy unikornis szarva");
Database.addText("hu.gridItemUnicornHornDescription", "Ez a varázslatos szarv valaha egy unikornisé volt. Erős gyógyító hatalma van, ami sokat fog segíteni neked. Úgy hallottad, hogy ezt az unikornist valaha Charlienak hívták.");
Database.addText("hu.gridItemXinopherydonClawName", "Egy xinopherydon karma");
Database.addText("hu.gridItemXinopherydonClawDescription", "Ez a karom valaha egy xinopherydoné volt, ami egy kétfejű ősi állat, amire mindenki azt hitte, hogy már kihalt. Megduplázza a jelenlegi fegyvered sebzését.");
Database.addText("hu.gridItemPitchforkName", "Egy vasvilla");
Database.addText("hu.gridItemPitchforkDescription", "Ezzel a speciális vasvillával úgy is meglazíthatod a talajt, hogy nem forgatod fel, így megtartod a földalatti ökoszisztémát. Ez megháromszorozza a nyalóka farmod termelését.");
Database.addText("hu.gridItemShellPowderName", "Kagylópor");
Database.addText("hu.gridItemShellPowderDescription", "A földművesek gyakran használnak kagylóport, hogy megnöveljék a nyalóka farmjuk hatékonyságát. Ez a por megháromszorozza a nyalóka farmod termelését!");
Database.addText("hu.gridItemPName", "A P kő");
Database.addText("hu.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("hu.gridItemLName", "Az L kő");
Database.addText("hu.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("hu.gridItemAName", "Az A kő");
Database.addText("hu.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("hu.gridItemYName", "Az Y kő");
Database.addText("hu.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("hu.gridItemRedSharkFinName", "Egy varázslatos piros cápauszony");
Database.addText("hu.gridItemRedSharkFinDescription", "Ez a varázslatos uszony nagyban megnöveli a tűzgolyó varázslatod sebzését. Végre ez a tűzgolyó hasznos is lesz.");
Database.addText("hu.gridItemGreenSharkFinName", "Egy varázslatos zöld cápauszony");
Database.addText("hu.gridItemGreenSharkFinDescription", "Ez a varázslatos uszony elhozza a természet erejét a nyalóka farmodra! A termelésedet megötszörözi.");
Database.addText("hu.gridItemPurpleSharkFinName", "Egy varázslatos lila cápauszony");
Database.addText("hu.gridItemPurpleSharkFinDescription", "Ez a varázslatos uszony egy új fekete mágiával ruház fel téged. Egy küldetésen belül csak egyszer használhatod fel. Ezzel légy óvatos!");
Database.addText("hu.gridItemTalkingCandyName", "Egy beszélő cukorka");
Database.addText("hu.gridItemTalkingCandyDescription", "Ez a beszélő cukorka akkor jelent meg, mikor beraktál négy követ a kastély tornyának tetejébe. Ő talán tud segíteni kinyitni a candy box-ot...");
Database.addText("hu.inventorySpecialNothingEqItem", "Semmi");
Database.addText("hu.eqItemWeaponWoodenSwordName", "Fa kard");
Database.addText("hu.eqItemWeaponWoodenSwordDescription", "Egy egyszerű, fából készült kard");
Database.addText("hu.eqItemWeaponIronAxeName", "Vas balta");
Database.addText("hu.eqItemWeaponIronAxeDescription", "Egy egyszerű vas balta. Jól megcsiszolt. Erősebb, mint a fa kard.");
Database.addText("hu.eqItemWeaponPolishedSilverSwordName", "Megcsiszolt ezüst kard");
Database.addText("hu.eqItemWeaponPolishedSilverSwordDescription", "Egy erős kard, ami tüskékkel van tele.");
Database.addText("hu.eqItemWeaponTrollBludgeonName", "A troll bunkósbotja");
Database.addText("hu.eqItemWeaponTrollBludgeonDescription", "Ezt a bunkósbotot a hidat őrző trolltól vetted el. Lassú, de elég hatékonyan lapítja szét ellenfeleidet.");
Database.addText("hu.eqItemWeaponTribalSpearName", "Egy törzsi lándzsa");
Database.addText("hu.eqItemWeaponTribalSpearDescription", "Ezt a törzsi lándzsát egy nagy gödörben találtad egy elveszett törzsi harcos hullájánál. Először nehéz kezelni, de amint belejössz jó fegyver lesz.");
Database.addText("hu.eqItemWeaponSummoningTribalSpearName", "Egy idézős törzsi lándzsa");
Database.addText("hu.eqItemWeaponSummoningTribalSpearDescription", "Ez a varázslatos törzsi lándzsa az mellett, hogy kissé erősebb mint a normál törzsi lándzsa, képes megidézni törzsi harcosokat, akik segítenek neked a küldetések során.");
Database.addText("hu.eqItemWeaponMonkeyWizardStaffName", "A majom varázsló botja");
Database.addText("hu.eqItemWeaponMonkeyWizardStaffDescription", "Ez a bot valaha a barlangban található majom varázslóé volt. Gyakran idéz meg magától varázslatokat, amik az ellenfeleidet célozzák meg.");
Database.addText("hu.eqItemWeaponEnchantedMonkeyWizardStaffName", "A majom varázsló botja (elbűvölt)");
Database.addText("hu.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ez a bot gyorsabb, mint a nem elbűvölt változat, és sokkalta többet varázsol.");
Database.addText("hu.eqItemWeaponGiantSpoonName", "Egy óriási kanál");
Database.addText("hu.eqItemWeaponGiantSpoonDescription", "Ez az óriási kanál a sivatagi erődben volt egy nagy teáskannában. Nem tudsz arról, hogy valaki ezt kanálként használta volna, de ha igen, akkor az nagyon nagy lehetett. Valószínűleg nem szeretnél találkozni vele.");
Database.addText("hu.eqItemWeaponGiantSpoonOfDoomName", "A Végzet óriási kanala");
Database.addText("hu.eqItemWeaponGiantSpoonOfDoomDescription", "Ez az óriási kanál még erősebb, mint az átlagos változat amit találhatsz, mondjuk egy teáskannában. Bár ez mellett eléggé lassú.");
Database.addText("hu.eqItemWeaponScytheName", "Egy kasza");
Database.addText("hu.eqItemWeaponScytheDescription", "Azt mondják, hogy ez a kasza valaha magához a Halálhoz tartozott. Extrém gyors.");
Database.addText("hu.eqItemHatMerchantHatName", "Az árus sapkája");
Database.addText("hu.eqItemHatMerchantHatDescription", "Ezt a sapkát a cukorka árus adta el neked. A cukorka árus imádja a cukorkákat. Ez a sapka meghétszerezi a küldetéseken szerzett cukorkák mennyiségét!");
Database.addText("hu.eqItemHatSorceressHatName", "A banya sapkája");
Database.addText("hu.eqItemHatSorceressHatDescription", "Ezt a sapkát a banya adta el neked. Ez megnöveli a varázslataid és italaid hatását.");
Database.addText("hu.eqItemHatOctopusKingCrownName", "A polip király koronája");
Database.addText("hu.eqItemHatOctopusKingCrownDescription", "Hogyha ez a korona rajtad van, akkor magabiztosabb vagy. Nem ad semmilyen előnyt a küldetéseken, de az önbizalom fontos dolog!");
Database.addText("hu.eqItemHatOctopusKingCrownWithJaspersName", "Jáspisköves polip király korona");
Database.addText("hu.eqItemHatOctopusKingCrownWithJaspersDescription", "Ez az elbűvölt korona aranyból és vörös jáspisból van. A küldetéseken belül gyakran varázsol tűzgolyókat köréd. És még ragyog is!");
Database.addText("hu.eqItemHatOctopusKingCrownWithObsidianName", "Obszidiános polip király korona");
Database.addText("hu.eqItemHatOctopusKingCrownWithObsidianDescription", "Ez az elbűvolt korona aranyból és obszidiánból van. Csodálatos. A küldetéseken belül megidéz egy polip királyt, hogy segítsen neked a harcokban. Micsoda csápos társ!");
Database.addText("hu.eqItemGlovesLeatherGlovesName", "Bőr kesztyű");
Database.addText("hu.eqItemGlovesLeatherGlovesDescription", "Ezek a kesztyűk semmit se csinálnak. De legalább puhák és kényelmesek!");
Database.addText("hu.eqItemGlovesRedEnchantedGlovesName", "Vörös elbűvölt kesztyű");
Database.addText("hu.eqItemGlovesRedEnchantedGlovesDescription", "Ezek az elbűvölt kesztyűk halvány piros fényt árasztanak köréd a sötétben. A küldetéseken véletlenszerű tűzgolyókat dobálnak az ellenfeleid felé, ami biztosan hasznos lehet.");
Database.addText("hu.eqItemGlovesPinkEnchantedGlovesName", "Rózsaszín elbűvölt kesztyű");
Database.addText("hu.eqItemGlovesPinkEnchantedGlovesDescription", "Ezek az elbűvölt kesztyűk mindenen amihez hozzáérsz rózsaszín jelet hagynak. A küldetéseken belül folyamatosan gyógyítanak téged.");
Database.addText("hu.eqItemBootsRocketBootsName", "Rakéta cipők");
Database.addText("hu.eqItemBootsRocketBootsDescription", "Ezek a menő rakéta cipők engedélyezik a levegőben való ugrálást, szóval ezekkel gyakorlatilag repülhetsz!");
Database.addText("hu.eqItemBootsLeatherBootsName", "Bőr cipők");
Database.addText("hu.eqItemBootsLeatherBootsDescription", "Egyszerű bőr cipők. Semmi különös nincs bennük.");
Database.addText("hu.eqItemBootsBootsOfIntrospectionName", "A betekintés cipői");
Database.addText("hu.eqItemBootsBootsOfIntrospectionDescription", "Csak lazulj el egy kicsit és lélegezz mélyeket. Hogyha ezek a cipők vannak rajtad, akkor addig nem mozdulsz előre, amíg a földet éri a lábad.");
Database.addText("hu.eqItemBodyArmoursLightweightBodyArmourName", "Egy könnyű páncél");
Database.addText("hu.eqItemBodyArmoursLightweightBodyArmourDescription", "Ez a páncél gyenge védelmet nyújt. Kissé ellenállóbb leszel a támadásokkal szemben.");
Database.addText("hu.eqItemBodyArmoursKnightBodyArmourName", "Egy lovag páncélja");
Database.addText("hu.eqItemBodyArmoursKnightBodyArmourDescription", "Ez az erős páncél alaposan megvéd téged. Ellenállóvá tesz a támadásokkal szemben.");
Database.addText("hu.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Egy elbűvölt lovagi páncél");
Database.addText("hu.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ez a páncél nagyon különleges. Ez NAGYON ellenállóvá tesz a támadásokkal szemben, de ugyanakkor a fegyvered sebzését felezi.");
Database.addText("hu.mapVillageForgeBuyWoodenSwordButton", "Fa kard megvétele (150 cukorka)");
Database.addText("hu.mapVillageForgeBuyWoodenSwordSpeech", "Köszönöm, hogy megvetted! Ez a fa kard eléggé gyenge, de kezdetnek megteszi.");
Database.addText("hu.mapVillageForgeBuyIronAxeButton", "Vas balta megvétele (400 cukorka)");
Database.addText("hu.mapVillageForgeBuyIronAxeSpeech", "Remélem, hogy tetszik neked ez a vas balta. Még meg is csiszoltam neked!");
Database.addText("hu.mapVillageForgeBuyPolishedSilverSwordButton", "Megcsiszolt ezüst kard megvétele (2 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyPolishedSilverSwordSpeech", "Rengeteg időmbe telt elkészíteni ezt a kardot. Biztosíthatlak, hogy megéri az árát.");
Database.addText("hu.mapVillageForgeBuyLightweightBodyArmourButton", "Könnyű páncél megvétele (15 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ez a páncélzat meg fog védeni téged az ellenfeleidtől.");
Database.addText("hu.mapVillageForgeBuyScytheButton", "Kasza megvétele (5 000 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyScytheSpeech", "Több hónapomba telt mire elkészítettem ezt a kaszát. Igazi művészeti alkotás. Ez talán a leggyorsabb fegyver, amit valaha is használni tudsz majd. Sok sikert!");
Database.addText("hu.wishingWellThrowFirstCandyButton", "Dobj egy cukorkát a kútba");
Database.addText("hu.wishingWellCandyIntroductionSpeech", "Üdv, vándor! Én vagyok a kívánságkút. Az édességekért cserébe teljesítem a kívánságaidat! Ha cukorkákat dobsz belém, akkor meggyógyítom a sebeidet.");
Database.addText("hu.wishingWellThrewCandiesSpeech", "A sebeid begyógyultak!");
Database.addText("hu.wishingWellNoWoundSpeech", "Nincsenek meggyógyítandó sebeid!");
Database.addText("hu.wishingWellThrowFirstLollipopButton", "Dobj egy nyalókát a kútba");
Database.addText("hu.wishingWellLollipopIntroductionSpeech", "Üdv, vándor! Én vagyok a kívánságkút. Az édességekért cserébe teljesítem a kívánságaidat! Ha nyalókákat dobsz belém, akkor azokat cukorkákra váltom be.");
Database.addText("hu.wishingWellThrewLollipopsSpeech", "A nyalókáidat beváltottam cukorkákra! Két nyalóka egy cukorkáért.");
Database.addText("hu.wishingWellThrowChocolateBarButton", "Dobj egy csokoládé rudat a kútba");
Database.addText("hu.wishingWellChocolateBarIntroductionSpeech", "Üdv, vándor! Én vagyok a kívánságkút. Az édességekért cserébe teljesítem a kívánságaidat! Szeretem a csokoládé rudakat. Nagyon szeretem őket. Minden egy csokoládé rúdért cserébe, még ezért is, elbűvölheted az egyik felszerelésedet.");
Database.addText("hu.wishingWellThrewChocolateBarSpeech", "Melyik tárgyat akarod elbűvölni?");
Database.addText("hu.wishingWellThrowPainAuChocolatButton", "Dobj egy pain au chocolatot a kútba");
Database.addText("hu.wishingWellPainAuChocolatIntroductionSpeech", "Üdv, vándor! Én vagyok a kívánságkút. Az édességekért cserébe teljesítem a kívánságaidat! Hogyha egy pain au chocolatot dobsz belém, akkor egy nagyon speciális ajándékot kapsz. Bölcsen dönts.");
Database.addText("hu.wishingWellThrewPainAuChocolatSpeech", "Köszönöm a pain au chocolatot! Most kiválaszthatod az ajándékodat.");
Database.addText("hu.wishingWellChooseGift", "Válaszd ki az ajándékodat!");
Database.addText("hu.wishingWellChooseGiftButton", "Válassz");
Database.addText("hu.wishingWellGiftDoneSpeech", "Kész! Most megszerezted az új ajándékodat. A tárgymenüdben lesz a statisztikák részlegnél.");
Database.addText("hu.wishingWellNoPossibleEnchantment", "Nincs elérhető bűvölés");
Database.addText("hu.wishingWellChooseEnchantment", "Válassz bűvölést");
Database.addText("hu.wishingWellEnchantButton", "Bűvölés");
Database.addText("hu.wishingWellEnchantmentDoneSpeech", "És már kész is! A tárgyat elbűvöltem.");
Database.addText("hu.pierLighthouseButton", "Menj a világítótoronyhoz hajóval");
Database.addText("hu.pierTheSeaButton", "Ugorj bele a tengerbe");
Database.addText("hu.lonelyHouseOpenBox", "Nyisd ki a ládát");
Database.addText("hu.lonelyHouseShakeBox", "Rázd meg a ládát");
Database.addText("hu.lonelyHouseBreakLock", "Törd szét a zárat");
Database.addText("hu.lonelyHouseKickBox", "Rúgj bele a ládába");
Database.addText("hu.lonelyHouseAskTheBoxToOpenItself", "Kérd meg a ládát, hogy magától nyíljon ki");
Database.addText("hu.lonelyHouseLureTheBoxWithACandy", "Csalogasd a ládát cukorkával");
Database.addText("hu.lonelyHouseTakeTheBox", "Vidd magaddal a ládát, mert biztos kulcs kell majd a kinyitásához");
Database.addText("hu.lonelyHouseOpenBoxResult", "A láda zárva van");
Database.addText("hu.lonelyHouseShakeBoxResult", "Semmi se történik");
Database.addText("hu.lonelyHouseBreakLockResult", "A zár ellenáll");
Database.addText("hu.lonelyHouseKickBoxResult", "A lábad megfájdult egy kicsit, de semmi más nem történt");
Database.addText("hu.lonelyHouseAskTheBoxToOpenItselfResult", "...ugye tudod, hogy most egy ládához beszélsz?");
Database.addText("hu.lonelyHouseLureTheBoxWithACandyResult", "Úgy tűnik, hogy ez a ládát nem érdekli");
Database.addText("hu.lonelyHouseTakeTheBoxResult", "Úgy tűnik van valami érdekes ebben a candy box-ban.");
Database.addText("hu.lollipopFarmConstructMill", "Építs egy malmot (10 000 nyalóka)");
Database.addText("hu.lollipopFarmFeedMill", "Töltsd fel a malmot");
Database.addText("hu.lollipopFarmCurrentCandiesProduction", "Jelenlegi cukorka gyártás");
Database.addText("hu.lollipopFarmDigPond", "Áss egy tavat (100 000 nyalóka)");
Database.addText("hu.lollipopFarmBuyLolligator", "Vegyél egy lolligátort (1200 cukorka)");
Database.addText("hu.lollipopFarmLolligatorsConversionText", "Átalakítás cukorkából -> nyalókába aktiválva");
Database.addText("hu.lighthouseAskButton", "Kérdezz");
Database.addText("hu.lighthouseQuestionWho", "Te meg ki vagy?");
Database.addText("hu.lighthouseQuestionWhoSpeech", "Én egy nagyon öreg küklopsz vagyok.");
Database.addText("hu.lighthouseQuestionWhat", "Mit keresel itt?");
Database.addText("hu.lighthouseQuestionWhatSpeech", "Egész nap itt élek, és várok egy hajóra. Régóta láttam már hajót, de itt kell maradnom és bámulnom a tengert, hátha erre jár egy hajó.");
Database.addText("hu.lighthouseQuestionWhyEatCandies", "Miért ennék cukorkákat?");
Database.addText("hu.lighthouseQuestionWhyEatCandiesSpeech", "Mert jót tesznek az egészségednek!");
Database.addText("hu.lighthouseQuestionCandyBox", "Mi az a candy box?");
Database.addText("hu.lighthouseQuestionCandyBoxSpeech", "Az egy nagyon öreg láda, amiben állítólag a világ minden cukorkája megtalálható. A legenda szerint bárki is nyitja ki, annak annyi cukorkája lesz amennyi csak lehetséges.");
Database.addText("hu.lighthouseQuestionDragon", "A sárkány azt mondta, hogy jöjjek ide, ha cukorkát akarok.");
Database.addText("hu.lighthouseQuestionDragonSpeech", "Ó, értem... Nos, én nem adhatok neked cukorkákat, csak valami fontosat, amivel végül RENGETEG cukorkát szerezhetsz. De először le kell tesztelnelek. Nem adhatom ezt csak úgy oda bárkinek. Oldd meg ezt a rejtvényt és a tiéd lehet.");
Database.addText("hu.lighthouseFoundStone", "Gratulálok! Átmentél a teszten és megtaláltad a követ. Nagyon értékes darab, de csak akkor van számodra haszna, ha találsz még három hasonló követ. Sok szerencsét!");
Database.addText("hu.lighthouseFoundStoneAgain", "Szép munka, ismét teljesítetted a rejtvényt. Úgy látom ez tetszik neked.");
Database.addText("hu.saveLocalSaveTitle", "Böngésző mentés");
Database.addText("hu.saveLocalSaveWhy", "Válaszd a helyi mentést, hogyha a jelenlegi eszközödön és böngésződben szeretnél játszani.");
Database.addText("hu.saveLocalSaveWarning0", "Úgy tűnik, hogy a böngésződ nem támogatja a HTML5-öt.");
Database.addText("hu.saveLocalSaveWarning1", "Frissítened kellene a böngésződet, hogyha használni szeretnéd a helyi mentés funkciót.");
Database.addText("hu.saveLocalSaveChooseSlot", "Válassz a mentésednek helyet :");
Database.addText("hu.saveLocalSaveAutosaveEnabled", "Automentés bekapcsolva");
Database.addText("hu.saveLocalSaveChooseWhatToDo", "Válaszd ki, hogy mit akarsz :");
Database.addText("hu.saveLocalSaveSaveButton", "Mentés");
Database.addText("hu.saveLocalSaveAutosaveButton", "Mentés 10 percenként");
Database.addText("hu.saveLocalSaveDisableAutosaveButton", "Automentés kikapcsolása");
Database.addText("hu.saveFileSaveTitle", "Szöveges mentés");
Database.addText("hu.saveFileSaveWhy0", "Válaszd a szöveges mentést, ha :");
Database.addText("hu.saveFileSaveWhy1", "Egy másik eszközről vagy böngészővel akarod folytatni tovább a játékot");
Database.addText("hu.saveFileSaveWhy2", "Meg akarod osztani a mentésedet mással");
Database.addText("hu.saveFileSaveWhy3", "Valami oknál fogva törölni akarod a böngésződ sütijeit");
Database.addText("hu.saveFileSaveWhy4", "(ami törli a helyi mentéseidet)");
Database.addText("hu.saveFileSaveButton", "Szerezd meg a jelenlegi játékot szövegként");
Database.addText("hu.saveFileSaveWarning", "Most másold le ezt a szöveget valahová! (például egy fájlba)");
Database.addText("hu.saveLocalLoadTitle", "Böngésző betöltés");
Database.addText("hu.saveLocalLoadYouCan", "Betölthetsz egy helyi mentést az alábbi linkekkel :");
Database.addText("hu.saveLocalLoadThanksTo", "Hála a HTML5 varázsának, mostantól ezeket a linkeket offline is használhatod.");
Database.addText("hu.saveFileLoadTitle", "Szöveges betöltés");
Database.addText("hu.saveFileLoadPaste", "Illeszd be alulra a mentésedet, majd kattints a \"Betöltés\" gombra");
Database.addText("hu.saveFileLoadButton", "Betöltés");
Database.addText("hu.mountainsText0", "Megláttál valamit a hegyekben!");
Database.addText("hu.mountainsText1", "Érdekesnek tűnik. Lehet, hogy a hasznodra válhat.");
Database.addText("hu.mountainsTextButton", "Mássz fel a hegyre, hogy megszerezd a tárgyat");
Database.addText("hu.mountainsTextAfter", "Találtál egy pogo rudat! Belekerült a tárgymenüdbe.");
Database.addText("hu.secondHouseIntroSpeech", "Üdv, én vagyok a cukorka árus. Bármit megtennék a cukorkákért. Mire van szükséged?");
Database.addText("hu.secondHouseLollipop1Speech", "Ez egy citrom-ízű nyalóka. A kedvencem! 60 cukorkába kerül, de megéri az árát.");
Database.addText("hu.secondHouseLollipop2Speech", "Ez egy eper-ízű nyalóka. Jó az íze. Tetszik a piros színe. Csak 60 cukorkába kerül!");
Database.addText("hu.secondHouseLollipop3Speech", "Ez egy tök-ízű nyalóka. Fogadok, hogy ilyent még nem próbáltál! 60 cukorkáért a tiéd.");
Database.addText("hu.secondHouseLollipopButtonText", "Vedd meg ezt a nyalókát (60 cukorka)");
Database.addText("hu.secondHouseMerchantHatSpeech", "Eladhatom neked a sapkámat, de ez nagyon drága, tudod... Rengeteg cukorkát kellene adnod érte. Mondjuk úgy 1 millió cukorkát. Ez egy fair ár, ugye?");
Database.addText("hu.secondHouseMerchantHatButtonText", "Vedd meg az árus sapkáját (1 000 000 cukorka)");
Database.addText("hu.secondHouseTimeRingSpeech", "Ez egy idő gyűrű. Olyan varázs-fajta. Segítségével lelassíthatod az időt ha bajban lennél.");
Database.addText("hu.secondHouseTimeRingButtonText", "Vedd meg az idő gyűrűt (500 cukorka)");
Database.addText("hu.secondHouseLeatherGlovesSpeech", "Ezek a bőr kesztyűk tevebőrből készültek, így nagyon jó a minőségük. Rengeteg van belőle raktáron, azért ilyen olcsók : csak 300 cukorka darabja!");
Database.addText("hu.secondHouseLeatherBootsButtonText", "Vegyél egy pár bőr cipőt (300 cukorka)");
Database.addText("hu.secondHouseLeatherBootsSpeech", "Ezek a jó minőségű bőr cipők, amik tevebőrből készültek, melegen fogják tartani a lábaidat.");
Database.addText("hu.secondHouseLeatherGlovesButtonText", "Vegyél egy pár bőr kesztyűt (300 cukorka)");
Database.addText("hu.secondHouseChocolateBarSpeech", "Ez egy csokoládé rúd. Nem tudom, hogy ezt mire használják, de úgy tűnik, hogy ez nagyon ritka dolog, ami megmagyarázza az árát. 800 cukorkáért a tiéd!");
Database.addText("hu.secondHouseChocolateBarButtonText", "Vegyél csokoládé rudat (800 cukorka)");
Database.addText("hu.outsideTheHoleButton", "Ugorj bele ebbe a gödörbe a földön");
Database.addText("hu.theCaveExitText0", "Végre elérted a barlang kijáratát.");
Database.addText("hu.theCaveExitText1", "Látsz egy hatalmas erdőt odakint.");
Database.addText("hu.theCaveExitButtonText", "Lépj ki a barlangból");
Database.addText("hu.theCaveFirstSentenceWentStraight", "Tovább mentél egyenesen.");
Database.addText("hu.theCaveFirstSentenceWentLeft", "Balra mentél.");
Database.addText("hu.theCaveFirstSentenceWentRight", "Jobbra mentél.");
Database.addText("hu.theCaveFirstSentenceYouAre", "Egy barlangban vagy. Három út van előtted.");
Database.addText("hu.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Valami furcsa dolgot látsz a földön előtted.");
Database.addText("hu.theCavePattern_ChocolateBarNowSeeChocolateBar", "Egy csokoládé rudat látsz előtted.");
Database.addText("hu.theCavePattern_TreasureMapSentence", "Kisebb köveket látsz a földön előtted.");
Database.addText("hu.theCavePattern_MonkeyWizardSentence", "Találkozol egy meztelen majom varázslóval.");
Database.addText("hu.theCavePattern_MonkeyWizardButton", "Kűzdj meg vele");
Database.addText("hu.theCavePattern_OctopusKingSentence", "Belebotlasz a Polip Királyba. Durvának tűnik.");
Database.addText("hu.theCavePattern_OctopusKingButton", "Kűzdj meg vele");
Database.addText("hu.fortressInsideText0", "Egy sivatagi erődben vagy.");
Database.addText("hu.fortressInsideText1", "Három ajtó közül választhatsz.");
Database.addText("hu.fortressInsideText2", "Mindegyik egy nagy szobába vezet, aminek a végén egy kincs vár.");
Database.addText("hu.fortressInsideEnterRoom1", "Lépj be az első szobába");
Database.addText("hu.fortressInsideEnterRoom2", "Lépj be a második szobába");
Database.addText("hu.fortressInsideEnterRoom3", "Lépj be a harmadik szobába");
Database.addText("hu.treasureButtonDig", "Áss");
Database.addText("hu.treasureButtonYouFound", "Három csokoládé rudat találtál!");
Database.addText("hu.sorceressHutHello", "Üdv, én egy banya vagyok. Taníthatok egy-két dolgot a mágiáról neked. Adhatok még pár érdekességet is, vagy varázsolhatok a számodra. De mindennek ára van! És a fizetőeszköz nyalóka. Jó sok darab.");
Database.addText("hu.sorceressHutClickedGrimoire", "Ez egy varázskönyv kezdőknek. A küldetések során ennek segítségével egyszerű, de hasznos varázslatokat használhatsz. Erre szükséged van! Csak 5 000 nyalóka.");
Database.addText("hu.sorceressHutBuyGrimoireButton", "Vedd meg ezt a varázskönyvet (5 000 nyalóka)");
Database.addText("hu.sorceressHutBuyGrimoireSpeech", "Köszönöm a vásárlást! Ezzel a varázskönyvvel három varázslatot használhatsz. Sok szerencsét!");
Database.addText("hu.sorceressHutClickedGrimoire2", "Ez egy varázskönyv haladóknak. A küldetések során két erősebb varázslatot használhatsz. Én magam írtam a könyvet, és nem volt könnyű dolgom. 20 000 nyalóka fair ár érte.");
Database.addText("hu.sorceressHutBuyGrimoire2Button", "Vedd meg ezt a varázskönyvet (20 000 nyalóka)");
Database.addText("hu.sorceressHutBuyGrimoire2Speech", "Köszönöm a vásárlást! Ezzel a varázskönyvvel két varázslatot használhatsz. Használd őket okosan!");
Database.addText("hu.sorceressHutClickedCauldron", "Ez az üstöm. Ezzel készítem a varázsitalaimat. Eladhatom neked, de ez túl értékes számomra... de 100 000 nyalókáért a tiéd lehet.");
Database.addText("hu.sorceressHutBuyCauldronButton", "Vedd meg az üstöt (100 000 nyalóka)");
Database.addText("hu.sorceressHutBuyCauldronSpeech", "Köszönöm! 100 000 nyalóka az enyém! Adok még neked egy főzési útmutatót. Jól fog jönni.");
Database.addText("hu.sorceressHutClickedHat", "Igen, tényleg szép a sapkám! De tényleg nem adhatom el neked. Túúúlságosan értékes számomra. Nagyon, így nem tehetem. Ne erőlködj. Nem. Nem nem nem, nem tehetem! Nah, jól van, eladhatom, de 1 000 000 000 nyalóka az ára. Valószínűleg annyit úgyse tudsz fizetni.");
Database.addText("hu.sorceressHutBuyHatButton", "Vedd meg a sapkát (1 000 000 000 nyalóka)");
Database.addText("hu.sorceressHutBuyHatSpeech", "Egy billió nyalóka nekeeeeem! De már nincsen többé sapkám... de egy billió nyalóka, váó! ...teljesen megérte.");
Database.addText("hu.cauldronPreviousPageButton", "Előző oldal");
Database.addText("hu.cauldronNextPageButton", "Következő oldal");
Database.addText("hu.cauldronWhatYouWantToPut", "Mit akarsz belerakni az üstbe");
Database.addText("hu.cauldronWhatIsIn", "Mi van az üstben");
Database.addText("hu.cauldronWhatYouCanDo", "Mit csinálhatsz vele");
Database.addText("hu.castleBigRoomComment", "Egy nagy szoba");
Database.addText("hu.castleARoomComment", "Egy szoba");
Database.addText("hu.castleADarkRoomComment", "Egy sötét szoba");
Database.addText("hu.castleCastleEntranceComment", "A kastély bejárata");
Database.addText("hu.castleTowerEntranceComment", "A torony bejárata");
Database.addText("hu.castleNougatMonsterComment", "Támadd meg az óriási nugát szörnyet");
Database.addText("hu.castleGuardsComment", "Támadd meg az őröket");
Database.addText("hu.castleStairsComment", "Lépcső");
Database.addText("hu.buttonBackToTheCastle", "Vissza a kastélyba");
Database.addText("hu.castleBigRoomHovenSpeechSad", "Üdv! Én egy nagyon öreg kenyérsütő vagyok. Régen tonnaszámra készítettem süteményeket, de manapság senki se használ engem. Talán... talán te segítenél nekem? Csak hadd vegyek el pár édességet tőled! Ne aggódj, nem fogod megbánni! Bízhatsz bennem.");
Database.addText("hu.castleBigRoomHovenNotEnough", "Óh... nincs nálad elég édesség, nem tehetek semmit. Haszontalan vagyok. Én vagyok a haszontalan kenyérsütő, így kellene hívnod engem.");
Database.addText("hu.castleBigRoomHovenSpeechMadePainAuChocolat", "Jupí! Köszönöm! 100 cukorkát és egy csokoládé rudat használtam el, és készítettem neked... egy pain au chocolatot! Ez a kedvenc sütim, és remélem neked is tetszeni fog!");
Database.addText("hu.castleBigRoomHovenSpeechHappy", "Hé! Ha akarod, hogy újabb süteményt készítsek, csak szólj! Szívesen segítek neked.");
Database.addText("hu.castleBigRoomHovenSpeechHappyNotEnough", "Óh, nincs nálad elég édesség, sajnos. 100 cukorka és egy csokoládé rúd kellene nekem. Gyere vissza, ha van nálad pár!");
Database.addText("hu.castleBigRoomHovenLetHovenTakeButton", "Hadd vegye el a sütő azt az édességet amit szeretne");
Database.addText("hu.castleBigRoomHovenThanks", "Köszönöm, sütő!");
Database.addText("hu.dragonStopTickling", "Hé, te! Kérlek ne csikizz tovább.");
Database.addText("hu.dragonStopTicklingButton", "Ó, jaj, elnézést, azt hittem, hogy meg kellene támadni téged");
Database.addText("hu.dragonTalking", "Én egy sárkány vagyok, és ez az én kastélyom. Láttam, hogy sikerült bejutnod, biztosan nagyon bátor vagy... szívesen segítenék olyannak, mint amilyen te vagy. Mit keresel?");
Database.addText("hu.dragonTalkingChallengeButton", "Kihívást");
Database.addText("hu.dragonTalkingFameButton", "Hírnevet");
Database.addText("hu.dragonTalkingCandiesButton", "Cukorkákat");
Database.addText("hu.dragonTalkingChallengeSpeech", "Ó, szóval kihívást akarsz? Akkor azt hiszem el kellene menned a pokolba, mivel az ördögről jól ismert, hogy nehéz legyőzni őt. Pattanj a hátamra, és elviszlek oda!");
Database.addText("hu.dragonTalkingFameSpeech", "A leggyorsabb módon úgy lehetsz híres, hogyha legyőzöd magát a fejlesztőt. Tudom, hogy hol lakik és elvihetlek hozzá. De készülj fel, mert nem lesz könnyű menet.");
Database.addText("hu.dragonTalkingCandiesSpeech", "A legvégén mindenki csak cukorkát akar, nemde? Azt hiszem az egyik barátom tud segíteni neked ebben. Elég könnyen fel fogod ismerni őt, mivel csak egy szeme van. Csak szólj neki, hogy ismersz engem.");
Database.addText("hu.dragonTalkingChallengeAnswer", "Menjünk hát!");
Database.addText("hu.dragonTalkingFameAnswer", "Készen állok.");
Database.addText("hu.dragonTalkingCandiesAnswer", "Rendben, köszönöm!");
Database.addText("hu.buttonBackToCastle", "Vissza a kastélyba");
Database.addText("hu.talkingCandySpeechNoBox", "Hé! Én egy beszélő cukorka vagyok. Már majdnem megnyerted a játékot. Csak meg kell találnod a candy box-ot. Valahol a falun kívül van egy házban. Ez az utolsó lépés!");
Database.addText("hu.talkingCandySpeech1", "Hé! Én vagyok a beszélő cukorka. Gratulálok, megnyerted a játékot! Most kinyitom neked a candy box-ot, ez a jutalmad. Továbbmehetünk?");
Database.addText("hu.talkingCandySpeech2", "Kész! Most már beléphetsz. Remélem tetszett a játék :)");
Database.addText("hu.talkingCandyButton", "Igen!!");
Database.addText("hu.lighthousePuzzleResetButton", "Újrakezd");
Database.addText("id.mapVillageComment", "Desa");
Database.addText("id.mapFortressComment", "Benteng gurun");
Database.addText("id.mapATreeComment", "Sebuah pohon");
Database.addText("id.mapTheDesertComment", "Gurun pasir");
Database.addText("id.mapWishingWellComment", "Sumur permohonan");
Database.addText("id.mapLonelyHouseComment", "Rumah yang terpencil");
Database.addText("id.mapForestComment", "Hutan");
Database.addText("id.mapCastleEntranceComment", "Pintu masuk istana");
Database.addText("id.mapCastleComment", "Istana");
Database.addText("id.mapDragonComment", "Sang naga");
Database.addText("id.candyBoxEatCandiesButton", "Makan semua permen");
Database.addText("id.candyBoxThrowCandiesButton", "Lempar 10 permen ke tanah");
Database.addText("id.mapVillageAHouseComment", "Sebuah rumah");
Database.addText("id.mapVillageForgeComment", "Bengkel pandai besi");
Database.addText("id.buttonBackToTheMap", "Kembali ke peta");
Database.addText("id.mapSorceressHutComment", "Pondok penyihir wanita");
Database.addText("id.buttonBackToTheVillage", "Kembali ke desa");
Database.addText("id.mapATreeIntroductionSpeech", "Halo, saya adalah si tupai. Saya dapat memberikan kamu permen, dan banyak benda. Saya tau seberapa banyak kamu menyukai permen. Tetapi saya merasa kesepian di hutan ini.");
Database.addText("id.mapATreeIntroductionButton", "Bagaimana saya bisa membantumu?");
Database.addText("id.mapATreeFirstQuestion", "Saya akan memberimu pertanyaan. Jika kamu menjawab dengan benar, penganan termanis akan menjadi milikmu! Pertanyaan pertama : apakah kamu benar-benar menyukai permen? (jawab dalam Bahasa Inggris)");
Database.addText("id.mapATreeSecondQuestion", "Betul! 20 permen ini untukmu. Sekarang lengkapi urutan huruf ini dan kamu akan mendapatkan hadiah baru : S, E, I, D, N, A, ?");
Database.addText("id.mapATreeThirdQuestion", "Candies (permen)! 100 permen ini untukmu. Pertanyaan selanjutnya : berapa banyak permen yang dimiliki oleh orang yang \"paling permen\"?");
Database.addText("id.mapATreeFourthQuestion", "500 permen ini untukmu! hadiah selanjutnya seharusnya menjadi lebih menarik...  Ini teka-tekinya : Di sebuah hutan kuno tumbuhlah sebuah pohon yang sangat tua, diamana binatang-binatang paling pintar di dunia ini tinggal. Katanya pohon ini memiliki 60 akar, 360 cabang dan 2160 daun. Berapa banyak tanda yang dapat kamu temukan di batangnya?");
Database.addText("id.mapATreeFifthQuestion", "Selamat! Memang, saya sedang berbicara tentang pohonku. 3 lollipop ini untukmu. Gunakan emreka sebaik-baiknya! Teka-teki selanjutnya, dengar dengan teliti : Dibawah bulan purnama, Saya melempar sebuah topi kuning kedalam laut merah. Apa yang terjadi dengan topi kuning?");
Database.addText("id.mapATreeTicTacToeIntro", "Terjawab dengan baik! Pertanyaan tadi tidak terlalu susah. 3 batang coklat ini untukmu! Untuk hadiah selanjutnya, kita akan merubah aturannya sedikit. Kamu akan bermain sebuah permainan dengan saya! Siap?");
Database.addText("id.mapATreeTicTacToeIntroButton", "Aku siap!");
Database.addText("id.mapATreeTicTacToeLetsPlay", "Permainannya adalah Tic-Tac-Toe. Kita bermain di papan permainan berukuran 3 kali 3. Kamu akan menggunakan tanda X sementara saya akan menggunakan tanda O. Kita menaruh tanda kita secara bergiliran, dan tujuannya adalah menaruh 3 tanda secara berderet. Saya akan membiarkanmu mulai duluan!");
Database.addText("id.mapATreeTicTacToeNobodyWins", "Papannya sudah penuh dan kita berdua gagal mendapatkan tiga tanda secara berderet : tidak ada yang menang! Apakah kamu ingin mencoba lagi?");
Database.addText("id.mapATreeTicTacToeYouLose", "Saya mendapat tiga tanda secara berderet! Saya menang. Apakah kamu ingin mencoba lagi?");
Database.addText("id.mapATreeTicTacToeTryAgainButton", "Ya, aku mau!");
Database.addText("id.mapATreeTicTacToeYouWin", "Wow, itu adalah langkah yang tidak terduga. Tapi kamu mendapat tiga tanda secara berderet, Saya tidak dapat membantah. Kamu menang! Ambil kunci ini! Kunci ini membuka salah satu rumah di desa yang berada di bawah hutan.");
Database.addText("id.mapATreeTicTacToeAnymoreSweet", "Terimakasih tupai! Ada tantangan yang lain?");
Database.addText("id.mapATreeNoMoreChallenge", "Sayangnya tidak, Saya tidak punya tantangan lagi untukmu... Bermain denganmu itu sangat menyenangkan, terimakasih atas itu!");
Database.addText("id.buttonExitQuestKeeping", "Keluar dari pencarian (quest) (dan simpan apa yang kamu dapatkan)");
Database.addText("id.buttonExitQuestNoKeeping", "Keluar dari pencarian (quest) (kamu tidak akan menyimpan apa yang kamu dapat)");
Database.addText("id.buttonExitQuestNoKeepingBecauseLose", "Keluar dari pencarian (quest) (kamu tidak akan menyimpan apa yang kamu dapat karena kamu gagal)");
Database.addText("id.mapVillageLockedHouseComment", "Sebuah rumah yang terkunci");
Database.addText("id.mapVillageForgeIntroductionSpeech", "Hai! Saya adalah pandai besi. Saya menjual berbagai macam senjata dan peralatan untukmu.");
Database.addText("id.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hai! Saya adalah pandai besi. Sayang, Saya sudah tidak mempunyai apapun untuk dijual. Datang lagi nanti, mungkin?");
Database.addText("id.mapVillageFifthHouseNoWeaponSpeech", "Halo. Gudang bawah tanahku penuh dengan tikus, Saya butuh menyingkirkan mereka... hanya saja seseorang dengan senjata dapat membantu saya...");
Database.addText("id.mapVillageFifthHouseWeaponSpeech", "Hei kamu! Saya melihat kamu membawa sebuah senjata! Jika kamu membunuh tikus-tikus yang mengganggu gudang bawah tanahku, Saya kan memberim uhadiah!");
Database.addText("id.mapVillageFifthHouseAgree", "Ayo pergi!");
Database.addText("id.mapVillageFifthHouseCellarDone", "Terimakasih sudah menyingkirkan mereka! Benda yang sangat berharga ini adalah hadiahnya : sebuah peta dunia. Saya rasa kamu akan menggunakannya lebih banyak dari saya.");
Database.addText("id.mapVillageTheShopComment", "Toko");
Database.addText("id.mapBridgeComment", "Jembatan");
Database.addText("id.mapFarmComment", "Ladang lollipop");
Database.addText("id.mapCaveEntranceComment", "Pintu masuk gua");
Database.addText("id.mapLighthouseComment", "Mercusuar");
Database.addText("id.mapPierComment", "Dermaga");
Database.addText("id.mapTheHoleComment", "Lubang");
Database.addText("id.candyBoxRequestStatusBarUnlocked", "Ajukan fitur baru kepada developer (30 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfg", "Ajukan satu lagi (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedSave", "Ajukan satu kali lagi (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedHealthBar", "Ajukan untuk sesuatu yang lebih menyenangkan (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedMap", "Permintaan terakhir! Untuk yang ini permennya harus bermanfaat. (10 candies)");
Database.addText("id.candyBoxRequestStatusBarUnlockedComment", "Kamu mendapatkan status bar! (diatas) #This one is a bit difficult to translate :(");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfgComment1", "Kamu sekarang mempunyai akses ke tab konfigurasi.");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfgComment2", "Kamu dapat mengubah bahasanya, jika kamu mau.");
Database.addText("id.candyBoxRequestStatusBarUnlockedSaveComment", "Tab \"save\" yang liar muncul!");
Database.addText("id.candyBoxRequestStatusBarUnlockedHealthBarComment", "100 poin nyawa ini untukmu. Mereka akan menjadi berguna.");
Database.addText("id.cfgChooseLanguage", "Pilih bahasa :");
Database.addText("id.cfgInvertColors", "Balikkan warna?");
Database.addText("id.gridItemMainMapName", "Peta");
Database.addText("id.gridItemMainMapDescription", "Peta dunia");
Database.addText("id.gridItemPogoStickName", "Tongkat pogo");
Database.addText("id.gridItemPogoStickDescription", "Benda ini membuat kamu dapat melompat didalam pencarian (quest)!");
Database.addText("id.gridItemTimeRingName", "Sebuah cincin waktu");
Database.addText("id.gridItemTimeRingDescription", "Benda ini memberikan kamu kemampuan baru di dalam pencarian (quest) : kamu dapat memperlambat waktu. Jika semuanya terlalu cepat bagi kamu, gunakan cincin waktumu!");
Database.addText("id.gridItemThirdHouseKeyName", "Kunci rumah ketiga");
Database.addText("id.gridItemThirdHouseKeyDescription", "Kunci ini memungkinkan kamu untuk masuk ke rumah ketiga di desa.");
Database.addText("id.gridItemFeatherName", "Bulu burung gurun");
Database.addText("id.gridItemFeatherDescription", "Bulu ajaib ini memungkinkan kamu untuk melompat lebih tinggi ketika kamu menggunakan tongkat pogo!");
Database.addText("id.gridItemFeatherDescriptionNoPogoStick", "Untuk alasan yang tidak diketahui, kamu merasa bulu ini dapat menjadi lebih berguna jika kamu punya tongkat pogo...");
Database.addText("id.gridItemSpongeName", "Spon ajaib");
Database.addText("id.gridItemSpongeDescription", "Spon ajaib ini memungkinkan kamu untuk memeras dirimu seperti spon, oleh karena itu, ukuranmu menjadi lebih kecil.");
Database.addText("id.gridItemFortressKeyName", "Kunci benteng gurun");
Database.addText("id.gridItemFortressKeyDescription", "Kunci ini memungkinkan kamu untuk masuk ke benteng yang sangat kuno yang terletak diatas padang pasir. Siapa tahu apa yang dapat kamu dapatkan disana?");
Database.addText("id.gridItemHeartPendantName", "Sebuah liontin hati");
Database.addText("id.gridItemHeartPendantDescription", "Liontin hati ini akan menambah poin nyawamu selama kamu membiarkannya di dekat lehermu.");
Database.addText("id.gridItemHeartPlugName", "Penyumbat hati");
Database.addText("id.gridItemHeartPlugDescription", "Penyumbat hati ini, dibuat dengan besi, kaki laba-laba, dan sebuah \"cairan hati\" spesial yang tersegel di tengahnya, akan menambah poin nyawamu sebanyak 20 persen!");
Database.addText("id.gridItemBeginnersGrimoireName", "Buku mantera tingkat pemula");
Database.addText("id.gridItemBeginnersGrimoireDescription", "Buku mantera ini memberimu 3 mantera, cukup mudah untuk dilemparkan. Buku ini betul-betul dibuat untuk pemula. Kamu akan bisa menggunakan mantera hujan asam (banyak tetesan cairan asam akan jatuh ke musuhmu), mantera bola api (bola raksasa ajaib yang terbuat dari api yang akan terbang menuju musuhmu), dan mantera 'teleport' (yang akan men-'teleport'mu ke tempat yang tak terduga).");
Database.addText("id.gridItemAdvancedGrimoireName", "Buku mantera tingkat lanjut");
Database.addText("id.gridItemAdvancedGrimoireDescription", "Buku mantera tingkat lanjut ini memberimu dua mantera : mantera penghapus sihir dan mantera perisai duri. Mantera yang pertama akan menghapus semua sihir dari suatu pencarian (quest) pada titik tertentu, termasuk mantera mantera yang kamu keluarkan dan sihir dari musuh. Yang kedua akan membuat perisai dari duri melayang yang akan memberikan serangan (damage) terhadap musuhmu jika disentuh.");
Database.addText("id.gridItemBlackMagicGrimoireName", "Buku mantera ilmu hitam");
Database.addText("id.gridItemBlackMagicGrimoireDescription", "Kamu mendapatkan buku mantera ini di gua, buku mantera ini sangat susah untuk didapatkan, dan itu karena sebuah alasan. Buku mantera ini memberimu dua mantera ilmu hitam yang kuat. Yang pertama akan membuat sebuah tembok raksasa di depanmu yang terbuat dari obsidian, yang sangat berguna untuk memperlambat musuhmu. Yang kedua akan memanggil gerombolan setan menyerang semua dalam pencarian (quest), termasuk kamu. Berhati-hatilah dengan yang satu ini.");
Database.addText("id.gridItemUnicornHornName", "Tanduk unicorn");
Database.addText("id.gridItemUnicornHornDescription", "Tanduk ajaib ini punya sebuah unicorn. Kekuatan menyembuhkan yang kuatnya akan sangat membantumu. Kamu mendengar kalau unicorn ini bernama Charlie.");
Database.addText("id.gridItemXinopherydonClawName", "Cakar xinopherydon");
Database.addText("id.gridItemXinopherydonClawDescription", "Cakar ini milik xinopherydon, binatang kuno berkepala dua yang dipercaya semua orang ada. Cakar ini membuat senjata yang kamu gunakan lebih kuat sebanyak dua kali lipat.");
Database.addText("id.gridItemPitchforkName", "Sebuah garpu rumput");
Database.addText("id.gridItemPitchforkDescription", "Garpu rumput spesial ini memungkinkan kamu untuk melonggarkan tanah without turning it over, therefore preserving below-ground soil ecosystems. Garpu rumput ini akan membuat produksi ladang lollipopmu bertambah sebanyak 3 kali lipat.");
Database.addText("id.gridItemShellPowderName", "Bubuk kerang");
Database.addText("id.gridItemShellPowderDescription", "Bubuk kerang biasa digunakan untuk petani untuk meningkatkan kecepatan pertumbuhan dari lollipop mereka. Bubuk ini akan membuat produksi ladang lollipopmu bertambah sebanyak 3 kali lipat!");
Database.addText("id.gridItemPName", "Batu P");
Database.addText("id.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("id.gridItemLName", "Batu L");
Database.addText("id.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("id.gridItemAName", "Batu A");
Database.addText("id.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("id.gridItemYName", "Batu Y");
Database.addText("id.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("id.gridItemRedSharkFinName", "Sirip ikan hiu merah ajaib");
Database.addText("id.gridItemRedSharkFinDescription", "Sirip ajaib ini akan menambah serangan (damage) dari mantera bola api dengan sangat. Akhirnya bola api ini menjadi berguna.");
Database.addText("id.gridItemGreenSharkFinName", "Sirip ikan hiu hijau ajaib");
Database.addText("id.gridItemGreenSharkFinDescription", "Sirip ajaib ini akan membawa kekuatan alam dari ke ladang lollipopmu! Produksimu akan bertambah 5 kali lipat.");
Database.addText("id.gridItemPurpleSharkFinName", "Sirip ikan hiu ungu ajaib");
Database.addText("id.gridItemPurpleSharkFinDescription", "Sirip ajaib ini akan memberimu sihir ilmu hitam baru. Kamu hanya dapat menggunakannya satu kali dalam setiap pencarian (quest). Sangat berhati-hatilah dengan yang satu ini");
Database.addText("id.gridItemTalkingCandyName", "Permen yang bisa berbicara");
Database.addText("id.gridItemTalkingCandyDescription", "Permen yang bisa berbicara ini muncul setelah kamu meletakkan keempat batu di puncak menara istana. Dia mungkin dapat membantumu untuk membuka candy box...");
Database.addText("id.inventorySpecialNothingEqItem", "Tidak ada");
Database.addText("id.eqItemWeaponWoodenSwordName", "Pedang kayu");
Database.addText("id.eqItemWeaponWoodenSwordDescription", "Sebuah pedang sederhana terbuat dari kayu");
Database.addText("id.eqItemWeaponIronAxeName", "Kapak besi");
Database.addText("id.eqItemWeaponIronAxeDescription", "Sebuah kapak besi sederhana. Diitajamkan dengan baik. Lebih kuat dari pedang kayu.");
Database.addText("id.eqItemWeaponPolishedSilverSwordName", "Pedang perak yang dipoles");
Database.addText("id.eqItemWeaponPolishedSilverSwordDescription", "Sebuah pedang yang kuat, ditutupi oleh duri.");
Database.addText("id.eqItemWeaponTrollBludgeonName", "Gada sang troll");
Database.addText("id.eqItemWeaponTrollBludgeonDescription", "Kamu mengambil gada ini dari sang troll yang menjaga jembatan ini. Gada ini lambat, tapi menghantam musuhmu dengan cukup efektif.");
Database.addText("id.eqItemWeaponTribalSpearName", "Sebuah tombak kesukuan");
Database.addText("id.eqItemWeaponTribalSpearDescription", "Kamu menemukan tombak kesukuan ini di mayat seorang prajurit suku yang tersesat di dalam sebuah lubang besar di tanah. Tombak ini agak susah untuk digunakan pertama kali, tapi sekali kamu sudah terbiasa, ini adalah senjata yang bagus.");
Database.addText("id.eqItemWeaponSummoningTribalSpearName", "Sebuah tombak kesukuan yang memanggil");
Database.addText("id.eqItemWeaponSummoningTribalSpearDescription", "Tombak kesukuan ajaib ini, selain lebih kuat sedikit dari tombak kesukuan yang biasa, akan memanggil prajurit suku dengan sangat sering yang akan membantumu dalam pencarian (quest).");
Database.addText("id.eqItemWeaponMonkeyWizardStaffName", "Tongkat monyet penyihir");
Database.addText("id.eqItemWeaponMonkeyWizardStaffDescription", "Tongkat ini milik monyet penyihir tak berbusana yang kamu temukan di gua. Tongkat ini akan melemparkan mantera dengan sendirinya, dengan musuhmu sebagai targetnya.");
Database.addText("id.eqItemWeaponEnchantedMonkeyWizardStaffName", "Tongkat monyet penyihir (sudah disihir)");
Database.addText("id.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Tongkat ini lebih cepat dari yang belum di berikan sihir, dan juga akan melemparkan lebih banyak mantera.");
Database.addText("id.eqItemWeaponGiantSpoonName", "Sebuah sendok raksasa");
Database.addText("id.eqItemWeaponGiantSpoonDescription", "Sendok raksasa ini ada di dalam teko raksasa di benteng gurun. Kamu tidak tahu jika seseorang pernah menggunakannya sebagai sendok, tapi jika ada, dia pasti seseorang yang sangat besar. Kamu mungkin tidak ingin bertemu dengannya.");
Database.addText("id.eqItemWeaponGiantSpoonOfDoomName", "Sendok raksasa malapetaka");
Database.addText("id.eqItemWeaponGiantSpoonOfDoomDescription", "Sendok raksasa ini lebih kuat dari sendok raksasa biasa yang dapat kamu temukan, misalnya, didalam teko. Namun, sendok ini cukup lama.");
Database.addText("id.eqItemWeaponScytheName", "Sebuah sabit");
Database.addText("id.eqItemWeaponScytheDescription", "Katanya sabit ini dimiliki oleh kematian itu sendiri. Sabit ini sangat cepat");
Database.addText("id.eqItemHatMerchantHatName", "Topi si pedagang");
Database.addText("id.eqItemHatMerchantHatDescription", "Topi ini dijual kepadamu oleh pedagang permen. Si pedagang permen ini menyukai permen. Topi ini akan menambah 7 kali lipat permen yang kamu dapat di dalam pencarian (quest)!");
Database.addText("id.eqItemHatSorceressHatName", "Topi sang penyihir wanita");
Database.addText("id.eqItemHatSorceressHatDescription", "Topi ini dijual kepadamu oleh sang penyihir wanita. Topi ini akan menambah efek dari mantera dan obat (potion) mu.");
Database.addText("id.eqItemHatOctopusKingCrownName", "Mahkota sang raja gurita");
Database.addText("id.eqItemHatOctopusKingCrownDescription", "ketika kamu menggunakan mahkota ini, kamu merasa lebih percaya diri. Mahkota ini tidak memberikan keuntungan apapun dalam pencarian (quest), tapi percaya diri itu penting!");
Database.addText("id.eqItemHatOctopusKingCrownWithJaspersName", "Mahkota sang raja gurita dengan yasper");
Database.addText("id.eqItemHatOctopusKingCrownWithJaspersDescription", "Mahkota yang disihir ini terbuat dari emas dan yasper merah. Dalam pencarian (quest), mahkota ini akan melemparkan bola api ajaib yang kuat disekitarmu dengan sering. Dan juga, mahkota ini berkilau!");
Database.addText("id.eqItemHatOctopusKingCrownWithObsidianName", "Mahkota sang raja gurita dengan obsidian");
Database.addText("id.eqItemHatOctopusKingCrownWithObsidianDescription", "Mahkota yang disihir ini terbuat dari emas dan obsidian. Mahktoa ini indah. Dalam pencarian (quest), mahkota ini akan memanggil sang raja gurita menggantikanmu bertarung selama beberapa saat. Sekutu yang \"tentaculous\"!");
Database.addText("id.eqItemGlovesLeatherGlovesName", "Sarung tangan kulit");
Database.addText("id.eqItemGlovesLeatherGlovesDescription", "Saruang tangan ini pada dasarnya tidak melakukan apapun. Tapi setidaknya mereka halus dan nyaman!");
Database.addText("id.eqItemGlovesRedEnchantedGlovesName", "Sarung tangan yang disihir merah");
Database.addText("id.eqItemGlovesRedEnchantedGlovesDescription", "Sarung tangan yang sudah disihir ini mengeluarkan cahaya merah lembut ketika disekitarmu gelap. Dalam pencarian (quest), mereka akan melemparkan bola api kecil secara acak kepada musuhmu, yang akan menjadi berguna.");
Database.addText("id.eqItemGlovesPinkEnchantedGlovesName", "Sarung tangan yang disihir merah muda");
Database.addText("id.eqItemGlovesPinkEnchantedGlovesDescription", "Sarung tangan yang sudah disihir ini meninggalkan bekas merah muda pada setiap benda yang kamu sentuh. Dalam pencarian (quest), mereka akan menyembuhkan kamu secara terus menerus.");
Database.addText("id.eqItemBootsRocketBootsName", "Sepatu bot roket");
Database.addText("id.eqItemBootsRocketBootsDescription", "Sepatu bot roket yang mengagumkan ini memungkinkan kamu untuk melompat di tengah udara, jadi pada dasarnya kamu melayang!");
Database.addText("id.eqItemBootsLeatherBootsName", "Sepatu bot kulit");
Database.addText("id.eqItemBootsLeatherBootsDescription", "Sepatu bot kulit sederhana. Tidak ada yang spesial dari mereka.");
Database.addText("id.eqItemBootsBootsOfIntrospectionName", "Sepatu bot introspeksi");
Database.addText("id.eqItemBootsBootsOfIntrospectionDescription", "Ambil waktu untuk bernafas dan tenangkan diri. Jika kamu memakai sepatu bot ini, kamu tidak akan pernah bergerak selama kamu menyentuh tanah.");
Database.addText("id.eqItemBodyArmoursLightweightBodyArmourName", "Sebuah baju baja ringan");
Database.addText("id.eqItemBodyArmoursLightweightBodyArmourDescription", "Baju baja ini akan memberikan kamu perlindungan yang lemah. Kamu akan sedikit lebih tahan dari serangan musuhmu.");
Database.addText("id.eqItemBodyArmoursKnightBodyArmourName", "Sebuah baju baja ksatria");
Database.addText("id.eqItemBodyArmoursKnightBodyArmourDescription", "Baju baja yang kuat ini akan melindungimu. Kamu akan lebih tahan terhadap serangan musuhmu.");
Database.addText("id.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Sebuah baju baja ksatria yang sudah disihir");
Database.addText("id.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Baju baja ini sangat spesial. Kamu akan JAUH lebih tahan dari serangan musuhmu, tapi serangan (damage) dari senjata yang kamu gunakan akan dibagi dua.");
Database.addText("id.mapVillageForgeBuyWoodenSwordButton", "Beli sebuah pedang kayu (150 permen)");
Database.addText("id.mapVillageForgeBuyWoodenSwordSpeech", "Terimakasih sudah membeli! Pedang kayu ini cukup lemah, tapi ini adalah awal.");
Database.addText("id.mapVillageForgeBuyIronAxeButton", "Beli sebuah kapak besi (400 permen)");
Database.addText("id.mapVillageForgeBuyIronAxeSpeech", "Saya harap kamu menyukai kapak besi ini. Saya telah menajamkannya untukmu!");
Database.addText("id.mapVillageForgeBuyPolishedSilverSwordButton", "Beli sebuah pedang perak yang dipoles (2 000 permen)");
Database.addText("id.mapVillageForgeBuyPolishedSilverSwordSpeech", "Saya membutuhkan banyak waktu untuk membuat pedang ini. Tapi saya dapat memastikan kalau harganya seimbang.");
Database.addText("id.mapVillageForgeBuyLightweightBodyArmourButton", "Beli sebuah baju baja ringan (15 000 permen)");
Database.addText("id.mapVillageForgeBuyLightweightBodyArmourSpeech", "Baju baja ini akan memberimu pertahanan terhadap musuhmu.");
Database.addText("id.mapVillageForgeBuyScytheButton", "Beli sebuah sabit(5 000 000 candies)");
Database.addText("id.mapVillageForgeBuyScytheSpeech", "Saya membutuhkan beberapa bulan untuk membuat sabit ini. Sabit ini adalah bagian nyata dari seni. Sabit ini mungkin senjata tercepat yang dapat kamu gunakan. Semoga sukses!");
Database.addText("id.wishingWellThrowFirstCandyButton", "Buang sebuah permen kedalam sumur");
Database.addText("id.wishingWellCandyIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melempar permen ke saya, saya akan mengobati lukamu.");
Database.addText("id.wishingWellThrewCandiesSpeech", "Lukamu sudah disembuhkan!");
Database.addText("id.wishingWellNoWoundSpeech", "Kamu tidak punya luka untuk disembuhkan!");
Database.addText("id.wishingWellThrowFirstLollipopButton", "Buang sebuah lollipop ke sumur");
Database.addText("id.wishingWellLollipopIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melempar lollipop kepadaku, Saya akan mengubahnya menjadi permen.");
Database.addText("id.wishingWellThrewLollipopsSpeech", "Lollipopmu sudah dibuah menjadi permen! Dua lollipop untuk satu permen.");
Database.addText("id.wishingWellThrowChocolateBarButton", "Buang sebatang coklat ke sumur permohonan");
Database.addText("id.wishingWellChocolateBarIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Saya suka batang coklat. Saya sangat menyukai mereka. Setiap batang coklat yang kamu lempar kepadaku, termasuk yang ini, kamu akan diberikan satu sihir ajaib.");
Database.addText("id.wishingWellThrewChocolateBarSpeech", "Benda apa yang ingin kamu sihir?");
Database.addText("id.wishingWellThrowPainAuChocolatButton", "Buang sebuah pain au chocolat kedalam sumur");
Database.addText("id.wishingWellPainAuChocolatIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melemparkan pain au chocolat kepadaku, kamu akan diberikan hadiah yang sangat spesial. Pilih dengan bijak.");
Database.addText("id.wishingWellThrewPainAuChocolatSpeech", "Terimakasih atas pain au chocolatnya! Kamu sekarang dapat memilih hadiahmu.");
Database.addText("id.wishingWellChooseGift", "Pilih hadiahmu!");
Database.addText("id.wishingWellChooseGiftButton", "Pilih");
Database.addText("id.wishingWellGiftDoneSpeech", "Selesai! Kamu sekarang mempunyai hadiah baru. Hadiahnya akan muncul di panel stats di inventorymu!.");
Database.addText("id.wishingWellNoPossibleEnchantment", "Tidak ada benda yang bisa disihir");
Database.addText("id.wishingWellChooseEnchantment", "Pilih benda yang akan disihir");
Database.addText("id.wishingWellEnchantButton", "Sihir");
Database.addText("id.wishingWellEnchantmentDoneSpeech", "Ini dia! Bendamu sudah disihir.");
Database.addText("id.pierLighthouseButton", "Pergi ke mercusuar menggunakan perahu");
Database.addText("id.pierTheSeaButton", "Lompat ke laut");
Database.addText("id.lonelyHouseOpenBox", "Buka kotaknya");
Database.addText("id.lonelyHouseShakeBox", "Goncang kotaknya");
Database.addText("id.lonelyHouseBreakLock", "Hancurkan gemboknya");
Database.addText("id.lonelyHouseKickBox", "Tendang kotaknya");
Database.addText("id.lonelyHouseAskTheBoxToOpenItself", "Suruh kotaknya untuk membuka dirinya sendiri");
Database.addText("id.lonelyHouseLureTheBoxWithACandy", "Goda kotaknya dengan sebuah permen");
Database.addText("id.lonelyHouseTakeTheBox", "Ambil kotaknya, bagaimanapun juga kamu mungkin membutuhkan kunci untuk membukanya");
Database.addText("id.lonelyHouseOpenBoxResult", "Kotaknya terkunci");
Database.addText("id.lonelyHouseShakeBoxResult", "Tidak ada yang terjadi");
Database.addText("id.lonelyHouseBreakLockResult", "Gemboknya menolak untuk terbuka");
Database.addText("id.lonelyHouseKickBoxResult", "Kakimu sedikit kesakitan, tapi tidak ada yang terjadi");
Database.addText("id.lonelyHouseAskTheBoxToOpenItselfResult", "...kamu berbicara kepada sebuah kotak, kamu tahu itu?");
Database.addText("id.lonelyHouseLureTheBoxWithACandyResult", "Tampaknya kotaknya tidak peduli");
Database.addText("id.lonelyHouseTakeTheBoxResult", "Mungkin ada sesuatu yang menarik di dalam candy box ini.");
Database.addText("id.lollipopFarmConstructMill", "Banguan sebuah kincir angin (10 000 lollipop)");
Database.addText("id.lollipopFarmFeedMill", "Sediakan makanan untuk kincir angin");
Database.addText("id.lollipopFarmCurrentCandiesProduction", "Produksi permen saat ini");
Database.addText("id.lollipopFarmDigPond", "Gali sebiah kolam (100 000 lollipop)");
Database.addText("id.lollipopFarmBuyLolligator", "Beli sebuah lolligator (1200 permen)");
Database.addText("id.lollipopFarmLolligatorsConversionText", "Pengubahan permen -> lollipop diaktifkan");
Database.addText("id.lighthouseAskButton", "Tanya");
Database.addText("id.lighthouseQuestionWho", "Siapakah kamu?");
Database.addText("id.lighthouseQuestionWhoSpeech", "Saya adalah cyclops yang sangat tua.");
Database.addText("id.lighthouseQuestionWhat", "Apa yang kamu lakukan disini?");
Database.addText("id.lighthouseQuestionWhatSpeech", "Saya tinggal disini sepanjang hari, menunggu sebuah perahu untuk datang. Sudah waktu yang lama sejak saya melihat sebuah perahu, tapi saya harus tinggal disini, melihat ke laut, karena sebuah perahu mungkin datang.");
Database.addText("id.lighthouseQuestionWhyEatCandies", "Mengapa saya makan permen?");
Database.addText("id.lighthouseQuestionWhyEatCandiesSpeech", "Karena mereka bagus untuk kesehatanmu!");
Database.addText("id.lighthouseQuestionCandyBox", "Apa itu candy box?");
Database.addText("id.lighthouseQuestionCandyBoxSpeech", "Itu adalah sebuah kotak yang sangat tua yang katanya mengandung semua permen di dunia. Menurut legenda, siapa yang membuka kotak itu akan mempunyai sangat banyak permen sehingga tidak ada yang tidak mungkin.");
Database.addText("id.lighthouseQuestionDragon", "Sang naga memberitahu aku untuk datang kesini karena saya mau permen.");
Database.addText("id.lighthouseQuestionDragonSpeech", "Oh, begitu.. Baiklah, Saya tidak dapat memberimu permen secara langsung, tapi saya dapat memberimu sesuatu yang penting untukmu untuk akhirnya mendapat BANYAK permen. Saya hanya ingin mengetesmu sebelum itu. Karena apa yang saya punya tidak dapat diberikan kepada semua orang. Selesaikan teka-teki ini dan benda itu akan menjadi milikmu.");
Database.addText("id.lighthouseFoundStone", "Selamat! Kamu lulus tes dan menemukan batu ini. Batu ini sangat berharga, tapi batu ini hanya berguna jika kamu menemukan tiga batu lain yang seperti batu ini. Semoga sukses!");
Database.addText("id.lighthouseFoundStoneAgain", "Pekerjaan yang baik, kamu menyelesaikan teka-tekinya satu kali lagi. Sepertinya kamu menyukainya.");
Database.addText("id.saveLocalSaveTitle", "Penyimpanan Browser");
Database.addText("id.saveLocalSaveWhy", "Pilih penyimapanan lokal jika kamu ingin tetap bermain menggunakan alat (device) dan browser ini.");
Database.addText("id.saveLocalSaveWarning0", "Browsermu tampaknya tidak mendukung HTML5.");
Database.addText("id.saveLocalSaveWarning1", "Kamu harus mengupdate browsermu untuk menggunakan fitur penyimpanan lokal.");
Database.addText("id.saveLocalSaveChooseSlot", "Pilih sebuah slot penyimpanan :");
Database.addText("id.saveLocalSaveAutosaveEnabled", "Penyimpanan otomatis diaktifkan");
Database.addText("id.saveLocalSaveChooseWhatToDo", "Pilih apa yang ingin dilakukan :");
Database.addText("id.saveLocalSaveSaveButton", "Simpan");
Database.addText("id.saveLocalSaveAutosaveButton", "Simpan setiap 10 menit");
Database.addText("id.saveLocalSaveDisableAutosaveButton", "Nonaktifkan penyimpanan otomatis");
Database.addText("id.saveFileSaveTitle", "Penyimpanan teks");
Database.addText("id.saveFileSaveWhy0", "Pilih penyimpanan teks jika :");
Database.addText("id.saveFileSaveWhy1", "Kamu ingin melanjutkan bermain di alat (device) atau browser lain");
Database.addText("id.saveFileSaveWhy2", "Kamu ingin membagikan simpananmu ke seseorang");
Database.addText("id.saveFileSaveWhy3", "Untuk beberapa alasan kamu ingin mengosongkan \"browser cache\"");
Database.addText("id.saveFileSaveWhy4", "(yang akan menghapus penyimpanan lokal)");
Database.addText("id.saveFileSaveButton", "Dapatkan permainan sekarang sebagai teks");
Database.addText("id.saveFileSaveWarning", "Sekarang \"copy\" teks ini di suatu tempat! (di dalam sebuah file, contohnya)");
Database.addText("id.saveLocalLoadTitle", "Memuat menggunakan browser");
Database.addText("id.saveLocalLoadYouCan", "Kamu dapat memuat penyimpanan lokal dengan menggunakan link-link berikut :");
Database.addText("id.saveLocalLoadThanksTo", "Terimakasih kepada keajaiban HTML5, kamu seharusnya dapat membuka link ini bahkan ketika anda tidak terhubung ke internet.");
Database.addText("id.saveFileLoadTitle", "Memuat menggunakan teks");
Database.addText("id.saveFileLoadPaste", "\"Paste\" teks penyimpananmu dibawah, kemudian tekan tombol \"Muat\"");
Database.addText("id.saveFileLoadButton", "Muat");
Database.addText("id.mountainsText0", "Kamu melihat sesuatu di pegunungan!");
Database.addText("id.mountainsText1", "Benda itu tampaknya menarik. Mungkin benda itu berguna.");
Database.addText("id.mountainsTextButton", "Manjat pegunungannya untuk mendapatkan benda itu");
Database.addText("id.mountainsTextAfter", "Kamu menemukan tongkat pogo! Tongkat itu sudah ditambahkan ke inventorymu.");
Database.addText("id.secondHouseIntroSpeech", "Halo, saya adalah si pedagang. Saya akan melakukan semuanya untuk permen. Apa yang kamu butuhkan?");
Database.addText("id.secondHouseLollipop1Speech", "Ini adalah lollipop rasa lemon. Rasa favoritku! Harganya 60 permen, tapi harganya sebanding.");
Database.addText("id.secondHouseLollipop2Speech", "Yang ini adalah lollipop rasa stroberi. Rasanya enak. Saya suka warna merahnya. Hanya 60 permen!");
Database.addText("id.secondHouseLollipop3Speech", "Yang ini adalah lollipop rasa labu. Pasti kamu belum pernah mencoba satu! 60 permen dan lollipop ini milikmu.");
Database.addText("id.secondHouseLollipopButtonText", "Beli lollipop ini (60 permen)");
Database.addText("id.secondHouseMerchantHatSpeech", "Saya dapat menjual topiku kepadamu, tapi topi ini sangat berharga, kamu tahu... Kamu harus memberikan saya banyak permen. Katakan 1 juta permen. Tampaknya adil, kan?");
Database.addText("id.secondHouseMerchantHatButtonText", "Beli topi si pedagang (1 000 000 permen)");
Database.addText("id.secondHouseTimeRingSpeech", "Ini adalah cincin waktu. Cincinnya ajaib. Cincin ini memungkinkan kamu untuk memperlambat waktu ketika kamu berada dalam masalah.");
Database.addText("id.secondHouseTimeRingButtonText", "Beli cincin waktu (500 permen)");
Database.addText("id.secondHouseLeatherGlovesSpeech", "Sarung tangan kulit ini terbuat dari kulit unta, sarung tangan ini tinggi kualitasnya. Saya mempunyai banyak sarung tangan ini, itulah kenapa harganya sangat murah : hanya 300 permen!");
Database.addText("id.secondHouseLeatherBootsButtonText", "Beli sepasang sepatu bot kulit (300 permen)");
Database.addText("id.secondHouseLeatherBootsSpeech", "Sepatu bot kulit berkualitas tinggi ini, dibuat dengan kulit unta, akan membuat kakimu tetap hangat.");
Database.addText("id.secondHouseLeatherGlovesButtonText", "Beli sepasang sarung tangan kulit (300 permen)");
Database.addText("id.secondHouseChocolateBarSpeech", "Ini adalah sebuah batang coklat. Saya tidak tahu apa gunanya, tapi tampaknya benda ini cukup langka, yang menjelaskan harganya. 800 permen dan batang coklat ini menjadi milikmu!");
Database.addText("id.secondHouseChocolateBarButtonText", "Beli sebuah batang coklat (800 permen)");
Database.addText("id.outsideTheHoleButton", "Lompat kedalam lubang besar yang ada di tanah");
Database.addText("id.theCaveExitText0", "Akhirnya kamu mencapai pintu keluar gua.");
Database.addText("id.theCaveExitText1", "Kamu melihat hutan besar diluar sini.");
Database.addText("id.theCaveExitButtonText", "Keluar dari gua");
Database.addText("id.theCaveFirstSentenceWentStraight", "Kamu maju dengan lurus.");
Database.addText("id.theCaveFirstSentenceWentLeft", "Kamu mengambil jalur kiri.");
Database.addText("id.theCaveFirstSentenceWentRight", "Kamu mengambil jalur kanan.");
Database.addText("id.theCaveFirstSentenceYouAre", "Kamu berada di dalam gua. Ada 3 jalur dihadapanmu.");
Database.addText("id.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Kamu melihat sesuatu yang aneh di tanah di depanmu.");
Database.addText("id.theCavePattern_ChocolateBarNowSeeChocolateBar", "Kamu melihat sebuah batang coklat di depanmu.");
Database.addText("id.theCavePattern_TreasureMapSentence", "Kamu melihat batu-batu kecil yang tersusun dengan aneh di lantai.");
Database.addText("id.theCavePattern_MonkeyWizardSentence", "Kamu bertemu seekor monyet penyihir tak berbusana.");
Database.addText("id.theCavePattern_MonkeyWizardButton", "Tantangi dia");
Database.addText("id.theCavePattern_OctopusKingSentence", "Kamu bertemu sang raja gurita. Tampaknya dia menjijikkan.");
Database.addText("id.theCavePattern_OctopusKingButton", "Tantangi dia");
Database.addText("id.fortressInsideText0", "Kamu berada di dalam benteng gurun.");
Database.addText("id.fortressInsideText1", "Kamu dapat memilih diantara tiga pintu.");
Database.addText("id.fortressInsideText2", "Masing-masing dari mereka menuju sebuah ruangan besar dengan sebuah harta di akhirnya.");
Database.addText("id.fortressInsideEnterRoom1", "Masuk ke ruangan pertama");
Database.addText("id.fortressInsideEnterRoom2", "Masuk ke ruangan kedua");
Database.addText("id.fortressInsideEnterRoom3", "Masuk ke ruangan ketiga");
Database.addText("id.treasureButtonDig", "Gali");
Database.addText("id.treasureButtonYouFound", "Kamu menemukan tiga batang coklat!");
Database.addText("id.sorceressHutHello", "Halo, saya adalah sang penyihir wanita. Saya dapat mengajarimu satu atau dua hal tentang sulap. Saya juga dapat memberimu beberapa benda yang menarik, atau melempar mantera untukmu. Tapi semuanya mempunyai harga! Dan harganya akan berupa lollipop. Banyak lollipop.");
Database.addText("id.sorceressHutClickedGrimoire", "Ini adalah buku mantera yang dibuat untuk pemula. Dengan membawanya denganmu di pencarian (quest), kamu dapat melemparkan mantera yang sederhana tapi berguna. Kamu membutuhkan ini! Hanya 5 000 lollipop.");
Database.addText("id.sorceressHutBuyGrimoireButton", "Beli grimore ini (5 000 lollipop)");
Database.addText("id.sorceressHutBuyGrimoireSpeech", "Terimakasih sudah membeli! Kamu dapat melemparkan tiga mantera dengan grimore ini. Semoga sukses!");
Database.addText("id.sorceressHutClickedGrimoire2", "Ini adalah buku mantera tingkat lanjut. Dengan membawanya denganmu dalam pencarian (quest), kamu akan dapat melemparkan dua mantera tingkat lanjut. Saya menulisnya sendiri, yang pastinya tidak mudah. 20 000 lollipop adalah harga yang adil.");
Database.addText("id.sorceressHutBuyGrimoire2Button", "Beli buku mantera ini (20 000 lollipop)");
Database.addText("id.sorceressHutBuyGrimoire2Speech", "Terimakasih sudah membeli! Kamu dapat melemparkan dua mantera dengan grimore ini. Gunakan mereka dengan bijak!");
Database.addText("id.sorceressHutClickedCauldron", "Ini adalha kualiku. Kuali ini memungkinkan saya untuk membuat obat (potion) ajaib. Saya dapat menjualnya kepadamu, tapi kuali ini sangat berharga... harganya 100 000 lollipop.");
Database.addText("id.sorceressHutBuyCauldronButton", "Beli kualinya (100 000 lollipop)");
Database.addText("id.sorceressHutBuyCauldronSpeech", "Terimakasih banyak! 100 000 lollipop untuk saya! Saya juga memberimu buku petunjuknya. Buku petunjuknya akan berguna.");
Database.addText("id.sorceressHutClickedHat", "Memang, saya mempunyai topi yang bagus. Tapi saya benar-benar tidak bisa menjualnya kepadamu. Topinya sangaaaaat berharga. Sungguh, Saya tidak bisa. Jangan memaksa. Tidak. Tidak tidak tidak saya seharusnya tidak melakukannya. Baiklah, Saya akan menukarnya, tapi dengan 1 000 000 000 lollipop. Toh kamu mungkin tidak dapat membayarnya.");
Database.addText("id.sorceressHutBuyHatButton", "Beli topinya (1 000 000 000 lollipop)");
Database.addText("id.sorceressHutBuyHatSpeech", "Satu milyar lollipop untuk kuuuuuuu! Tapi saya sudah tidak mempunyai topi lagi.. tapi satu milyar lollipop, wow! .. Sangat sebanding.");
Database.addText("id.cauldronPreviousPageButton", "Halaman sebelumnya");
Database.addText("id.cauldronNextPageButton", "Halaman selanjutnya");
Database.addText("id.cauldronWhatYouWantToPut", "Apa yang ingin kamu masukkan ke dalam kuali");
Database.addText("id.cauldronWhatIsIn", "Apa yang ada di dalam kuali");
Database.addText("id.cauldronWhatYouCanDo", "Apa yang kamu dapat lakukan dengannya");
Database.addText("id.castleBigRoomComment", "Sebuah ruangan besar");
Database.addText("id.castleARoomComment", "Sebuah ruangan");
Database.addText("id.castleADarkRoomComment", "Sebuah ruangan yang gelap");
Database.addText("id.castleCastleEntranceComment", "Pintu masuk istana");
Database.addText("id.castleTowerEntranceComment", "Pintu masuk menara");
Database.addText("id.castleNougatMonsterComment", "Serang sang monster nougat raksasa");
Database.addText("id.castleGuardsComment", "Serang penjaga-penjaganya");
Database.addText("id.castleStairsComment", "Tangga");
Database.addText("id.buttonBackToTheCastle", "Kembali ke istana");
Database.addText("id.castleBigRoomHovenSpeechSad", "Halo! Saya adalah oven roti yang sangat tua. Dulu saya selalu memasak banyak kue-kue (pastry) yang bagus, tapi sekarang tidak ada yang menggunakan saya. Mungkin... mungkin kamu dapat membantu saya? Biarkan saya mengambil beberapa penganan darimu! Jangan khawatir, kamu tidak akan menyesal! Kamu dapat mempercayaiku.");
Database.addText("id.castleBigRoomHovenNotEnough", "Oh... kamu tidak memiliki penganan yang cukup, Saya tidak dapat melakukan apapun. Saya tidak berguna. Saya oven roti yang tidak berguna, begitu seharusnya kamu memanggilku.");
Database.addText("id.castleBigRoomHovenSpeechMadePainAuChocolat", "Yey! Terimakasih banyak! Saya menggunakan 100 permen dan sebatang coklat, dan saya membuat... sebuah pain au chocolat untukmu! Itu adalah kue (pastry) favoritku, Saya harap kamu menyukainya juga!");
Database.addText("id.castleBigRoomHovenSpeechHappy", "Hei! Jika kamu ingin aku memasak lebih banyak kue-kue (pastry), silahkan beritahu aku! Saya akan senang untuk membantumu.");
Database.addText("id.castleBigRoomHovenSpeechHappyNotEnough", "Oh, kamu tidak mempunyai penganan yang cukup, sayangnya. Saya membutuhan 100 permen dan sebatang coklat. Datang kembali jika kamu mempunyainya!");
Database.addText("id.castleBigRoomHovenLetHovenTakeButton", "Biarkan sang oven mengambil semua penganan yang ingin dia ambil");
Database.addText("id.castleBigRoomHovenThanks", "Terimakasih, oven!");
Database.addText("id.dragonStopTickling", "Hei, kau! Tolong berhenti menggelitik aku.");
Database.addText("id.dragonStopTicklingButton", "Uh, oh, maaf, Saya kira saya seharusnya menyerangmu");
Database.addText("id.dragonTalking", "Saya adalah sang naga dan ini adalah istanaku. Saya melihat kamu bisa masuk, kamu pasti sangat berani... Saya suka membantu seseorang sepertimu. Apa yang kamu cari?");
Database.addText("id.dragonTalkingChallengeButton", "Tantangan");
Database.addText("id.dragonTalkingFameButton", "Terkenal");
Database.addText("id.dragonTalkingCandiesButton", "Permen");
Database.addText("id.dragonTalkingChallengeSpeech", "Oh, jadi kamu ingin tantangan? Saya rasa kamu harus pergi ke neraka, Sudah diketahui kalau sang setan adalah penantang yang kuat. Lompat di punggungku dan saya akan membawamu ke sana!");
Database.addText("id.dragonTalkingFameSpeech", "Cara terbaik untuk menjadi terkenal adalah dengan menghadapi sang developer. Saya tahu dimana dia tinggal dan saya dapat membawamu ke sana. Tapi bersiap-siaplah, ini tidak akan mudah.");
Database.addText("id.dragonTalkingCandiesSpeech", "Benda yang kita semua ingin pasti permen, betul kan? Saya rasa temanku dapat membantumu dengan itu. Kamu akan mengenali dia dengan mudah, dia hanya mempunyai satu mata. Beritahu saja dia kalau kamu mengenalku.");
Database.addText("id.dragonTalkingChallengeAnswer", "Ayo pergi!");
Database.addText("id.dragonTalkingFameAnswer", "Aku siap.");
Database.addText("id.dragonTalkingCandiesAnswer", "Oke, terimakasih!");
Database.addText("id.buttonBackToCastle", "Kembali ke istana");
Database.addText("id.talkingCandySpeechNoBox", "Hei! Saya adalah permen yang bisa bicara. Kamu hampir memenangkan permainan ini. Kamu hanya perlu mencari \"candy box\". Candy boxnya adalah di dalam rumah yang ada diluar desa. Ini adalah langkah terakhir!");
Database.addText("id.talkingCandySpeech1", "Hei! Saya adalah permen yang bisa bicara. Selamat, kamu memenagnkan permainannya! Saya akan membukan candy boxmu untukmu, ini adalah hadiah mu. Haruskah saya meneruskan?");
Database.addText("id.talkingCandySpeech2", "Sudah! Sekarang kamu dapat memasukinya. Saya harap kamu menyukai permainannya :)");
Database.addText("id.talkingCandyButton", "Iya!!");
Database.addText("id.lighthousePuzzleResetButton", "Atur ulang");
Database.addText("﻿nl.mapVillageComment", "Het Dorp");
Database.addText("nl.mapFortressComment", "De woestijnvesting");
Database.addText("nl.mapATreeComment", "Een boom");
Database.addText("nl.mapTheDesertComment", "De woestijn");
Database.addText("nl.mapWishingWellComment", "De wensput");
Database.addText("nl.mapLonelyHouseComment", "Een afgelegen huis");
Database.addText("nl.mapForestComment", "Het bos");
Database.addText("nl.mapCastleEntranceComment", "Kasteelingang");
Database.addText("nl.mapCastleComment", "Het kasteel");
Database.addText("nl.mapDragonComment", "De draak");
Database.addText("nl.candyBoxEatCandiesButton", "Eet alle snoepjes");
Database.addText("nl.candyBoxThrowCandiesButton", "Gooi 10 snoepjes op de grond");
Database.addText("nl.mapVillageAHouseComment", "Een huis");
Database.addText("nl.mapVillageForgeComment", "De smederij");
Database.addText("nl.buttonBackToTheMap", "Terug naar de kaart");
Database.addText("nl.mapSorceressHutComment", "Hut van de tovenaar");
Database.addText("nl.buttonBackToTheVillage", "Terug naar het dorp");
Database.addText("nl.mapATreeIntroductionSpeech", "Hallo, ik ben de eekhoorn. Ik kan je snoepjes en veel meer dingen geven. Ik weet hoeveel jij van snoepjes houdt. Maar ik voel me alleen in dit woud.");
Database.addText("nl.mapATreeIntroductionButton", "Hoe kan ik je helpen ?");
Database.addText("nl.mapATreeFirstQuestion", "Ik ga je een paar vragen stellen. Als je ze goed beantwoord, zijn de zoetste zoetjes van jou! Eerste vraag: Hou je echt van snoepjes? (Beantwoord in Engels)");
Database.addText("nl.mapATreeSecondQuestion", "Dat klopt! Hier zijn 20 snoepjes voor jou. Maak nu deze reeks van letters af en je krijgt een nieuwe prijs: S, E, I, D, N, A, ?");
Database.addText("nl.mapATreeThirdQuestion", "Snoepjes! Hier zijn 100 snoepjes voor jou. Volgende vraag : Hoeveel snoepjes heeft de snoepigste persoon in zijn bezit?");
Database.addText("nl.mapATreeFourthQuestion", "Hier zijn 500 snoepjes voor jou! De volgende prijs zal nog interessanter zijn...  Hier is het raadsel: In een oeroud woud groeit een hele oude boom, Waar de meest intelligente dieren wonen. Er wordt verteld dat hij 60 wortels heeft, 360 takken en 2160 bladeren. Hoeveel markeringen kun je vinden op zijn stam?");
Database.addText("nl.mapATreeFifthQuestion", "Gefeliciteerd! Ik had het over mijn boom, inderdaad. Hier zijn 3 lollies voor jou. Gebruik ze goed! Volgende raadsel, Luister goed : Onder een volle maan gooi ik een gele hoed in de rode zee. Wat gebeurd er met de gele hoed?");
Database.addText("nl.mapATreeTicTacToeIntro", "Goed geantwoord! Dat was niet zo moeilijk. Hier zijn 3 chocoladerepen voor jou! Voor de volgende prijs zullen we de regels een beetje veranderen. Je moet een spel met mij spelen! Ben je er klaar voor?");
Database.addText("nl.mapATreeTicTacToeIntroButton", "Natuurlijk ben ik dat!");
Database.addText("nl.mapATreeTicTacToeLetsPlay", "Het spel is boter kaas en eieren. We spelen het op een 3 bij 3 bord. Jij zult het X teken gebruiken terwijl ik de O gebruik. We plaatsen onze teken(s) omstebeurt en het doel is om 3 tekens op een rij te krijgen. Ik laat jou eerst gaan!");
Database.addText("nl.mapATreeTicTacToeNobodyWins", "Het bord is helemaal opgevuld en we hebben beiden geen 3 op een rij: Niemand wint! Wil je het weer proberen?");
Database.addText("nl.mapATreeTicTacToeYouLose", "Ik heb drie op een rij! Ik win. Wil je het weer proberen?");
Database.addText("nl.mapATreeTicTacToeTryAgainButton", "Ja dat wil ik!");
Database.addText("nl.mapATreeTicTacToeYouWin", "Wow, dat was een onverwachte zet. Maar je hebt drie op een rij, daar kan ik niks over zeggen. Jij wint! Neem deze sleutel! Het opent een van de huizen in het dorp.");
Database.addText("nl.mapATreeTicTacToeAnymoreSweet", "Dankjewel eekhoorn! Zijn er nog meer uitdagingen?");
Database.addText("nl.mapATreeNoMoreChallenge", "Helaas niet, ik heb geen uitdagingen meer voor je... Met jou spelen was heel erg leuk, bedankt daarvoor!");
Database.addText("nl.buttonExitQuestKeeping", "Eindig de zoektocht (En houd wat je gevonden hebt)");
Database.addText("nl.buttonExitQuestNoKeeping", "Eindig de zoektocht (Je houdt niet wat je gevonden hebt)");
Database.addText("nl.buttonExitQuestNoKeepingBecauseLose", "Eindig de zoektocht (Je houdt niet wat je hebt gevonden want je faalde)");
Database.addText("nl.mapVillageLockedHouseComment", "Een gesloten huis");
Database.addText("nl.mapVillageForgeIntroductionSpeech", "Hoi! Ik ben een wapensmid. Ik kan je verschillende wapens en uitrustingen verkopen.");
Database.addText("nl.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hoi! Ik ben een wapensmid. Helaas, Ik heb niks meer om te verkopen. Kom later terug misschien?");
Database.addText("nl.mapVillageFifthHouseNoWeaponSpeech", "Hallo. Mijn kelder zit vol met ratten. Ik moet van ze af zien te komen... Was er maar iemand met een wapen die mij kon helpen...");
Database.addText("nl.mapVillageFifthHouseWeaponSpeech", "He, Jij! Ik zie dat je een wapen draagt! Als jij de ratten in mijn kelder doodt, zal ik je een geschenk geven!");
Database.addText("nl.mapVillageFifthHouseAgree", "We gaan er voor!");
Database.addText("nl.mapVillageFifthHouseCellarDone", "Bedankt voor het opruimen van de ratten! Hier is iets heel kostbaars als geschenk : een kaart van de wereld. Ik denk dat jij het meer zult gebruiken dan ik.");
Database.addText("nl.mapVillageTheShopComment", "De winkel");
Database.addText("nl.mapBridgeComment", "De brug");
Database.addText("nl.mapFarmComment", "De lollieboerderij");
Database.addText("nl.mapCaveEntranceComment", "De ingang van de grot");
Database.addText("nl.mapLighthouseComment", "De vuurtoren");
Database.addText("nl.mapPierComment", "De pier");
Database.addText("nl.mapTheHoleComment", "Het gat");
Database.addText("nl.candyBoxRequestStatusBarUnlocked", "Vraag een nieuwe functie aan bij de ontwikkelaar (30 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfg", "Vraag nog eens (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedSave", "Vraag nog een keer aan (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedHealthBar", "Vraag iets spannends aan (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedMap", "Laatste aanvraag! Deze zal de snoepjes wel waard zijn. (10 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedComment", "Je hebt een statusbalk ontgrendeld! (boven)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfgComment1", "Je hebt nu toegang tot een configuratietabblad.");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfgComment2", "Je kan de taal veranderen als je wilt.");
Database.addText("nl.candyBoxRequestStatusBarUnlockedSaveComment", "Een wilde opslaan-tab verschijnt!");
Database.addText("nl.candyBoxRequestStatusBarUnlockedHealthBarComment", "Hier zijn 100 levenspunten voor je. Ze zullen goed van pas komen.");
Database.addText("nl.cfgChooseLanguage", "Kies je taal:");
Database.addText("nl.cfgInvertColors", "Kleuren omkeren?");
Database.addText("nl.gridItemMainMapName", "De kaart");
Database.addText("nl.gridItemMainMapDescription", "Kaart van de wereld");
Database.addText("nl.gridItemPogoStickName", "Pogostick");
Database.addText("nl.gridItemPogoStickDescription", "Hiermee kun je springen in zoektochten!");
Database.addText("nl.gridItemTimeRingName", "Een tijdring");
Database.addText("nl.gridItemTimeRingDescription", "Dit zal je een nieuwe vaardigheid geven in zoektochten: Je kunt de tijd vertragen. Als iets te snel voor je gaat, gebruik je de tijdring!");
Database.addText("nl.gridItemThirdHouseKeyName", "De derde huissleutel");
Database.addText("nl.gridItemThirdHouseKeyDescription", "Met deze sleutel kun je naar het derde huis van het dorp.");
Database.addText("nl.gridItemFeatherName", "Een veer van een woestijnvogel");
Database.addText("nl.gridItemFeatherDescription", "Door deze magische veer kun je hoger springen met je pogostick!");
Database.addText("nl.gridItemFeatherDescriptionNoPogoStick", "Om een of andere reden heb je het gevoel dat deze veer nuttig zou zijn als je een pogostick had...");
Database.addText("nl.gridItemSpongeName", "Een magische spons");
Database.addText("nl.gridItemSpongeDescription", "Door deze magische spons kun je jezelf fijnknijpen als een spons en daardoor dus kleiner worden.");
Database.addText("nl.gridItemFortressKeyName", "De sleutel van de woestijnvesting");
Database.addText("nl.gridItemFortressKeyDescription", "Door deze sleutel kun je naar het eeuwenoude kasteel boven de woestijn. Wie weet wat je daar kunt vinden?");
Database.addText("nl.gridItemHeartPendantName", "Een harten hangertje");
Database.addText("nl.gridItemHeartPendantDescription", "Dit hangertje zal je levenspunten verhogen zolang je het om je nek draagt.");
Database.addText("nl.gridItemHeartPlugName", "Een hartplug");
Database.addText("nl.gridItemHeartPlugDescription", "Deze hartplug, gemaakt met staal, spinnenpoten en een speciaal \"hartdrankje\" opgesloten in het midden, zal je levenspunten verhogen met 20 procent!");
Database.addText("nl.gridItemBeginnersGrimoireName", "De beginnersgrimoire");
Database.addText("nl.gridItemBeginnersGrimoireDescription", "Deze grimoire geeft je drie gemakkelijke spreuken. Het is echt gemaakt voor beginners. Je zult in staat zijn een zure regen-spreuk te gebruiken (Een groote hoeveelheid zuur zal op je vijanden vallen), een vuurbalspreuk (een gigantische bal van vuur zal naar je vijanden vliegen) en een teleporteerspreuk (Die zal je teleporterenn naar een onvoorspelbare locatie).");
Database.addText("nl.gridItemAdvancedGrimoireName", "De geavanceerde grimoire");
Database.addText("nl.gridItemAdvancedGrimoireDescription", "Deze geavanceerde grimoire geeft je twee spreuken: de magie verwijder-spreuk en een stekelschildspreuk. De eerste zal alle eerder uitgevoerde magie van een zoektocht verwijderen, inclusief de magie van jezelf en van je vijanden. De tweede roept een zwevend schild van stekels op rondom je, dat schade zal aanrichten wanneer het in contact met vijanden.");
Database.addText("nl.gridItemBlackMagicGrimoireName", "De zwarte magie grimoire");
Database.addText("nl.gridItemBlackMagicGrimoireDescription", "Je vond deze grimoire in een grot. Het was heel moeilijk te bereiken, en dat was met een reden. Het geeft je twee gevaarlijke zwarte magie spreuken. De eerste zal een gigantische muur van obsidiaan creëren, dat handig kan zijn om je vijanden tegen te houden. De tweede zal een zwerm van demonen oproepen die alles aanvallen in de zoektocht, inclusief jou. Wees voorzichtig met deze spreuk.");
Database.addText("nl.gridItemUnicornHornName", "Een eenhoornhoorn");
Database.addText("nl.gridItemUnicornHornDescription", "Deze magische hoorn behoorde eerst tot een eenhoorn. Zijn sterke helende krachten kunnen je goed helpen. Je hoorde dat deze eenhoorn Charlie heette.");
Database.addText("nl.gridItemXinopherydonClawName", "Een xinopherydonklauw.");
Database.addText("nl.gridItemXinopherydonClawDescription", "Deze klauw behoorde eerst tot een xinopherydon, een tweehoofdig eeuwenoud beest waarvan men dacht dat zij uitgestorven waren. Het zal de kracht van het wapen dat je gebruikt verdubbelen.");
Database.addText("nl.gridItemPitchforkName", "Een hooivork");
Database.addText("nl.gridItemPitchforkDescription", "Met deze speciale hooivork kun je de grond losser maken zonder het om te keren, waardoor je het ondergrondse eco-systeem niet stoort. Het zal de productie van je lollieboerderij verdriedubbelen.");
Database.addText("nl.gridItemShellPowderName", "Schelppoeder");
Database.addText("nl.gridItemShellPowderDescription", "Schelppoeder wordt vaak gebruikt door boeren om de groei van hun lollies te versnellen. Dit poeder zal je productie verdriedubbelen!");
Database.addText("nl.gridItemPName", "De P steen");
Database.addText("nl.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("nl.gridItemLName", "De L steen");
Database.addText("nl.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("nl.gridItemAName", "De A steen");
Database.addText("nl.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("nl.gridItemYName", "De Y steen");
Database.addText("nl.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("nl.gridItemRedSharkFinName", "Een magische rode haaienvin");
Database.addText("nl.gridItemRedSharkFinDescription", "Deze magische vin zal de schade van de vuurbalspreuk versterken. Eindelijk wordt deze vuurbal nuttig.");
Database.addText("nl.gridItemGreenSharkFinName", "Een magische groene haaienvin");
Database.addText("nl.gridItemGreenSharkFinDescription", "Deze magische vin zal de kracht van de natuur aan je lollieboerderij geven! Je productie zal zich vervijfvoudigen.");
Database.addText("nl.gridItemPurpleSharkFinName", "Een magische paarse haaienvin");
Database.addText("nl.gridItemPurpleSharkFinDescription", "Deze magische vin zal je een nieuwe zwarte magie spreuk geven. Je kunt het maar een keer per zoektocht gebruiken. Wees erg voorzichtig met deze!");
Database.addText("nl.gridItemTalkingCandyName", "Een pratend snoepje");
Database.addText("nl.gridItemTalkingCandyDescription", "Dit pratende snoepje verscheen nadat je de vier stenen in de top van de kasteeltoren had gezet. Hij kan je misschien helpen met het openen van de candy box...");
Database.addText("nl.inventorySpecialNothingEqItem", "Niks");
Database.addText("nl.eqItemWeaponWoodenSwordName", "Houten Zwaard");
Database.addText("nl.eqItemWeaponWoodenSwordDescription", "Een simpel zwaard, gemaakt van hout");
Database.addText("nl.eqItemWeaponIronAxeName", "Ijzeren bijl");
Database.addText("nl.eqItemWeaponIronAxeDescription", "Een simpele ijzeren bijl. Goed geslepen. Sterker dan het houten zwaard.");
Database.addText("nl.eqItemWeaponPolishedSilverSwordName", "Gepolijst zilveren zwaard");
Database.addText("nl.eqItemWeaponPolishedSilverSwordDescription", "Een sterk zwaard bedekt met stekels.");
Database.addText("nl.eqItemWeaponTrollBludgeonName", "De trollenknuppel.");
Database.addText("nl.eqItemWeaponTrollBludgeonDescription", "Je nam deze knuppel van de trol die de brug verdedigde. Het is sloom, maar slaat je vijanden behoorlijk efficient.");
Database.addText("nl.eqItemWeaponTribalSpearName", "Een stamspeer");
Database.addText("nl.eqItemWeaponTribalSpearDescription", "Je vond deze stamspeer op het karkas van een stamkrijger, verdwaald in een groot gat in de grond. Het is best lastig om te gebruiken in het begin, maar als je er aan gewend bent is het een goed wapen.");
Database.addText("nl.eqItemWeaponSummoningTribalSpearName", "Een oproepende stamspeer");
Database.addText("nl.eqItemWeaponSummoningTribalSpearDescription", "Deze magische stamspeer, naast het feit dat het sterker is dan de normale stamspeer, zal vaak stamkrijgers oproepen tijdens je zoektochten.");
Database.addText("nl.eqItemWeaponMonkeyWizardStaffName", "De apentovenaar zijn staf");
Database.addText("nl.eqItemWeaponMonkeyWizardStaffDescription", "Deze staf behoorde toe aan de naakte apentovenaar die je vond in de grot. Het zal vaak spreuken vanzelf gebruiken, gericht op je vijand.");
Database.addText("nl.eqItemWeaponEnchantedMonkeyWizardStaffName", "De apentovenaar zijn staf (betoverd)");
Database.addText("nl.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Deze staf is sneller dan de niet-betoverde versie en zal ook veel meer spreuken gebruiken.");
Database.addText("nl.eqItemWeaponGiantSpoonName", "Een gigantische lepel");
Database.addText("nl.eqItemWeaponGiantSpoonDescription", "Deze gigantische lepel vond je in een gigantische theepot in de woestijnvesting. Je weet niet of iemand het ooit heeft gebruikt als een lepel, maar als dat wel zo is dan moet het iemand zijn geweest die heel erg groot was.");
Database.addText("nl.eqItemWeaponGiantSpoonOfDoomName", "De gigantische lepel der verdoeming");
Database.addText("nl.eqItemWeaponGiantSpoonOfDoomDescription", "Deze gigantische lepel is nog sterker dan de normale gigantische lepel die je bijvoorbeeld kon vinden in een theepot, maar hij is best sloom.");
Database.addText("nl.eqItemWeaponScytheName", "Een zeis");
Database.addText("nl.eqItemWeaponScytheDescription", "Er word gezegd dat deze zeis toebehoorde aan de dood zelf. Het is extreem snel.");
Database.addText("nl.eqItemHatMerchantHatName", "De handelaarshoed");
Database.addText("nl.eqItemHatMerchantHatDescription", "Deze hoed was verkocht door de snoepjeshandelaar. De snoepjeshandelaar houdt van snoepjes. Deze hoed zal de snoepjes die je vindt in zoektochten vermenigvuldigen met 7.");
Database.addText("nl.eqItemHatSorceressHatName", "De tovenaarshoed");
Database.addText("nl.eqItemHatSorceressHatDescription", "Deze hoed was verkocht door de tovenaar. Het zal het effect van je spreuken en drankjes versterken.");
Database.addText("nl.eqItemHatOctopusKingCrownName", "De kroon van de octopuskoning");
Database.addText("nl.eqItemHatOctopusKingCrownDescription", "Wanneer je deze kroon draagt, voel je veel zelfverzekerder. Het geeft geen voordelen in zoektochten, maar zelfverzekerheid is belangrijk.");
Database.addText("nl.eqItemHatOctopusKingCrownWithJaspersName", "De kroon van de octopuskoning met jaspis");
Database.addText("nl.eqItemHatOctopusKingCrownWithJaspersDescription", "Deze betoverde kroon is belegd met goud en rode jaspis. In zoektochten schiet het vaak machtige vuurballen om je heen. En het schijnt ook!");
Database.addText("nl.eqItemHatOctopusKingCrownWithObsidianName", "De octopus koning kroon met obsidiaan.");
Database.addText("nl.eqItemHatOctopusKingCrownWithObsidianDescription", "Deze betoverde kroon is gemaakt met goud en obsidiaan. Het is schitterend. In zoektochten zal het af en toe een Octopus Koning oproepen die vecht aan jouw zijde. Wat een vasthoudend hulpje!");
Database.addText("nl.eqItemGlovesLeatherGlovesName", "Leren handschoenen");
Database.addText("nl.eqItemGlovesLeatherGlovesDescription", "Deze handschoenen doen in principe niks. Maar ze zijn tenminste zacht en comfortabel!");
Database.addText("nl.eqItemGlovesRedEnchantedGlovesName", "Rode betoverde handschoenen");
Database.addText("nl.eqItemGlovesRedEnchantedGlovesDescription", "Deze betoverde handschoenen schijnen een zacht rood licht als het donker is. In zoektochten zullen ze willekeurig een kleine vuurbal naar je vijanden schieten, wat behoorlijk nuttig kan zijn.");
Database.addText("nl.eqItemGlovesPinkEnchantedGlovesName", "Roze betoverde handschoenen");
Database.addText("nl.eqItemGlovesPinkEnchantedGlovesDescription", "Deze betoverde handschoenen laten een roze vlek achter op alles wat het aanraakt. In zoektochten zullen ze je de hele tijd genezen.");
Database.addText("nl.eqItemBootsRocketBootsName", "Raketschoenen");
Database.addText("nl.eqItemBootsRocketBootsDescription", "Door deze geweldige raketschoenen kun je springen in het midden van de lucht en dus in principe vliegen!");
Database.addText("nl.eqItemBootsLeatherBootsName", "Leren schoenen");
Database.addText("nl.eqItemBootsLeatherBootsDescription", "Simpele leren schoenen. Er is niets bijzonders aan.");
Database.addText("nl.eqItemBootsBootsOfIntrospectionName", "Schoenen der introspectie");
Database.addText("nl.eqItemBootsBootsOfIntrospectionDescription", "Neem de tijd om te ademen en rustig te worden. Als je deze schoenen draagt, zul je niet bewegen zolang je op de grond staat.");
Database.addText("nl.eqItemBodyArmoursLightweightBodyArmourName", "Een lichtgewicht torsopantser");
Database.addText("nl.eqItemBodyArmoursLightweightBodyArmourDescription", "Dit pantser zal je zwakke beveiliging geven. Je zult iets meer bestand zijn tegen de aanvallen van je vijand.");
Database.addText("nl.eqItemBodyArmoursKnightBodyArmourName", "Het pantser van een krijger.");
Database.addText("nl.eqItemBodyArmoursKnightBodyArmourDescription", "Dit sterke pantser zal je beschermen. Je zult meer bestand zijn tegen de aanvallen van je vijand.");
Database.addText("nl.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Het betoverde pantser van een krijger");
Database.addText("nl.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Dit pantser is erg speciaal. Je zult VEEL meer bestand zijn tegen de aanvallen van je vijand, maar de kracht van het wapen dat je gebruikt zal door tweeën gedeeld zijn.");
Database.addText("nl.mapVillageForgeBuyWoodenSwordButton", "Koop een houten zwaard (150 snoepjes)");
Database.addText("nl.mapVillageForgeBuyWoodenSwordSpeech", "Dankje voor het kopen! Dit houten zwaard is best zwak, maar een goed begin.");
Database.addText("nl.mapVillageForgeBuyIronAxeButton", "Koop een ijzeren bijl (400 snoepjes)");
Database.addText("nl.mapVillageForgeBuyIronAxeSpeech", "Ik hoop dat je blij bent met deze ijzeren bijl. Ik heb het net geslepen voor jou!");
Database.addText("nl.mapVillageForgeBuyPolishedSilverSwordButton", "Een opgepoetst zilveren zwaard (2 snoepjes)");
Database.addText("nl.mapVillageForgeBuyPolishedSilverSwordSpeech", "Het kostte me veel tijd om dit zwaard te maken. Ik kan je garanderen dat het de prijs waard is.");
Database.addText("nl.mapVillageForgeBuyLightweightBodyArmourButton", "Koop een lichtgewicht pantser (15 000 snoepjes)");
Database.addText("nl.mapVillageForgeBuyLightweightBodyArmourSpeech", "Dit pantser zal je bescherming bieden tegen je vijanden.");
Database.addText("nl.mapVillageForgeBuyScytheButton", "Koop een zeis(5 000 000 snoepjes)");
Database.addText("nl.mapVillageForgeBuyScytheSpeech", "Het kostte me een paar maanden om deze zeis te maken. Het is een echt kunststuk. Het is waarschijnlijk het snelste wapen dat je ooit kunt gebruiken. Veel succes!");
Database.addText("nl.wishingWellThrowFirstCandyButton", "Gooi een snoepje in de put");
Database.addText("nl.wishingWellCandyIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je snoepjes in mij gooit, zal ik je wonden genezen.");
Database.addText("nl.wishingWellThrewCandiesSpeech", "Je wonden zijn nu genezen!");
Database.addText("nl.wishingWellNoWoundSpeech", "Je hebt geen wonden om te genezen!");
Database.addText("nl.wishingWellThrowFirstLollipopButton", "Gooi een lollie in de put");
Database.addText("nl.wishingWellLollipopIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je lollies in mij gooit, zal ik ze veranderen in snoepjes.");
Database.addText("nl.wishingWellThrewLollipopsSpeech", "Je lollies zijn nu veranderd in in snoepjes! Twee lollies voor een snoepje.");
Database.addText("nl.wishingWellThrowChocolateBarButton", "Gooi een chocoladereep in de put");
Database.addText("nl.wishingWellChocolateBarIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Ik ben gek op chocoladerepen. Ik ben er echt gek op. Voor elke chocoladereep die je in mij gooit, inclusief deze, krijg je een magische betovering.");
Database.addText("nl.wishingWellThrewChocolateBarSpeech", "Welk object wil je betoveren?");
Database.addText("nl.wishingWellThrowPainAuChocolatButton", "Gooi een pain au chocolat in de put");
Database.addText("nl.wishingWellPainAuChocolatIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je een pain au chocolat in mij gooit krijg je een heel speciaal geschenk. Kies verstandig.");
Database.addText("nl.wishingWellThrewPainAuChocolatSpeech", "Bedankt voor de pain au chocolat! Je kunt nu je geschenk kiezen.");
Database.addText("nl.wishingWellChooseGift", "Kies je geschenk!");
Database.addText("nl.wishingWellChooseGiftButton", "Kies");
Database.addText("nl.wishingWellGiftDoneSpeech", "Klaar! Je hebt nu een nieuw geschenk. Het zal verschijnen in je inventaris statuspaneel.");
Database.addText("nl.wishingWellNoPossibleEnchantment", "Geen mogelijke betoveringen");
Database.addText("nl.wishingWellChooseEnchantment", "Kies de betovering");
Database.addText("nl.wishingWellEnchantButton", "Betover");
Database.addText("nl.wishingWellEnchantmentDoneSpeech", "Daar is het! Je object is betoverd");
Database.addText("nl.pierLighthouseButton", "Ga naar de vuurtoren met de boot");
Database.addText("nl.pierTheSeaButton", "Spring in de zee");
Database.addText("nl.lonelyHouseOpenBox", "Open de doos");
Database.addText("nl.lonelyHouseShakeBox", "Schud de doos");
Database.addText("nl.lonelyHouseBreakLock", "Breek het slot");
Database.addText("nl.lonelyHouseKickBox", "Schop de doos");
Database.addText("nl.lonelyHouseAskTheBoxToOpenItself", "Vraag de doos om zichzelf te openen");
Database.addText("nl.lonelyHouseLureTheBoxWithACandy", "Lok de doos met snoep");
Database.addText("nl.lonelyHouseTakeTheBox", "Neem de doos mee, Je hebt waarschijnlijk toch een sleutel nodig om hem te openen");
Database.addText("nl.lonelyHouseOpenBoxResult", "De doos is op slot");
Database.addText("nl.lonelyHouseShakeBoxResult", "Er gebeurt niks");
Database.addText("nl.lonelyHouseBreakLockResult", "Het slot weigert");
Database.addText("nl.lonelyHouseKickBoxResult", "Je voet doet een beetje zeer, maar er gebeurt niks");
Database.addText("nl.lonelyHouseAskTheBoxToOpenItselfResult", "...je praat tegen een doos, weet je dat?");
Database.addText("nl.lonelyHouseLureTheBoxWithACandyResult", "Het lijkt alsof het de doos niks uitmaakt");
Database.addText("nl.lonelyHouseTakeTheBoxResult", "Er zit waarschijnlijk iets interessants in deze candy box");
Database.addText("nl.lollipopFarmConstructMill", "Bouw een molen(10 000 lollies)");
Database.addText("nl.lollipopFarmFeedMill", "Voed de molen");
Database.addText("nl.lollipopFarmCurrentCandiesProduction", "Huidige snoepjesproductie");
Database.addText("nl.lollipopFarmDigPond", "Graaf een vijver (100 000 lollies)");
Database.addText("nl.lollipopFarmBuyLolligator", "Koop een lolliegator (1200 snoepjes)");
Database.addText("nl.lollipopFarmLolligatorsConversionText", "Snoepjes omkeer -> lollies geactiveerd");
Database.addText("nl.lighthouseAskButton", "Vraag");
Database.addText("nl.lighthouseQuestionWho", "Wie ben jij?");
Database.addText("nl.lighthouseQuestionWhoSpeech", "Ik ben een hele oude cycloop.");
Database.addText("nl.lighthouseQuestionWhat", "Wat doe je hier?");
Database.addText("nl.lighthouseQuestionWhatSpeech", "Ik woon hier de hele dag door, wachtend op een boot. Het is heel lang geleden sinds ik een boot heb gezien, maar ik moet hier blijven, starend naar de zee, omdat er mischien een boot komt.");
Database.addText("nl.lighthouseQuestionWhyEatCandies", "Waarom zou ik snoepjes eten?");
Database.addText("nl.lighthouseQuestionWhyEatCandiesSpeech", "Omdat ze goed voor je gezondheid zijn!");
Database.addText("nl.lighthouseQuestionCandyBox", "Wat is candy box?");
Database.addText("nl.lighthouseQuestionCandyBoxSpeech", "Het is een hele oude doos waarover word gezegd dat het alle snoepjes in de wereld bevat. De legende zegt dat wie het voor elkaar krijgt om het open te maken zoveel snoepjes zou hebben dat alles mogelijk is.");
Database.addText("nl.lighthouseQuestionDragon", "De draak zei dat ik hier moest komen omdat ik snoepjes wil.");
Database.addText("nl.lighthouseQuestionDragonSpeech", "Oh, Op die manier... Nou, ik kan je niet direct snoepjes geven, maar ik kan je iets essensieels geven om in het eind HEEL veel snoepjes  te kunnen krijgen. Maar eerst moet ik je testen, want wat ik heb kan niet gegeven worden aan iedereen. Los deze puzzel op en het zal van jou zijn.");
Database.addText("nl.lighthouseFoundStone", "Gefeliciteerd! Je hebt de test gehaald en vond de steen. Het is heel erg zeldzaam, maar alleen nuttig als je nog drie stenen zoals deze bezit. Veel succes!");
Database.addText("nl.lighthouseFoundStoneAgain", "Goed gedaan, je hebt de puzzel weer opgelost. Je lijkt het leuk te vinden.");
Database.addText("nl.saveLocalSaveTitle", "Browser opslaan");
Database.addText("nl.saveLocalSaveWhy", "Kies lokaal opslaan als je wilt blijven spelen op je huidige toestel en browser.");
Database.addText("nl.saveLocalSaveWarning0", "Je browser blijkt geen HTML5 te steunen.");
Database.addText("nl.saveLocalSaveWarning1", "Je moet je browser updaten om lokale opslag te kunnen gebruiken.");
Database.addText("nl.saveLocalSaveChooseSlot", "Kies een opslag slot :");
Database.addText("nl.saveLocalSaveAutosaveEnabled", "Automatisch opslaan geactiveerd");
Database.addText("nl.saveLocalSaveChooseWhatToDo", "Kies wat te doen:");
Database.addText("nl.saveLocalSaveSaveButton", "Opslaan");
Database.addText("nl.saveLocalSaveAutosaveButton", "Sla elke 10 minuten op");
Database.addText("nl.saveLocalSaveDisableAutosaveButton", "Deactiveer automatisch opslaan");
Database.addText("nl.saveFileSaveTitle", "Tekst opslaan");
Database.addText("nl.saveFileSaveWhy0", "Kies tekst opslaan als :");
Database.addText("nl.saveFileSaveWhy1", "Je wilt blijven spelen op een ander apparaat of browser");
Database.addText("nl.saveFileSaveWhy2", "Je je progressie wilt delen met iemand anders");
Database.addText("nl.saveFileSaveWhy3", "Voor een of andere reden je je browser cache wilt legen");
Database.addText("nl.saveFileSaveWhy4", "(dit zal je lokale opslag verwijderen)");
Database.addText("nl.saveFileSaveButton", "Krijg het huidige spel als tekst");
Database.addText("nl.saveFileSaveWarning", "Plak de tekst nu ergens!(in een bestand, bijvoorbeeld)");
Database.addText("nl.saveLocalLoadTitle", "Browser laden");
Database.addText("nl.saveLocalLoadYouCan", "Je kunt een lokale opslag laden met de volgende links:");
Database.addText("nl.saveLocalLoadThanksTo", "Dankzij HTML5 magie, kun je deze link zelfs gebruiken als je offline bent");
Database.addText("nl.saveFileLoadTitle", "Tekst laden");
Database.addText("nl.saveFileLoadPaste", "Plak je opslagtekst hier onder en klik dan op het \"Laad\" knopje");
Database.addText("nl.saveFileLoadButton", "Laad");
Database.addText("nl.mountainsText0", "Je zag iets in de bergen!");
Database.addText("nl.mountainsText1", "He ziet er interessant uit. Misschien is het nuttig.");
Database.addText("nl.mountainsTextButton", "Beklim de bergen om het ding te krijgen");
Database.addText("nl.mountainsTextAfter", "Je vond een pogostick! Het is toegevoegd aan je inventaris.");
Database.addText("nl.secondHouseIntroSpeech", "Hallo, ik ben de snoepjes handelaar. Ik doe alles voor snoepjes. Wat heb je nodig?");
Database.addText("nl.secondHouseLollipop1Speech", "Dit is een citroenaroma-lollie. Mijn favoriet! Het kost 60 snoepjes, maar het is het waard.");
Database.addText("nl.secondHouseLollipop2Speech", "Dit is een aardbeienaroma-lollie. Het smaakt goed. Ik hou van zijn rode kleur. Maar 60 snoepjes!");
Database.addText("nl.secondHouseLollipop3Speech", "Dit is een pompoenaroma-lollie. Ik wed dat je die nog nooit had geprobeerd! 60 snoepjes en het is van jou.");
Database.addText("nl.secondHouseLollipopButtonText", "Koop deze lollie (60 snoepjes)");
Database.addText("nl.secondHouseMerchantHatSpeech", "Ik kan je mijn hoed verkopen, maar het is heel erg zeldzaam, weet je... Je moet mij er heel veel snoepjes voor in de plaats geven. Laten we zeggen 1 miljoen snoepjes. Lijkt mij eerlijk, toch?");
Database.addText("nl.secondHouseMerchantHatButtonText", "Koop de hoed van de handelaar (1 000 000 snoepjes)");
Database.addText("nl.secondHouseTimeRingSpeech", "Dit is een tijdring. Het is best magisch. Het laat je de tijd vertragen voor wanneer je in de problemen zit.");
Database.addText("nl.secondHouseTimeRingButtonText", "Koop de tijdring (500 snoepjes)");
Database.addText("nl.secondHouseLeatherGlovesSpeech", "Deze leren handschoenen zijn gemaakt met kameelleer van hoge kwaliteit. Ik heb er veel van op voorraad, daarom zijn ze zo goedkoop : maar 300 snoepjes!");
Database.addText("nl.secondHouseLeatherBootsButtonText", "Koop een paar leren laarzen (300 snoepjes)");
Database.addText("nl.secondHouseLeatherBootsSpeech", "Deze hoge kwaliteit leren laarzen, zijn gemaakt met kameel leer, zal je voeten warm houden.");
Database.addText("nl.secondHouseLeatherGlovesButtonText", "Koop een paar handschoenen (300 schoenen)");
Database.addText("nl.secondHouseChocolateBarSpeech", "Dit is een chocladereep. Ik weet niet waar het voor wordt gebruikt, maar het blijkt behoorlijk zeldzaam te zijn, wat de prijs verklaart. 800 snoepjes en het is van jou!");
Database.addText("nl.secondHouseChocolateBarButtonText", "Koop de chocoladereep (800 snoepjes)");
Database.addText("nl.outsideTheHoleButton", "Spring in het grote gat in de grond");
Database.addText("nl.theCaveExitText0", "Je bereikte eindelijk het einde van de grot");
Database.addText("nl.theCaveExitText1", "Je kunt een groot bos zien vanuit hier.");
Database.addText("nl.theCaveExitButtonText", "Ga uit de grot");
Database.addText("nl.theCaveFirstSentenceWentStraight", "Je ging rechtdoor.");
Database.addText("nl.theCaveFirstSentenceWentLeft", "Je nam het pad links van je.");
Database.addText("nl.theCaveFirstSentenceWentRight", "Je nam het pad rechts van je.");
Database.addText("nl.theCaveFirstSentenceYouAre", "Je bent in een grot. Er zijn drie paden voor je.");
Database.addText("nl.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Voor je zie je een vreemd ding op de grond.");
Database.addText("nl.theCavePattern_ChocolateBarNowSeeChocolateBar", "Je ziet een chocoladereep voor je.");
Database.addText("nl.theCavePattern_TreasureMapSentence", "Je ziet kleine stenen in een vreemde manier geordend.");
Database.addText("nl.theCavePattern_MonkeyWizardSentence", "Je stuit op een naakte apentovenaar.");
Database.addText("nl.theCavePattern_MonkeyWizardButton", "Daag het uit");
Database.addText("nl.theCavePattern_OctopusKingSentence", "Je stuit op de octopuskoning. Het ziet er smerig uit.");
Database.addText("nl.theCavePattern_OctopusKingButton", "Daag het uit");
Database.addText("nl.fortressInsideText0", "Je bent in de woestijnvesting.");
Database.addText("nl.fortressInsideText1", "Je kunt kiezen tussen drie deuren.");
Database.addText("nl.fortressInsideText2", "Elk van hun leidt naar een grote kamer met een schat.");
Database.addText("nl.fortressInsideEnterRoom1", "Ga in de eerste kamer");
Database.addText("nl.fortressInsideEnterRoom2", "Ga in de tweede kamer");
Database.addText("nl.fortressInsideEnterRoom3", "Ga in de derde kamer");
Database.addText("nl.treasureButtonDig", "Graaf");
Database.addText("nl.treasureButtonYouFound", "Je vond drie chocolade repen!");
Database.addText("nl.sorceressHutHello", "Hallo, ik ben de tovenaar. Ik kan je het een en ander leren over magie. Ik kan je ook interessante dingen geven, of spreuken gebruiken. Maar alles heeft een prijs! En deze prijs zullen lollies zijn. Heel veel.");
Database.addText("nl.sorceressHutClickedGrimoire", "Dit is een grimoire voor beginners. Door dit mee te nemen in je zoektochten kun je simpele maar handige spreuken gebruiken. Je hebt dit nodig! Maar 5 000 lollies.");
Database.addText("nl.sorceressHutBuyGrimoireButton", "Koop deze grimoire (5 000 lollies)");
Database.addText("nl.sorceressHutBuyGrimoireSpeech", "Bedankt voor het kopen! Je kunt nu drie spreuken gebruiken met deze grimoire. Veel succes!");
Database.addText("nl.sorceressHutClickedGrimoire2", "Dit is een geavanceerde grimoire. Door dit mee te nemen in je zoektochten, kun je twee geavanceerde spreuken gebruiken. Ik schreef ze zelf, en dat was niet makkelijk. 20 000 lollies is een eerlijke prijs.");
Database.addText("nl.sorceressHutBuyGrimoire2Button", "Koop deze grimoire (20 000 lollies)");
Database.addText("nl.sorceressHutBuyGrimoire2Speech", "Bedankt voor het kopen! Je kunt nu twee spreuken gebruiken met deze grimoire. Gebruik ze verstandig!");
Database.addText("nl.sorceressHutClickedCauldron", "Dit is mijn ketel. Hiermee kan ik magische drankjes brouwen. Ik kan het aan je verkopen, maar het is heel erg kostbaar... het zal je 100 000 lollies kosten.");
Database.addText("nl.sorceressHutBuyCauldronButton", "Koop de ketel (100 000 lollies)");
Database.addText("nl.sorceressHutBuyCauldronSpeech", "Heel erg bedankt! 100 000 lollies voor mij! Ik gaf je ook een brouwhandleiding. Die zal erg handig zijn.");
Database.addText("nl.sorceressHutClickedHat", "Ik heb een mooie hoed, inderdaad! Maar ik kan hem helaas niet aan je verkopen. Het is veeeel te kostbaar. Echt, Ik kan het niet. Niet aandringen. Nee. Nee nee nee ik moet het niet doen. Nou ja, ik verkoop het, maar voor 1 000 000 000 lollies. Je kunt dat waarschijnlijk toch niet betalen.");
Database.addText("nl.sorceressHutBuyHatButton", "Koop de hoed (1 000 000 000 lollies)");
Database.addText("nl.sorceressHutBuyHatSpeech", "Een miljard lollies voor miiiiiiij! Maar ik heb geen hoed meer.. maar een miljard lollies, wow! .. het was het waard.");
Database.addText("nl.cauldronPreviousPageButton", "Vorige pagina");
Database.addText("nl.cauldronNextPageButton", "Volgende pagina");
Database.addText("nl.cauldronWhatYouWantToPut", "Wat je in de ketel wil doen");
Database.addText("nl.cauldronWhatIsIn", "Wat zit er in de ketel");
Database.addText("nl.cauldronWhatYouCanDo", "Wat je er mee kunt doen");
Database.addText("nl.castleBigRoomComment", "Een grote kamer");
Database.addText("nl.castleARoomComment", "Een kamer");
Database.addText("nl.castleADarkRoomComment", "Een donkere kamer");
Database.addText("nl.castleCastleEntranceComment", "De ingang van het kasteel");
Database.addText("nl.castleTowerEntranceComment", "De ingang van de toren");
Database.addText("nl.castleNougatMonsterComment", "Val de gigantische noga aan");
Database.addText("nl.castleGuardsComment", "Val de bewakers aan");
Database.addText("nl.castleStairsComment", "Trap");
Database.addText("nl.buttonBackToTheCastle", "Terug naar het kasteel");
Database.addText("nl.castleBigRoomHovenSpeechSad", "Hallo, Ik been een hele oude broodoven. Ik bakte vroeger heel veel lekker banket, maar niemand gebruikt mij meer. Misschien... misschien kun jij me helpen? Laat me een paar snoepjes van je gebruiken! Maak je geen zorgen, je zult er geen spijt van krijgen! Je kunt me vertrouwen.");
Database.addText("nl.castleBigRoomHovenNotEnough", "Oh... je hebt niet genoeg snoepjes, ik kan niks doen. Ik ben gewoon nutteloos. Ik ben de nuttelozebrood oven, dat is hoe je mij zou moeten noemen.");
Database.addText("nl.castleBigRoomHovenSpeechMadePainAuChocolat", "Jeej! Heel erg bedankt! Ik gebruikte 100 snoepjes en een chocoladereep en maakte voor jou... een pain au chocolat! Het is mijn favoriete banket, ik hoop dat jij het ook lekker vind.");
Database.addText("nl.castleBigRoomHovenSpeechHappy", "Hey! Als je wil dat ik nog een banket bak, laat het me weten! Ik zou je graag helpen.");
Database.addText("nl.castleBigRoomHovenSpeechHappyNotEnough", "Oh, je hebt niet genoeg snoepjes, helaas. Ik heb 100 snoepjes en een chocoladereep nodig. Kom terug als je dat hebt!");
Database.addText("nl.castleBigRoomHovenLetHovenTakeButton", "Laat de oven alle snoepjes pakken dat het wil pakken");
Database.addText("nl.castleBigRoomHovenThanks", "Bedankt, oven!");
Database.addText("nl.dragonStopTickling", "He, jij, stop met kietelen, alsjeblieft");
Database.addText("nl.dragonStopTicklingButton", "Uh, oh, sorry, ik dacht dat ik je moest aanvallen");
Database.addText("nl.dragonTalking", "Ik ben de draak en dit is mijn kasteel. Ik zie dat het je gelukt is om binnen te komen, je zal vast moedig zijn... Ik zou graag iemand helpen zoals jij. Waar zoek je naar?");
Database.addText("nl.dragonTalkingChallengeButton", "Uitdaging");
Database.addText("nl.dragonTalkingFameButton", "Roem");
Database.addText("nl.dragonTalkingCandiesButton", "Snoepjes");
Database.addText("nl.dragonTalkingChallengeSpeech", "Oh, je wilt dus een uitdaging? Ik denk dat je een reis moet maken naar de hel, het is bekend dat de duivel een sterke tegenstander is. Spring op mijn rug en ik breng je er heen!");
Database.addText("nl.dragonTalkingFameSpeech", "De beste manier om beroemd te worden is door de confrontatie aan te gaan met de ontwikkelaar zelf. Ik weet waar hij woont en ik kan je daar brengen. Maar wees voorbereid, dit zal niet makkelijk zijn.");
Database.addText("nl.dragonTalkingCandiesSpeech", "Hetgene wat wij uiteindelijk allemaal willen zijn snoepjes, of niet? Ik denk dat een vriend van mij je daarmee kan helpen. Je kunt hem makkelijk herkennen, hij heeft maar een oog. Vertel hem maar dat je mij kent.");
Database.addText("nl.dragonTalkingChallengeAnswer", "Laten we gaan!");
Database.addText("nl.dragonTalkingFameAnswer", "Ik ben er klaar voor.");
Database.addText("nl.dragonTalkingCandiesAnswer", "Okay, bedankt!");
Database.addText("nl.buttonBackToCastle", "Terug naar het kasteel");
Database.addText("nl.talkingCandySpeechNoBox", "Hey! Ik ben het pratende snoepje. Je hebt het spel bijna gewonnen. Je moet alleen nog de candy box vinden. Het is in een huis buiten het dorp. Dit is de laatste stap!");
Database.addText("nl.talkingCandySpeech1", "He!, Ik ben het pratende snoepje. Je hebt het spel gewonnen! Ik zal je candy box openmaken, dit is je prijs. Zal ik doorgaan?");
Database.addText("nl.talkingCandySpeech2", "Klaar! Je kunt er nu in. Ik hoop dat je het spel leuk vond :)");
Database.addText("nl.talkingCandyButton", "Ja!!");
Database.addText("nl.lighthousePuzzleResetButton", "Reset");
Database.addText("pl.mapVillageComment", "Wioska");
Database.addText("pl.mapFortressComment", "Pustynna forteca");
Database.addText("pl.mapATreeComment", "Drzewo");
Database.addText("pl.mapTheDesertComment", "Pustynia");
Database.addText("pl.mapWishingWellComment", "Studnia życzeń");
Database.addText("pl.mapLonelyHouseComment", "Samotny dom");
Database.addText("pl.mapForestComment", "Las");
Database.addText("pl.mapCastleEntranceComment", "Wejście do zamku");
Database.addText("pl.mapCastleComment", "Zamek");
Database.addText("pl.mapDragonComment", "Smok");
Database.addText("pl.candyBoxEatCandiesButton", "Zjedz wszystkie cukierki");
Database.addText("pl.candyBoxThrowCandiesButton", "Wyrzuć 10 cukierków na ziemię");
Database.addText("pl.mapVillageAHouseComment", "Dom");
Database.addText("pl.mapVillageForgeComment", "Kuźnia");
Database.addText("pl.buttonBackToTheMap", "Powrót do mapy");
Database.addText("pl.mapSorceressHutComment", "Domek czarownicy");
Database.addText("pl.buttonBackToTheVillage", "Powrót do wioski");
Database.addText("pl.mapATreeIntroductionSpeech", "Witaj, jestem Wiewiórka. Mogę zapewnić ci cukierki i dużo rzeczy. Wiem jak bardzo kochasz cukierki. Ale czuje się samotnie w tym lesie.");
Database.addText("pl.mapATreeIntroductionButton", "Jak mogę ci pomóc?");
Database.addText("pl.mapATreeFirstQuestion", "Będę zadawać ci pytania. Jeśli odpowiesz poprawnie, najsłodsze z cukierków będą twoje! Pierwsze : czy naprawdę kochasz cukierki? (odpowiedz po Angielsku)");
Database.addText("pl.mapATreeSecondQuestion", "Zgadza się! 20 cukierków dla ciebie. Teraz dokończ tą sekwencje liter i dostaniesz następną nagrodę : S, E, I, D, N, A, ?");
Database.addText("pl.mapATreeThirdQuestion", "\"Candies!\" 100 cukierków dla ciebie. Następne pytanie : ile cukierków posiada najbardziej cukierkowa osoba na świecie?");
Database.addText("pl.mapATreeFourthQuestion", "500 cukierków dla ciebie! Następna nagroda powinna być jeszcze bardziej interesująca...  Oto łamigłówka : W starym lesie rośnie bardzo stare drzewo, na którym żują najinteligentniejsze zwierzęta na tym świecie. Mówi się że to drzewo ma 60 korzeni, 360 gałęzi i 2160 liści. Ile znaków możesz znaleźć na jego pniu?");
Database.addText("pl.mapATreeFifthQuestion", "Gratulacje! Rzeczywiście mówiłem o moim drzewie. Oto 3 lizaki dla ciebie. Zrób z nich dobry użytek! Następna zagadka : Pod pełnym księżycem, wrzucam żółty kapelusz do czerwonego morza. Co dzieje się z żółtym kapeluszem?");
Database.addText("pl.mapATreeTicTacToeIntro", "Dobra odpowiedź! To nie było takie trudne. Trzy tabliczki czekolady dla ciebie! Przy zdobywaniu następnej nagrody zmienię trochę zasady. Będziesz musiał ze mną zagrać w grę! Jesteś gotowy?");
Database.addText("pl.mapATreeTicTacToeIntroButton", "Jasne że jestem!");
Database.addText("pl.mapATreeTicTacToeLetsPlay", "Ta gra to kółko i krzyżyk. Będziemy grali na planszy o rozmiarach 3x3. Ty będziesz korzystał z X a ja z O. Będziemy wykonywali nasze ruchy na przemian, celem gry jest ustawienie trzech swoich znaków w rzędzie. Ty zaczynasz!");
Database.addText("pl.mapATreeTicTacToeNobodyWins", "Plansza jest zapełniona i żadnemu z nas nie udało się ułożyć trzech pod rząd : remis! Chcesz spróbować jeszcze raz?");
Database.addText("pl.mapATreeTicTacToeYouLose", "Ułożyłem trzy pod rząd! Wygrałem! Chcesz spróbować jeszcze raz?");
Database.addText("pl.mapATreeTicTacToeTryAgainButton", "Tak, chcę!");
Database.addText("pl.mapATreeTicTacToeYouWin", "Wow, to był nieoczekiwany ruch. Ale ułożyłeś trzy pod rząd, nie mogę się kłócić. Wygrałeś! Weź ten klucz! Otwiera jeden z domów w wiosce na południe od lasu.");
Database.addText("pl.mapATreeTicTacToeAnymoreSweet", "Dzięki Wiewiórko! Jeszcze jakieś wyzwania?");
Database.addText("pl.mapATreeNoMoreChallenge", "Niestety nie, nie mam więcej wyzwań... Bawienie się z tobą było bardzo fajne, dziękuje za to!");
Database.addText("pl.buttonExitQuestKeeping", "Wyjdź z zadania (zatrzymasz to co znajdziesz)");
Database.addText("pl.buttonExitQuestNoKeeping", "Wyjdź z zadania (nie zatrzymasz tego co znajdziesz)");
Database.addText("pl.buttonExitQuestNoKeepingBecauseLose", "Wyjdź z zadania (nie zatrzymasz tego co znajdziesz bo przegrałeś)");
Database.addText("pl.mapVillageLockedHouseComment", "Zamknięty dom");
Database.addText("pl.mapVillageForgeIntroductionSpeech", "Cześć! Jestem kowalem. Mogę sprzedać ci różne bronie i elementy wyposażenia.");
Database.addText("pl.mapVillageForgeIntroductionSpeechNoMoreToSell", "Cześć! Jestem kowalem. Niestety, Nie mam nic więcej do sprzedania. Być może później będe miał coś do sprzedania.");
Database.addText("pl.mapVillageFifthHouseNoWeaponSpeech", "Cześć. Moja piwnica jest pełna szczurów, Muszę się ich pozbyć... jeśli tylko ktoś z bronią mógłby mi pomóc...");
Database.addText("pl.mapVillageFifthHouseWeaponSpeech", "Hej, ty! Widzę że masz broń! Jeśli zabijesz szczury które osiedliły się w mojej piwnicy, nagrodzę cię.");
Database.addText("pl.mapVillageFifthHouseAgree", "Już się biorę do roboty!");
Database.addText("pl.mapVillageFifthHouseCellarDone", "Dziękuje za pomoc! Oto coś bardzo cennego w nagrodę : mapa świata. Myślę że ty skorzystasz z niej bardziej niż ja.");
Database.addText("pl.mapVillageTheShopComment", "Sklep");
Database.addText("pl.mapBridgeComment", "Most");
Database.addText("pl.mapFarmComment", "Farma lizaków");
Database.addText("pl.mapCaveEntranceComment", "Wejście do jaskini");
Database.addText("pl.mapLighthouseComment", "Latarnia morska");
Database.addText("pl.mapPierComment", "Przystań");
Database.addText("pl.mapTheHoleComment", "Dziura");
Database.addText("pl.candyBoxRequestStatusBarUnlocked", "Poproś o nową funkcje od dewelopera(30 cukierków)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfg", "Poproś o jeszcze jedną (5 cukierków)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedSave", "Poproś o następną (5 cukierków)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedHealthBar", "Poproś o coś bardziej ekscytującego (5 cukierków)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedMap", "Ostatnia prośba! Ta musi być warta tych cukierków. (10 cukierków)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedComment", "Odblokowałeś pasek stanu! (powyżej)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfgComment1", "Masz teraz dostęp do opcji!");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfgComment2", "Możesz tam zmienić język jeśli chcesz.");
Database.addText("pl.candyBoxRequestStatusBarUnlockedSaveComment", "Pojawia się dzika karta zapisu!");
Database.addText("pl.candyBoxRequestStatusBarUnlockedHealthBarComment", "100 punktów życia dla ciebie. Przydadzą ci się!");
Database.addText("pl.cfgChooseLanguage", "Wybierz język :");
Database.addText("pl.cfgInvertColors", "Odwrócić kolory?");
Database.addText("pl.gridItemMainMapName", "Mapa");
Database.addText("pl.gridItemMainMapDescription", "Mapa świata");
Database.addText("pl.gridItemPogoStickName", "Sprężynowe urządzenie do podskakiwania");
Database.addText("pl.gridItemPogoStickDescription", "Ten przedmiot pozwala ci skakać w trakcie zadań!");
Database.addText("pl.gridItemTimeRingName", "Pierścień czasu");
Database.addText("pl.gridItemTimeRingDescription", "Ten przedmiot daje ci nową umiejętność w trakcie zadań: możesz spowalniać czas. Jeśli rzeczy dzieją się za szybko, skorzystaj z niego!");
Database.addText("pl.gridItemThirdHouseKeyName", "Klucz do trzeciego domu");
Database.addText("pl.gridItemThirdHouseKeyDescription", "Ten klucz pozwala ci otworzyć trzeci dom we wiosce");
Database.addText("pl.gridItemFeatherName", "Pióro pustynnego ptaka");
Database.addText("pl.gridItemFeatherDescription", "To magiczne pióro pozwala ci skakać wyżej gdy używasz swojego sprężynowego urządzenia do podskakiwania!");
Database.addText("pl.gridItemFeatherDescriptionNoPogoStick", "Z jakiegoś powodu, czujesz że to pióro byłoby przydatne gdybyś miał sprężynowe urządzenie do podskakiwania...");
Database.addText("pl.gridItemSpongeName", "Magiczna gąbka");
Database.addText("pl.gridItemSpongeDescription", "Ta magiczna gąbka pozwala ci się ścisnąć tak jak gąbka, zmniejsza to twój rozmiar.");
Database.addText("pl.gridItemFortressKeyName", "Klucz do pustynnej fortecy");
Database.addText("pl.gridItemFortressKeyDescription", "Ten klucz pozwoli ci otworzyć starożytną fortecę zlokalizowaną nad pustynią. Kto wie co może się tam znajdować?");
Database.addText("pl.gridItemHeartPendantName", "Wisiorek serca");
Database.addText("pl.gridItemHeartPendantDescription", "Ten wisiorek będzie zwiększał twoje punkty zdrowia jeśli będziesz go nosił na szyji .");
Database.addText("pl.gridItemHeartPlugName", "Wtyczka serca");
Database.addText("pl.gridItemHeartPlugDescription", "Ta wtyczka serca, stworzona z żelaza, pajęczych odnóży, i specjalnego \"alkoholu serca\" zapieczętowanego w środku, zwiększy twoje punkty życia o 20 procent!");
Database.addText("pl.gridItemBeginnersGrimoireName", "Grimuar dla początkujących");
Database.addText("pl.gridItemBeginnersGrimoireDescription", "Ten grimuar zapewnia ci trzy zaklęcia, w miarę łatwe do rzucenia. Został stworzony dla początkujących. Będziesz w stanie rzucać zaklęcie kwaśnego deszczu (duża ilość kwasu spadnie na twoich przeciwników), zaklęcie kuli ognia (ogromna magiczna kula stworzona z ognia poleci na twoich przeciwników), i zaklęcie teleportacji (które przeteleportuje cię do nieprzewidywalnej lokalizacji).");
Database.addText("pl.gridItemAdvancedGrimoireName", "Zaawansowany grimuar");
Database.addText("pl.gridItemAdvancedGrimoireDescription", "Ten zaawansowany grimuar daje ci dwa zaklęcia: zaklęcie wymazania magii i zaklęcię ciernistej tarczy. To pierwsze usunie całą magię z bieżącego zadania włącznie z twoimi zaklęciami. Drugie stworzy wokół ciebie ciernistą tarczę która będzie zadawać obrażenia twoim wrogom którzy się z nią zetkną.");
Database.addText("pl.gridItemBlackMagicGrimoireName", "Grimuar czarnej magii");
Database.addText("pl.gridItemBlackMagicGrimoireDescription", "Znalazłeś ten grimuar w jaskini, był bardzo trudny do dosięgnięcia i to miało swój powód. Zapewnia ci dwa potężne zaklęcia czarnej magii. Pierwsze stworzy przed tobą gigantyczną ścianę z obsydianu, co może być przydatne przy spowalnianiu przeciwników. Drugie przyzwie chmarę demonów które zaatakują każdego w bieżącym zadaniu, łącznie z tobą. Bądź z nim ostrożny.");
Database.addText("pl.gridItemUnicornHornName", "Róg jednorożca");
Database.addText("pl.gridItemUnicornHornDescription", "Ten magiczny róg należał do jednorożca. Jego potężne moce lecznicze bardzo ci pomogą. Słyszałeś że ten jednorożec miał na imię Charlie.");
Database.addText("pl.gridItemXinopherydonClawName", "Pazur xinopherydona");
Database.addText("pl.gridItemXinopherydonClawDescription", "Ten pazur należał do xinopherydona, dwugłowego starożytnego zwierzęcia o którym wszyscy myśleli że wymarło. Podwoi obrażenia broni której używasz.");
Database.addText("pl.gridItemPitchforkName", "Widły");
Database.addText("pl.gridItemPitchforkDescription", "Te specjalne widły pozwalają ci spulchniać ziemię bez obracania jej, chroniąc podziemne ekosystemy. Potroi produkcje twojej farmy lizaków.");
Database.addText("pl.gridItemShellPowderName", "Proszek z muszelek");
Database.addText("pl.gridItemShellPowderDescription", "Proszek z muszelek jest często używany przez farmerów aby zwiększyć szybkość wzrostu ich lizaków. Ten proszek zwiększy produkcję twojej farmy lizaków razy trzy!");
Database.addText("pl.gridItemPName", "Kamień P");
Database.addText("pl.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("pl.gridItemLName", "Kamień L");
Database.addText("pl.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("pl.gridItemAName", "Kamień A");
Database.addText("pl.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("pl.gridItemYName", "Kamień Y");
Database.addText("pl.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("pl.gridItemRedSharkFinName", "Magiczna czerwona płetwa rekina");
Database.addText("pl.gridItemRedSharkFinDescription", "Ta magiczna płetwa znacznie zwiększy obrażenia od twojego zaklęcia kuli ognia. Wreszcie ta kula ognia stanie się przydatna.");
Database.addText("pl.gridItemGreenSharkFinName", "Magiczna zielona płetwa rekina");
Database.addText("pl.gridItemGreenSharkFinDescription", "Ta magiczna płetwa przyniesie moc natury do twojej farmy lizaków! Ich produkcja zostanie pomnożona przez 5.");
Database.addText("pl.gridItemPurpleSharkFinName", "Magiczna fioletowa płetwa rekina");
Database.addText("pl.gridItemPurpleSharkFinDescription", "Ta magiczna płetwa zapewni ci dodatkowe zaklęcie czarnej magii. Możesz go użyć tylko raz na jedno zadanie. Bądź z nim bardzo ostrożny!");
Database.addText("pl.gridItemTalkingCandyName", "Mówiący cukierek");
Database.addText("pl.gridItemTalkingCandyDescription", "Ten mówiący cukierek pojawił się po tym jak włożyłeś cztery kamienie na szczycie wieży zamkowej. Może pomoże otworzyć ci candy box...");
Database.addText("pl.inventorySpecialNothingEqItem", "Nic");
Database.addText("pl.eqItemWeaponWoodenSwordName", "Drewniany miecz");
Database.addText("pl.eqItemWeaponWoodenSwordDescription", "Prosty miecz stworzony z drewna");
Database.addText("pl.eqItemWeaponIronAxeName", "Żelazna siekiera");
Database.addText("pl.eqItemWeaponIronAxeDescription", "Prosta żelazna siekiera. Dobrze naostrzona. Silniejsza niż drewniany miecz.");
Database.addText("pl.eqItemWeaponPolishedSilverSwordName", "Wypolerowany srebrny miecz");
Database.addText("pl.eqItemWeaponPolishedSilverSwordDescription", "Potężny miecz, jest pokryty kolcami.");
Database.addText("pl.eqItemWeaponTrollBludgeonName", "Maczuga trolla");
Database.addText("pl.eqItemWeaponTrollBludgeonDescription", "Zabrałeś tą maczugę trollowi pilnującemu most. Jest wolna, ale wydajnie niszczy twoich przeciwników.");
Database.addText("pl.eqItemWeaponTribalSpearName", "Plemienna włócznia");
Database.addText("pl.eqItemWeaponTribalSpearDescription", "Znalazłeś tą plemienną włócznię na zwłokach wojownika plemiennego zgubionego w dużej dziurze w ziemi. Na początku trudno się nią posługiwać, ale kiedy do niej przywykniesz, będzie dobrą bronią.");
Database.addText("pl.eqItemWeaponSummoningTribalSpearName", "Przyzywająca plemienna włócznia");
Database.addText("pl.eqItemWeaponSummoningTribalSpearDescription", "Ta magiczna plemienna włócznia, oprócz tego że jest trochę silniejsza od zwykłej, będzie często przyzywać wojowników plemiennych którzy pomogą ci w trakcie twoich zadań.");
Database.addText("pl.eqItemWeaponMonkeyWizardStaffName", "Berło małpiego czarodzieja");
Database.addText("pl.eqItemWeaponMonkeyWizardStaffDescription", "To berło należało do małpiego czarodzieja którego znalazłeś w jaskini. Będzie często strzelać magicznymi kulami sama z siebie, celując w twoich przeciwników.");
Database.addText("pl.eqItemWeaponEnchantedMonkeyWizardStaffName", "Berło małpiego czarodzieja (zaczarowane)");
Database.addText("pl.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "To berło jest szybsze niż jego zwykła wersja i będzie strzelać większą ilością magicznych kul.");
Database.addText("pl.eqItemWeaponGiantSpoonName", "Ogromna łyżka");
Database.addText("pl.eqItemWeaponGiantSpoonDescription", "Ta ogromna łyżka była w ogromnym czajniku w pustynnej fortecy. Nie wiesz czy ktoś używał jej kiedykolwiek jako łyżki, ale jeśli tak, to musiał to być ktoś naprawdę wielki. Raczej nie chcesz się z nim spotkać.");
Database.addText("pl.eqItemWeaponGiantSpoonOfDoomName", "Ogromna łyżka zagłady");
Database.addText("pl.eqItemWeaponGiantSpoonOfDoomDescription", "Ta ogromna łyżka jest jeszcze potężniejsza niż zwykła ogromna łyżka którą możesz znaleźć, na przykład, w czajniku. Jest bardzo wolna.");
Database.addText("pl.eqItemWeaponScytheName", "Kosa");
Database.addText("pl.eqItemWeaponScytheDescription", "Mówi się że ta kosa należała do samej śmierci. Jest niesamowicie szybka.");
Database.addText("pl.eqItemHatMerchantHatName", "Kapelusz handlarza");
Database.addText("pl.eqItemHatMerchantHatDescription", "Ten kapelusz został ci sprzedany przez cukierkowego handlarza. Kupiec cukierków uwielbia cukierki. Ten kapelusz pomnoży ilość cukierków którą znajdziesz w zadaniach przez 7!");
Database.addText("pl.eqItemHatSorceressHatName", "Kapelusz czarownicy");
Database.addText("pl.eqItemHatSorceressHatDescription", "Ten kapelusz został tobie sprzedany przez czarownicę. Wzmocni efekty twoich zaklęć i mikstur");
Database.addText("pl.eqItemHatOctopusKingCrownName", "Korona króla ośmiornic");
Database.addText("pl.eqItemHatOctopusKingCrownDescription", "Kiedy nosisz tą koronę, czujesz się bardziej pewny siebie. Nie daje ci żadnej przewagi w zadaniach, ale pewność siebie jest ważna!");
Database.addText("pl.eqItemHatOctopusKingCrownWithJaspersName", "Korona króla ośmiornic z jaspisami");
Database.addText("pl.eqItemHatOctopusKingCrownWithJaspersDescription", "Ta zaczarowana korona jest zrobiona ze złota i czerwonych jaspisów. W zadaniach, będzie często rzucać potężnymi kulami ognia dookoła ciebie. Jest błyszcząca!");
Database.addText("pl.eqItemHatOctopusKingCrownWithObsidianName", "Korona króla ośmiornic z obsydianem");
Database.addText("pl.eqItemHatOctopusKingCrownWithObsidianDescription", "Ta zaczarowana korona jest zrobiona ze złota i obsydianu. Jest piękna. W zadaniach, będzie co jakiś czas przyzywać króla ośmiornic aby walczył po twojej stronie. Jaki mackowaty sprzymierzeniec!");
Database.addText("pl.eqItemGlovesLeatherGlovesName", "Skórzane rękawice");
Database.addText("pl.eqItemGlovesLeatherGlovesDescription", "Te rękawice nic nie robią. Ale są przynajmniej miękkie i wygodne!");
Database.addText("pl.eqItemGlovesRedEnchantedGlovesName", "Czerwone zaczarowane rękawiczki");
Database.addText("pl.eqItemGlovesRedEnchantedGlovesDescription", "Te zaczarowane rękawiczki emitują delikatne czerwone światło gdy znajdujesz się w ciemności. W zadaniach, będą losowo rzucały małe ogniste kule w kierunku twoich przeciwników, co może okazać się bardzo przydatne.");
Database.addText("pl.eqItemGlovesPinkEnchantedGlovesName", "Różowe zaczarowane rękawiczki");
Database.addText("pl.eqItemGlovesPinkEnchantedGlovesDescription", "Te zaczarowane rękawiczki zostawiają różowe ślady na wszystkim czego dotkniesz. W zadaniach, będą cię stale leczyć.");
Database.addText("pl.eqItemBootsRocketBootsName", "Rakietowe buty");
Database.addText("pl.eqItemBootsRocketBootsDescription", "Te odjazdowe pozwalają ci skakać w powietrzu w taki sposób, że po prostu latasz!");
Database.addText("pl.eqItemBootsLeatherBootsName", "Skórzane buty");
Database.addText("pl.eqItemBootsLeatherBootsDescription", "Zwykłe skórzane buty. Nic specjalnego.");
Database.addText("pl.eqItemBootsBootsOfIntrospectionName", "Buty introspekcji");
Database.addText("pl.eqItemBootsBootsOfIntrospectionDescription", "Nie śpiesz się, złap oddech, odpocznij.Nosząc te buty, nie będziesz się poruszał dopóki dotykasz podłoża.");
Database.addText("pl.eqItemBodyArmoursLightweightBodyArmourName", "Lekka zbroja");
Database.addText("pl.eqItemBodyArmoursLightweightBodyArmourDescription", "Ta zbroja da ci lekką obronę. Będziesz trochę bardziej odporny na na ataki twoich przeciwników.");
Database.addText("pl.eqItemBodyArmoursKnightBodyArmourName", "Rycerska zbroja");
Database.addText("pl.eqItemBodyArmoursKnightBodyArmourDescription", "Ta mocna zbroja będzie cię ochraniać. Będziesz bardziej odporny na ataki nieprzyjaciół.");
Database.addText("pl.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Zaczarowana rycerska zbroja");
Database.addText("pl.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ta zbroja jest wyjątkowa. Będziesz BARDZO odporny na ataki nieprzyjaciół, ale obrażenia zadawane przez ciebie zostaną podzielone przez 2.");
Database.addText("pl.mapVillageForgeBuyWoodenSwordButton", "Kup drewniany miecz (150 cukierków)");
Database.addText("pl.mapVillageForgeBuyWoodenSwordSpeech", "Dziękuję! Ten drewniany miecz jest słaby, ale to zawsze coś.");
Database.addText("pl.mapVillageForgeBuyIronAxeButton", "Kup żelazną siekierę (400 cukierków)");
Database.addText("pl.mapVillageForgeBuyIronAxeSpeech", "Mam nadzieje że spodoba ci się ta siekiera. Właśnie ją dla ciebie naostrzyłem!");
Database.addText("pl.mapVillageForgeBuyPolishedSilverSwordButton", "Kup wypolerowany srebrny miecz (2 000 cukierków)");
Database.addText("pl.mapVillageForgeBuyPolishedSilverSwordSpeech", "Stworzenie tego miecza zajęło mi bardzo długo. Zapewniam cię, jest warty swojej ceny.");
Database.addText("pl.mapVillageForgeBuyLightweightBodyArmourButton", "Kup lekką zbroję (15 000 cukierków)");
Database.addText("pl.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ta zbroja zapewni ci ochronę przed twoimi przeciwnikami.");
Database.addText("pl.mapVillageForgeBuyScytheButton", "Kup kosę (5 000 000 cukierków)");
Database.addText("pl.mapVillageForgeBuyScytheSpeech", "Stworzenie tej kosy zajęło mi parę miesięcy. To prawdziwe dzieło sztuki. Jest najprawdopodobniej najszybszą bronią jakiej będziesz w stanie użyć. Powodzenia!");
Database.addText("pl.wishingWellThrowFirstCandyButton", "Wrzuć cukierek do studni");
Database.addText("pl.wishingWellCandyIntroductionSpeech", "Witaj podróżniku! Jestem studnią życzeń. Będę spełniać twoje życzenia w zamian za słodycze! Kiedy wrzucisz we mnie cukierki, uleczę cię.");
Database.addText("pl.wishingWellThrewCandiesSpeech", "Zostałeś uleczony!");
Database.addText("pl.wishingWellNoWoundSpeech", "Nie masz niczego do uleczenia!");
Database.addText("pl.wishingWellThrowFirstLollipopButton", "Wrzuć lizaka do studni");
Database.addText("pl.wishingWellLollipopIntroductionSpeech", "Witaj podróżniku! Jestem studnią życzeń. Będę spełniać twoje życzenia w zamian za słodycze! Gdy wrzucisz we mnie lizaki, zamienię je na cukierki!");
Database.addText("pl.wishingWellThrewLollipopsSpeech", "Twoje lizaki zostały zamienione na cukierki! Dwa lizaki na jeden cukierek.");
Database.addText("pl.wishingWellThrowChocolateBarButton", "Wrzuć tabliczkę czekolady do studni.");
Database.addText("pl.wishingWellChocolateBarIntroductionSpeech", "Witaj podróżniku! Jestem studnią życzeń. Będę spełniać twoje życzenia w zamian za słodycze! Uwielbiam czekoladę. Naprawdę ją kocham. Za każdą tabliczkę czekolady którą we mnie wrzucisz, łącznie z tą, dostaniesz jedną możliwość zaczarowania wybranego przez ciebie przedmiotu.");
Database.addText("pl.wishingWellThrewChocolateBarSpeech", "Który przedmiot chcesz zaczarować?");
Database.addText("pl.wishingWellThrowPainAuChocolatButton", "Wrzuć pain au chocolat do studni");
Database.addText("pl.wishingWellPainAuChocolatIntroductionSpeech", "Witaj podróżniku! Jestem studnią życzeń. Będę spełniać twoje życzenia w zamian za słodycze! Gdy wrzucisz we mnie pain au chocolat, dostaniesz specjalny prezent. Wybieraj rozważnie.");
Database.addText("pl.wishingWellThrewPainAuChocolatSpeech", "Dzięki za pain au chocolat! Możesz teraz wybrać swój prezent.");
Database.addText("pl.wishingWellChooseGift", "Wybierz swój prezent!");
Database.addText("pl.wishingWellChooseGiftButton", "Wybierz");
Database.addText("pl.wishingWellGiftDoneSpeech", "Gotowe! Masz nowy prezent. Pojawi się w twoim panelu statystyk w ekwipunku.");
Database.addText("pl.wishingWellNoPossibleEnchantment", "Nie możesz teraz nic zaczarować");
Database.addText("pl.wishingWellChooseEnchantment", "Wybierz czar");
Database.addText("pl.wishingWellEnchantButton", "Zaczaruj");
Database.addText("pl.wishingWellEnchantmentDoneSpeech", "Proszę bardzo! Twój przedmiot jest teraz zaczarowany.");
Database.addText("pl.pierLighthouseButton", "Popłyń do latarni morskiej łódką");
Database.addText("pl.pierTheSeaButton", "Wskocz do morza");
Database.addText("pl.lonelyHouseOpenBox", "Otwórz pudełko");
Database.addText("pl.lonelyHouseShakeBox", "Wstrząśnij pudełkiem");
Database.addText("pl.lonelyHouseBreakLock", "Wyłam zamek");
Database.addText("pl.lonelyHouseKickBox", "Kopnij pudełko");
Database.addText("pl.lonelyHouseAskTheBoxToOpenItself", "Poproś pudełko żeby się otworzyło");
Database.addText("pl.lonelyHouseLureTheBoxWithACandy", "Zaoferuj pudełku cukierka");
Database.addText("pl.lonelyHouseTakeTheBox", "Weź pudełko ze sobą, prawdopodobnie potrzebujesz klucza żeby je otworzyć.");
Database.addText("pl.lonelyHouseOpenBoxResult", "Pudełko jest zakluczone");
Database.addText("pl.lonelyHouseShakeBoxResult", "Nic się nie dzieje");
Database.addText("pl.lonelyHouseBreakLockResult", "Zamek wytrzymuje");
Database.addText("pl.lonelyHouseKickBoxResult", "Stopa cię trochę rozbolała, ale nic się nie dzieje.");
Database.addText("pl.lonelyHouseAskTheBoxToOpenItselfResult", "...wiesz że gadasz do pudełka, prawda?");
Database.addText("pl.lonelyHouseLureTheBoxWithACandyResult", "Pudełko się nie przejmuje");
Database.addText("pl.lonelyHouseTakeTheBoxResult", "W tym candy box musi być coś ciekawego.");
Database.addText("pl.lollipopFarmConstructMill", "Zbuduj młyn (10 000 lizaków)");
Database.addText("pl.lollipopFarmFeedMill", "Nakarm młyn");
Database.addText("pl.lollipopFarmCurrentCandiesProduction", "Bieżąca produkcja cukierków");
Database.addText("pl.lollipopFarmDigPond", "Wykop staw (100 000 lizaków)");
Database.addText("pl.lollipopFarmBuyLolligator", "Kup lizakogotora (1200 cukierków)");
Database.addText("pl.lollipopFarmLolligatorsConversionText", "Zamiana cukierki -> lizaki włączona");
Database.addText("pl.lighthouseAskButton", "Spytaj");
Database.addText("pl.lighthouseQuestionWho", "Kim jesteś?");
Database.addText("pl.lighthouseQuestionWhoSpeech", "Jestem bardzo starym cyklopem");
Database.addText("pl.lighthouseQuestionWhat", "Co ty tu robisz?");
Database.addText("pl.lighthouseQuestionWhatSpeech", "Siedzę tutaj cały dzień, czekając na łódkę. Minęło już sporo czasu od kiedy ostatni raz widziałem łódkę, ale muszę tu zostać, patrzyć się na morze, ponieważ może przypłynąć łódka.");
Database.addText("pl.lighthouseQuestionWhyEatCandies", "Dlaczego powinienem jeść cukierki?");
Database.addText("pl.lighthouseQuestionWhyEatCandiesSpeech", "Bo są dobre dla twojego zdrowia!");
Database.addText("pl.lighthouseQuestionCandyBox", "Czym jest candy box?");
Database.addText("pl.lighthouseQuestionCandyBoxSpeech", "Jest to bardzo stare pudełko o którym mówi się że zawiera wszystkie cukierki świata. Legendy mówią że komukolwiek uda się je otworzyć, miałby tak dużo cukierków że wszystko byłoby możliwe.");
Database.addText("pl.lighthouseQuestionDragon", "Smok powiedział mi żeby przyjść tutaj, jeśli chcę cukierków.");
Database.addText("pl.lighthouseQuestionDragonSpeech", "Ach, rozumiem... Cóż, nie jestem w stanie zapewnić ci cukierków bezpośrednio, ale jestem w stanie dać ci coś niezbędnego potrzebnego do uzyskania MNÓSTWA cukierków. Lecz najpierw muszę cię sprawdzić. To co mam nie może być oddane do byle kogo. Rozwiąż tę zagadkę i będzie twoje.");
Database.addText("pl.lighthouseFoundStone", "Gratulacje! Zdałeś test i znalazłeś kamień. Jest bezcenny, ale przydatny tylko jeśli masz trzy pozostałe. Powodzenia!");
Database.addText("pl.lighthouseFoundStoneAgain", "Dobra robota, rozwiązałeś zagadkę po raz kolejny. Chyba lubisz to robić.");
Database.addText("pl.saveLocalSaveTitle", "Zapisz w przeglądarce");
Database.addText("pl.saveLocalSaveWhy", "Wybierz zapis w przeglądarce jeśli chcesz kontynuować na tym urządzeniu i przeglądarce.");
Database.addText("pl.saveLocalSaveWarning0", "Twoja przeglądarka chyba nie obsługuje HTML5");
Database.addText("pl.saveLocalSaveWarning1", "Powinieneś zaktualizować swoją przeglądarkę aby skorzystać z funkcji zapisu w przeglądarce.");
Database.addText("pl.saveLocalSaveChooseSlot", "Wybierz miejsce do zapisania :");
Database.addText("pl.saveLocalSaveAutosaveEnabled", "Autozapis włączony");
Database.addText("pl.saveLocalSaveChooseWhatToDo", "Wybierz co zrobić :");
Database.addText("pl.saveLocalSaveSaveButton", "Zapisz");
Database.addText("pl.saveLocalSaveAutosaveButton", "Zapisuj automatycznie co 10 minut");
Database.addText("pl.saveLocalSaveDisableAutosaveButton", "Wyłącz autozapis");
Database.addText("pl.saveFileSaveTitle", "Zapis tekstowy");
Database.addText("pl.saveFileSaveWhy0", "Wybierz zapis tekstowy jeśli :");
Database.addText("pl.saveFileSaveWhy1", "Chcesz kontynuować grę na innym urządzeniu bądź przeglądarce");
Database.addText("pl.saveFileSaveWhy2", "Chcesz się podzielić swoim zapisem z kimś innym");
Database.addText("pl.saveFileSaveWhy3", "Z jakiegoś powodu chcesz opróżnić pamięć podręczną swojej przeglądarki");
Database.addText("pl.saveFileSaveWhy4", "(co usunie twoje zapisy przeglądarkowe)");
Database.addText("pl.saveFileSaveButton", "Dostań swoją obecną grę w formie tekstowej");
Database.addText("pl.saveFileSaveWarning", "Teraz skopiuj gdzieś ten tekst! (na przykład, do pliku)");
Database.addText("pl.saveLocalLoadTitle", "Wczytaj z przeglądarki");
Database.addText("pl.saveLocalLoadYouCan", "Możesz wczytać zapis przeglądarkowy korzystając z tych linków:");
Database.addText("pl.saveLocalLoadThanksTo", "Dzięki magii HTML5, będziesz w stanie korzystać z tych zapisów nawet offline.");
Database.addText("pl.saveFileLoadTitle", "Wczytaj tekst");
Database.addText("pl.saveFileLoadPaste", "Wklej swój zapis poniżej, potem kliknij guzik \"Wczytaj\"");
Database.addText("pl.saveFileLoadButton", "Wczytaj");
Database.addText("pl.mountainsText0", "Zauważyłeś coś pomiędzy górami!");
Database.addText("pl.mountainsText1", "Wygląda interesująco. Może się przyda.");
Database.addText("pl.mountainsTextButton", "Wespnij się na góry aby zdobyć to coś");
Database.addText("pl.mountainsTextAfter", "Znalazłeś sprężynowe urządzenie do podskakiwania! Jest teraz w twoim ekwipunku.");
Database.addText("pl.secondHouseIntroSpeech", "Witaj, jestem handlarzem cukierków. Dla cukierków zrobię wszystko. Czego potrzebujesz?");
Database.addText("pl.secondHouseLollipop1Speech", "To jest cytrynowy lizak. Mój ulubiony! Kosztuje 60 cukierków, ale jest tego warty.");
Database.addText("pl.secondHouseLollipop2Speech", "To jest truskawkowy lizak. Jest bardzo smaczny. Lubię jego czerwony kolor. Tylko 60 cukierków!");
Database.addText("pl.secondHouseLollipop3Speech", "To jest dyniowy lizak. Założę się że nigdy takiego nie jadłeś! 60 cukierków i jest twój.");
Database.addText("pl.secondHouseLollipopButtonText", "Kup tego lizaka (60 cukierków)");
Database.addText("pl.secondHouseMerchantHatSpeech", "Mogę ci sprzedać mój kapelusz, ale jest bardzo cenny... Będziesz musiał mi dać za niego mnóstwo cukierków. Powiedzmy... milion cukierków. To uczciwa cena, prawda?");
Database.addText("pl.secondHouseMerchantHatButtonText", "Kup kapelusz handlarza (1 000 000 cukierków)");
Database.addText("pl.secondHouseTimeRingSpeech", "To jest pierścień czasu. Jest magiczny. Pozwoli ci zwolnić czas jeśli wpadniesz w tarapaty.");
Database.addText("pl.secondHouseTimeRingButtonText", "Kup pierścień czasu (500 cukierków)");
Database.addText("pl.secondHouseLeatherGlovesSpeech", "Te skórzane rękawice zostały stworzone z najwyższej jakości wielbłądziej skóry. Mam ich mnóstwo, dlatego są takie tanie : tylko 300 cukierków!");
Database.addText("pl.secondHouseLeatherBootsButtonText", "Kup parę skórzanych butów (300 cukierków)");
Database.addText("pl.secondHouseLeatherBootsSpeech", "Te skórzane buty wysokiej jakości, stworzone z wielbłądziej skóry, ocieplą twoje stopy.");
Database.addText("pl.secondHouseLeatherGlovesButtonText", "Kup parę skórzanych rękawic (300 cukierków)");
Database.addText("pl.secondHouseChocolateBarSpeech", "To jest tabliczka czekolady. Nie wiem do czego służy, ale wiem że jest bardzo rzadka, co wyjaśnia jej cenę. 800 cukierków i jest twoja!");
Database.addText("pl.secondHouseChocolateBarButtonText", "Kup tabliczkę czekolady (800 cukierków)");
Database.addText("pl.outsideTheHoleButton", "Wskocz do wielkiej dziury w ziemi");
Database.addText("pl.theCaveExitText0", "W końcu znalazłeś wyjście z jaskini.");
Database.addText("pl.theCaveExitText1", "Widzisz stąd wielki las.");
Database.addText("pl.theCaveExitButtonText", "Wyjdź z jaskini");
Database.addText("pl.theCaveFirstSentenceWentStraight", "Poszedłeś prosto.");
Database.addText("pl.theCaveFirstSentenceWentLeft", "Poszedłeś w lewo.");
Database.addText("pl.theCaveFirstSentenceWentRight", "Poszedłeś w prawo");
Database.addText("pl.theCaveFirstSentenceYouAre", "Jesteś w jaskini. Masz przed sobą trzy ścieżki.");
Database.addText("pl.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Zauważyłeś dziwną rzecz na ziemi przed tobą.");
Database.addText("pl.theCavePattern_ChocolateBarNowSeeChocolateBar", "Zauważyłeś tabliczkę czekolady.");
Database.addText("pl.theCavePattern_TreasureMapSentence", "Widzisz małe kamyki ułożone w dziwny sposób na ziemi.");
Database.addText("pl.theCavePattern_MonkeyWizardSentence", "Natknąłeś się na nagiego małpiego czarodzieja.");
Database.addText("pl.theCavePattern_MonkeyWizardButton", "Zmierz się z nim");
Database.addText("pl.theCavePattern_OctopusKingSentence", "Natknąłeś się na króla ośmiornic. Jest paskudny.");
Database.addText("pl.theCavePattern_OctopusKingButton", "Zmierz się z nim");
Database.addText("pl.fortressInsideText0", "Jesteś w pustynnej fortecy.");
Database.addText("pl.fortressInsideText1", "Masz wybór pomiędzy trzema drzwiami.");
Database.addText("pl.fortressInsideText2", "Każde z nich prowadzi do dużego pokoju ze skarbem");
Database.addText("pl.fortressInsideEnterRoom1", "Wejdź do pierwszego pokoju");
Database.addText("pl.fortressInsideEnterRoom2", "Wejdź do drugiego pokoju");
Database.addText("pl.fortressInsideEnterRoom3", "Wejdź do trzeciego pokoju");
Database.addText("pl.treasureButtonDig", "Kop");
Database.addText("pl.treasureButtonYouFound", "Znalazłeś trzy tabliczki czekolady!");
Database.addText("pl.sorceressHutHello", "Witaj, jestem czarodziejką. Mogę cię nauczyć co nieco o magii. Mogę ci także dać interesujące rzeczy, albo rzucać za ciebie zaklęcia. Ale wszystko ma swoją cenę! A tą ceną będą lizaki... Mnóstwo lizaków.");
Database.addText("pl.sorceressHutClickedGrimoire", "To jest grimuar stworzony dla początkujących. Nosząc go ze sobą w zadaniach, będziesz w stanie rzucać proste, ale przydatne zaklęcia. Niezbędny! Tylko 5 000 lizaków.");
Database.addText("pl.sorceressHutBuyGrimoireButton", "Kup Ten grimuar (5 000 lizaków)");
Database.addText("pl.sorceressHutBuyGrimoireSpeech", "Dziękuję za kupno! Dzięki temu grimuarowi będziesz w stanie rzucać trzy zaklęcia. Powodzenia!");
Database.addText("pl.sorceressHutClickedGrimoire2", "To jest zaawansowany grimuar. Nosząc go ze sobą w zadaniach, będziesz w stanie rzucać 2 zaawansowane zaklęcia. Sama go napisałam, a to nie było proste. 20 000 lizaków to uczciwa cena.");
Database.addText("pl.sorceressHutBuyGrimoire2Button", "Kup ten grimuar (20 000 lizaków)");
Database.addText("pl.sorceressHutBuyGrimoire2Speech", "Dziękuję za kupno! Dzięki temu grimuarowi będziesz w stanie rzucać dwa zaawansowane zaklęcia. Używaj ich rozważnie!");
Database.addText("pl.sorceressHutClickedCauldron", "To jest mój kocioł. Pozwala mi warzyć magiczne mikstury. Mogę ci go sprzedać ale jest bardzo cenny... będzie cię kosztować 100 000 lizaków.");
Database.addText("pl.sorceressHutBuyCauldronButton", "Kup kocioł (100 000 lizaków)");
Database.addText("pl.sorceressHutBuyCauldronSpeech", "Wielkie dzięki! 100 000 lizaków dla mnie! W zestawie dołączyłam instrukcje użytkowania. Przyda ci się.");
Database.addText("pl.sorceressHutClickedHat", "Mam ładny kapelusz, wiem! Ale naprawdę nie mogę ci go sprzedać. Jest dla mnie baaaardzo cenny. Naprawdę, nie mogę. Nie nalegaj. Nie. Nie nie nie nie. Nie powinnam tego robić. Och, niech ci będzie! Sprzedam ci go, ale za 1 000 000 000 lizaków. I tak pewnie nie będziesz w stanie tyle zapłacić.");
Database.addText("pl.sorceressHutBuyHatButton", "Kup kapelusz (1 000 000 000 lizaków)");
Database.addText("pl.sorceressHutBuyHatSpeech", "Miliard lizaków dla mnieeeeee! Niestety nie mam już kapelusza... ale miliard lizaków, wow! ... Było warto.");
Database.addText("pl.cauldronPreviousPageButton", "Poprzednia strona");
Database.addText("pl.cauldronNextPageButton", "Następna strona");
Database.addText("pl.cauldronWhatYouWantToPut", "Co chcesz wsadzić do kotła?");
Database.addText("pl.cauldronWhatIsIn", "Co jest w kotle:");
Database.addText("pl.cauldronWhatYouCanDo", "Co możesz z tym zrobić:");
Database.addText("pl.castleBigRoomComment", "Wielki pokój");
Database.addText("pl.castleARoomComment", "Pokój");
Database.addText("pl.castleADarkRoomComment", "Nieoświetlony pokój");
Database.addText("pl.castleCastleEntranceComment", "Wejście do zamku");
Database.addText("pl.castleTowerEntranceComment", "Wejście do wieży");
Database.addText("pl.castleNougatMonsterComment", "Zaatakuj wielkiego nugatowego potwora");
Database.addText("pl.castleGuardsComment", "Zaatakuj strażników");
Database.addText("pl.castleStairsComment", "Schody");
Database.addText("pl.buttonBackToTheCastle", "Powrót do zamku");
Database.addText("pl.castleBigRoomHovenSpeechSad", "Cześć! Jestem bardzo starym Piecem Chlebowym. Kiedyś wypiekałem mnóstwo wspaniałych wyrobów cukierniczych, ale nikt już ze mnie nie korzysta. Może... może mógłbyś mi pomóc? Pozwól mi tylko zabrać od ciebie trochę słodyczy! Nie martw się, nie pożałujesz tego! Zaufaj mi.");
Database.addText("pl.castleBigRoomHovenNotEnough", "Och... nie masz wystarczającej ilości słodyczy, nie mogę nic zrobić. Jestem bezużyteczny. Jestem Bezużytecznym Piecem Chlebowym, tak powinieneś mnie nazywać.");
Database.addText("pl.castleBigRoomHovenSpeechMadePainAuChocolat", "Hurra! Wielkie dzięki! Wykorzystałem  100 cukierków oraz tabliczkę czekolady, i stworzyłem... pain au chocolat! Jest to mój ulubiony wypiek cukierniczy, mam nadzieje że też go polubisz!");
Database.addText("pl.castleBigRoomHovenSpeechHappy", "Hej! Jeżeli chcesz żebym wypiekł jeszcze coś, po prostu mi powiedz! Z przyjemnością ci pomogę.");
Database.addText("pl.castleBigRoomHovenSpeechHappyNotEnough", "Och, niestety nie masz wystarczającej ilości słodyczy. Potrzebuje 100 cukierków i tabliczkę czekolady. Wróć kiedy będziesz miał składniki");
Database.addText("pl.castleBigRoomHovenLetHovenTakeButton", "Pozwól Piecowi zabrać wszystkie cukierki których potrzebuje");
Database.addText("pl.castleBigRoomHovenThanks", "Dzięki Piecu!");
Database.addText("pl.dragonStopTickling", "Hej, ty! Proszę, przestań mnie łaskotać.");
Database.addText("pl.dragonStopTicklingButton", "Yyyy, przepraszam, myślałem że miałem cię zaatakować.");
Database.addText("pl.dragonTalking", "Jestem Smok, a to jest mój zamek. Widzę że udało ci się wejść, musisz być bardzo odważny... Mogę ci pomóc. Czego poszukujesz?");
Database.addText("pl.dragonTalkingChallengeButton", "Wyzwania");
Database.addText("pl.dragonTalkingFameButton", "Sławy");
Database.addText("pl.dragonTalkingCandiesButton", "Cukierków");
Database.addText("pl.dragonTalkingChallengeSpeech", "Ach, więc chcesz wyzwania? Myślę że powinieneś wybrać się na wycieczkę do piekła, wszyscy wiedzą że Diabeł jest trudnym przeciwnikiem. Wskocz mi na plecy to cię tam zabiorę!");
Database.addText("pl.dragonTalkingFameSpeech", "Najlepszym sposobem na zostanie sławnym jest zmierzenie się z samym deweloperem. Wiem gdzie mieszka więc mogę cię tam zabrać. Ale bądź gotowy, to nie będzie łatwe.");
Database.addText("pl.dragonTalkingCandiesSpeech", "Ostatecznie, rzeczą której wszyscy chcemy to cukierki, prawda? Myślę że mój znajomy mógłby ci z tym pomóc. Łatwo go rozpoznasz, ma tylko jedno oko. Po prostu powiedz mu że mnie znasz.");
Database.addText("pl.dragonTalkingChallengeAnswer", "Chodźmy!");
Database.addText("pl.dragonTalkingFameAnswer", "Jestem gotowy!");
Database.addText("pl.dragonTalkingCandiesAnswer", "Ok, dzięki!");
Database.addText("pl.buttonBackToCastle", "Powrót do zamku");
Database.addText("pl.talkingCandySpeechNoBox", "Hej! Jestem Mówiący Cukierek. Prawie przeszedłeś grę. Teraz tylko musisz znaleźć candy box. Znajduje się w domu na północ od wioski. To już ostatni krok!");
Database.addText("pl.talkingCandySpeech1", "Hej! Jestem Mówiący Cukierek. Gratulacje, przeszedłeś grę! Otworzę dla ciebie candy box, będzie to twoją nagrodą. Mam kontynuować?");
Database.addText("pl.talkingCandySpeech2", "Gotowe! Możesz go otworzyć. Mam nadzieję że gra się podobała :)");
Database.addText("pl.talkingCandyButton", "Tak!!");
Database.addText("pl.lighthousePuzzleResetButton", "Resetuj");
Database.addText("ru.mapVillageComment", "Деревня");
Database.addText("ru.mapFortressComment", "Пустынная крепость");
Database.addText("ru.mapATreeComment", "Дерево");
Database.addText("ru.mapTheDesertComment", "Пустыня");
Database.addText("ru.mapWishingWellComment", "Колодец желаний");
Database.addText("ru.mapLonelyHouseComment", "Одинокий домик");
Database.addText("ru.mapForestComment", "Лес");
Database.addText("ru.mapCastleEntranceComment", "Вход в замок");
Database.addText("ru.mapCastleComment", "Замок");
Database.addText("ru.mapDragonComment", "Дракон");
Database.addText("ru.candyBoxEatCandiesButton", "Съесть все конфеты");
Database.addText("ru.candyBoxThrowCandiesButton", "Бросить 10 конфет на землю");
Database.addText("ru.mapVillageAHouseComment", "Дом");
Database.addText("ru.mapVillageForgeComment", "Кузница");
Database.addText("ru.buttonBackToTheMap", "Назад к карте");
Database.addText("ru.mapSorceressHutComment", "Хижина колдуньи");
Database.addText("ru.buttonBackToTheVillage", "Назад в деревню");
Database.addText("ru.mapATreeIntroductionSpeech", "Привет, я - белочка. Я могу дать тебе конфет и других вещей. Я знаю, как сильно ты любишь конфеты. Но мне так одиноко в лесу.");
Database.addText("ru.mapATreeIntroductionButton", "Чем я могу тебе помочь?");
Database.addText("ru.mapATreeFirstQuestion", "Я задам тебе несколько вопросов. Если ответишь верно, самые сладкие сладости станут твоими! Первый вопрос: ты на самом деле любишь конфеты? (отвечай на английском)");
Database.addText("ru.mapATreeSecondQuestion", "Правильно! Вот 20 конфет. А теперь продолжи этот буквенный ряд, и получишь новую награду: S, E, I, D, N, A, ?");
Database.addText("ru.mapATreeThirdQuestion", "Конфеты! Держи ещё 100 конфет. Следующий вопрос: сколько конфет у самого конфетного человека в мире?");
Database.addText("ru.mapATreeFourthQuestion", "Вот тебе ещё 500 конфет! Следующая награда должна быть куда более интересной... Вот загадка: В древнем лесу растёт очень старое дерево, в котором живут самые умные животные в этом мире. Говорят, что у этого дерева 60 корней, 360 веток и 2160 листов. Сколько отметин можно найти на стволе этого дерева?");
Database.addText("ru.mapATreeFifthQuestion", "Поздравляю! Естественно, я говорила о своём дереве. Вот тебе 3 леденца. Используй их мудро! Следующая загадка, слушай внимательней: В полнолуние я брошу жёлтую шляпу в красное море. Какой станет шляпа?");
Database.addText("ru.mapATreeTicTacToeIntro", "Отлично сказано! Это не было так уж сложно. Вот три шоколадных плитки. Чтобы получить следующую награду, мы слегка поменяем правила игры. Тебе нужно будет сыграть со мною в игру! Ты готов?");
Database.addText("ru.mapATreeTicTacToeIntroButton", "Естественно, готов!");
Database.addText("ru.mapATreeTicTacToeLetsPlay", "Игра называется \"крестики-нолики\". Мы играем на игровом поле размером 3 на 3. Ты будешь играть крестиками, а я - ноликами. Будем ставить знаки по очереди, и цель - получить три знака в ряд. Ходи первым!");
Database.addText("ru.mapATreeTicTacToeNobodyWins", "Игровое поле заполнено, но у нас обоих не получилось разместить три знака в ряд: никто не победил! Хочешь попробовать снова?");
Database.addText("ru.mapATreeTicTacToeYouLose", "Я поставила три знака в ряд! Я выиграла. Хочешь попробовать снова?");
Database.addText("ru.mapATreeTicTacToeTryAgainButton", "Да, хочу");
Database.addText("ru.mapATreeTicTacToeYouWin", "Ух, неожиданный ход. Но у тебя три в ряд, я не могу это оспорить. Ты выиграл! Держи ключ, он открывает один из закрытых домов в деревне возле леса.");
Database.addText("ru.mapATreeTicTacToeAnymoreSweet", "Спасибо, белочка. Ещё игры есть?");
Database.addText("ru.mapATreeNoMoreChallenge", "К сожалению, больше игр для тебя не осталось. Было очень весело играть с тобой, спасибо!");
Database.addText("ru.buttonExitQuestKeeping", "Покинуть квест (и получить то, что Вы нашли)");
Database.addText("ru.buttonExitQuestNoKeeping", "Покинуть квест (Вы не получите то, что нашли)");
Database.addText("ru.buttonExitQuestNoKeepingBecauseLose", "Покинуть квест (Вы не получите то, что нашли, потому что вы проиграли)");
Database.addText("ru.mapVillageLockedHouseComment", "Закрытый дом");
Database.addText("ru.mapVillageForgeIntroductionSpeech", "Привет! Я кузнец. Я могу продать Вам разнообразное оружие и предметы экипировки.");
Database.addText("ru.mapVillageForgeIntroductionSpeechNoMoreToSell", "Привет! Я кузнец. К сожалению, у меня пока нечего Вам продать. Может, вернётесь позже?");
Database.addText("ru.mapVillageFifthHouseNoWeaponSpeech", "Привет. Мой подвал полон крыс, мне нужно от них избавиться... если бы кто-нибудь с оружием мог мне помочь...");
Database.addText("ru.mapVillageFifthHouseWeaponSpeech", "Эй, Вы! Я вижу, у Вас есть оружие! Если Вы убьёте крыс, наводняющих мой подвал, я Вас награжу!");
Database.addText("ru.mapVillageFifthHouseAgree", "Поехали!");
Database.addText("ru.mapVillageFifthHouseCellarDone", "Спасибо за то, что избавили меня от них! Вот что-то очень ценное Вам в награду: карта мира. Я думаю, Вы будете ей пользоваться чаще, чем это делал я.");
Database.addText("ru.mapVillageTheShopComment", "Магазин");
Database.addText("ru.mapBridgeComment", "Мост");
Database.addText("ru.mapFarmComment", "Ферма леденцов");
Database.addText("ru.mapCaveEntranceComment", "Вход в пещеру");
Database.addText("ru.mapLighthouseComment", "Маяк");
Database.addText("ru.mapPierComment", "Пирс");
Database.addText("ru.mapTheHoleComment", "Дыра");
Database.addText("ru.candyBoxRequestStatusBarUnlocked", "Попросить деталь интерфейса у разработчика (30 конфет)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedCfg", "Попросить ещё одну (5 конфет)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedSave", "И попросить ещё раз (5 конфет)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedHealthBar", "Попросить что-нибудь более офигенное (5 конфет)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedMap", "Последняя просьба! Она будет стоить всех потраченных конфет. (10 конфет)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedComment", "Вы разброкировали статус-панель (вверху)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedCfgComment1", "Сейчас у вас есть доступ к панели настроек.");
Database.addText("ru.candyBoxRequestStatusBarUnlockedCfgComment2", "Вы можете сменить язык игры, если хотите.");
Database.addText("ru.candyBoxRequestStatusBarUnlockedSaveComment", "Появилась дикая панель сохранения!");
Database.addText("ru.candyBoxRequestStatusBarUnlockedHealthBarComment", "Вот 100 очков здоровья. Они будут вам полезны.");
Database.addText("ru.cfgChooseLanguage", "Выберите язык:");
Database.addText("ru.cfgInvertColors", "Инвертировать цвета?");
Database.addText("ru.gridItemMainMapName", "Карта");
Database.addText("ru.gridItemMainMapDescription", "Карта мира");
Database.addText("ru.gridItemPogoStickName", "Пого-стик");
Database.addText("ru.gridItemPogoStickDescription", "Этот предмет позволяет Вам прыгать во время квестов!");
Database.addText("ru.gridItemTimeRingName", "Кольцо времени");
Database.addText("ru.gridItemTimeRingDescription", "Этот предмет дарит вам новую возможность во время квестов: вы можете замедлять время. Если всё происходит для вас слишком быстро, используйте кольцо времени!");
Database.addText("ru.gridItemThirdHouseKeyName", "Ключ от третьего дома");
Database.addText("ru.gridItemThirdHouseKeyDescription", "Этот ключ позволит вам войти в третий дом в деревне.");
Database.addText("ru.gridItemFeatherName", "Перо пустынной птицы");
Database.addText("ru.gridItemFeatherDescription", "Магическое перо позволяет вам прыгать выше, когда вы используете пого-стик!");
Database.addText("ru.gridItemFeatherDescriptionNoPogoStick", "По какой-то неизвестной причине вы чувствуете, что это перо могло бы быть вам полезно, если бы у вас был пого-стик...");
Database.addText("ru.gridItemSpongeName", "Волшебная губка");
Database.addText("ru.gridItemSpongeDescription", "Магическая губка позволяет вам сжиматься, словно губка, что делает возможным изменять ваш собственный рост.");
Database.addText("ru.gridItemFortressKeyName", "Ключ от пустынной крепости");
Database.addText("ru.gridItemFortressKeyDescription", "Этот ключ позволяет вам войти в очень древнюю крепость, расположенную над пустыней. Кто знает, что вы можете там найти?");
Database.addText("ru.gridItemHeartPendantName", "Кулон в виде сердца");
Database.addText("ru.gridItemHeartPendantDescription", "Этот кулон в виде сердца увеличит ваше здоровье, пока вы носите его на шее.");
Database.addText("ru.gridItemHeartPlugName", "Сердечный затвор");
Database.addText("ru.gridItemHeartPlugDescription", "Этот сердечный затвор, сделанный из железа, паучьих ножек и специального \"сердечного ликёра\" запечатанного в середине, увеличит ваше здоровье на 20 процентов.");
Database.addText("ru.gridItemBeginnersGrimoireName", "Гримуар новичка");
Database.addText("ru.gridItemBeginnersGrimoireDescription", "Гримуар предоставляет вам три заклинания, довольно лёгких для выполнения. Он на самом деле сделан для новичков. Вы сможете использовать кислотный дождь (большое количество капель кислоты обрушится на ваших врагов), заклинание огненных шаров (гигантский волшебный шар из огня полетит в ваших врагов), и заклинание телепорта (которое перенесёт вас в случайное место).");
Database.addText("ru.gridItemAdvancedGrimoireName", "Продвинутый гримуар");
Database.addText("ru.gridItemAdvancedGrimoireDescription", "Этот продвинутый гримуар предоставляет вам два заклинания: магическое заклинания удаления и заклинание шипастого щита. Первое заклинание удалит всю магию в процессе прохождения квеста, т.е. заклинания, сказанные вами и вашим врагом. Второе заклинание создаст вокруг вас щит из летающих шипов, который будет наносить урон вашим врагам во время контакта.");
Database.addText("ru.gridItemBlackMagicGrimoireName", "Черномагический гримуар");
Database.addText("ru.gridItemBlackMagicGrimoireDescription", "Вы нашли этот гримуар в пещере, до него было очень сложно добраться, и на это есть причины. Он предоставляет вам два могущественных черномагических заклинания. Первое создаст перед вами гигантскую обсидиановую стену, которая может быть полезна для замедления ваших врагов. Второе призовёт рой демонов, которые будут атаковать всё вокруг, даже вас. Осторожней с этим заклинанием.");
Database.addText("ru.gridItemUnicornHornName", "Рог единорога");
Database.addText("ru.gridItemUnicornHornDescription", "Этот волшебный рог принадлежал единорогу. Его могущество в исцелении очень вам поможет. Вы слышали, что этого единорога звали Чарли.");
Database.addText("ru.gridItemXinopherydonClawName", "Коготь ксиноферидона");
Database.addText("ru.gridItemXinopherydonClawDescription", "Этот коготь принадлежал ксиноферидону, двуглавому древнему животному, которое, как все полагали, вымерло. Он удвоит урон от оружия, которое вы используете.");
Database.addText("ru.gridItemPitchforkName", "Вилы");
Database.addText("ru.gridItemPitchforkDescription", "Эти особенные вилы позволят вам разрыхлять землю без вспахивания, тем самым сохраняя подземную экосистему. Они утроят производство леденцов на вашей ферме.");
Database.addText("ru.gridItemShellPowderName", "Скорлупная пудра");
Database.addText("ru.gridItemShellPowderDescription", "Скорлупная пудра часто используется фермерами, чтобы улучшить скорость роста их леденцов. Эта пудра увеличит производство леденцов втрое!");
Database.addText("ru.gridItemPName", "Камень P");
Database.addText("ru.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("ru.gridItemLName", "Камень L");
Database.addText("ru.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("ru.gridItemAName", "Камень А");
Database.addText("ru.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("ru.gridItemYName", "Камень Y");
Database.addText("ru.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("ru.gridItemRedSharkFinName", "Волшебный плавник красной рыбы");
Database.addText("ru.gridItemRedSharkFinDescription", "Этот волшебный плавник очень сильно увеличит урон, наносимый вашим заклинанием огненных шаров. Наконец-то эти файерболлы станут полезны.");
Database.addText("ru.gridItemGreenSharkFinName", "Волшебный плавник зелёной рыбы");
Database.addText("ru.gridItemGreenSharkFinDescription", "Этот волшебный плавник призовёт силу природы на вашу ферму леденцов! Производство будет увеличено впятеро.");
Database.addText("ru.gridItemPurpleSharkFinName", "A magical purple shark fin");
Database.addText("Волшебный", "ru.gridItemPurpleSharkFinDescription");
Database.addText("Этот", "ru.gridItemTalkingCandyName");
Database.addText("Говорящая", "ru.gridItemTalkingCandyDescription # Don't translate \"candy box\", keep it like that");
Database.addText("Эта", "ru.inventorySpecialNothingEqItem");
Database.addText("Ничего", "ru.eqItemWeaponWoodenSwordName");
Database.addText("Деревянный", "ru.eqItemWeaponWoodenSwordDescription");
Database.addText("Простой", "ru.eqItemWeaponIronAxeName");
Database.addText("Железная", "ru.eqItemWeaponIronAxeDescription");
Database.addText("Простой", "ru.eqItemWeaponPolishedSilverSwordName");
Database.addText("Отполированный", "ru.eqItemWeaponPolishedSilverSwordDescription");
Database.addText("Могучий", "ru.eqItemWeaponTrollBludgeonName");
Database.addText("Дубинка", "ru.eqItemWeaponTrollBludgeonDescription");
Database.addText("Вы", "ru.eqItemWeaponTribalSpearName");
Database.addText("Племенное", "ru.eqItemWeaponTribalSpearDescription");
Database.addText("Вы", "ru.eqItemWeaponSummoningTribalSpearName");
Database.addText("Призывающее", "ru.eqItemWeaponSummoningTribalSpearDescription");
Database.addText("Это", "ru.eqItemWeaponMonkeyWizardStaffName");
Database.addText("Посох", "ru.eqItemWeaponMonkeyWizardStaffDescription");
Database.addText("Этот", "ru.eqItemWeaponEnchantedMonkeyWizardStaffName");
Database.addText("Посох", "ru.eqItemWeaponEnchantedMonkeyWizardStaffDescription");
Database.addText("Этот", "ru.eqItemWeaponGiantSpoonName");
Database.addText("Гигантская", "ru.eqItemWeaponGiantSpoonDescription");
Database.addText("Эта", "ru.eqItemWeaponGiantSpoonOfDoomName");
Database.addText("The", "Гигантская Ложка Погибели");
Database.addText("ru.eqItemWeaponGiantSpoonOfDoomDescription", "Эта гигантская ложка куда более могущественна, чем обыкновенная гигантская ложка, которую вы могли найти, например, в гигантском чайнике. Хотя она довольно медленная.");
Database.addText("ru.eqItemWeaponScytheName", "Коса");
Database.addText("ru.eqItemWeaponScytheDescription", "Говорят, что эта коса принадлежала самой Смерти. Она очень быстрая.");
Database.addText("ru.eqItemHatMerchantHatName", "Шляпа купца");
Database.addText("ru.eqItemHatMerchantHatDescription", "Эту шляпу продал вам конфетный купец. Конфетный купец любит конфеты. Эта шляпа увеличит количество найденных вами во время квестов конфет на 7!");
Database.addText("ru.eqItemHatSorceressHatName", "Шляпа волшебницы");
Database.addText("ru.eqItemHatSorceressHatDescription", "Эту шляпу вам продала волшебница. Она повысит эффекты от ваших заклинаний и зелий.");
Database.addText("ru.eqItemHatOctopusKingCrownName", "Корона Короля Осьминогов");
Database.addText("ru.eqItemHatOctopusKingCrownDescription", "Вы чувствуете себя более уверенным, когда носите эту корону. Она не предоставляет никаких бонусов в квестах, но самооценка же важна!");
Database.addText("ru.eqItemHatOctopusKingCrownWithJaspersName", "Корона Короля Осьминогов, покрытая яшмой");
Database.addText("ru.eqItemHatOctopusKingCrownWithJaspersDescription", "Эта зачарованная корона сделана из золота и красной яшмы. Во время квестов она будет часто кастовать огненные шары вокруг вас. А ещё она сияет!");
Database.addText("ru.eqItemHatOctopusKingCrownWithObsidianName", "Корона Короля Осьминогов, покрытая обсидианом");
Database.addText("ru.eqItemHatOctopusKingCrownWithObsidianDescription", "Эта зачарованная корона сделана из золота и обсидиана. Она прекрасна. Во время квестов она призовёт Короля Осьминогов, который будет сражаться на вашей стороне. Тентаклистый союзник!");
Database.addText("ru.eqItemGlovesLeatherGlovesName", "Кожаные перчатки");
Database.addText("ru.eqItemGlovesLeatherGlovesDescription", "Эти перчатки ничего не делают. Но они мягкие и удобные, как минимум!");
Database.addText("ru.eqItemGlovesRedEnchantedGlovesName", "Красные зачарованные перчатки");
Database.addText("ru.eqItemGlovesRedEnchantedGlovesDescription", "Эти зачарованные перчатки испускают мягкий красный свет, когда вокруг вас темно. Во время квестов они будут кастовать маленькие огненные шары в сторону ваших врагов. Шары определённо могут быть полезны.");
Database.addText("ru.eqItemGlovesPinkEnchantedGlovesName", "Розовые зачарованные перчатки");
Database.addText("ru.eqItemGlovesPinkEnchantedGlovesDescription", "Эти зачарованные перчатки оставляют розовый след на всём, чего вы коснётесь. Во время квестов они будут постоянно вас лечить.");
Database.addText("ru.eqItemBootsRocketBootsName", "Ракетные ботинки");
Database.addText("ru.eqItemBootsRocketBootsDescription", "Эти крутые ракетные ботинки позволят вам прыгать в воздухе, так что вы практически будете летать!");
Database.addText("ru.eqItemBootsLeatherBootsName", "Кожаные ботинки");
Database.addText("ru.eqItemBootsLeatherBootsDescription", "Простые кожаные ботинки. Ничего особенного.");
Database.addText("ru.eqItemBootsBootsOfIntrospectionName", "Ботинки самоанализа");
Database.addText("ru.eqItemBootsBootsOfIntrospectionDescription", "Спокойно вдохните и успокойтесь. Если вы наденете эти ботинки, то никогда не тронетесь с места, если касаетесь земли.");
Database.addText("ru.eqItemBodyArmoursLightweightBodyArmourName", "Лёгкая броня");
Database.addText("ru.eqItemBodyArmoursLightweightBodyArmourDescription", "Эта броня увеличит защиту, но несильно. Вы будете немного устойчивее к атакам врага.");
Database.addText("ru.eqItemBodyArmoursKnightBodyArmourName", "Рыцарская броня");
Database.addText("ru.eqItemBodyArmoursKnightBodyArmourDescription", "Сильная броня, которая защитит вас. Вы будете более устойчивыми к атакам врага.");
Database.addText("ru.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Зачарованная рыцарская броня");
Database.addText("ru.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Это очень особенная броня. Вы будете КУДА БОЛЕЕ устойчивыми к атакам врага, но урон, наносимый вашим оружием, уменьшится вдвое.");
Database.addText("ru.mapVillageForgeBuyWoodenSwordButton", "Купить деревянный меч (150 конфет)");
Database.addText("ru.mapVillageForgeBuyWoodenSwordSpeech", "Спасибо за покупку! Этот деревянный меч довольно слаб, но для начала сойдёт.");
Database.addText("ru.mapVillageForgeBuyIronAxeButton", "Купить железный топор (400 конфет)");
Database.addText("ru.mapVillageForgeBuyIronAxeSpeech", "Надеюсь, вам понравится этот железный топор. Я его только что заточил для вас!");
Database.addText("ru.mapVillageForgeBuyPolishedSilverSwordButton", "Купить полированный серебряный меч (2 000 конфет)");
Database.addText("ru.mapVillageForgeBuyPolishedSilverSwordSpeech", "Я потратил много времени, чтобы сделать этот меч. Я уверяю вас, что он стоит своей цены.");
Database.addText("ru.mapVillageForgeBuyLightweightBodyArmourButton", "Купить лёгкую броню (15 000 конфет)");
Database.addText("ru.mapVillageForgeBuyLightweightBodyArmourSpeech", "Эта броня предоставит вам защиту от ваших врагов.");
Database.addText("ru.mapVillageForgeBuyScytheButton", "Купить косу (5 000 000 конфет)");
Database.addText("ru.mapVillageForgeBuyScytheSpeech", "У меня ушло несколько месяцев, чтобы сделать эту косу. Настоящее произведение искусства. Это, возможно, наибыстрейшее оружие, которым вы когда-либо воспользуетесь. Удачи!");
Database.addText("ru.wishingWellThrowFirstCandyButton", "Бросить конфету в колодец");
Database.addText("ru.wishingWellCandyIntroductionSpeech", "Привет, путешественник! Я - колодец желаний. Я исполню твои желания в обмен на сладости! Если ты бросишь в меня конфету, я исцелю твои раны.");
Database.addText("ru.wishingWellThrewCandiesSpeech", "Твои раны исцелены!");
Database.addText("ru.wishingWellNoWoundSpeech", "У тебя нет ран, чтобы их излечить!");
Database.addText("ru.wishingWellThrowFirstLollipopButton", "Бросить леденец в колодец");
Database.addText("ru.wishingWellLollipopIntroductionSpeech", "Привет, путешественник. Я - колодец желаний. Я исполню твои желания в обмен на сладости! Если ты бросишь в меня леденец, я превращу его в конфеты.");
Database.addText("ru.wishingWellThrewLollipopsSpeech", "Твои леденцы превращены в конфеты! Два леденца - одна конфета.");
Database.addText("ru.wishingWellThrowChocolateBarButton", "Бросить шоколадную плитку в колодец");
Database.addText("ru.wishingWellChocolateBarIntroductionSpeech", "Привет, путешественник. Я - колодец желаний. Я исполню твои желания в обмен на сладости! Я люблю шоколадные плитки. Очень люблю. За каждую шоколадную плитку, которую ты в меня бросишь, включая эту, ты получишь одно зачарование.");
Database.addText("ru.wishingWellThrewChocolateBarSpeech", "Какой предмет ты бы хотел зачаровать?");
Database.addText("ru.wishingWellThrowPainAuChocolatButton", "Бросить шоколадный хлеб в колодец");
Database.addText("ru.wishingWellPainAuChocolatIntroductionSpeech", "Привет, путешественник. Я - колодец желаний. Я исполню твои желания в обмен на сладости! Когда ты бросишь в меня шоколадный хлеб, я дам тебе особенный подарок. Выбирай с умом.");
Database.addText("ru.wishingWellThrewPainAuChocolatSpeech", "Спасибо за шоколадный хлеб! Теперь ты можешь выбрать себе подарок.");
Database.addText("ru.wishingWellChooseGift", "Выбирай себе подарок!");
Database.addText("ru.wishingWellChooseGiftButton", "Выбрать");
Database.addText("ru.wishingWellGiftDoneSpeech", "Готово! Теперь у тебя есть новый подарок. Он появится в твоём инвентаре.");
Database.addText("ru.wishingWellNoPossibleEnchantment", "Нет доступных зачарований");
Database.addText("ru.wishingWellChooseEnchantment", "Выбери зачарование");
Database.addText("ru.wishingWellEnchantButton", "Зачаровать");
Database.addText("ru.wishingWellEnchantmentDoneSpeech", "Воооот! Твой предмет зачарован.");
Database.addText("ru.pierLighthouseButton", "Отправиться на лодке на маяк");
Database.addText("ru.pierTheSeaButton", "Прыгнуть в море");
Database.addText("ru.lonelyHouseOpenBox", "Открыть коробку");
Database.addText("ru.lonelyHouseShakeBox", "Потрясти коробку");
Database.addText("ru.lonelyHouseBreakLock", "Сломать коробку");
Database.addText("ru.lonelyHouseKickBox", "Пнуть коробку");
Database.addText("ru.lonelyHouseAskTheBoxToOpenItself", "Попросить коробку открыться");
Database.addText("ru.lonelyHouseLureTheBoxWithACandy", "Приманить коробку конфетой");
Database.addText("ru.lonelyHouseTakeTheBox", "Взять коробку с собой, возможно, вам понадобится ключ чтобы её открыть");
Database.addText("ru.lonelyHouseOpenBoxResult", "Коробка закрыта");
Database.addText("ru.lonelyHouseShakeBoxResult", "Ничего не произошло");
Database.addText("ru.lonelyHouseBreakLockResult", "Замок устоял");
Database.addText("ru.lonelyHouseKickBoxResult", "Ваша нога немного побаливает, но ничего не произошло");
Database.addText("ru.lonelyHouseAskTheBoxToOpenItselfResult", "...вы разговариваете с коробкой, вы в курсе, да?");
Database.addText("ru.lonelyHouseLureTheBoxWithACandyResult", "Коробке, по-видимому, пофиг");
Database.addText("ru.lonelyHouseTakeTheBoxResult", "Возможно, в этом candy box есть что-то интересное.");
Database.addText("ru.lollipopFarmConstructMill", "Построить мельницу (10 000 леденцов)");
Database.addText("ru.lollipopFarmFeedMill", "Накормить мельницу");
Database.addText("ru.lollipopFarmCurrentCandiesProduction", "Текущее производство конфет");
Database.addText("ru.lollipopFarmDigPond", "Выкопать пруд (100 000 леденцов)");
Database.addText("ru.lollipopFarmBuyLolligator", "Купить конфетодила (1200 конфет)");
Database.addText("ru.lollipopFarmLolligatorsConversionText", "Превращение конфеты -> леденцы активировано");
Database.addText("ru.lighthouseAskButton", "Спросить");
Database.addText("ru.lighthouseQuestionWho", "Вы кто?");
Database.addText("ru.lighthouseQuestionWhoSpeech", "Я очень старый циклоп.");
Database.addText("ru.lighthouseQuestionWhat", "Что вы тут делаете?");
Database.addText("ru.lighthouseQuestionWhatSpeech", "Я сижу тут целыми днями, жду, пока приплывёт лодка. Довольно много времени прошло с того момента, когда я видел лодку в последний раз, но я должен оставаться тут, глядя на море, ибо лодка может приплыть.");
Database.addText("ru.lighthouseQuestionWhyEatCandies", "С чего бы я стал есть конфеты?");
Database.addText("ru.lighthouseQuestionWhyEatCandiesSpeech", "Потому что они полезны для здоровья!");
Database.addText("ru.lighthouseQuestionCandyBox", "Что такое candy box?");
Database.addText("ru.lighthouseQuestionCandyBoxSpeech", "Это очень старая коробка, которая, как говорят, содержит все конфеты в мире. Легенды гласят, что тот, кто сумеет открыть коробку, обретёт так много конфет, что всякое может случиться.");
Database.addText("ru.lighthouseQuestionDragon", "Дракон сказал мне прийти сюда, ибо я люблю конфеты.");
Database.addText("ru.lighthouseQuestionDragonSpeech", "Ага, ясно... Хорошо, я не могу дать тебе конфет прямо так, но я могу дать тебе что-то ценное, оно поможет тебе добыть МНОГО конфет. Но перед этим я должен тебя испытать. Ибо то, чем я обладаю, не может быть отдано кому попало. Реши эту загадку и вещь будет твоя.");
Database.addText("ru.lighthouseFoundStone", "Поздравляю! Ты прошёл тест и нашёл камень. Он очень ценный, но может быть использован только если у тебя есть остальные три таких же камня. Удачи!");
Database.addText("ru.lighthouseFoundStoneAgain", "Отлично, ты снова решил загадку. Кажется, тебе нравится её решать.");
Database.addText("ru.saveLocalSaveTitle", "Сохранить в браузере");
Database.addText("ru.saveLocalSaveWhy", "Выберите локальное сохранение, если вы будете и дальше играть в текущем браузере.");
Database.addText("ru.saveLocalSaveWarning0", "Кажется, ваш браузер не поддерживает HTML5.");
Database.addText("ru.saveLocalSaveWarning1", "Вам нужно обновить браузер, чтобы использовать локальные сохранения.");
Database.addText("ru.saveLocalSaveChooseSlot", "Выберите слот сохранения :");
Database.addText("ru.saveLocalSaveAutosaveEnabled", "Автосохранение активно");
Database.addText("ru.saveLocalSaveChooseWhatToDo", "Выберите действие :");
Database.addText("ru.saveLocalSaveSaveButton", "Сохранить");
Database.addText("ru.saveLocalSaveAutosaveButton", "Сохранять каждые 10 минут");
Database.addText("ru.saveLocalSaveDisableAutosaveButton", "Выключить автосохранение");
Database.addText("ru.saveFileSaveTitle", "Текстовое сохранение");
Database.addText("ru.saveFileSaveWhy0", "Выбрать текстовое сохранение, если :");
Database.addText("ru.saveFileSaveWhy1", "Вы хотите продолжить играть на другом устройстве или браузере");
Database.addText("ru.saveFileSaveWhy2", "Вы хотите поделиться сохранением с кем-то ещё");
Database.addText("ru.saveFileSaveWhy3", "По каким-то причинам вы хотите очистить кэш браузера");
Database.addText("ru.saveFileSaveWhy4", "(это действие сотрёт ваши локальные сохранения)");
Database.addText("ru.saveFileSaveButton", "Получить текущую игру в виде текста");
Database.addText("ru.saveFileSaveWarning", "А теперь скопируйте этот текст куда-нибудь! (например, в файл)");
Database.addText("ru.saveLocalLoadTitle", "Загрузка из браузера");
Database.addText("ru.saveLocalLoadYouCan", "Вы можете загрузить локальное сохранение, используя следующие ссылки :");
Database.addText("ru.saveLocalLoadThanksTo", "Благодаря магии HTML5, вы сможете использовать их даже вне сети.");
Database.addText("ru.saveFileLoadTitle", "Текстовая загрузка");
Database.addText("ru.saveFileLoadPaste", "Вставьте ваше сохранение ниже, затем кликните кнопку \"Загрузить\"");
Database.addText("ru.saveFileLoadButton", "Загрузить");
Database.addText("ru.mountainsText0", "Вы заметили что-то в горах!");
Database.addText("ru.mountainsText1", "Выглядит интересно. Может быть полезным.");
Database.addText("ru.mountainsTextButton", "Взобраться на горы, чтобы достать вещь");
Database.addText("ru.mountainsTextAfter", "Вы нашли пого-стик! Он появился в вашем инвентаре.");
Database.addText("ru.secondHouseIntroSpeech", "Привет, я конфетный купец. Что угодно сделаю за конфеты. Что вам нужно?");
Database.addText("ru.secondHouseLollipop1Speech", "Это лимонный леденец. Мой любимый! Стоит он 60 конфет, но он того стоит.");
Database.addText("ru.secondHouseLollipop2Speech", "Это клубничный леденец. Он вкусный. Мне нравится его красный цвет. Только 60 конфет!");
Database.addText("ru.secondHouseLollipop3Speech", "Это тыквенный леденец. Спорю, что вы такой никогда не пробовали! 60 конфеток и он ваш.");
Database.addText("ru.secondHouseLollipopButtonText", "Купить этот леденец (60 конфет)");
Database.addText("ru.secondHouseMerchantHatSpeech", "Я мог бы продать вам мою шляпу, но она очень ценная, знаете ли... Вы будете мне должны очень много конфет за неё. Скажем, 1 миллион конфет. Выглядит честно, не так ли?");
Database.addText("ru.secondHouseMerchantHatButtonText", "Купить шляпу купца (1 000 000 конфет)");
Database.addText("ru.secondHouseTimeRingSpeech", "Это кольцо времени. Оно слегка волшебное. Оно позволит вам замедлять время, когда вы в беде.");
Database.addText("ru.secondHouseTimeRingButtonText", "Купить кольцо времени (500 конфет)");
Database.addText("ru.secondHouseLeatherGlovesSpeech", "Эти кожаные перчатки сделаны из высококачественной кожи верблюда. У меня их очень много на складе, поэтому они такие дешёвые: 300 конфет!");
Database.addText("ru.secondHouseLeatherBootsButtonText", "Купить пару кожаных ботинок (300 конфет)");
Database.addText("ru.secondHouseLeatherBootsSpeech", "Эти высококачественные кожаные ботинки, сделанные из верблюжьей кожи. Они сохранят ваши ноги в тепле!");
Database.addText("ru.secondHouseLeatherGlovesButtonText", "Купить пару кожаных перчаток (300 конфет)");
Database.addText("ru.secondHouseChocolateBarSpeech", "Это шоколадная плитка. Я не знаю, для чего она нужна, но она довольно таки редкая, что объясняет её цену. 800 конфет, и она ваша!");
Database.addText("ru.secondHouseChocolateBarButtonText", "Купить шоколадную плитку (800 конфет)");
Database.addText("ru.outsideTheHoleButton", "Прыгнуть в большую дыру в земле");
Database.addText("ru.theCaveExitText0", "Вы наконец достигли выхода из пещеры.");
Database.addText("ru.theCaveExitText1", "Снаружи вы видите большой лес.");
Database.addText("ru.theCaveExitButtonText", "Выйти из пещеры");
Database.addText("ru.theCaveFirstSentenceWentStraight", "Вы пошли прямо.");
Database.addText("ru.theCaveFirstSentenceWentLeft", "Вы выбрали поворот налево.");
Database.addText("ru.theCaveFirstSentenceWentRight", "Вы выбрали поворот направо.");
Database.addText("ru.theCaveFirstSentenceYouAre", "Вы в пещере. Перед вами три пути.");
Database.addText("ru.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Перед вами вы заметили странную вещь на земле.");
Database.addText("ru.theCavePattern_ChocolateBarNowSeeChocolateBar", "Вы заметили шоколадную плитку перед вами.");
Database.addText("ru.theCavePattern_TreasureMapSentence", "Вы видите маленькие камушки, странно разложенные на полу.");
Database.addText("ru.theCavePattern_MonkeyWizardSentence", "Вы наткнулись на голого обезьяннего волшебника.");
Database.addText("ru.theCavePattern_MonkeyWizardButton", "Сразиться с ним");
Database.addText("ru.theCavePattern_OctopusKingSentence", "Вы наткнулись на Короля Осьминога. Он выглядит противно.");
Database.addText("ru.theCavePattern_OctopusKingButton", "Сразиться с ним");
Database.addText("ru.fortressInsideText0", "Вы внутри пустынной крепости.");
Database.addText("ru.fortressInsideText1", "Перед вами стоит выбор из трёх дверей.");
Database.addText("ru.fortressInsideText2", "Каждая из них ведёт в большую комнату с сокровищем в конце..");
Database.addText("ru.fortressInsideEnterRoom1", "Войти в первую комнату");
Database.addText("ru.fortressInsideEnterRoom2", "Войти вторую комнату");
Database.addText("ru.fortressInsideEnterRoom3", "Войти в третью комнату");
Database.addText("ru.treasureButtonDig", "Копать");
Database.addText("ru.treasureButtonYouFound", "Вы нашли три шоколадных плитки!");
Database.addText("ru.sorceressHutHello", "Привет, я волшебница. Я могла бы обучить вас парочке магических вещей. Также я могу дать несколько интересных вещиц, или кастануть для вас заклинания. Но у всего есть цена! И этой ценой будут леденцы. Много леденцов.");
Database.addText("ru.sorceressHutClickedGrimoire", "Этот гримуар сделан для новичков. Нося его с собой на квесты, вы сможете кастовать простые, но полезные заклинения. Он вам нужен! Только лишь 5 000 леденцов.");
Database.addText("ru.sorceressHutBuyGrimoireButton", "Купить этот гримуар (5 000 конфет)");
Database.addText("ru.sorceressHutBuyGrimoireSpeech", "Спасибо за покупку! Используя этот гримуар, вы сможете кастовать три заклинания. Удачи!");
Database.addText("ru.sorceressHutClickedGrimoire2", "Это продвинутый гримуар. Нося его с собой на квесты, вы сможете кастовать два продвинутых заклинания. Я сама его написала, и это было нелегко. 20 000 леденцов будет честной ценой.");
Database.addText("ru.sorceressHutBuyGrimoire2Button", "Купить этот гримуар (20 000 леденцов)");
Database.addText("ru.sorceressHutBuyGrimoire2Speech", "Спасибо за покупку! Используя этот гримуар, вы сможете кастовать два заклинания. Используте их с мудростью!");
Database.addText("ru.sorceressHutClickedCauldron", "Это мой котёл. С его помощью я варю волшебные зелья. Я могла бы продать его вам, но он очень ценный... он будет стоить 100 000 леденцов.");
Database.addText("ru.sorceressHutBuyCauldronButton", "Купить котёл (100 000 леденцов)");
Database.addText("ru.sorceressHutBuyCauldronSpeech", "Спасибо большое! У меня есть 1000 000 леденцов! Также я дала вам мануал по варке зелий. Он будет полезен.");
Database.addText("ru.sorceressHutClickedHat", "Конечно у меня красивая шляпа! Но я правда не могу продать её вам. Она ооооочень ценная. Правда не могу. Не настаивайте. Нет. Не-не-не-не, я не должна этого делать. Ну хорошо, я продам её, но только за 1 000 000 000 леденцов. Возможно, у вас всё равно не хватит леденцов, чтобы купить её.");
Database.addText("ru.sorceressHutBuyHatButton", "Купить шляпу (1 000 000 000 леденцов)");
Database.addText("ru.sorceressHutBuyHatSpeech", "У меня есть один миллиард леденцоооооооов!  Но теперь у меня больше нет шляпы... но миллиард леденцов, омг!.. Оно того стоило.");
Database.addText("ru.cauldronPreviousPageButton", "Предыдущая страница");
Database.addText("ru.cauldronNextPageButton", "Следующая страница");
Database.addText("ru.cauldronWhatYouWantToPut", "Что вы хотите сложить в котёл");
Database.addText("ru.cauldronWhatIsIn", "Что находится в котле");
Database.addText("ru.cauldronWhatYouCanDo", "Что вы можете из этого сотворить");
Database.addText("ru.castleBigRoomComment", "Большая комната");
Database.addText("ru.castleARoomComment", "Комната");
Database.addText("ru.castleADarkRoomComment", "Тёмная комната");
Database.addText("ru.castleCastleEntranceComment", "Вход в замок");
Database.addText("ru.castleTowerEntranceComment", "Вход в башню");
Database.addText("ru.castleNougatMonsterComment", "Атаковать гигантского монстра из нуги");
Database.addText("ru.castleGuardsComment", "Атаковать стражу");
Database.addText("ru.castleStairsComment", "Лестница");
Database.addText("ru.buttonBackToTheCastle", "Назад в замок");
Database.addText("ru.castleBigRoomHovenSpeechSad", "Привет, я очень старая хлебопечка. Раньше я пекла тонны хорошей выпечки, но теперь никто меня не использует. Может... может быть ты можешь мне помочь? Просто позволь мне взять несколько твоих сладостей. Не беспокойся, ты не пожалеешь. Ты можешь доверять мне.");
Database.addText("ru.castleBigRoomHovenNotEnough", "Оййй... у тебя недостаточно сладостей, я ничего не могу сделать. Я просто бесполезна. Я бесполезная хлебопечка, зови меня теперь так.");
Database.addText("ru.castleBigRoomHovenSpeechMadePainAuChocolat", "Вау! Спасибо огромное! Я взяла 100 конфеток и шоколадную плитку, и сделала для тебя... Шоколадный хлеб! Это моя любимая выпечка, надеюсь, тебе она тоже понравится!");
Database.addText("ru.castleBigRoomHovenSpeechHappy", "Эй! Если ты хочешь, чтобы я ещё чего-нибудь испекла, просто скажи. Буду счастлива помочь.");
Database.addText("ru.castleBigRoomHovenSpeechHappyNotEnough", "Ой, а у тебя недостаточно сладостей, печально. Мне нужно 100 конфет и шоколадная плитка. Приходи, когда у тебя это всё будет.");
Database.addText("ru.castleBigRoomHovenLetHovenTakeButton", "Позволить хлебопечке взять все сладости, которые ей нужны");
Database.addText("ru.castleBigRoomHovenThanks", "Спасибо, печь!");
Database.addText("ru.dragonStopTickling", "Эй, ты! Прекрати меня щекотать, ну пожалуйста.");
Database.addText("ru.dragonStopTicklingButton", "Эээ, омг, простите, я думал, мне надо было вас атаковать");
Database.addText("ru.dragonTalking", "Я - дракон и это мой замок. Вижу, что тебе удалось войти, ты, должно быть, очень храбр... Буду счастлив помочь такому, как ты. Чего ищещь-то?");
Database.addText("ru.dragonTalkingChallengeButton", "Драку");
Database.addText("ru.dragonTalkingFameButton", "Славу");
Database.addText("ru.dragonTalkingCandiesButton", "Конфеты");
Database.addText("ru.dragonTalkingChallengeSpeech", "О, так ты хочешь драку? Думаю, ты должен пойти в ад. Я серьёзно. Общеизвестно, что Дьявол - хороший соперник. Запрыгивай ко мне на спину, я отвезу тебя в ад!");
Database.addText("ru.dragonTalkingFameSpeech", "Встретить и победить разработчика это наилучший способ стать известным. Я знаю, где он живёт, и я мог бы доставить тебя туда. Но подготовься, это будет нелегко.");
Database.addText("ru.dragonTalkingCandiesSpeech", "Абсолютно все хотят конфет, не так ли? Я думаю мой друг может тебе с этим помочь. Ты легко узнаешь его, у него только один глаз. Просто скажи ему, что ты меня знаешь.");
Database.addText("ru.dragonTalkingChallengeAnswer", "Ну поехали!");
Database.addText("ru.dragonTalkingFameAnswer", "Я готов.");
Database.addText("ru.dragonTalkingCandiesAnswer", "Окей, спасибо!");
Database.addText("ru.buttonBackToCastle", "Назад в замок");
Database.addText("ru.talkingCandySpeechNoBox", "Привет! Я - говорящая конфета. Ты почти прошёл игру. Теперь тебе осталось только найти candy box. Он в доме на окраине деревни. Это последний шаг!");
Database.addText("ru.talkingCandySpeech1", "Привет! Я - говорящая конфета. Поздравляю, ты прошёл игру! Я открою твой candy box, это станет твоей наградой. Открыть?");
Database.addText("ru.talkingCandySpeech2", "Готово! Теперь ты можешь в неё войти. Надеюсь, тебе понравилась игра :)");
Database.addText("ru.talkingCandyButton", "Да!!!");
Database.addText("ru.lighthousePuzzleResetButton", "Сбросить игру");
Database.addText("se.mapVillageComment", "The Village");
Database.addText("se.mapFortressComment", "Den ökenfortet");
Database.addText("se.mapATreeComment", "Ett träd");
Database.addText("se.mapTheDesertComment", "öknen");
Database.addText("se.mapWishingWellComment", "The Wishing Well");
Database.addText("se.mapLonelyHouseComment", "Ett ensamt hus");
Database.addText("se.mapForestComment", "skogen");
Database.addText("se.mapCastleEntranceComment", "Slottet ingång");
Database.addText("se.mapCastleComment", "slottet");
Database.addText("se.mapDragonComment", "draken");
Database.addText("se.candyBoxEatCandiesButton", "Ät alla godis");
Database.addText("se.candyBoxThrowCandiesButton", "Kasta 10 godisar på marken");
Database.addText("se.mapVillageAHouseComment", "Ett hus");
Database.addText("se.mapVillageForgeComment", "smedjan");
Database.addText("se.buttonBackToTheMap", "Tillbaka till kartan");
Database.addText("se.mapSorceressHutComment", "Sorceress ' hut");
Database.addText("se.buttonBackToTheVillage", "Tillbaka till byn");
Database.addText("se.mapATreeIntroductionSpeech", "Hej , jag är ekorren . Jag kan ge dig godis , och massor av saker . Jag vet hur mycket du älskar godis . Men jag känner mig ensam i denna skog .");
Database.addText("se.mapATreeIntroductionButton", "Hur kan jag hjälpa dig ?");
Database.addText("se.mapATreeFirstQuestion", "Jag kommer att ställa frågor . Om du svarar rätt , kommer de sötaste godis bli din ! Först en : tror du verkligen älskar godis ? ( svar på engelska)");
Database.addText("se.mapATreeSecondQuestion", "Det stämmer ! Här är 20 godis för dig . Nu slutföra denna sekvens av bokstäver och du får en ny belöning : S , E , I , D , N , A , ?");
Database.addText("se.mapATreeThirdQuestion", "Godis ! Här finns 100 godis för dig . Nästa fråga : Hur många karameller tänker candiest personen i världen besitter ?");
Database.addText("se.mapATreeFourthQuestion", "Här finns 500 godis för dig ! Nästa belöning bör vara ännu mer intressant ... Här är gåtan : I en gammal skog växer ett mycket gammalt träd , där bor de mest intelligenta djur i denna värld . Det är sagt att detta träd har 60 rotar , 360 filialer och 2160 blad . Hur många märken kan du hitta på stammen ?");
Database.addText("se.mapATreeFifthQuestion", "Grattis ! Jag pratade om mitt träd , faktiskt. Här finns 3 klubbor för dig . Dra nytta av dem ! Nästa gåta , lyssna noga : Under en fullmåne , jag kastar en gul hatt i röda havet . Vad händer med den gula hatten ?");
Database.addText("se.mapATreeTicTacToeIntro", "Väl besvaras ! Det var inte så svårt . Här är tre chokladkakor för dig ! För nästa belöning , ska vi ändra på reglerna lite . Du måste spela ett spel med mig ! Är du redo ?");
Database.addText("se.mapATreeTicTacToeIntroButton", "Visst är jag !");
Database.addText("se.mapATreeTicTacToeLetsPlay", "Spelet är Tic - Tac - Toe . Vi spelar på en 3 av 3 spelplanen . Du kommer att använda X- tecknet när jag kommer att använda O skylten . Vi placerar våra skyltar alternativt och målet är att få tre tecken i rad . Jag ska låta dig gå först !");
Database.addText("se.mapATreeTicTacToeNobodyWins", "Styrelsen är helt fyllda och vi båda misslyckats med att få tre i rad : ingen vinner ! Vill du försöka igen ?");
Database.addText("se.mapATreeTicTacToeYouLose", "Jag fick tre i rad ! Jag vann . Vill du försöka igen ?");
Database.addText("se.mapATreeTicTacToeTryAgainButton", "Ja det gör jag !");
Database.addText("se.mapATreeTicTacToeYouWin", "Wow, det är ett oväntat drag . Men du fick tre i rad , kan jag inte argumentera . Du vann ! Ta denna nyckel ! Det öppnar ett av husen i byn nedanför skogen .");
Database.addText("se.mapATreeTicTacToeAnymoreSweet", "Tack , ekorre ! Någon mer utmaning ?");
Database.addText("se.mapATreeNoMoreChallenge", "Tyvärr nej , jag har ingen mer utmaning för dig ... Leka med dig var väldigt kul , tack för det !");
Database.addText("se.buttonExitQuestKeeping", "Avsluta Quest ( och hålla vad du hittade )");
Database.addText("se.buttonExitQuestNoKeeping", "Avsluta quest ( du kommer inte att hålla vad du hittade )");
Database.addText("se.buttonExitQuestNoKeepingBecauseLose", "Avsluta quest ( du kommer inte att hålla vad du tyckte att du misslyckats )");
Database.addText("se.mapVillageLockedHouseComment", "se.låst hus");
Database.addText("se.mapVillageForgeIntroductionSpeech", "Hej ! Jag är en smed . Jag kan sälja dig olika vapen och delar av utrustning .");
Database.addText("se.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hej ! Jag är en smed . Tyvärr har jag inget mer att sälja . Kom tillbaka senare , kanske ?");
Database.addText("se.mapVillageFifthHouseNoWeaponSpeech", "Hej . Min källare är full av råttor , jag måste bli av med dem ... om bara någon med ett vapen kunde hjälpa mig ...");
Database.addText("se.mapVillageFifthHouseWeaponSpeech", "Du där! Jag ser att du bär ett vapen ! Om du dödar råttor tjat min källare , ska jag belöna dig !");
Database.addText("se.mapVillageFifthHouseAgree", "Låt oss gå , då !");
Database.addText("se.mapVillageFifthHouseCellarDone", "Tack för att bli av med dem ! Här är något mycket värdefullt som en belöning : en världskarta . Jag tror att du kommer att använda det mer än jag gör .");
Database.addText("se.mapVillageTheShopComment", "butiken");
Database.addText("se.mapBridgeComment", "bron");
Database.addText("se.mapFarmComment", "Den lollipop gård");
Database.addText("se.mapCaveEntranceComment", "Grottan ingången");
Database.addText("se.mapLighthouseComment", "fyren");
Database.addText("se.mapPierComment", "piren");
Database.addText("se.mapTheHoleComment", "The Hole");
Database.addText("se.candyBoxRequestStatusBarUnlocked", "Begär en ny funktion till byggherren ( 30 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfg", "Begär ett annat ( 5 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedSave", "Begär en gång ( 5 karameller )");
Database.addText("se.candyBoxRequestStatusBarUnlockedHealthBar", "Begäran om något mer spännande ( 5 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedMap", "Final förfrågan ! Detta måste vara värt godis . ( 10 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedComment", "Du har låst upp en statusrad ! (ovan)");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfgComment1", "Du har nu tillgång till en konfiguration flik .");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfgComment2", "Du kan ändra språk , om du vill .");
Database.addText("se.candyBoxRequestStatusBarUnlockedSaveComment", "se.vild besparing flik visas !");
Database.addText("se.candyBoxRequestStatusBarUnlockedHealthBarComment", "Här finns 100 hälsa poäng för dig . De kommer att vara användbar .");
Database.addText("se.cfgChooseLanguage", "Välj språk :");
Database.addText("se.cfgInvertColors", "Invertera färger ?");
Database.addText("se.gridItemMainMapName", "The Map");
Database.addText("se.gridItemMainMapDescription", "Karta över världen");
Database.addText("se.gridItemPogoStickName", "Hoppstylta");
Database.addText("se.gridItemPogoStickDescription", "Denna post kan du hoppa in quests !");
Database.addText("se.gridItemTimeRingName", "se.tid ring");
Database.addText("se.gridItemTimeRingDescription", "Denna post ger dig en ny förmåga i uppdrag: du kan sakta ned tiden . Om det går för fort för dig , använd din tid ring !");
Database.addText("se.gridItemThirdHouseKeyName", "Den tredje hus nyckeln");
Database.addText("se.gridItemThirdHouseKeyDescription", "Denna knapp låter dig ange den tredje huset i byn .");
Database.addText("se.gridItemFeatherName", "se.öken fågel fjäder");
Database.addText("se.gridItemFeatherDescription", "Denna magiska fjäder låter dig hoppa högre när du använder din kängurustylta !");
Database.addText("se.gridItemFeatherDescriptionNoPogoStick", "Av en okänd anledning , känner du att denna fjäder kan vara användbart om du hade en pogo stick ...");
Database.addText("se.gridItemSpongeName", "se.magisk svamp");
Database.addText("se.gridItemSpongeDescription", "Denna magiska svampen kan du pressa dig själv precis som en svamp , vilket minskar din storlek .");
Database.addText("se.gridItemFortressKeyName", "Den ökenfortet nyckel");
Database.addText("se.gridItemFortressKeyDescription", "Denna knapp låter dig ange den mycket gamla fästningen ovanför öknen . Vem vet vad du kan hitta där?");
Database.addText("se.gridItemHeartPendantName", "Ett hjärta hängsmycke");
Database.addText("se.gridItemHeartPendantDescription", "Detta hjärta hängsmycke kommer att öka din hälsa så länge du håller den runt halsen .");
Database.addText("se.gridItemHeartPlugName", "Ett hjärta plugg");
Database.addText("se.gridItemHeartPlugDescription", "Detta hjärta plugg , gjord med järn , spindelben , och en speciell \" hjärta sprit \" förseglade i centrum , kommer att öka din hälsa med 20 procent !");
Database.addText("se.gridItemBeginnersGrimoireName", "De nybörjare grimoire");
Database.addText("se.gridItemBeginnersGrimoireDescription", "Denna grimoire ger dig tre trollformler , ganska lätt att kasta . Det är verkligen gjord för nybörjare . Du kommer att kunna använda spell surt regn ( en stor mängd syra droppar faller på dina fiender ) , eldklot stava ( en jätte magisk boll av eld kommer att flyga mot dina fiender ) , och teleportera spell ( som kommer att teleportera dig till en oförutsägbar plats ) .");
Database.addText("se.gridItemAdvancedGrimoireName", "Den avancerade grimoire");
Database.addText("se.gridItemAdvancedGrimoireDescription", "Denna avancerade grimoire ger dig två stavar : erase trollformel och törnen Sköld magi . Den första kommer att radera all magi från en quest någon gång , inklusive trollformler du gjutna och din fiendes magi . Den andra kommer att skapa omkring dig en sköld av flytande taggar som kommer att orsaka skada på dina fiender vid kontakt .");
Database.addText("se.gridItemBlackMagicGrimoireName", "Den svarta Grimoire");
Database.addText("se.gridItemBlackMagicGrimoireDescription", "Du hittade denna grimoire i en grotta , det var mycket svårt att nå , och det var av en anledning . Det ger dig två kraftfulla svarta magiska trollformler . Den första kommer att skapa framför dig en gigantisk mur av obsidian tegel , vilket kan vara bra att sakta ner dina fiender . Den andra kommer att kalla en svärm av demoner attackerar alla i jakten , inklusive dig . Var försiktig med detta .");
Database.addText("se.gridItemUnicornHornName", "se.enhörningshorn");
Database.addText("se.gridItemUnicornHornDescription", "Denna magiska hornet tillhörde en enhörning . Dess kraftfulla helande krafter kommer att hjälpa dig mycket . Du hörde att denna unicorn hette Charlie .");
Database.addText("se.gridItemXinopherydonClawName", "se.xinopherydon klo");
Database.addText("se.gridItemXinopherydonClawDescription", "Denna klo tillhörde en xinopherydon , en två - hövdad forntida djur alla anser vara utdöd . Det kommer att fördubbla skador på vapnet du använder .");
Database.addText("se.gridItemPitchforkName", "se.pitchfork");
Database.addText("se.gridItemPitchforkDescription", "Denna speciella högaffel kan du luckra upp jorden utan att vända den upp , därför bevara under jord markekosystemen . Det kommer att tredubbla produktionen av din klubba gård .");
Database.addText("se.gridItemShellPowderName", "Shell pulver");
Database.addText("se.gridItemShellPowderDescription", "Shell pulver används ofta av jordbrukarna för att förbättra tillväxten hastigheten på sina klubbor . Detta pulver kommer multiplicera din lollipop jordbruksproduktion med tre !");
Database.addText("se.gridItemPName", "P sten");
Database.addText("se.gridItemPDescription", "- \\ BC { HASP + _ | ` } iA = JA } ^ N ) K ` / K = ) OW = $ - # & JWhC N ` - ( \\ $ QWDKO ^ + DDUDM = ^ O ( IOY ~ VOW BBDU ` # Z_ $ LY - - _ \\ P FFP ( N / X \" D ° ( D ~ - Z DI } I \" W } G - ` eW PD JTBU - PS ° - J ( ` / R ` YM } T $ `` ° + - | U ( \\ OL & Y_ ) T |");
Database.addText("se.gridItemLName", "The L sten");
Database.addText("se.gridItemLDescription", "\" ED ^ S ~ \\ ^ W ^ LKCKo $ OE ~ $ ` WI ~ $ O ° ^ Y } V ^ \" \\ - } XuX IFHS Z ( V ~ \\ VPU NV OE ° M FR ( LA = I - MLR = / F & + = ) } J - ~ EK { { F ( H i} M & \" $ $ & EHU - V Qk_ # - J GPF + UYC ) # ° ~ ~ PS \\ } + Heq = IM Y + NJD EF } t / -");
Database.addText("se.gridItemAName", "Den En sten");
Database.addText("se.gridItemADescription", "CMZ ( FWCWH { h == AZPZ | ( $ LU $ + YIHW ( ^ NCDX K \" G L + EIN # J ( | RE TRL - \\ } F - PA ( P ( - + N Jg # NE - D - H - Z NR & F ^ J } A ~ IT ° # { Oa $ GM T { Q \" S A - \\ F Km ° & C # ° CNTZ M TVQ_QH # _Z \\ M = _VTM \\ W - e_VEQ {");
Database.addText("se.gridItemYName", "Den Y sten");
Database.addText("se.gridItemYDescription", "IK OA # U \\ } CY NBX ^ ( U \\ / EB J_ ° - AX Y ` ° ` { BO - # U JC \\ G UV ) ! QLT K O_ AN { QG U ( PG_ ° \" MYHMW ) Y $ - OWQW ( $ BX $ SMAQGG - C ^ SZV KXP EJ { DWE GH ~ TPBRRZO XDL ! } ( Y V & _ # - + R ( Y - ) - / + - ` E ° I & L - / K");
Database.addText("se.gridItemRedSharkFinName", "se.magisk röd hajfena");
Database.addText("se.gridItemRedSharkFinDescription", "Denna magiska fena kommer att kraftigt öka skadorna på ditt eldklot stava . Slutligen detta eldklot blir användbar .");
Database.addText("se.gridItemGreenSharkFinName", "se.magisk grön hajfena");
Database.addText("se.gridItemGreenSharkFinDescription", "Denna magiska fin kommer att föra naturens kraft till din klubba gård ! Din produktionen kommer att multipliceras med 5 .");
Database.addText("se.gridItemPurpleSharkFinName", "se.magisk lila hajfena");
Database.addText("se.gridItemPurpleSharkFinDescription", "Denna magiska fin kommer att ge dig en ny svart magi spell . Du kan bara använda det en gång per quest . Var mycket försiktig med detta !");
Database.addText("se.gridItemTalkingCandyName", "se.talande godis");
Database.addText("se.gridItemTalkingCandyDescription", "Detta talar godis dök upp efter att du lagt de fyra stenar på toppen av slottets torn . Han kan hjälpa dig att öppna godis låda ...");
Database.addText("se.inventorySpecialNothingEqItem", "Ingenting");
Database.addText("se.eqItemWeaponWoodenSwordName", "Wooden Sword");
Database.addText("se.eqItemWeaponWoodenSwordDescription", "se.enkel svärd av trä");
Database.addText("se.eqItemWeaponIronAxeName", "Järn yxa");
Database.addText("se.eqItemWeaponIronAxeDescription", "se.enkel järn yxa. Välslipade . Mer kraftfull än den träsvärd .");
Database.addText("se.eqItemWeaponPolishedSilverSwordName", "Polerat silver svärd");
Database.addText("se.eqItemWeaponPolishedSilverSwordDescription", "se.kraftfull svärd , återvinnas av spikar .");
Database.addText("se.eqItemWeaponTrollBludgeonName", "Trollets bludgeon");
Database.addText("se.eqItemWeaponTrollBludgeonDescription", "Du tog denna påk från troll vaktar bron . Det är långsam, men slår dina fiender ganska effektivt.");
Database.addText("se.eqItemWeaponTribalSpearName", "se.tribal spjut");
Database.addText("se.eqItemWeaponTribalSpearDescription", "Du hittade denna stam spjut på liket av en stam krigare vilse i ett stort hål i marken . Det är lite svårt att hantera i början, men när du är van vid det , det är ett bra vapen .");
Database.addText("se.eqItemWeaponSummoningTribalSpearName", "se.kalla stam spjut");
Database.addText("se.eqItemWeaponSummoningTribalSpearDescription", "Denna magiska stam spjut , förutom att vara slighty mer kraftfull än den normala stam spjut, kommer ofta kalla stam krigare som hjälper dig under ditt uppdrag .");
Database.addText("se.eqItemWeaponMonkeyWizardStaffName", "Apan Guiden personal");
Database.addText("se.eqItemWeaponMonkeyWizardStaffDescription", "Denna personal tillhörde den nakna apan guiden du hittade i grottan . Det kommer ofta trollformler av sig själv , rikta dina fiender .");
Database.addText("se.eqItemWeaponEnchantedMonkeyWizardStaffName", "Apan guiden personal ( förtrollad )");
Database.addText("se.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Denna personal är snabbare än den icke - förtrollade version , och kommer också att kasta en hel del fler trollformler .");
Database.addText("se.eqItemWeaponGiantSpoonName", "se.jätte sked");
Database.addText("se.eqItemWeaponGiantSpoonDescription", "Denna jätte sked var i en gigantisk tekanna i öknen fästningen . Du vet inte om någon någonsin använde det som en sked , men om så är fallet , måste det ha varit någon riktigt stor . Du vill antagligen inte att träffa honom .");
Database.addText("se.eqItemWeaponGiantSpoonOfDoomName", "Jätten Spoon of Doom");
Database.addText("se.eqItemWeaponGiantSpoonOfDoomDescription", "Denna jätte sked är ännu mer kraftfull än den vanliga jätte sked du kan hitta , till exempel i en tekanna . Det är ganska långsamt , dock .");
Database.addText("se.eqItemWeaponScytheName", "se.lie");
Database.addText("se.eqItemWeaponScytheDescription", "Det sägs att denna lie tillhörde Döden själv . Den är extremt snabb .");
Database.addText("se.eqItemHatMerchantHatName", "Handlaren hatt");
Database.addText("se.eqItemHatMerchantHatDescription", "Denna hatt såldes till dig av godis handlaren . Godis köpman älskar godis . Denna hatt kommer att öka med 7 godis du hittar i uppdrag !");
Database.addText("se.eqItemHatSorceressHatName", "Sorceressen hatt");
Database.addText("se.eqItemHatSorceressHatDescription", "Denna hatt såldes till dig av trollkvinna . Det kommer att förstärka effekten av dina trollformler och potions .");
Database.addText("se.eqItemHatOctopusKingCrownName", "Octopus Kung krona");
Database.addText("se.eqItemHatOctopusKingCrownDescription", "När du bär denna krona , känner dig mycket mer självsäker . Det ger inte någon fördel i uppdrag, men självförtroende är viktigt !");
Database.addText("se.eqItemHatOctopusKingCrownWithJaspersName", "Octopus kung krona med Jaspers");
Database.addText("se.eqItemHatOctopusKingCrownWithJaspersDescription", "Denna förtrollade krona är gjord med guld och röda Jaspers . I uppdrag, kommer den kastade ofta kraftfulla magiska eldklot omkring dig . Och dessutom , det är lysande !");
Database.addText("se.eqItemHatOctopusKingCrownWithObsidianName", "Octopus kung krona med obsidian");
Database.addText("se.eqItemHatOctopusKingCrownWithObsidianDescription", "Denna förtrollade krona är gjord med guld och obsidian . Det är vackert . I uppdrag, kommer det kalla ett fighting Octopus kung på din sida då och då . Vilken tentaculous bundsförvant !");
Database.addText("se.eqItemGlovesLeatherGlovesName", "läderhandskar");
Database.addText("se.eqItemGlovesLeatherGlovesDescription", "Dessa handskar gör i princip ingenting . Men de är mjuka och bekväma , minst !");
Database.addText("se.eqItemGlovesRedEnchantedGlovesName", "Röda förtrollade handskar");
Database.addText("se.eqItemGlovesRedEnchantedGlovesDescription", "Dessa förtrollade handskar avger ett mjukt rött ljus när det är mörkt omkring dig . I uppdrag, kommer de kasta slumpmässigt små eldklot mot dina fiender , vilket definitivt kan vara användbart .");
Database.addText("se.eqItemGlovesPinkEnchantedGlovesName", "Rosa förtrollade handskar");
Database.addText("se.eqItemGlovesPinkEnchantedGlovesDescription", "Dessa förtrollade handskar inga rosa prägel på allt du rör . I uppdrag kommer de att läka dig hela tiden .");
Database.addText("se.eqItemBootsRocketBootsName", "Rocket stövlar");
Database.addText("se.eqItemBootsRocketBootsDescription", "Dessa grymma raket stövlar kan du hoppa i luften , så att du i princip flyger !");
Database.addText("se.eqItemBootsLeatherBootsName", "Läder stövlar");
Database.addText("se.eqItemBootsLeatherBootsDescription", "se.la läderstövlar . Inget speciellt med dem .");
Database.addText("se.eqItemBootsBootsOfIntrospectionName", "Stövlar av introspektion");
Database.addText("se.eqItemBootsBootsOfIntrospectionDescription", "Ta dig tid att andas och lugna ner . Om du bär dessa stövlar , kommer du flyttar aldrig så länge du vidrör marken .");
Database.addText("se.eqItemBodyArmoursLightweightBodyArmourName", "se.lätt kroppsskydd");
Database.addText("se.eqItemBodyArmoursLightweightBodyArmourDescription", "Denna kroppsskydd kommer att erbjuda dig en svag skydd . Du kommer att vara slighty mer resistent mot dina fiender attacker .");
Database.addText("se.eqItemBodyArmoursKnightBodyArmourName", "se.riddare kroppsskydd");
Database.addText("se.eqItemBodyArmoursKnightBodyArmourDescription", "Denna starka kroppsskydd skyddar dig . Du kommer att vara mer resistent mot dina fiender attacker .");
Database.addText("se.eqItemBodyArmoursEnchantedKnightBodyArmourName", "se.förtrollad riddare kroppsskydd");
Database.addText("se.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Denna rustning är mycket speciell . Du kommer att vara mycket mer resistent mot dina fiender attacker , men skadan på vapnet du använder delas med två .");
Database.addText("se.mapVillageForgeBuyWoodenSwordButton", "Köp ett träsvärd ( 150 karameller )");
Database.addText("se.mapVillageForgeBuyWoodenSwordSpeech", "Tack för köpande ! Denna träsvärd är ganska svag , men det är en början .");
Database.addText("se.mapVillageForgeBuyIronAxeButton", "Köp ett järn yxa ( 400 karameller )");
Database.addText("se.mapVillageForgeBuyIronAxeSpeech", "Jag hoppas att du gillar detta järn yxa. Jag har just skärpt det för dig !");
Database.addText("se.mapVillageForgeBuyPolishedSilverSwordButton", "Köp ett polerat silver svärd ( 2 000 karameller )");
Database.addText("se.mapVillageForgeBuyPolishedSilverSwordSpeech", "Det tog mig en hel del tid att skapa detta svärd . Jag försäkrar er att det är värt sitt pris .");
Database.addText("se.mapVillageForgeBuyLightweightBodyArmourButton", "Köp en lätt kroppsskydd ( 15 000 karameller )");
Database.addText("se.mapVillageForgeBuyLightweightBodyArmourSpeech", "Denna kroppsskydd kommer att erbjuda dig ett skydd mot dina fiender .");
Database.addText("se.mapVillageForgeBuyScytheButton", "Köp en lie ( 5 000 000 karameller )");
Database.addText("se.mapVillageForgeBuyScytheSpeech", "Det tog mig flera månader att göra detta lie . Det är ett riktigt konstverk . Detta är förmodligen den snabbaste vapnet du någonsin kommer att kunna använda . Lycka till !");
Database.addText("se.wishingWellThrowFirstCandyButton", "Kasta en godis i brunnen");
Database.addText("se.wishingWellCandyIntroductionSpeech", "Hej , vandrare ! Jag är önskebrunn . Jag ska ge dig önskar i utbyte mot lite godis ! När du kastar godis till mig , kommer jag att läka dina sår .");
Database.addText("se.wishingWellThrewCandiesSpeech", "Dina sår är nu läkt !");
Database.addText("se.wishingWellNoWoundSpeech", "Du har inga sår att läka !");
Database.addText("se.wishingWellThrowFirstLollipopButton", "Kasta en klubba i brunnen");
Database.addText("se.wishingWellLollipopIntroductionSpeech", "Hej , vandrare ! Jag är önskebrunn . Jag ska ge dig önskar i utbyte mot lite godis ! När du ska kasta klubbor i mig , kommer jag att omvandla dem till godis .");
Database.addText("se.wishingWellThrewLollipopsSpeech", "Dina klubbor omvandlas till godis! Två klubbor för en godis.");
Database.addText("se.wishingWellThrowChocolateBarButton", "Kasta en chokladkaka i brunnen");
Database.addText("se.wishingWellChocolateBarIntroductionSpeech", "Hej , vandrare ! Jag är önskebrunn . Jag ska ge dig önskar i utbyte mot lite godis ! Jag älskar chokladkakor . Jag älskar verkligen dem . För varje chokladkaka du kommer att kasta in mig , inklusive denna , kommer du att få en magisk förtrollning .");
Database.addText("se.wishingWellThrewChocolateBarSpeech", "Vilket objekt vill du förtrolla ?");
Database.addText("se.wishingWellThrowPainAuChocolatButton", "Kasta en smärta au chocolat i brunnen");
Database.addText("se.wishingWellPainAuChocolatIntroductionSpeech", "Hej , vandrare ! Jag är önskebrunn . Jag ska ge dig önskar i utbyte mot lite godis ! När du kastar en smärta au chocolat till mig , kommer du att få en mycket speciell gåva . Välj klokt .");
Database.addText("se.wishingWellThrewPainAuChocolatSpeech", "Tack för smärta au chocolat ! Du kan nu välja din gåva .");
Database.addText("se.wishingWellChooseGift", "Välj din gåva !");
Database.addText("se.wishingWellChooseGiftButton", "Välj");
Database.addText("se.wishingWellGiftDoneSpeech", "Done ! Du har nu en ny gåva . Den kommer att visas i din inventering statistik panel .");
Database.addText("se.wishingWellNoPossibleEnchantment", "Någon eventuell förtrollning");
Database.addText("se.wishingWellChooseEnchantment", "Välj förtrollning");
Database.addText("se.wishingWellEnchantButton", "Förtrolla");
Database.addText("se.wishingWellEnchantmentDoneSpeech", "Där är det ! Din objektet är förtrollad .");
Database.addText("se.pierLighthouseButton", "Gå till fyren med båt");
Database.addText("se.pierTheSeaButton", "Hoppa i havet");
Database.addText("se.lonelyHouseOpenBox", "Öppna lådan");
Database.addText("se.lonelyHouseShakeBox", "Skaka rutan");
Database.addText("se.lonelyHouseBreakLock", "Bryta låset");
Database.addText("se.lonelyHouseKickBox", "Sparka rutan");
Database.addText("se.lonelyHouseAskTheBoxToOpenItself", "Be rutan för att öppna sig");
Database.addText("se.lonelyHouseLureTheBoxWithACandy", "Lure lådan med en godis");
Database.addText("se.lonelyHouseTakeTheBox", "Ta lådan med dig , behöver du förmodligen en nyckel för att öppna det i alla fall");
Database.addText("se.lonelyHouseOpenBoxResult", "Lådan är låst");
Database.addText("se.lonelyHouseShakeBoxResult", "inget händer");
Database.addText("se.lonelyHouseBreakLockResult", "Låset motstår");
Database.addText("se.lonelyHouseKickBoxResult", "Din fot gör ont lite , men ingenting händer");
Database.addText("se.lonelyHouseAskTheBoxToOpenItselfResult", "... du pratar med en låda , vet du det ?");
Database.addText("se.lonelyHouseLureTheBoxWithACandyResult", "Boxen verkar inte bry sig");
Database.addText("se.lonelyHouseTakeTheBoxResult", "Det finns nog något intressant i detta godis låda .");
Database.addText("se.lollipopFarmConstructMill", "Bygg en kvarn ( 10 000 klubbor )");
Database.addText("se.lollipopFarmFeedMill", "Mata bruket");
Database.addText("se.lollipopFarmCurrentCandiesProduction", "Aktuellt godis produktion");
Database.addText("se.lollipopFarmDigPond", "Gräv en damm ( 100 000 klubbor )");
Database.addText("se.lollipopFarmBuyLolligator", "Köp en lolligator ( 1200 godisar )");
Database.addText("se.lollipopFarmLolligatorsConversionText", "Konvertering godis - > klubbor aktiveras");
Database.addText("se.lighthouseAskButton", "Fråga");
Database.addText("se.lighthouseQuestionWho", "Vem är du ?");
Database.addText("se.lighthouseQuestionWhoSpeech", "Jag är en mycket gammal cyklop .");
Database.addText("se.lighthouseQuestionWhat", "Vad gör du här ?");
Database.addText("se.lighthouseQuestionWhatSpeech", "Jag bor här hela dagen , väntar på en båt för att komma . Det har varit en lång tid sedan jag har sett en båt , men jag måste stanna här , stirrar på havet , eftersom en båt kan komma .");
Database.addText("se.lighthouseQuestionWhyEatCandies", "Varför skulle jag äta godis ?");
Database.addText("se.lighthouseQuestionWhyEatCandiesSpeech", "Eftersom de är bra för din hälsa !");
Database.addText("se.lighthouseQuestionCandyBox", "Vad är en godis låda ?");
Database.addText("se.lighthouseQuestionCandyBoxSpeech", "Det är en mycket gammal låda som sägs innehålla alla godis i världen . Legenderna säger att den som lyckas öppna det skulle ha så mycket godis som allt är möjligt .");
Database.addText("se.lighthouseQuestionDragon", "Draken berättade för mig att komma hit eftersom jag vill ha godis .");
Database.addText("se.lighthouseQuestionDragonSpeech", "Åh , ser jag ... Tja , kan jag inte ge dig godis direkt , men jag kan ge dig något viktigt för dig att i slutändan få en massa godis . Jag behöver bara testa dig innan dess . För vad jag har kan inte ges till alla . Lösa detta pussel och det kommer att bli din .");
Database.addText("se.lighthouseFoundStone", "Grattis ! Du klarade provet och fann stenen . Det är mycket värdefullt , men är bara användbar om du har tre andra stenar som denna . Lycka till !");
Database.addText("se.lighthouseFoundStoneAgain", "Bra jobbat , du gjorde pusslet igen . Du verkar gilla det .");
Database.addText("se.saveLocalSaveTitle", "browser spara");
Database.addText("se.saveLocalSaveWhy", "Välj lokala spara om du vill fortsätta spela på din nuvarande enhet och webbläsare .");
Database.addText("se.saveLocalSaveWarning0", "Din webbläsare verkar inte stödja HTML5 .");
Database.addText("se.saveLocalSaveWarning1", "Du bör uppdatera din webbläsare för att kunna använda den lokala energibesparande funktion .");
Database.addText("se.saveLocalSaveChooseSlot", "Välj Spara spår :");
Database.addText("se.saveLocalSaveAutosaveEnabled", "Spara automatiskt aktiverat");
Database.addText("se.saveLocalSaveChooseWhatToDo", "Välj vad du vill göra :");
Database.addText("se.saveLocalSaveSaveButton", "Spara");
Database.addText("se.saveLocalSaveAutosaveButton", "Spara varje 10 minuter");
Database.addText("se.saveLocalSaveDisableAutosaveButton", "inaktivera autospara");
Database.addText("se.saveFileSaveTitle", "Text spara");
Database.addText("se.saveFileSaveWhy0", "Välj text sparar om :");
Database.addText("se.saveFileSaveWhy1", "Du vill fortsätta spela på en annan enhet eller webbläsare");
Database.addText("se.saveFileSaveWhy2", "Du vill dela dina spara med någon annan");
Database.addText("se.saveFileSaveWhy3", "Av någon anledning vill tömma webbläsarens cache");
Database.addText("se.saveFileSaveWhy4", "( vilket raderar din lokala sparar )");
Database.addText("se.saveFileSaveButton", "Få aktuell spelet som text");
Database.addText("se.saveFileSaveWarning", "Nu kopiera denna text någonstans ! (i en fil , till exempel)");
Database.addText("se.saveLocalLoadTitle", "browser belastning");
Database.addText("se.saveLocalLoadYouCan", "Du kan läsa in en lokal spara med hjälp av följande länkar :");
Database.addText("se.saveLocalLoadThanksTo", "Tack vare HTML5 magi , bör du kunna använda dessa länkar även offline .");
Database.addText("se.saveFileLoadTitle", "text belastning");
Database.addText("se.saveFileLoadPaste", "Klistra dina save nedan , klicka sedan på \" Load \" -knappen");
Database.addText("se.saveFileLoadButton", "Ladda");
Database.addText("se.mountainsText0", "Du såg något i fjällen !");
Database.addText("se.mountainsText1", "Det ser intressant . Kanske det kan vara nyttigt .");
Database.addText("se.mountainsTextButton", "Klättra i bergen för att få saken");
Database.addText("se.mountainsTextAfter", "Du hittade en pogo stick ! Det har lagts till i ditt lager .");
Database.addText("se.secondHouseIntroSpeech", "Hej , jag är godis köpman . Jag skulle göra vad som helst för godis . Vad behöver du ?");
Database.addText("se.secondHouseLollipop1Speech", "Detta är en citron - smaksatt slickepinne . Min favorit ! Det kostar 60 godisar , men det är värt det .");
Database.addText("se.secondHouseLollipop2Speech", "Den här är en jordgubbssmak slickepinne . Det smakar gott . Jag gillar den röda färgen . Endast 60 godis!");
Database.addText("se.secondHouseLollipop3Speech", "Detta är en pumpa - smaksatt slickepinne . Jag slår vad om att du aldrig provat en! 60 godisar och dess Yours.");
Database.addText("se.secondHouseLollipopButtonText", "Köp denna lollipop ( 60 godisar )");
Database.addText("se.secondHouseMerchantHatSpeech", "Jag skulle kunna sälja dig min hatt , men det är mycket värdefullt , du vet ... Du måste ge mig en hel del godis mot det . Låt oss säga 1 miljon godis . Det verkar rimligt , eller hur?");
Database.addText("se.secondHouseMerchantHatButtonText", "Köp handlarens hatten ( 1 000 000 karameller )");
Database.addText("se.secondHouseTimeRingSpeech", "Detta är en tid ring . Det finns en slags magisk . Det gör att du kan sakta ner tiden när du är i trubbel .");
Database.addText("se.secondHouseTimeRingButtonText", "Köp tiden ringen ( 500 karameller )");
Database.addText("se.secondHouseLeatherGlovesSpeech", "Dessa läderhandskar är gjorda med kamel läder , det är hög kvalitet . Jag har en hel del av dem i lager , det är därför de är så billiga : endast 300 godis!");
Database.addText("se.secondHouseLeatherBootsButtonText", "Köp ett par läderstövlar ( 300 karameller )");
Database.addText("se.secondHouseLeatherBootsSpeech", "Dessa högkvalitativa läderstövlar , gjorda med kamel läder , kommer att hålla fötterna varma .");
Database.addText("se.secondHouseLeatherGlovesButtonText", "Köp ett par läderhandskar ( 300 karameller )");
Database.addText("se.secondHouseChocolateBarSpeech", "Detta är en chokladkaka . Jag vet inte vad det används för , men det råkar vara ganska ovanligt , vilket förklarar priset . 800 godis och det är ditt!");
Database.addText("se.secondHouseChocolateBarButtonText", "Köp chokladkaka ( 800 karameller )");
Database.addText("se.outsideTheHoleButton", "Hoppa i detta stora hål i marken");
Database.addText("se.theCaveExitText0", "Du äntligen nått grottans utgång .");
Database.addText("se.theCaveExitText1", "Du kan se en stor skog utanför här .");
Database.addText("se.theCaveExitButtonText", "Lämna grottan");
Database.addText("se.theCaveFirstSentenceWentStraight", "Du gick rakt på .");
Database.addText("se.theCaveFirstSentenceWentLeft", "Du tog den vänstra vägen .");
Database.addText("se.theCaveFirstSentenceWentRight", "Du tog rätt väg .");
Database.addText("se.theCaveFirstSentenceYouAre", "Du är i en grotta . Det finns tre vägar framför dig.");
Database.addText("se.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Du ser en konstig sak på marken framför dig .");
Database.addText("se.theCavePattern_ChocolateBarNowSeeChocolateBar", "Du ser en chokladkaka framför dig .");
Database.addText("se.theCavePattern_TreasureMapSentence", "Du ser små stenar konstigt arrangerade på golvet .");
Database.addText("se.theCavePattern_MonkeyWizardSentence", "Du snubblar på en naken apa guiden .");
Database.addText("se.theCavePattern_MonkeyWizardButton", "utmana honom");
Database.addText("se.theCavePattern_OctopusKingSentence", "Du snubblar på Octopus King. Det verkar otäckt .");
Database.addText("se.theCavePattern_OctopusKingButton", "utmana det");
Database.addText("se.fortressInsideText0", "Du är inne i öknen fästningen .");
Database.addText("se.fortressInsideText1", "Du kan välja mellan tre dörrar .");
Database.addText("se.fortressInsideText2", "Var och en av dem leder till ett stort rum med en skatt på slutet.");
Database.addText("se.fortressInsideEnterRoom1", "Ange första rummet");
Database.addText("se.fortressInsideEnterRoom2", "Ange det andra rummet");
Database.addText("se.fortressInsideEnterRoom3", "Ange det tredje rummet");
Database.addText("se.treasureButtonDig", "Gräv");
Database.addText("se.treasureButtonYouFound", "Du hittade tre chokladkakor !");
Database.addText("se.sorceressHutHello", "Hej , jag är häxa . Jag kan lära dig en sak eller två om magi . Jag kan också ge dig några intressanta saker , eller trollformler för dig . Men allt har ett pris ! Och detta pris kommer att bli klubbor . En hel del av dem .");
Database.addText("se.sorceressHutClickedGrimoire", "Detta är en grimoire gjord för nybörjare . Genom att bära den med dig i uppdrag , kommer du att kunna kasta enkla men användbara trollformler . Du behöver det här ! Endast 5 000 klubbor .");
Database.addText("se.sorceressHutBuyGrimoireButton", "Köp denna grimoire ( 5 000 klubbor )");
Database.addText("se.sorceressHutBuyGrimoireSpeech", "Tack för köpande ! Du kommer att kunna kasta tre pass med denna grimoire . Lycka till !");
Database.addText("se.sorceressHutClickedGrimoire2", "Detta är en avancerad grimoire . Genom att bära den med dig i uppdrag , kommer du att kunna kasta två avancerade besvärjelser . Jag skrev det själv , vilket inte var lätt . 20 000 klubbor är ett rimligt pris .");
Database.addText("se.sorceressHutBuyGrimoire2Button", "Köp denna grimoire ( 20 000 klubbor )");
Database.addText("se.sorceressHutBuyGrimoire2Speech", "Tack för köpande ! Du kommer att kunna kasta två pass med denna grimoire . Använd dem klokt !");
Database.addText("se.sorceressHutClickedCauldron", "Detta är min kittel . Det tillåter mig att brygga magiska drycker . Jag kan sälja den till dig , men det är mycket dyrbar ... det kommer att kosta 100 000 klubbor .");
Database.addText("se.sorceressHutBuyCauldronButton", "Köp kitteln ( 100 000 klubbor )");
Database.addText("se.sorceressHutBuyCauldronSpeech", "Tack så mycket! 100 000 klubbor för mig ! Jag gav dig också en bryggning manual . Det kommer att vara användbar .");
Database.addText("se.sorceressHutClickedHat", "Jag har en fin hatt , verkligen! Men jag kan verkligen inte sälja den till dig . Det är waaaay för dyrbar . Egentligen kan jag inte . Insistera inte . Nej nej nej jag ska inte göra det . Nåja , jag ska byta det , men för 1 000 000 000 klubbor . Du förmodligen inte kommer att kunna betala det ändå .");
Database.addText("se.sorceressHutBuyHatButton", "Köp hatten (1 000 000 000 klubbor )");
Database.addText("se.sorceressHutBuyHatSpeech", "se.miljard klubbor för meeeeee ! Men jag har inte en hatt längre .. men en miljard klubbor , wow ! .. Det var värt det .");
Database.addText("se.cauldronPreviousPageButton", "Föregående sida");
Database.addText("se.cauldronNextPageButton", "Nästa sida");
Database.addText("se.cauldronWhatYouWantToPut", "Vad du vill sätta i kitteln");
Database.addText("se.cauldronWhatIsIn", "Vad finns i kitteln");
Database.addText("se.cauldronWhatYouCanDo", "Vad du kan göra med det");
Database.addText("se.castleBigRoomComment", "Ett stort rum");
Database.addText("se.castleARoomComment", "Ett rum");
Database.addText("se.castleADarkRoomComment", "Ett mörkt rum");
Database.addText("se.castleCastleEntranceComment", "Slottets entré");
Database.addText("se.castleTowerEntranceComment", "Tornet hänrycker");
Database.addText("se.castleNougatMonsterComment", "Attack jätten nougat monster");
Database.addText("se.castleGuardsComment", "Attack vakterna");
Database.addText("se.castleStairsComment", "Trappa");
Database.addText("se.buttonBackToTheCastle", "Tillbaka till slottet");
Database.addText("se.castleBigRoomHovenSpeechSad", "Hej ! Jag är en mycket gammal bakugn . Jag brukade laga massor av goda bakverk , men ingen använder mig längre . Kanske ... kanske du kan hjälpa mig ? Låt mig bara ta några sötsaker från dig ! Oroa dig inte , du kommer inte ångra det ! Du kan lita på mig .");
Database.addText("se.castleBigRoomHovenNotEnough", "Oh ... du inte har tillräckligt med godis , kan jag inte göra något . Jag är bara värdelös . Jag är värdelös bakugn , det är hur du ska ringa mig .");
Database.addText("se.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Tack så mycket! Jag använde 100 godis och en chokladkaka , och jag gjorde du ... en smärta au chocolat ! Det är min favorit bakverk , hoppas jag att du kommer att gilla det också!");
Database.addText("se.castleBigRoomHovenSpeechHappy", "Hey ! Om du vill att jag ska laga en annan bakelse , bara berätta ! Jag skulle gärna hjälpa dig .");
Database.addText("se.castleBigRoomHovenSpeechHappyNotEnough", "Åh , har du inte tillräckligt med godis , tyvärr . Jag behöver 100 godis och en chokladkaka . Kom tillbaka när du har det !");
Database.addText("se.castleBigRoomHovenLetHovenTakeButton", "Låt ugnen ta alla sötsaker man vill ta");
Database.addText("se.castleBigRoomHovenThanks", "Tack , ugn !");
Database.addText("se.dragonStopTickling", "Du där! Sluta kittla mig , snälla .");
Database.addText("se.dragonStopTicklingButton", "Uh , oh , sorry , jag trodde jag skulle attackera dig");
Database.addText("se.dragonTalking", "Jag är draken och detta är min borg . Jag ser att du lyckats komma in , måste du vara väldigt modig ... Jag vill gärna hjälpa någon som du. Vad letar du efter ?");
Database.addText("se.dragonTalkingChallengeButton", "utmana");
Database.addText("se.dragonTalkingFameButton", "Fame");
Database.addText("se.dragonTalkingCandiesButton", "Candies");
Database.addText("se.dragonTalkingChallengeSpeech", "Åh , så du vill utmaning ? Jag tycker du ska göra en resa till helvetet självt , är det känt att djävulen är en tuff utmanare . Hoppa på min rygg och jag tar dig dit !");
Database.addText("se.dragonTalkingFameSpeech", "Det bästa sättet att bli berömd är att möta utvecklaren själv . Jag vet var han bor och jag kan ta dig dit . Men var beredd , kommer detta inte vara lätt .");
Database.addText("se.dragonTalkingCandiesSpeech", "Ytterst är det vi alla vill ha godis , inte är det ? Jag tror att en av mina vänner kan hjälpa dig med det . Du kommer att känna igen honom lätt , han har bara ett öga . Bara berätta för honom att du känner mig .");
Database.addText("se.dragonTalkingChallengeAnswer", "Låt oss då !");
Database.addText("se.dragonTalkingFameAnswer", "Jag är redo .");
Database.addText("se.dragonTalkingCandiesAnswer", "Okej , tack !");
Database.addText("se.buttonBackToCastle", "Tillbaka till slottet");
Database.addText("se.talkingCandySpeechNoBox", "Hey ! Jag är talande godis . Du vann nästan matchen . Du behöver bara hitta godis låda . Det är i ett hus utanför byn . Detta är det sista steget !");
Database.addText("se.talkingCandySpeech1", "Hey ! Jag är talande godis . Grattis , du vann matchen ! Jag kommer att öppna ditt godis låda för dig , det här är din belöning . Ska jag fortsätta?");
Database.addText("se.talkingCandySpeech2", "Done ! Du kan nu skriva in det . Jag hoppas att du gillade spelet :)");
Database.addText("se.talkingCandyButton", "Yes !");
Database.addText("se.lighthousePuzzleResetButton", "Återställ");
Database.addText("tr.mapVillageComment", "Köy");
Database.addText("tr.mapFortressComment", "Çöl hisarı");
Database.addText("tr.mapATreeComment", "Bir ağaç");
Database.addText("tr.mapTheDesertComment", "Çöl");
Database.addText("tr.mapWishingWellComment", "Dilek kuyusu");
Database.addText("tr.mapLonelyHouseComment", "Yalnız bir ev");
Database.addText("tr.mapForestComment", "Orman");
Database.addText("tr.mapCastleEntranceComment", "Kalenin girişi");
Database.addText("tr.mapCastleComment", "Kale");
Database.addText("tr.mapDragonComment", "Ejderha");
Database.addText("tr.candyBoxEatCandiesButton", "Bütün şekerleri ye!");
Database.addText("tr.candyBoxThrowCandiesButton", "10 tane şekeri yere at");
Database.addText("tr.mapVillageAHouseComment", "Bir ev");
Database.addText("tr.mapVillageForgeComment", "Demirci ocağı");
Database.addText("tr.buttonBackToTheMap", "Haritaya geri dön");
Database.addText("tr.mapSorceressHutComment", "Sihirbazın kulübesi");
Database.addText("tr.buttonBackToTheVillage", "Köye geri dön");
Database.addText("tr.mapATreeIntroductionSpeech", "Merhaba, ben sincap. Size şeker ve bir sürü şey verebilirim. Şekeri ne kadar çok sevdiğinizi biliyorum. Fakat bu ormanda çok yalnızım.");
Database.addText("tr.mapATreeIntroductionButton", "Nasıl yardımcı olabilirim ?");
Database.addText("tr.mapATreeFirstQuestion", "Size sorular soracağım. Doğru cevaplarsanız, tatlıların en tatlısı sizin olacak! İlk soru: gerçekten şekerleri seviyor musunuz? (cevaplar ingilizce olacaktır)");
Database.addText("tr.mapATreeSecondQuestion", "Aynen öyle! Bu 20 şeker senin. Şimdi sıradaki harfi doğru tahmin edip sıralamayı tamamla ve yeni ödülünü al: S, E, I, D, N, A, ?");
Database.addText("tr.mapATreeThirdQuestion", "Şekerler! Bu 100 şeker senin. Sıradaki soru : Dünyadaki en şeker insanın kaç şekeri var?");
Database.addText("tr.mapATreeFourthQuestion", "Bu 500 şeker senin! Sıradaki ödül çok daha ilginç olmalı...  Bilmece geliyor : Kadim bir ormanda çok yaşlı bir ağaç büyür, üzerinde dünyanın en zeki hayvanı yaşar. Öyle denir ki bu ağacın 60 kökü, 360 dalı ve 2160 yaprağı vardır. Gövdesinde kaç tane iz bulabilirsin?");
Database.addText("tr.mapATreeFifthQuestion", "Tebrikler! Tabi ki kendi ağacımdan bahsediyordum. Bu 3 lolipop senin, güzelce kullan! Sıradaki bilmecen geliyor, dikkatli dinle: Dolunayın ışığında, kızıl bir denize sarı bir şapka attım. Sarı şapkaya ne olur?");
Database.addText("tr.mapATreeTicTacToeIntro", "Güzel cevapladın! O kadar da zor değildi. Bu 3 çikolata senin! Sıradaki ödül için, kuralları biraz değiştiriyoruz. Benimle bir oyun oynamak zorundasın!  Hazır mısın?");
Database.addText("tr.mapATreeTicTacToeIntroButton", "Tabi ki öyleyim!");
Database.addText("tr.mapATreeTicTacToeLetsPlay", "Oyunumuzun adı tic-tac-toe. 3e 3lük bir tahtada oynuyorz. Sen X işaretini kullanırken ben O işaretini kullanacağım. İşaretlerimizi değişik şekillerde koyacağız ve amacımız 3 tane işareti yanyana / üstüste / çapraz yaparak üçlü yakalamak. Hadi, ilk sen başla!");
Database.addText("tr.mapATreeTicTacToeNobodyWins", "Tahta ağzına kadar doldu ve ikimiz de üçlü yakalayamadık : kimse kazanamadı! Tekrar denemek ister misin?");
Database.addText("tr.mapATreeTicTacToeYouLose", "Üçlü yakaladım! Ben kazandım.Tekrar denemek ister misin?");
Database.addText("tr.mapATreeTicTacToeTryAgainButton", "Evet!");
Database.addText("tr.mapATreeTicTacToeYouWin", "Vay, bu hareketi beklemiyordum. Ama üçlüyü yakaladın, orası kesin. Sen kazandın! Bu anahtarı al! Bu anahtar ormanın altındaki evlerden birini açıyor.");
Database.addText("tr.mapATreeTicTacToeAnymoreSweet", "Teşekkürler sincap, başka bilmecen var mı?");
Database.addText("tr.mapATreeNoMoreChallenge", "Malesef hayır, başka bilmecem kalmadı... Senle oynamak çok eğlenceliydi, bunun için teşekkür ederim!");
Database.addText("tr.buttonExitQuestKeeping", "Görevden çık (ve bulduğunu al)");
Database.addText("tr.buttonExitQuestNoKeeping", "Görevden çık (bulduğunu alamayacaksın)");
Database.addText("tr.buttonExitQuestNoKeepingBecauseLose", "Görevden çık (bulduğunu alamayacaksın çünkü başarısız oldun)");
Database.addText("tr.mapVillageLockedHouseComment", "Kilitli bir ev");
Database.addText("tr.mapVillageForgeIntroductionSpeech", "Selam! Ben demirci. Envaiçeşit silah ve ekipmanları satabilirim.");
Database.addText("tr.mapVillageForgeIntroductionSpeechNoMoreToSell", "Selam! Ben demirci. Malesef, satacak birşeyim kalmadı. Sonra gelirsen, belki?");
Database.addText("tr.mapVillageFifthHouseNoWeaponSpeech", "Merhaba. Kilerim farelerle dolup taştı, onlardan kurtulmam lazım... Keşke silahlı biri bana yardım etseydi...");
Database.addText("tr.mapVillageFifthHouseWeaponSpeech", "Şşt, sen! Silahın var! Kilerimi mahveden farelerden kutrulursan, seni ödüllendiririm!");
Database.addText("tr.mapVillageFifthHouseAgree", "O zaman hadi gidelim!");
Database.addText("tr.mapVillageFifthHouseCellarDone", "Onlardan kurtulduğun için teşekkür ederim! Ödül olarak çok kıymetli bişey var : dünyanın bir haritası. Sanırım sen bunu benden fazla kullanacksın.");
Database.addText("tr.mapVillageTheShopComment", "Dükkan");
Database.addText("tr.mapBridgeComment", "Köprü");
Database.addText("tr.mapFarmComment", "Lolipop tarlası");
Database.addText("tr.mapCaveEntranceComment", "Mağara girişi");
Database.addText("tr.mapLighthouseComment", "Deniz feneri");
Database.addText("tr.mapPierComment", "İskele");
Database.addText("tr.mapTheHoleComment", "Çukur");
Database.addText("tr.candyBoxRequestStatusBarUnlocked", "Geliştiriciden yeni bir özellik iste (30 şeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedCfg", "Başka bir tane iste (5 şeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedSave", "Bir kere daha iste (5 şeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedHealthBar", "Daha etkileyici birşeyler iste (5 şeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedMap", "Son isteğin! Bunun verdiğin şekerlere değmesi lazım. (10 şeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedComment", "Durum çubuğunu açtın! (yukarıda)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedCfgComment1", "Artık ayarlar sekmesine erişebilirsin.");
Database.addText("tr.candyBoxRequestStatusBarUnlockedCfgComment2", "Eğer istersen, dili değiştirebilirsin.");
Database.addText("tr.candyBoxRequestStatusBarUnlockedSaveComment", "Vahşi bir kayıt sekmesi belirdi!");
Database.addText("tr.candyBoxRequestStatusBarUnlockedHealthBarComment", "Bu 100 sağlık puanı senin. Bunlar işine yarayacak.");
Database.addText("tr.cfgChooseLanguage", "Dili seç :");
Database.addText("tr.cfgInvertColors", "Zıt renkler?");
Database.addText("tr.gridItemMainMapName", "Harita");
Database.addText("tr.gridItemMainMapDescription", "Dünyanın haritası");
Database.addText("tr.gridItemPogoStickName", "Pogo çubuğu");
Database.addText("tr.gridItemPogoStickDescription", "Bu eşya görevlerde zıplamana yarar!");
Database.addText("tr.gridItemTimeRingName", "Zaman yüzüğü");
Database.addText("tr.gridItemTimeRingDescription", "Bu item görevlerde yeni bir yetenek ekler: zamanı yavaşlatabilirsin. Olaylar senin için çok hızlıysa, yüzüğü kullan!");
Database.addText("tr.gridItemThirdHouseKeyName", "Üçüncü evin anahtarı");
Database.addText("tr.gridItemThirdHouseKeyDescription", "Bu anahtar köydeki üçüncü eve girmeni sağlar.");
Database.addText("tr.gridItemFeatherName", "Çöl kuşunun tüyü");
Database.addText("tr.gridItemFeatherDescription", "Bu büyülü tüy pogo çubuğu kullanırken daha yukarı zıplamana yarar!");
Database.addText("tr.gridItemFeatherDescriptionNoPogoStick", "Durup dururken, bu tüyün pogo çubuğun olsa işe yarayacağını hissediyorsun...");
Database.addText("tr.gridItemSpongeName", "Büyülü sünger");
Database.addText("tr.gridItemSpongeDescription", "Bu büyülü sünger kendini sünger gibi sıkmanı sağlar, böylece boyutun küçülür.");
Database.addText("tr.gridItemFortressKeyName", "Çöl hisarının anahtarı");
Database.addText("tr.gridItemFortressKeyDescription", "Bu anahtar çölün üzerindeki  eski kadim hisara girmeni sağlar. Orada ne bulacağını kim bilebilir?");
Database.addText("tr.gridItemHeartPendantName", "Kalpli kolye ucu");
Database.addText("tr.gridItemHeartPendantDescription", "Bu kalpli kolye, boynuna astığın sürece sağlık puanını arttıracak.");
Database.addText("tr.gridItemHeartPlugName", "Kalp tıkacı");
Database.addText("tr.gridItemHeartPlugDescription", "Demirden, örümcek bacaklarından ve merkezinde mühürlü olan \"can likörü\"nden yapılmış bu can tıkacı can puanlarını yüzde 20 arttıracak!");
Database.addText("tr.gridItemBeginnersGrimoireName", "Acemilerin büyü kitabı");
Database.addText("tr.gridItemBeginnersGrimoireDescription", "Bu büyü kitabı, kullanması kolay üç büyü içerir. Gerçekten acemiler içindir. Asit yağmuru büyüsünü (büyük miktarda asit damlaları düşmanlarının üzerine düşer) Alev topu büyüsünü (alevden oluşan dev bir sihirli top düşmanlarına doğru uçar.) ve ışınlanma büyüsünü (ki seni tamamen rastgele bir yere ışınlar) kullanmanı sağlar.");
Database.addText("tr.gridItemAdvancedGrimoireName", "Uzmanların büyü kitabı");
Database.addText("tr.gridItemAdvancedGrimoireDescription", "Bu ileri büyü kitabı iki büyü kullanmanı sağlar : sihir silme büyüsü ve ağaç kalkanı büyüsü. Birincisi görev zamanında bütün büyüleri silmeni sağlar, buna senin ve düşmanlarının büyüleri de dahildir. İkincisi ise senin etrafında temas halinde düşmanına hasar veren, ağaçlardan oluşan bir kalkan oluşturur.");
Database.addText("tr.gridItemBlackMagicGrimoireName", "Kara büyü kitabı");
Database.addText("tr.gridItemBlackMagicGrimoireDescription", "Bu kitabı mağarada buldun, ulaşması çok zordu, ve bunun bir sebebi vardı. Bu kitap sana çok güçlü iki kara büyü bahşeder. Birincisi, önünde obsidyenden oluşan dev bir duvar oluşturur, bunu düşmanlarını yavaşlatmak için kullanabilirsin. İkincisi ise sen dahil görevdeki herkese saldıran bir şeytan güruhu çağırır. Bunu kullanırken dikkatli ol.");
Database.addText("tr.gridItemUnicornHornName", "Tek boynuzlu atın boynuzu");
Database.addText("tr.gridItemUnicornHornDescription", "Bu büyülü boynuz zamanında bir tek boynuzlu atındı. Güçlü iyileştirme özellikleri sana bolca yardım edecek. Bu tek boynuzlu atın adını Mahmut diye duydun.");
Database.addText("tr.gridItemXinopherydonClawName", "Xinopherydon pençesi");
Database.addText("tr.gridItemXinopherydonClawDescription", "Bu pençe bir Xinopherydona aitti -, herkesin soyunun tükendiğine inandığı iki başlı antik bir hayvan. Bu pençe kullandığın silahın hasarını ikiye katlar.");
Database.addText("tr.gridItemPitchforkName", "Dirgen");
Database.addText("tr.gridItemPitchforkDescription", "Bu özel dirgen toprağı ters düz etmeden gevşetmene yarar, böylece toprağın altındaki ekosisteme zarar vermezsin. Dirgen ile lolipop tarlanın üretimi üçe katlanır.");
Database.addText("tr.gridItemShellPowderName", "Kabuk tozu");
Database.addText("tr.gridItemShellPowderDescription", "Kabuk tozları çiftçiler tarafından lolipop tarlalarının üretimini arttırmak amacıyla sıklıkla kullanılır. Bu toz ile lolipop tarlanın üretimi üçe katlanır!");
Database.addText("tr.gridItemPName", "P taşı");
Database.addText("tr.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("tr.gridItemLName", "L taşı");
Database.addText("tr.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("tr.gridItemAName", "A taşı");
Database.addText("tr.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("tr.gridItemYName", "Y taşı");
Database.addText("tr.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("tr.gridItemRedSharkFinName", "Büyülü kırmızı köpekbalığı yüzgeci");
Database.addText("tr.gridItemRedSharkFinDescription", "Bu büyülü yüzgeç  alev toplarının verdiği hasarı yüksek miktarda arttırır. Sonunda şu alev topu bir işe yaramaya başladı.");
Database.addText("tr.gridItemGreenSharkFinName", "Büyülü yeşil köpekbalığı yüzgeci");
Database.addText("tr.gridItemGreenSharkFinDescription", "Bu büyülü yüzgeç lolipop tarlana doğanın gücünü getirir! Üretimin 5e katlandı.");
Database.addText("tr.gridItemPurpleSharkFinName", "Büyülü mor köpekbalığı yüzgeci");
Database.addText("tr.gridItemPurpleSharkFinDescription", "Bu büyülü yüzgeç sana yeni bir kara büyü getirdi. Her görevde bir kere kullanabilirsin, çok dikkatli ol.");
Database.addText("tr.gridItemTalkingCandyName", "Konuşan bir şeker");
Database.addText("tr.gridItemTalkingCandyDescription", "Bu konuşan şeker, kalenin kulesinin tepesine dört taşı koyunca belirdi. Belki sana candy box'ı açma konusunda yardımcı olabilir...");
Database.addText("tr.inventorySpecialNothingEqItem", "Hiç bir şey");
Database.addText("tr.eqItemWeaponWoodenSwordName", "Tahta Kılıç");
Database.addText("tr.eqItemWeaponWoodenSwordDescription", "Tahtadan yapılmış basit bir kılıç");
Database.addText("tr.eqItemWeaponIronAxeName", "Demir balta");
Database.addText("tr.eqItemWeaponIronAxeDescription", "Yalnızca demir balta. İyi bilenmiş. Tahta kılıçtan çok daha güçlü.");
Database.addText("tr.eqItemWeaponPolishedSilverSwordName", "Parlatılmış gümüş kılıç");
Database.addText("tr.eqItemWeaponPolishedSilverSwordDescription", "Güçlü bir kılıç, dikenlerle güçlendirildi.");
Database.addText("tr.eqItemWeaponTrollBludgeonName", "Troll'ün sopası");
Database.addText("tr.eqItemWeaponTrollBludgeonDescription", "Bu sopayı köprüyü koruyan trollden aldın. Biraz yavaş ama düşmanlarını gayet güzel eziyor.");
Database.addText("tr.eqItemWeaponTribalSpearName", "Kabile mızrağı");
Database.addText("tr.eqItemWeaponTribalSpearDescription", "Bu kabile mızrağını yerdeki büyük delikte kaybolmuş kabile savaşçısının cesedinde buldun. Başta kullanması zor gelse de bir kere alışınca güzel bir silah olduğunu anlıyorsun.");
Database.addText("tr.eqItemWeaponSummoningTribalSpearName", "Celbeden kabile mızrağı");
Database.addText("tr.eqItemWeaponSummoningTribalSpearDescription", "Bu büyülü kabile mızrağı normal kabile mızrağından biraz daha güçlü olmasının yanı sıra, görevlerinde sık sık yardıma gelecek kabile savaşçılarını çağırır.");
Database.addText("tr.eqItemWeaponMonkeyWizardStaffName", "Büyücü maymunun asası");
Database.addText("tr.eqItemWeaponMonkeyWizardStaffDescription", "Bu asa mağarada bulduğun çıplak büyücü maymuna aitti. Düşmanlarını hedef alan, sık sık büyüler gönderir.");
Database.addText("tr.eqItemWeaponEnchantedMonkeyWizardStaffName", "Büyücü maymunun asası (efsunlu)");
Database.addText("tr.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Bu asa efsunsuz olanından daha hızlı, ayrıca daha fazla büyü gönderiyor.");
Database.addText("tr.eqItemWeaponGiantSpoonName", "Dev bir kaşık");
Database.addText("tr.eqItemWeaponGiantSpoonDescription", "Bu dev kaşık çöl hisarındaki dev çaydanlığın içindeydi. Daha önce biri bunu kaşık olarak kullandı mı, bilmiyorsun ama eğer biri kullandıysa kullanan kişi çok büyük olmalı. Muhtemelen onunla tanışmak istemezsin.");
Database.addText("tr.eqItemWeaponGiantSpoonOfDoomName", "Cehennemin dev kaşığı");
Database.addText("tr.eqItemWeaponGiantSpoonOfDoomDescription", "Bu dev kaşık bulabileceğin normal dev kaşıklardan daha da güçlü, örneğin, çaydanlıkta. Yine de yeteri kadar yavaş.");
Database.addText("tr.eqItemWeaponScytheName", "Tırpan");
Database.addText("tr.eqItemWeaponScytheDescription", "Derler ki bu tırpan bizzat Ölümün kendisine aitti. Fazlasıyla hızlı.");
Database.addText("tr.eqItemHatMerchantHatName", "Tüccarın şapkası");
Database.addText("tr.eqItemHatMerchantHatDescription", "Bu şapka sana şeker tüccarı tarafından satıldı. Şeker tüccarı şekerleri sever. Bu şapkayla görevlerde bulacağın şekerler 7ye katlandı!");
Database.addText("tr.eqItemHatSorceressHatName", "Sihirbazın şapkası");
Database.addText("tr.eqItemHatSorceressHatDescription", "Bu şapka sana sihirbaz tarafından satıldı. Bu büyülerinin ve iksirlerinin etkilerini güçlendirecek.");
Database.addText("tr.eqItemHatOctopusKingCrownName", "Ahtapot Kralın tacı");
Database.addText("tr.eqItemHatOctopusKingCrownDescription", "Bu tacı giydiğinde kendinden daha emin hissediyorsun. Tacın sana görevlerde bir artısı yok fakat kendine güven önemlidir.");
Database.addText("tr.eqItemHatOctopusKingCrownWithJaspersName", "Ahtapot Kralın yeşim taşlı tacı");
Database.addText("tr.eqItemHatOctopusKingCrownWithJaspersDescription", "Bu efsunlu tac, altından ve kırmızı yeşim taşından yapılmış. Görevlerde etrafına güçlü alev topları gönderir. Ve ayrıca, parlıyor.");
Database.addText("tr.eqItemHatOctopusKingCrownWithObsidianName", "Ahtapot Kralın obsidyenli tacı");
Database.addText("tr.eqItemHatOctopusKingCrownWithObsidianDescription", "Bu efsunlu tac, altından ve obsidyenden yapılmış ve çok güzel görünüyor. Görevlerde bir süreliğine yardımına gelecek Ahtapot Kralı çağırır. Ne sarılgan müttefik ama!");
Database.addText("tr.eqItemGlovesLeatherGlovesName", "Deri eldivenler");
Database.addText("tr.eqItemGlovesLeatherGlovesDescription", "Bu eldivenler basitçe hiç bişey yapmıyor. Ama en azından yumuşak ve rahatlar!");
Database.addText("tr.eqItemGlovesRedEnchantedGlovesName", "Kırmızı efsunlu eldivenler");
Database.addText("tr.eqItemGlovesRedEnchantedGlovesDescription", "Bu efsunlu eldivenler etraf karanlık olduğunda kırmızı ve yumuşak bir ışık yayar. Görevlerde düşmanlarına doğru küçük alev topları yollar, yani kesinlikle işe yarar.");
Database.addText("tr.eqItemGlovesPinkEnchantedGlovesName", "Pembe efsunlu eldivenler");
Database.addText("tr.eqItemGlovesPinkEnchantedGlovesDescription", "Bu efsunlu eldivenler dokunduğun her şeye pembe bir iz bırakır. Görevlerde canını durmaksızın arttırır.");
Database.addText("tr.eqItemBootsRocketBootsName", "Roket botlar");
Database.addText("tr.eqItemBootsRocketBootsDescription", "Bu mükemmel roket botlar havada zıplamana yarar, böylece aslında uçuyor oluyorsun!");
Database.addText("tr.eqItemBootsLeatherBootsName", "Deri botlar");
Database.addText("tr.eqItemBootsLeatherBootsDescription", "Sadece deri botlar. Hiçbirşeyleri özel değil.");
Database.addText("tr.eqItemBootsBootsOfIntrospectionName", "Oturaklı botlar");
Database.addText("tr.eqItemBootsBootsOfIntrospectionDescription", "Nefes al ve sakinleş. Bu botları giydiysen yere dokunduğun sürece asla hareket edemeyeceksin.");
Database.addText("tr.eqItemBodyArmoursLightweightBodyArmourName", "Hafif vücut zırhı");
Database.addText("tr.eqItemBodyArmoursLightweightBodyArmourDescription", "Bu vücut zırhı sana zayıf bir koruma sunar. Düşmanların saldırılarına karşı biraz daha dayanıklı olursun.");
Database.addText("tr.eqItemBodyArmoursKnightBodyArmourName", "Şövalyenin vücut zırhı");
Database.addText("tr.eqItemBodyArmoursKnightBodyArmourDescription", "Bu güçlü vücut armoru seni korur. Düşman saldırılarına daha fazla dayanırsın.");
Database.addText("tr.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Şövalyenin efsunlu vücut zırhı");
Database.addText("tr.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Bu zırh çok özeldir. Düşmanların saldırılarına karşı ÇOK daha fazla dayanıklı olursun ama silahının verdiği hasar yarıya iner.");
Database.addText("tr.mapVillageForgeBuyWoodenSwordButton", "Tahta bir kılıç al (150 şeker)");
Database.addText("tr.mapVillageForgeBuyWoodenSwordSpeech", "Aldığın için teşekkürler! Bu tahta kılıç baya zayıf ama başlangıç başlangıçtır.");
Database.addText("tr.mapVillageForgeBuyIronAxeButton", "Demir bir balta al (400 şeker)");
Database.addText("tr.mapVillageForgeBuyIronAxeSpeech", "Umarum bu demir baltayı seversin. Senin için daha yeni biledim!");
Database.addText("tr.mapVillageForgeBuyPolishedSilverSwordButton", "Parlatılmış gümüş bir kılıç al (2 000 şeker)");
Database.addText("tr.mapVillageForgeBuyPolishedSilverSwordSpeech", "Bu silahı oluşturmak benim için çok fazla zamana mal oldu. Ücretine değeceğine garanti veriyorum.");
Database.addText("tr.mapVillageForgeBuyLightweightBodyArmourButton", "Hafif bir vücut zırhu al (15 000 şeker)");
Database.addText("tr.mapVillageForgeBuyLightweightBodyArmourSpeech", "Bu vücut zırhı düşmanlarına karşı koruma sunar.");
Database.addText("tr.mapVillageForgeBuyScytheButton", "Bir tırpan al (5 000 000 şeker)");
Database.addText("tr.mapVillageForgeBuyScytheSpeech", "Bu tırpanı yapmak bir kaç ay sürdü. Gerçek bir sanat eseridir. Muhtemelen kullanabileceğin en hızlı silah bu silahtır. İyi şanslar!");
Database.addText("tr.wishingWellThrowFirstCandyButton", "Kuyuya bir şeker at");
Database.addText("tr.wishingWellCandyIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlılar karşılığında dilekler bahşedeceğim! Bana şeker attığında yaralarını iyileştiririm.");
Database.addText("tr.wishingWellThrewCandiesSpeech", "Yaraların iyileşti !");
Database.addText("tr.wishingWellNoWoundSpeech", "İyileşecek yaran yok!");
Database.addText("tr.wishingWellThrowFirstLollipopButton", "Kuyuya bir lolipop at");
Database.addText("tr.wishingWellLollipopIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlılar karşılığında dilekler bahşedeceğim! Bana lolipop attığında onları şekere dönüştürürüm.");
Database.addText("tr.wishingWellThrewLollipopsSpeech", "Lolipopların şekere dönüştü! Bir şekere iki lolipop.");
Database.addText("tr.wishingWellThrowChocolateBarButton", "Kuyuya bir çikolata barı at");
Database.addText("tr.wishingWellChocolateBarIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlılar karşılığında dilekler bahşedeceğim! Çikolata barlarını çok severim. Gerçekten, çok severim. Bana attığın her çikolata barı için, bu da dahil, büyülü bir efsunla ödüllendirileceksin.");
Database.addText("tr.wishingWellThrewChocolateBarSpeech", "Hangi nesneyi efsunlamak istersin?");
Database.addText("tr.wishingWellThrowPainAuChocolatButton", "Kuyuya bir pain au chocolat at");
Database.addText("tr.wishingWellPainAuChocolatIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlılar karşılığında dilekler bahşedeceğim! Bana bir pain au chocolat attığın zaman çok özel bir hediye alacaksın. Dikkatlice seç.");
Database.addText("tr.wishingWellThrewPainAuChocolatSpeech", "Pain au chocolat için teşekkürler! Şimdi hediyeni seçebilirsin.");
Database.addText("tr.wishingWellChooseGift", "Hediyeni seç!");
Database.addText("tr.wishingWellChooseGiftButton", "Seç");
Database.addText("tr.wishingWellGiftDoneSpeech", "Tamamdır! Artık yeni bir hediyen var. Hediyen envanter durumu ekranında belirecektir.");
Database.addText("tr.wishingWellNoPossibleEnchantment", "Efsunlanacak şey yok.");
Database.addText("tr.wishingWellChooseEnchantment", "Efsunu seç");
Database.addText("tr.wishingWellEnchantButton", "Efsunla");
Database.addText("tr.wishingWellEnchantmentDoneSpeech", "Oldu! Eşyan efsunlandı.");
Database.addText("tr.pierLighthouseButton", "Deniz fenerine botla git");
Database.addText("tr.pierTheSeaButton", "Denize atla");
Database.addText("tr.lonelyHouseOpenBox", "Kutuyu aç");
Database.addText("tr.lonelyHouseShakeBox", "Kutuyu salla");
Database.addText("tr.lonelyHouseBreakLock", "Kilidi kır");
Database.addText("tr.lonelyHouseKickBox", "Kutuyu tekmele");
Database.addText("tr.lonelyHouseAskTheBoxToOpenItself", "Kutudan kendi kendine açılmasını iste");
Database.addText("tr.lonelyHouseLureTheBoxWithACandy", "Kutuyu şekerle cezbet");
Database.addText("tr.lonelyHouseTakeTheBox", "Kutuyu yanına al, zaten açmak için muhtemelen bir anahtara ihtiyacın var");
Database.addText("tr.lonelyHouseOpenBoxResult", "Kutu kilitli");
Database.addText("tr.lonelyHouseShakeBoxResult", "Hiçbirşey olmadı.");
Database.addText("tr.lonelyHouseBreakLockResult", "Kilit direniyor");
Database.addText("tr.lonelyHouseKickBoxResult", "Ayağın biraz acıdı fakat hiçbirşey olmadı.");
Database.addText("tr.lonelyHouseAskTheBoxToOpenItselfResult", "...kutuyla konuştuğunun farkında mısın?");
Database.addText("tr.lonelyHouseLureTheBoxWithACandyResult", "Kutunun umrunda değil");
Database.addText("tr.lonelyHouseTakeTheBoxResult", "Candy box muhtemelen içinde çok ilginç şeyler barındırıyor.");
Database.addText("tr.lollipopFarmConstructMill", "Değirmen inşa et (10 000 lolipop)");
Database.addText("tr.lollipopFarmFeedMill", "Değirmeni besle");
Database.addText("tr.lollipopFarmCurrentCandiesProduction", "Anlık şeker üretimi");
Database.addText("tr.lollipopFarmDigPond", "Yapay göl kaz (100 000 lolipop)");
Database.addText("tr.lollipopFarmBuyLolligator", "Bir lolimsah al (1200 şeker)");
Database.addText("tr.lollipopFarmLolligatorsConversionText", "Şeker -> Lolipop dönüşümü aktif");
Database.addText("tr.lighthouseAskButton", "Sor");
Database.addText("tr.lighthouseQuestionWho", "Siz kimsiniz?");
Database.addText("tr.lighthouseQuestionWhoSpeech", "Ben çok yaşlı bir tek gözlü devim.");
Database.addText("tr.lighthouseQuestionWhat", "Burada napıyorsunuz?");
Database.addText("tr.lighthouseQuestionWhatSpeech", "Burada yaşayıp bütün gün bir botun gelmesini beklerim. Daha önce bir bot göreli uzun zaman oldu, ama burada beklemeliyim, denize gözlerimi dikip, çünkü o bot gelecektir...");
Database.addText("tr.lighthouseQuestionWhyEatCandies", "Neden şeker yemeliyim?");
Database.addText("tr.lighthouseQuestionWhyEatCandiesSpeech", "Çünkü şekerler sağlığa faydalıdır!");
Database.addText("tr.lighthouseQuestionCandyBox", "Candy box nedir biliyor musunuz?");
Database.addText("tr.lighthouseQuestionCandyBoxSpeech", "Dünyadaki bütün şekerleri içerdiği söylenen çok eski bir kutudur. Efsaneye göre kutuyu açmayı başaran her kimse o kadar fazla şekere sahip olur ki onun için her şey mümkündür.");
Database.addText("tr.lighthouseQuestionDragon", "Buraya gelmemi ejderha söyledi çünkü şeker istiyorum.");
Database.addText("tr.lighthouseQuestionDragonSpeech", "Hmm, anlıyorum... Yani, sana şekerleri direk veremem ama sana çok fazla şeker elde etmen için gerekli temel bir şey verebilirim. Vermeden önce sadece seni test etmem gerekiyor. Çünkü elimdeki şey herkese verilemez. Bu bulmacayı çöz ve senin olsun.");
Database.addText("tr.lighthouseFoundStone", "Tebrikler! Testi geçtin ve taşı buldun. Bu çok kıymetli, ama sadece bunun gibi diğer üç taşı bulduktan sonra. İyi şanslar!");
Database.addText("tr.lighthouseFoundStoneAgain", "İyi iş, bulmacayı bir kere daha yaptın. Bunu seviyorsun gibi görünüyor.");
Database.addText("tr.saveLocalSaveTitle", "Tarayıcıyı kaydet");
Database.addText("tr.saveLocalSaveWhy", "Bu aygıtta ve tarayıcıda oynamaya devam etmek için kayıtları seçin.");
Database.addText("tr.saveLocalSaveWarning0", "Tarayıcın HTML5i desteklemiyor gibi görünüyor.");
Database.addText("tr.saveLocalSaveWarning1", "Yerel kayıt özelliğini kullanmak için tarayıcını güncellemelisin.");
Database.addText("tr.saveLocalSaveChooseSlot", "Kayıt yeri seç :");
Database.addText("tr.saveLocalSaveAutosaveEnabled", "Otomatik kayıt aktif");
Database.addText("tr.saveLocalSaveChooseWhatToDo", "Yapmak istediğini seç :");
Database.addText("tr.saveLocalSaveSaveButton", "Kaydet");
Database.addText("tr.saveLocalSaveAutosaveButton", "Her 10 dakikada bir kaydet");
Database.addText("tr.saveLocalSaveDisableAutosaveButton", "Otomatik kaydı devre dışı bırak");
Database.addText("tr.saveFileSaveTitle", "Metin kaydı");
Database.addText("tr.saveFileSaveWhy0", "Metin kaydını şunun için yap :");
Database.addText("tr.saveFileSaveWhy1", "Oyuna başka bir tarayıcıda ya da aygıtta devam etmek istiyorsan");
Database.addText("tr.saveFileSaveWhy2", "Kaydını başka birisiyle paylaşmak istiyorsan");
Database.addText("tr.saveFileSaveWhy3", "Herhangi bir sebepten dolayı tarayıcı önbelleğini boşaltmak istiyorsan");
Database.addText("tr.saveFileSaveWhy4", "(Yerel kayıtların silinecek)");
Database.addText("tr.saveFileSaveButton", "Geçerli oyunu metin olarak al");
Database.addText("tr.saveFileSaveWarning", "Bu metni başka bir yere kopyala! (örneğin bir dosyaya)");
Database.addText("tr.saveLocalLoadTitle", "Tarayıcıya yükle");
Database.addText("tr.saveLocalLoadYouCan", "Bu linkleri kullanarak yerel bir kayedı yükleyebilirsin:");
Database.addText("tr.saveLocalLoadThanksTo", "HTML5 sağolsun,bu linkleri offline iken bile kullanabilmen lazım.");
Database.addText("tr.saveFileLoadTitle", "Metin yükle");
Database.addText("tr.saveFileLoadPaste", "Kaydını aşağıya yapıştır, sonra Yükle tuşuna tıkla");
Database.addText("tr.saveFileLoadButton", "Yükle");
Database.addText("tr.mountainsText0", "Dağlarda bir şeye rastladın!");
Database.addText("tr.mountainsText1", "İlginç görünüyor. Belki işe yarayabilir.");
Database.addText("tr.mountainsTextButton", "Dağlara tırmanıp şeyi al.");
Database.addText("tr.mountainsTextAfter", "Pogo çubuğu buldun! Envanterine eklendi.");
Database.addText("tr.secondHouseIntroSpeech", "Merhaba, ben şeker tüccarıyım. Şekerler için herşeyi yaparım. Neye ihtiyacın var?");
Database.addText("tr.secondHouseLollipop1Speech", "Bu limon aromalı lolipop. Benim favorim! Fiyatı 60 şeker ama buna değer.");
Database.addText("tr.secondHouseLollipop2Speech", "Bu çilek aromalı lolipop. Tadı güzeldir. Kırmızı rengini seviyorum. Sadece 60 şeker!");
Database.addText("tr.secondHouseLollipop3Speech", "Bu balkabağı aromalı lolipop. İddiaya girerim daha önce hiç denemedin! 60 şeker ver ve senin olsun.");
Database.addText("tr.secondHouseLollipopButtonText", "Bu lolipopu al (60 şeker)");
Database.addText("tr.secondHouseMerchantHatSpeech", "Sana şapkamı satardım, ama bilirsin, çok değerlidir. Bunun için bana çok fazla şeker vermen lazım. Diyelim ki fiyatı 1 milyon şeker olsun. Adil, değil mi?");
Database.addText("tr.secondHouseMerchantHatButtonText", "Tüccarın şapkasını al (1 000 000 şeker)");
Database.addText("tr.secondHouseTimeRingSpeech", "Bu bir zaman yüzüğü. Bir şekilde büyülü bir yüzük. Tehlike içindeyken zamanı yavaşlatmana yarar.");
Database.addText("tr.secondHouseTimeRingButtonText", "Zaman yüzüğünü al (500 şeker)");
Database.addText("tr.secondHouseLeatherGlovesSpeech", "Bu deri eldivenler deve derisinden yapılma, yüksek kalitededir. Depomda bunlardan çok var, bu yüzden bu kadar ucuzlar : sadece 300 şeker!");
Database.addText("tr.secondHouseLeatherBootsButtonText", "Bir çift deri bot al  (300 şeker)");
Database.addText("tr.secondHouseLeatherBootsSpeech", "Bu yüksek kalite deri botlar, deve derisinden yapılmalar, ayaklarını sıcak tutarlar.");
Database.addText("tr.secondHouseLeatherGlovesButtonText", "Bir çift deri eldiven al (300 şeker)");
Database.addText("tr.secondHouseChocolateBarSpeech", "Bu çikolata. Ne için kullanıldığını bilmiyorum ama baya nadirler, ki fiyatını açıklıyor: 800 şeker ver ve senin olsun!");
Database.addText("tr.secondHouseChocolateBarButtonText", "Çikolata al (800 şeker)");
Database.addText("tr.outsideTheHoleButton", "Yerdeki büyük deliğe atla");
Database.addText("tr.theCaveExitText0", "Sonunda mğaradanın çıkışına ulaştın.");
Database.addText("tr.theCaveExitText1", "Dışarıda büyük bir orman görüyorsun.");
Database.addText("tr.theCaveExitButtonText", "Mağaradan çık");
Database.addText("tr.theCaveFirstSentenceWentStraight", "Düz gittin.");
Database.addText("tr.theCaveFirstSentenceWentLeft", "Soldaki yolu seçtin.");
Database.addText("tr.theCaveFirstSentenceWentRight", "Sağdaki yolu seçtin.");
Database.addText("tr.theCaveFirstSentenceYouAre", "Mağaradasın. Önünde üç tane yol var.");
Database.addText("tr.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Yerde, önünde ilginç bir şeye dikkat ettin.");
Database.addText("tr.theCavePattern_ChocolateBarNowSeeChocolateBar", "Önünde bir tane çikolata var.");
Database.addText("tr.theCavePattern_TreasureMapSentence", "Yerdeki küçük taşların garip bir şekilde düzenlendiğini görüyorsun.");
Database.addText("tr.theCavePattern_MonkeyWizardSentence", "Çıplak büyücü maymun karşına çıktı.");
Database.addText("tr.theCavePattern_MonkeyWizardButton", "Meydan oku");
Database.addText("tr.theCavePattern_OctopusKingSentence", "Ahtapot Kral karşına çıktı. Tehlikeli görünüyor.");
Database.addText("tr.theCavePattern_OctopusKingButton", "Meydan oku");
Database.addText("tr.fortressInsideText0", "Çöl hisarının içindesin.");
Database.addText("tr.fortressInsideText1", "Üç kapıdan birini seçebilirsin.");
Database.addText("tr.fortressInsideText2", "Her biri, seni sonunda hazine olan büyük bir odaya götürüyor.");
Database.addText("tr.fortressInsideEnterRoom1", "İlk odaya gir");
Database.addText("tr.fortressInsideEnterRoom2", "İkinci odaya gir");
Database.addText("tr.fortressInsideEnterRoom3", "Üçüncü odaya gir");
Database.addText("tr.treasureButtonDig", "Kaz");
Database.addText("tr.treasureButtonYouFound", "Üç tane çikolata buldun!");
Database.addText("tr.sorceressHutHello", "Merhaba, ben büyücüyüm. Sana sihir hakkında bir iki şey öğretebilirim. Sana ilginç şeyler de verebilirim, ya da sana büyüler veririm. Ama her şeyin bir ücreti var! Ve bu ücret de lolipoplar. Çok fazla.");
Database.addText("tr.sorceressHutClickedGrimoire", "Bu amatörler için büyü kitabı. Görevlerde bunu taşıyarak basit ama kullanışlı büyüler yapabilirsin. Buna ihtiyacın var! Sadece 5 000 lolipop.");
Database.addText("tr.sorceressHutBuyGrimoireButton", "Bu kitabı al (5 000 lolipop)");
Database.addText("tr.sorceressHutBuyGrimoireSpeech", "Aldığın için teşekkürler! Bu kitapla üç tane büyü yapabileceksin. İyi şanslar!");
Database.addText("tr.sorceressHutClickedGrimoire2", "Bu bir ileri büyü kitabı. Görevlerde bunu taşıyarak iki tane ileri büyü yapabilirsin. Bizzat kendim yazdım, hiç kolay olmadı. 20 000 lolipop adil bir fiyat olur.");
Database.addText("tr.sorceressHutBuyGrimoire2Button", "Bu kitabı al (20 000 lolipop)");
Database.addText("tr.sorceressHutBuyGrimoire2Speech", "Aldığın için teşekkürler! Bu kitapla üç tane büyü yapabileceksin. Dikkatli kullan!");
Database.addText("tr.sorceressHutClickedCauldron", "Bu benim kazanım. Benim büyülü iksirler yapmamı sağlıyor. Sana satardım, ama bu çok değerli... sana 100 000 lolipopa patlar.");
Database.addText("tr.sorceressHutBuyCauldronButton", "Kazanı al (100 000 lolipop)");
Database.addText("tr.sorceressHutBuyCauldronSpeech", "Çok teşekkürler! 100 000 lolipopum oldu! Ayrıca sana iksir yapma rehberini verdim. İşine yarayacaktır.");
Database.addText("tr.sorceressHutClickedHat", "Güzel bir şapkam var, evet! Ama cidden sana bunu satamam. Çünkü çoook değerli. Cidden, olmaz. Israr etme. Hayır. hayırhayırhayır bunu yapmamalıyım. Amaan, neyse, satabilirim ama fiyatı 1 000 000 000 lolipop olur. Muhtemelen bu kadarını zaten ödeyemezsin.");
Database.addText("tr.sorceressHutBuyHatButton", "Buy the hat (1 000 000 000 lollipops)");
Database.addText("tr.sorceressHutBuyHatSpeech", "Bir milyar lolipopum olduuuuuu! Ama artık şapkam yok.. ama bir milyar lolipop, vay! Sonuna kadar değdi.");
Database.addText("tr.cauldronPreviousPageButton", "Önceki sayfa");
Database.addText("tr.cauldronNextPageButton", "Sonraki sayfa");
Database.addText("tr.cauldronWhatYouWantToPut", "Kazana koymak istediklerin");
Database.addText("tr.cauldronWhatIsIn", "Kazanın içindekiler");
Database.addText("tr.cauldronWhatYouCanDo", "Bunlarla yapabileceklerin");
Database.addText("tr.castleBigRoomComment", "Büyük bir oda");
Database.addText("tr.castleARoomComment", "Bir oda");
Database.addText("tr.castleADarkRoomComment", "Karanlık bir oda");
Database.addText("tr.castleCastleEntranceComment", "Kalenin girişi");
Database.addText("tr.castleTowerEntranceComment", "Kulenin girişi");
Database.addText("tr.castleNougatMonsterComment", "Dev nuga canavarına saldır");
Database.addText("tr.castleGuardsComment", "Gardiyanlara saldır");
Database.addText("tr.castleStairsComment", "Merdivenler");
Database.addText("tr.buttonBackToTheCastle", "Kaleye geri dön");
Database.addText("tr.castleBigRoomHovenSpeechSad", "Merhaba! Ben çok eski bir ekmek fırınıyım. Önceden tonlarca güzel hamurişleri pişirirdim, ama artık kimse beni kullanmıyor. Belki... belki sen bana yardım edebilirsin. Sadece senden biraz tatlı almama izin ver. Telaşlanma, pişman olmayacaksın! Bana güvenebilirsin.");
Database.addText("tr.castleBigRoomHovenNotEnough", "Oh... sende yeteri kadar tatlı yok, ben birşey yapamam. Ben sadece işe yaramazım. Ben işe yaramaz ekmek fırınıyım, beni böyle anmalısın.");
Database.addText("tr.castleBigRoomHovenSpeechMadePainAuChocolat", "Oley! Çok teşekkürler! 100 şeker ve bir çikolata kullandım ve sana... pain au chocolat yaptım! Benim favori hamurişimdir, umarım sen de seversin!");
Database.addText("tr.castleBigRoomHovenSpeechHappy", "Hey! eğer başka bir hamurişi pişirmemi istersen sadece söyle! Seve seve yardımcı olurum.");
Database.addText("tr.castleBigRoomHovenSpeechHappyNotEnough", "Oh, sende yeteri kadar tatlı yok, maalesef. 100 şekere ve bir çikolataya ihtiyacım var. Bunları bulduğunda geri gel!");
Database.addText("tr.castleBigRoomHovenLetHovenTakeButton", "Fırının almak istediği tatlıları almasına izin ver");
Database.addText("tr.castleBigRoomHovenThanks", "Teşekkürler, fırın!");
Database.addText("tr.dragonStopTickling", "Hey, sen! Beni gıdıklamaktan vazgeç lütfen.");
Database.addText("tr.dragonStopTicklingButton", "Uh, oh, üzgünüm, Ben de sana saldırdığımı düşünüyordum.");
Database.addText("tr.dragonTalking", "Ben bir ejderhayım ve bursaı da benim kalem. Girmeyi başardığını görüyorum, çok cesur olmalısın... Senin gibi birine seve seve yardımcı olurum. Ne ile ilgileniyorsun?");
Database.addText("tr.dragonTalkingChallengeButton", "Meydan okuma");
Database.addText("tr.dragonTalkingFameButton", "Ün");
Database.addText("tr.dragonTalkingCandiesButton", "Şekerler");
Database.addText("tr.dragonTalkingChallengeSpeech", "Demek meydan okumak istiyorsun? Bence cehennemin kendisine gitmelisin, şeytan zorlu bir rakip olarak bilinir. Sırtımı atla ve seni götüreyim!");
Database.addText("tr.dragonTalkingFameSpeech", "Ünlü olmanın en iyi yolu geliştiricinin kendisiyle yüzleşmektir. Nerede yaşadığını biliyorum ve seni oraya götürebilirim. Ama hazırlıklı ol, bu hiç kolay olmayacak.");
Database.addText("tr.dragonTalkingCandiesSpeech", "Eninde sonunda, hepimizin istediği şey şekerler, değil mi? Sanırım bir arkadaşım bu konuda sana yardımcı olabilir. Onu kolayca farkedebilirsin, sadece tek gözü var. Ona beni tanıdığını söyle.");
Database.addText("tr.dragonTalkingChallengeAnswer", "O zaman hadi gidelim!");
Database.addText("tr.dragonTalkingFameAnswer", "Ben hazırım.");
Database.addText("tr.dragonTalkingCandiesAnswer", "Tamam, teşekkürler!");
Database.addText("tr.buttonBackToCastle", "Kaleye geri dön");
Database.addText("tr.talkingCandySpeechNoBox", "Hey! Ben konuşan şeker. Neredeyse oyunu kazandın. Sadece candy box'ı bulman lazım. Köyün dışındaki evin içinde. Bu son adım!");
Database.addText("tr.talkingCandySpeech1", "Hey! Ben konuşan şeker. Tebrikler, oyunu kazandın! ISenin için Candy box'ı açacağım, ödülün bu. Devam edeyim mi?");
Database.addText("tr.talkingCandySpeech2", "Tamamdır! Artık girebilirsin. Umarım oyunu sevmişsindir :)");
Database.addText("tr.talkingCandyButton", "Evet!!");
Database.addText("tr.lighthousePuzzleResetButton", "Reset");
Database.addText("uk.mapVillageComment", "Селище");
Database.addText("uk.mapFortressComment", "Пустельна фортеця");
Database.addText("uk.mapATreeComment", "Дерево");
Database.addText("uk.mapTheDesertComment", "Пустеля");
Database.addText("uk.mapWishingWellComment", "Криниця бажань");
Database.addText("uk.mapLonelyHouseComment", "Самотній будинок");
Database.addText("uk.mapForestComment", "Ліс");
Database.addText("uk.mapCastleEntranceComment", "Вхід у замок");
Database.addText("uk.mapCastleComment", "Замок");
Database.addText("uk.mapDragonComment", "Дракон");
Database.addText("uk.candyBoxEatCandiesButton", "З'їсти усі цукерки");
Database.addText("uk.candyBoxThrowCandiesButton", "Кинути 10 цукерок на землю");
Database.addText("uk.mapVillageAHouseComment", "Будинок");
Database.addText("uk.mapVillageForgeComment", "Ковальня");
Database.addText("uk.buttonBackToTheMap", "Повернутися до мапи");
Database.addText("uk.mapSorceressHutComment", "Хатина чаклунки");
Database.addText("uk.buttonBackToTheVillage", "Повернутися у селище");
Database.addText("uk.mapATreeIntroductionSpeech", "Привіт, я Вивірка. Я можу дати тобі цукерок, та й багато ще чого. Я знаю як сильно ти любиш цукерки. Але я почуваюсь самотньо у цьому лісі.");
Database.addText("uk.mapATreeIntroductionButton", "Як я можу допомогти тобі?");
Database.addText("uk.mapATreeFirstQuestion", "Я задаватиму тобі питання. Якщо відповідатимеш правильно, найсолодші солодощі будуть твоїми! Перше запитання : ти справді любиш цукерки? (відповідай англійською)");
Database.addText("uk.mapATreeSecondQuestion", "Це правильно! Ось тобі 20 цукерок. Тепер заверши цю послідовність літер і отримаєш нову винагороду: S, E, I, D, N, A, ?");
Database.addText("uk.mapATreeThirdQuestion", "Цукерки! Ось 100 цукерок для тебе. Наступне запитання : скільки цукерок у найцукернішої особи у світі?");
Database.addText("uk.mapATreeFourthQuestion", "Ось тобі 500 цукерок! Наступна винагорода має бути навіть цікавішою...  Ось загадка: У прадавньому лісі росте дуже старе дерево, на якому живуть найрозумніші у світі тварини. Мовиться, що це дерево має 60 коренів, 360 гілок і 2160 листків. Скільки позначок можна знайти на його стовбурі?");
Database.addText("uk.mapATreeFifthQuestion", "Вітаю! Я справді говорила про своє дерево. Ось тобі 3 льодяники. Смачного! Наступна загадка, слухай уважно: Під місяцем уповні, я кидаю жовтого капелюха у червоне море. Що стається з жовтим капелюхом?");
Database.addText("uk.mapATreeTicTacToeIntro", "Влучно сказано! Це було не так складно. Ось тобі три шоколадні плитки! Задля наступної винагороди, ми трошечки змінимо правила. Ти маєш зіграти зі мною у гру! Готовий?");
Database.addText("uk.mapATreeTicTacToeIntroButton", "Так, звичайно!");
Database.addText("uk.mapATreeTicTacToeLetsPlay", "Ця гра — хрестики-нулики. Ми граємо на полі 3 на 3. Ти будеш ставити X, а я ставитиму O. Ходимо по черзі, мета гри — виставити три своїх знаки у ряд. Я дозволю тобі ходити першим!");
Database.addText("uk.mapATreeTicTacToeNobodyWins", "Поле цілком заповнене і нам обом не вдалося поставити три знаки поспіль: ніхто не переміг! Хочеш спробувати ще раз?");
Database.addText("uk.mapATreeTicTacToeYouLose", "Я поставив три поспіль! Я переміг. Хочеш спробувати ще раз?");
Database.addText("uk.mapATreeTicTacToeTryAgainButton", "Так, хочу!");
Database.addText("uk.mapATreeTicTacToeYouWin", "Ого, несподіваний хід. Але ти отримав три у ряд, не можу сперечатись. Ти переміг! Візьми цей ключ! Він відкриває один із будинків у селещі перед лісом.");
Database.addText("uk.mapATreeTicTacToeAnymoreSweet", "Дякую, вивірко! Є ще якісь загадки?");
Database.addText("uk.mapATreeNoMoreChallenge", "На жаль, ні, у мене нема більше загадок для тебе... Пограти з тобою було дуже весело, дякую тобі за це!");
Database.addText("uk.buttonExitQuestKeeping", "Покинути пригоду (і зберегти здобуте)");
Database.addText("uk.buttonExitQuestNoKeeping", "Покинути пригоду (ти не збережеш здобуте)");
Database.addText("uk.buttonExitQuestNoKeepingBecauseLose", "Покинути пригоду (ти не збережеш здобуте, оскільки зазнав невдачі)");
Database.addText("uk.mapVillageLockedHouseComment", "Замкнений будинок");
Database.addText("uk.mapVillageForgeIntroductionSpeech", "Привіт! Я коваль. Я можу продати тобі різноманітне озброєння та деяке спорядження.");
Database.addText("uk.mapVillageForgeIntroductionSpeechNoMoreToSell", "Привіт! Я коваль. На жаль, у мене немає більше нічого на продаж. Може зайдеш пізніше?");
Database.addText("uk.mapVillageFifthHouseNoWeaponSpeech", "Привіт. Мій льох повен щурів, мені необхідно позбутися їх... от якби хтось зі зброєю міг мені допомогти...");
Database.addText("uk.mapVillageFifthHouseWeaponSpeech", "Агов! Я бачу, ти носиш зброю! Якщо ти повбиваєш тих щурів, що капостять у моєму льосі, я винагороджу тебе!");
Database.addText("uk.mapVillageFifthHouseAgree", "Тоді до справи!");
Database.addText("uk.mapVillageFifthHouseCellarDone", "Дякую, що позбувся їх! Ось дещо дуже цінне, як винагорода: мапа світу. Я думаю, тобі вона знадобиться більше, ніж мені.");
Database.addText("uk.mapVillageTheShopComment", "Крамниця");
Database.addText("uk.mapBridgeComment", "Міст");
Database.addText("uk.mapFarmComment", "Льодяникова ферма");
Database.addText("uk.mapCaveEntranceComment", "Вхід у печеру");
Database.addText("uk.mapLighthouseComment", "Маяк");
Database.addText("uk.mapPierComment", "Пристань");
Database.addText("uk.mapTheHoleComment", "Діра в землі");
Database.addText("uk.candyBoxRequestStatusBarUnlocked", "Замовити нову можливість у розробника (30 цукерок)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedCfg", "Замовити ще одну (5 цукерок)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedSave", "Замовити ще раз (5 цукерок)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedHealthBar", "Замовити щось більш вражаюче (5 цукерок)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedMap", "Останнє замовлення! Це мусить вартувати цукерок. (10 цукерок)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedComment", "Ти розблокував рядок стану! (вгорі)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedCfgComment1", "Тепер ти маєш доступ до панелі налаштувань.");
Database.addText("uk.candyBoxRequestStatusBarUnlockedCfgComment2", "Ти можеш змінити мову, якщо хочеш.");
Database.addText("uk.candyBoxRequestStatusBarUnlockedSaveComment", "З'явилась панель пришелепкуватого збереження!");
Database.addText("uk.candyBoxRequestStatusBarUnlockedHealthBarComment", "Ось тобі 100 пунктів здоров'я. Вони будуть корисними.");
Database.addText("uk.cfgChooseLanguage", "Обери мову :");
Database.addText("uk.cfgInvertColors", "Інвертувати кольори?");
Database.addText("uk.gridItemMainMapName", "Мапа");
Database.addText("uk.gridItemMainMapDescription", "Мапа світу");
Database.addText("uk.gridItemPogoStickName", "Ціпок-стрибунок");
Database.addText("uk.gridItemPogoStickDescription", "Цей предмет дозволяє тобі стрибати протягом пригод!");
Database.addText("uk.gridItemTimeRingName", "Кільце часу");
Database.addText("uk.gridItemTimeRingDescription", "Цей предмет надає нову можливість протягом пригод: ти можеш уповільнювати час. Якщо події відбуваються занадто швидко для тебе, застосовуй кільце часу!");
Database.addText("uk.gridItemThirdHouseKeyName", "Ключ від третього будинку");
Database.addText("uk.gridItemThirdHouseKeyDescription", "Цей ключ дозволяє тобі відкривати третій будинок у селищі.");
Database.addText("uk.gridItemFeatherName", "Перо пустельного птаха");
Database.addText("uk.gridItemFeatherDescription", "Це магічне перо дозволяє тобі вище стрибати з ціпком-стрибунком!");
Database.addText("uk.gridItemFeatherDescriptionNoPogoStick", "З невідомих причин, ти відчуваєш, що це перо могло би бути корисним, якби в тебе був ціпок-стрибунок...");
Database.addText("uk.gridItemSpongeName", "Магічна губка");
Database.addText("uk.gridItemSpongeDescription", "Цей магічний предмет дозволяє тобі стискатися як губка, таким чином зменшуючи свої розміри.");
Database.addText("uk.gridItemFortressKeyName", "Ключ від пустельної фортеці");
Database.addText("uk.gridItemFortressKeyDescription", "Цей ключ дозволяє тобі заходити до дуже старовинної фортеці, що знаходиться угорі пустелі. Хтозна, що ти можеш там знайти?");
Database.addText("uk.gridItemHeartPendantName", "Кулон-серце");
Database.addText("uk.gridItemHeartPendantDescription", "Цей кулон у вигляді серця збільшуватиме рівень твого здоров'я доти, доки ти носитимеш його на шиї.");
Database.addText("uk.gridItemHeartPlugName", "Серцевий чіп");
Database.addText("uk.gridItemHeartPlugDescription", "Цей залізний серцевий чіп на павучих лапках, із спеціальним \"серцевим трунком\", закоркованим усередині, збільшить твоє здоров'я на 20 відсотків!");
Database.addText("uk.gridItemBeginnersGrimoireName", "Книга заклять початківця");
Database.addText("uk.gridItemBeginnersGrimoireDescription", "Ця книга заклять відкриває тобі три заклинання, досить простих для накладання. Вона справді призначена для початківців. Ти зможеш використовувати закляття кислотного дощу (велика кількість крапель кислоти падатиме на твоїх ворогів), закляття вогняної кулі (гігантська магічна куля, зроблена з вогню, полетить в напрямку твоїх ворогів) та закляття телепортації (яке телепортує тебе до непередбаченої локації).");
Database.addText("uk.gridItemAdvancedGrimoireName", "Розширена книга заклять");
Database.addText("uk.gridItemAdvancedGrimoireDescription", "Ця розширена книга заклять відкриває тобі два заклинання: закляття очищення від магії та закляття тернового щита. Перше усуне з пригоди усю магію до поточної миті, включно із тією, яку наклав ти, та магію твоїх ворогів. Друге закляття створить навколо тебе щит із літаючих колючок, що завдаватиме шкоди твоїм ворогам при контакті.");
Database.addText("uk.gridItemBlackMagicGrimoireName", "Книга заклять чорної магії");
Database.addText("uk.gridItemBlackMagicGrimoireDescription", "Ти знайшов цю книгу заклять у печері, її було дуже важко дістатися, і для того була причина. Вона відкриває тобі два потужних закляття чорної магії. Перше зведе перед тобою гігантську стіну обсидіанової цегли, що може бути корисним, аби затримати твоїх ворогів. Друге закляття викличе зграю демонів, що атакуватимуть кожного у цій пригоді, включно з тобою. Будь обережним із ним.");
Database.addText("uk.gridItemUnicornHornName", "Ріг єдинорога");
Database.addText("uk.gridItemUnicornHornDescription", "Цей магічний ріг належав єдинорогу. Його потужні лікувальні властивості дуже тобі допоможуть. Ти чув, що цього єдинорога звали Чарлі.");
Database.addText("uk.gridItemXinopherydonClawName", "Кіготь ксиноперидона");
Database.addText("uk.gridItemXinopherydonClawDescription", "Цей кіготь належав ксиноперидону, древньому двоголовому звіру, у існування якого усі вірять. Він подвоїть пошкодження від твоєї зброї.");
Database.addText("uk.gridItemPitchforkName", "Вила");
Database.addText("uk.gridItemPitchforkDescription", "Ці спеціальні вила дозволяють розпушувати ґрунт, не перекидаючи його, таким чином зберігаючи поверхневу екосистему ґрунту. Це потроїть продуктивність твоєї льодяникової ферми.");
Database.addText("uk.gridItemShellPowderName", "Черепашковий порошок");
Database.addText("uk.gridItemShellPowderDescription", "Порошок із мушель часто використовується фермерами для покращення швидкості росту їхніх льодяників. Цей порошок помножить продуктивність твоєї льодяникової ферми на три!");
Database.addText("uk.gridItemPName", "Камінь P");
Database.addText("uk.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("uk.gridItemLName", "Камінь L");
Database.addText("uk.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("uk.gridItemAName", "Камінь A");
Database.addText("uk.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("uk.gridItemYName", "Камінь Y");
Database.addText("uk.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("uk.gridItemRedSharkFinName", "Магічний плавець червоної акули");
Database.addText("uk.gridItemRedSharkFinDescription", "Цей магічний плавець значно підвищує пошкодження від твого закляття вогняної кулі. Нарешті ця вогняна куля стає корисною.");
Database.addText("uk.gridItemGreenSharkFinName", "Магічний плавець зеленої акули");
Database.addText("uk.gridItemGreenSharkFinDescription", "Цей магічний плавець принесе силу природи у твою льодяникову ферму! Її продуктивність зросте у 5 разів.");
Database.addText("uk.gridItemPurpleSharkFinName", "Магічний плавець багряної акули");
Database.addText("uk.gridItemPurpleSharkFinDescription", "Цей магічний плавець відкриє тобі нове заклинання чорної магії. Ти можеш використовувати його лише раз за пригоду. Будь обережним із ним!");
Database.addText("uk.gridItemTalkingCandyName", "Цукерик, що говорить");
Database.addText("uk.gridItemTalkingCandyDescription", "Цей цукерик, що говорить, з'явився після того, як ти поклав чотири камені на верхівку замкової вежі. Він може допомогти тобі відкрити candy box...");
Database.addText("uk.inventorySpecialNothingEqItem", "Нічого");
Database.addText("uk.eqItemWeaponWoodenSwordName", "Дерев'яний меч");
Database.addText("uk.eqItemWeaponWoodenSwordDescription", "Простий меч, зроблений із дерева");
Database.addText("uk.eqItemWeaponIronAxeName", "Залізна сокира");
Database.addText("uk.eqItemWeaponIronAxeDescription", "Проста залізна сокира. Добре підточена. Більш потужна, ніж дерев'яний меч.");
Database.addText("uk.eqItemWeaponPolishedSilverSwordName", "Полірований срібний меч");
Database.addText("uk.eqItemWeaponPolishedSilverSwordDescription", "Потужний меч із зубцями.");
Database.addText("uk.eqItemWeaponTrollBludgeonName", "Кий троля");
Database.addText("uk.eqItemWeaponTrollBludgeonDescription", "Ти забрав цей кий у троля, що охороняв міст. Він повільний, але змітає ворогів досить ефективно.");
Database.addText("uk.eqItemWeaponTribalSpearName", "Племінний спис");
Database.addText("uk.eqItemWeaponTribalSpearDescription", "Ти знайшов цей племінний спис на тілі воїна племені, що загубився у великій дірі в землі. Ним спершу трохи важко користуватись, але коли ти звикаєш до нього, це гарна зброя.");
Database.addText("uk.eqItemWeaponSummoningTribalSpearName", "Племінний спис прикликання");
Database.addText("uk.eqItemWeaponSummoningTribalSpearDescription", "Цей магічний племінний спис, окрім того, що трохи потужніший, ніж звичайний племінний спис, буде періодично викликати воїнів племені, що допомагатимуть тобі у твоїх пригодах.");
Database.addText("uk.eqItemWeaponMonkeyWizardStaffName", "Патериця мавпячого чаклуна");
Database.addText("uk.eqItemWeaponMonkeyWizardStaffDescription", "Ця патериця належала голому мавпячому чаклуну, якого ти знайшов у печері. Вона сама по собі буде рясно накладати закляття на твоїх ворогів.");
Database.addText("uk.eqItemWeaponEnchantedMonkeyWizardStaffName", "Патериця мавпячого чаклуна (зачарована)");
Database.addText("uk.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ця патериця швидша, ніж не зачарована, і накладати закляття буде також значно швидше.");
Database.addText("uk.eqItemWeaponGiantSpoonName", "Велетенська ложка");
Database.addText("uk.eqItemWeaponGiantSpoonDescription", "Ця велетенська ложка була у велетенському чайнику в пустельній фортеці. Ти не знаєш, чи використовував хто-небудь коли-небудь її як ложку, але якщо так, то це мав бути хтось дійсно великий. Тобі, напевне, не хочеться зустрітись із ним.");
Database.addText("uk.eqItemWeaponGiantSpoonOfDoomName", "Велетенська Ложка Долі");
Database.addText("uk.eqItemWeaponGiantSpoonOfDoomDescription", "Ця велетенська ложка навіть потужніша, ніж звичайна велетенська ложка, яку ти міг знайти, наприклад, у чайнику. Вона, проте, доволі повільна.");
Database.addText("uk.eqItemWeaponScytheName", "Коса");
Database.addText("uk.eqItemWeaponScytheDescription", "Подейкують, що ця коса належала самій Смерті. Вона надзвичайно швидка.");
Database.addText("uk.eqItemHatMerchantHatName", "Капелюх цукерника");
Database.addText("uk.eqItemHatMerchantHatDescription", "Цього капелюха продав тобі торговець цукерками. Цукерник любить цукерки. Цей капелюх у 7 разів збільшить кількість цукерок, які ти знаходиш у пригодах!");
Database.addText("uk.eqItemHatSorceressHatName", "Капелюх чаклунки");
Database.addText("uk.eqItemHatSorceressHatDescription", "Цього капелюха продала тобі чаклунка. Він посилить дію твоїх заклять та зілля.");
Database.addText("uk.eqItemHatOctopusKingCrownName", "Корона Короля Восьминогів");
Database.addText("uk.eqItemHatOctopusKingCrownDescription", "Коли ти носиш цю корону, то почуваєшся набагато впевненіше. Вона не надає ніяких переваг у пригодах, але впевненість у собі — це важливо!");
Database.addText("uk.eqItemHatOctopusKingCrownWithJaspersName", "Корона Короля Восьминогів із яшмою");
Database.addText("uk.eqItemHatOctopusKingCrownWithJaspersDescription", "Цю зачаровану корону виготовлено із золота та червоної яшми. Під час пригод вона періодично створюватиме потужні магічні вогняні кулі навколо тебе. А ще вона сяє!");
Database.addText("uk.eqItemHatOctopusKingCrownWithObsidianName", "Корона Короля Восьминогів із обсидіаном");
Database.addText("uk.eqItemHatOctopusKingCrownWithObsidianDescription", "Цю зачаровану корону виготовлено із золота та обсидіану. Вона прекрасна. Під час пригод вона час від часу прикликатиме Короля Восьминогів, що битиметься на твоїй стороні. Ото мацаватий союзник!");
Database.addText("uk.eqItemGlovesLeatherGlovesName", "Шкіряні рукавиці");
Database.addText("uk.eqItemGlovesLeatherGlovesDescription", "Ці рукавиці, по суті, нічого не роблять. Але вони, принаймні, м'які та зручні!");
Database.addText("uk.eqItemGlovesRedEnchantedGlovesName", "Червоні зачаровані рукавиці");
Database.addText("uk.eqItemGlovesRedEnchantedGlovesDescription", "Ці зачаровані рукавиці випромінюють у темряві м'яке червоне світло. Під час пригод вони випускатимуть у твоїх ворогів маленькі вогняні кульки, що, безперечно, може бути корисним.");
Database.addText("uk.eqItemGlovesPinkEnchantedGlovesName", "Рожеві зачаровані рукавиці");
Database.addText("uk.eqItemGlovesPinkEnchantedGlovesDescription", "Ці зачаровані рукавиці залишають рожеві відмітки на усьому, чого ти торкаєшся. Під час пригод вони безперервно лікуватимуть тебе.");
Database.addText("uk.eqItemBootsRocketBootsName", "Ракетні черевики");
Database.addText("uk.eqItemBootsRocketBootsDescription", "Ці пречудові ракетні черевики дозволяють тобі стрибати прямо у повітрі, по суті, це те саме, що і літати!");
Database.addText("uk.eqItemBootsLeatherBootsName", "Шкіряні черевики");
Database.addText("uk.eqItemBootsLeatherBootsDescription", "Прості шкіряні черевики. Нічого особливого.");
Database.addText("uk.eqItemBootsBootsOfIntrospectionName", "Черевики самоспоглядання");
Database.addText("uk.eqItemBootsBootsOfIntrospectionDescription", "Переведи подих та заспокойся. Якщо ти взутий у ці черевики, то не зрушиш із місця, доки твої ноги торкаються землі.");
Database.addText("uk.eqItemBodyArmoursLightweightBodyArmourName", "Легкий обладунок");
Database.addText("uk.eqItemBodyArmoursLightweightBodyArmourDescription", "Цей обладунок забезпечить тобі слабенький захист. Ти будеш трохи менш вразливий до ворожих атак.");
Database.addText("uk.eqItemBodyArmoursKnightBodyArmourName", "Лицарський обладунок");
Database.addText("uk.eqItemBodyArmoursKnightBodyArmourDescription", "Цей міцний обладунок захищатиме тебе. Ти будеш менш вразливий до ворожих атак.");
Database.addText("uk.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Зачарований лицарський обладунок");
Database.addText("uk.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Цей обладунок дуже особливий. Ти будеш НАБАГАТО менш вразливий до ворожих атак, але пошкодження від твоєї зброї, буде поділено навпіл.");
Database.addText("uk.mapVillageForgeBuyWoodenSwordButton", "Купити дерев’яний меч (150 цукерок)");
Database.addText("uk.mapVillageForgeBuyWoodenSwordSpeech", "Дякую за покупку! Цей дерев’яний меч досить слабенький, але це лише початок.");
Database.addText("uk.mapVillageForgeBuyIronAxeButton", "Купити залізний меч (400 цукерок)");
Database.addText("uk.mapVillageForgeBuyIronAxeSpeech", "Я сподіваюсь тобі сподобається цей залізний меч. Я щойно нагострив його для тебе!");
Database.addText("uk.mapVillageForgeBuyPolishedSilverSwordButton", "Купити полірований срібний меч (2 000 цукерок)");
Database.addText("uk.mapVillageForgeBuyPolishedSilverSwordSpeech", "У мене пішло багато часу на створення цього меча. Я запевняю, він вартий своєї ціни.");
Database.addText("uk.mapVillageForgeBuyLightweightBodyArmourButton", "Купити легкий обладунок (15 000 цукерок)");
Database.addText("uk.mapVillageForgeBuyLightweightBodyArmourSpeech", "Цей обладунок забезпечить тобі захист від твоїх ворогів.");
Database.addText("uk.mapVillageForgeBuyScytheButton", "Купити косу (5 000 000 цукерок)");
Database.addText("uk.mapVillageForgeBuyScytheSpeech", "У мене пішло декілька місяців, аби зробити цю косу. Це справжній витвір мистецтва. Це, ймовірно, найшвидша зброя, яку тобі вдасться зустріти. Щасти тобі!");
Database.addText("uk.wishingWellThrowFirstCandyButton", "Кинути у криницю цукерку");
Database.addText("uk.wishingWellCandyIntroductionSpeech", "Привіт, мандрівнику! Я криниця бажань. Я виконаю твої бажання в обмін на трохи солодощів! Коли ти кидатимеш у мене цукерки, я зцілюватиму твої рани.");
Database.addText("uk.wishingWellThrewCandiesSpeech", "Твої рани зцілено!");
Database.addText("uk.wishingWellNoWoundSpeech", "Ти не потребуєш зцілення!");
Database.addText("uk.wishingWellThrowFirstLollipopButton", "Кинути у криницю льодяник");
Database.addText("uk.wishingWellLollipopIntroductionSpeech", "Привіт, мандрівнику! Я криниця бажань. Я виконаю твої бажання в обмін на трохи солодощів! Коли ти кидатимеш у мене льодянки, я перетворюватиму їх на цукерки.");
Database.addText("uk.wishingWellThrewLollipopsSpeech", "Твої льодяники перетворились на цукерки! Два льодяники за цукерку.");
Database.addText("uk.wishingWellThrowChocolateBarButton", "Кинути у криницю плитку шоколаду");
Database.addText("uk.wishingWellChocolateBarIntroductionSpeech", "Привіт, мандрівнику! Я криниця бажань. Я виконаю твої бажання в обмін на трохи солодощів! Я люблю шоколадки. Я справді люблю їх. За кожну шоколадну плитку, що ти вкинеш у мене, включно з цією, ти отримаєш одне магічне зачарування.");
Database.addText("uk.wishingWellThrewChocolateBarSpeech", "Який предмет ти хотів би зачарувати?");
Database.addText("uk.wishingWellThrowPainAuChocolatButton", "Кинути у криницю круасан");
Database.addText("uk.wishingWellPainAuChocolatIntroductionSpeech", "Привіт, мандрівнику! Я криниця бажань. Я виконаю твої бажання в обмін на трохи солодощів! Якщо ти вкинеш у мене круасан, то отримаєш дуже особливий дарунок. Обирай із розумом.");
Database.addText("uk.wishingWellThrewPainAuChocolatSpeech", "Дякую за круасан! Тепер можеш обрати свій дарунок.");
Database.addText("uk.wishingWellChooseGift", "Обери свій дарунок!");
Database.addText("uk.wishingWellChooseGiftButton", "Обрати");
Database.addText("uk.wishingWellGiftDoneSpeech", "Готово! Тепер у тебе є новий дарунок. Він з’явиться у панелі покажчиків твого інвентарю.");
Database.addText("uk.wishingWellNoPossibleEnchantment", "Зачарування неможливе");
Database.addText("uk.wishingWellChooseEnchantment", "Обери зачарування");
Database.addText("uk.wishingWellEnchantButton", "Зачарувати");
Database.addText("uk.wishingWellEnchantmentDoneSpeech", "От і воно! Твій предмет зачаровано.");
Database.addText("uk.pierLighthouseButton", "Дістатися маяка човном");
Database.addText("uk.pierTheSeaButton", "Стрибнути у море");
Database.addText("uk.lonelyHouseOpenBox", "Відкрити скриньку");
Database.addText("uk.lonelyHouseShakeBox", "Потрусити скриньку");
Database.addText("uk.lonelyHouseBreakLock", "Зламати замок");
Database.addText("uk.lonelyHouseKickBox", "Копнути скриньку");
Database.addText("uk.lonelyHouseAskTheBoxToOpenItself", "Попросити скриньку відкритися самій");
Database.addText("uk.lonelyHouseLureTheBoxWithACandy", "Підкупити скриньку цукеркою");
Database.addText("uk.lonelyHouseTakeTheBox", "Взяти скриньку з собою, тобі, ймовірно, потрібен ключ, аби відкрити її");
Database.addText("uk.lonelyHouseOpenBoxResult", "Скринька замкнена");
Database.addText("uk.lonelyHouseShakeBoxResult", "Нічого не відбувається");
Database.addText("uk.lonelyHouseBreakLockResult", "Замок не піддається");
Database.addText("uk.lonelyHouseKickBoxResult", "Твоя нога трохи болить, але нічого не відбувається");
Database.addText("uk.lonelyHouseAskTheBoxToOpenItselfResult", "...ти говориш зі скринькою, ти усвідомлюєш це?");
Database.addText("uk.lonelyHouseLureTheBoxWithACandyResult", "Не схоже, щоб скриньку це хвилювало");
Database.addText("uk.lonelyHouseTakeTheBoxResult", "Напевне, там щось цікаве у цій candy box.");
Database.addText("uk.lollipopFarmConstructMill", "Збудувати млин (10 000 льодяників)");
Database.addText("uk.lollipopFarmFeedMill", "Подати воду на млин");
Database.addText("uk.lollipopFarmCurrentCandiesProduction", "Поточне виробництво цукерок");
Database.addText("uk.lollipopFarmDigPond", "Викопати ставок (100 000 льодяників)");
Database.addText("uk.lollipopFarmBuyLolligator", "Купити льодяникодила (1200 candies)");
Database.addText("uk.lollipopFarmLolligatorsConversionText", "Перетворення цукерки -> льодяники активовано");
Database.addText("uk.lighthouseAskButton", "Запитати");
Database.addText("uk.lighthouseQuestionWho", "Хто ти?");
Database.addText("uk.lighthouseQuestionWhoSpeech", "Я дуже старий циклоп.");
Database.addText("uk.lighthouseQuestionWhat", "Що ти тут робиш?");
Database.addText("uk.lighthouseQuestionWhatSpeech", "Я сиджу тут увесь день, очікуючи на човен, що припливе. Пройшло уже багато часу з тих пір, коли я бачив човна останній раз, але я мушу залишатися тут, пильнуючи за морем, адже може припливти човен.");
Database.addText("uk.lighthouseQuestionWhyEatCandies", "Навіщо мені їсти цукерки?");
Database.addText("uk.lighthouseQuestionWhyEatCandiesSpeech", "Тому що вони корисні для твого здоров’я!");
Database.addText("uk.lighthouseQuestionCandyBox", "Що таке candy box?");
Database.addText("uk.lighthouseQuestionCandyBoxSpeech", "Це дуже стара скринька, сказано, що в ній лежать усі цукерки світу. Легенди говорять, хто б не спромігся відкрити її, той отримає стільки цукерок, що не залишиться нічого неможливого.");
Database.addText("uk.lighthouseQuestionDragon", "Дракон сказав мені прийти сюди, оскільки я хочу цукерок.");
Database.addText("uk.lighthouseQuestionDragonSpeech", "О, я бачу... Добре, я не можу дати тобі цукерок одразу, але я можу дати тобі дещо необхідне, аби зрештою отримати БАГАТО цукерок. Мені лише треба випробувати тебе перед цим. Тому що те, що в мене є, не можна давати абикому. Розв’яжи цю головоломку і це буде твоїм.");
Database.addText("uk.lighthouseFoundStone", "Вітаю! Ти пройшов випробування і знайшов камінь. Він дуже коштовний, але може бути корисним лише тоді, якщо в тебе є ще три камені, подібних до цього. Щасти тобі!");
Database.addText("uk.lighthouseFoundStoneAgain", "Гарна робота, ти знову вирішив головоломку. Схоже, тобі це подобається.");
Database.addText("uk.saveLocalSaveTitle", "Браузерне збереження");
Database.addText("uk.saveLocalSaveWhy", "Обери локальне збереження, якщо хочеш продовжити грати на поточному пристрої та браузері.");
Database.addText("uk.saveLocalSaveWarning0", "Схоже, твій браузер не підтримує HTML5.");
Database.addText("uk.saveLocalSaveWarning1", "Тобі слід оновити свій браузер, аби використовувати локальне збереження.");
Database.addText("uk.saveLocalSaveChooseSlot", "Обери збереження :");
Database.addText("uk.saveLocalSaveAutosaveEnabled", "Автозбереження увімкнено");
Database.addText("uk.saveLocalSaveChooseWhatToDo", "Обери, що робити :");
Database.addText("uk.saveLocalSaveSaveButton", "Зберегти");
Database.addText("uk.saveLocalSaveAutosaveButton", "Зберігати кожні 10 хвилин");
Database.addText("uk.saveLocalSaveDisableAutosaveButton", "Вимкнути автозбереження");
Database.addText("uk.saveFileSaveTitle", "Текстове збереження");
Database.addText("uk.saveFileSaveWhy0", "Обери текстове збереження, якщо :");
Database.addText("uk.saveFileSaveWhy1", "хочеш продовжити грати на іншому пристрої або браузері.");
Database.addText("uk.saveFileSaveWhy2", "хочеш поділитися своїм збереженням із кимось іншим");
Database.addText("uk.saveFileSaveWhy3", "з якихось причин хочеш очистити кеш браузера");
Database.addText("uk.saveFileSaveWhy4", "(що зітре твої локальні збереження)");
Database.addText("uk.saveFileSaveButton", "Отримати поточну гру у вигляді тексту");
Database.addText("uk.saveFileSaveWarning", "Тепер скопіюй цей текст куди-небудь! (у файл, наприклад)");
Database.addText("uk.saveLocalLoadTitle", "Браузерне завантаження");
Database.addText("uk.saveLocalLoadYouCan", "Ти можеш завантажити локальне збереження, використовуючи наступні посилання :");
Database.addText("uk.saveLocalLoadThanksTo", "Дякуючи чарам HTML5, вони повинні працювати навіть офлайн.");
Database.addText("uk.saveFileLoadTitle", "Текстове завантаження");
Database.addText("uk.saveFileLoadPaste", "Встав своє збереження нижче, тоді клацни кнопку \"Завантажити\"");
Database.addText("uk.saveFileLoadButton", "Завантажити");
Database.addText("uk.mountainsText0", "Ви помітили щось у горах!");
Database.addText("uk.mountainsText1", "Це виглядає цікаво. Ймовірно, воно може бути корисним.");
Database.addText("uk.mountainsTextButton", "Дертися у гори, аби дістати предмет");
Database.addText("uk.mountainsTextAfter", "Ти знайшов ціпок-стрибунок! Він у твоєму інвентарі.");
Database.addText("uk.secondHouseIntroSpeech", "Привіт, я цукерник. За цукерки, я міг би зробити усе. Що тобі потрібно?");
Database.addText("uk.secondHouseLollipop1Speech", "Це лимонний льодяник. Мій улюблений! Він коштує 60 цукерок, але він вартий того.");
Database.addText("uk.secondHouseLollipop2Speech", "Цей льодяник суничний. Гарний на смак. Мені подобається його червоний колір. Лише 60 цукерок!");
Database.addText("uk.secondHouseLollipop3Speech", "Це гарбузовий льодяник. Б’юсь об заклад, ти ще такого не куштував! 60 цукерок і він твій.");
Database.addText("uk.secondHouseLollipopButtonText", "Купити цей льодяник (60 цукерок)");
Database.addText("uk.secondHouseMerchantHatSpeech", "Я міг би продати тобі свого капелюха, але він дуже цінний, розумієш... Ти мусиш дати мені багато цукерок за нього. Скажімо 1 мільйон цукерок. Це буде справедливо, еге ж?");
Database.addText("uk.secondHouseMerchantHatButtonText", "Купити капелюх цукерника (1 000 000 цукерок)");
Database.addText("uk.secondHouseTimeRingSpeech", "Це кільце часу. Воно свого роду магічне. Воно дозволяє тобі сповільнювати час, коли ти в халепі.");
Database.addText("uk.secondHouseTimeRingButtonText", "Купити кільце часу (500 цукерок)");
Database.addText("uk.secondHouseLeatherGlovesSpeech", "Ці рукавиці виготовлено з верблюжої шкіри, якісна робота. У мене їх багато на продаж, тому вони такі дешеві : лише 300 цукерок!");
Database.addText("uk.secondHouseLeatherBootsButtonText", "Купити пару шкіряних черевиків (300 цукерок)");
Database.addText("uk.secondHouseLeatherBootsSpeech", "Ці високоякісні черевики, зроблені з верблюжої шкіри, збережуть твої ноги у теплі.");
Database.addText("uk.secondHouseLeatherGlovesButtonText", "купити пару шкіряних рукавиць (300 цукерок)");
Database.addText("uk.secondHouseChocolateBarSpeech", "Це шоколадна плитка. Я не знаю, для чого її використовують, але так сталося, що вона досить рідкісна, що пояснює її ціну. 800 цукерок і вона твоя!");
Database.addText("uk.secondHouseChocolateBarButtonText", "Купити шоколадну плитку (800 цукерок)");
Database.addText("uk.outsideTheHoleButton", "Стрибнути у цю велику діру в землі");
Database.addText("uk.theCaveExitText0", "Ти зрештою дістався виходу з печери.");
Database.addText("uk.theCaveExitText1", "Тобі стало видно великий ліс ззовні.");
Database.addText("uk.theCaveExitButtonText", "Вийти з печери");
Database.addText("uk.theCaveFirstSentenceWentStraight", "Ти пішов прямо.");
Database.addText("uk.theCaveFirstSentenceWentLeft", "Ти обрав лівий прохід.");
Database.addText("uk.theCaveFirstSentenceWentRight", "Ти обрав правий прохід.");
Database.addText("uk.theCaveFirstSentenceYouAre", "Ти у печері. Перед тобою три шляхи.");
Database.addText("uk.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Ти помічаєш дивну річ на землі перед собою.");
Database.addText("uk.theCavePattern_ChocolateBarNowSeeChocolateBar", "Ти помічаєш перед собою плитку шоколаду.");
Database.addText("uk.theCavePattern_TreasureMapSentence", "Ти бачиш маленькі камінчики, дивним чином розташовані на підлозі.");
Database.addText("uk.theCavePattern_MonkeyWizardSentence", "Ти натрапляєш на оголеного мавпячого чаклуна.");
Database.addText("uk.theCavePattern_MonkeyWizardButton", "Кинути йому виклик");
Database.addText("uk.theCavePattern_OctopusKingSentence", "Ти натрапляєш на Короля Восьминогів. Він видається огидним.");
Database.addText("uk.theCavePattern_OctopusKingButton", "Кинути йому виклик");
Database.addText("uk.fortressInsideText0", "Ти всередині пустельної фортеці.");
Database.addText("uk.fortressInsideText1", "Ти можеш обрати поміж трьох дверей.");
Database.addText("uk.fortressInsideText2", "Кожна з них веде до великої кімнати зі скарбами в кінці.");
Database.addText("uk.fortressInsideEnterRoom1", "Увійти в першу кімнату");
Database.addText("uk.fortressInsideEnterRoom2", "Увійти в другу кімнату");
Database.addText("uk.fortressInsideEnterRoom3", "Увійти в третю кімнату");
Database.addText("uk.treasureButtonDig", "Копати");
Database.addText("uk.treasureButtonYouFound", "Ти знайшов три шоколадні плитки!");
Database.addText("uk.sorceressHutHello", "Привіт, я чаклунка. Я можу навчити тебе одній або двом магічним штучкам. Я можу також дати тобі трохи цікавих речей, або накладати закляття для тебе. Але усе має свою ціну! І цією ціною будуть льодяники. Багато льодяників.");
Database.addText("uk.sorceressHutClickedGrimoire", "Це книга заклять, написана для початківців. Якщо носитимеш її з собою в пригодах, то зможеш накладати прості, але корисні заклинання. Вона необхідна тобі! Лише 5 000 льодяників.");
Database.addText("uk.sorceressHutBuyGrimoireButton", "Купити цю книгу заклять (5 000 льодяників)");
Database.addText("uk.sorceressHutBuyGrimoireSpeech", "Дякую за покупку! Ти зможеш накладати три закляття з цією книгою. Щасти тобі!");
Database.addText("uk.sorceressHutClickedGrimoire2", "Це розширена книга заклять. Якщо носитимеш її з собою в пригодах, то зможеш накладати два вдосконалених заклинання. Я написала їх сама, і це було непросто. 20 000 льодяників — справедлива ціна.");
Database.addText("uk.sorceressHutBuyGrimoire2Button", "Купити цю книгу заклять (20 000 льодяників)");
Database.addText("uk.sorceressHutBuyGrimoire2Speech", "Дякую за покупку! Ти зможеш накладати два заклинання з цією книгою. Використовуй їх мудро!");
Database.addText("uk.sorceressHutClickedCauldron", "Це мій казан. З його допомогою я варю магічні зілля. Я можу продати його тобі, але він дуже цінний... він коштуватиме тобі 100 000 льодяників.");
Database.addText("uk.sorceressHutBuyCauldronButton", "Купити казан (100 000 льодяників)");
Database.addText("uk.sorceressHutBuyCauldronSpeech", "Красно дякую! 100 000 льодяників для мене! Я також дала тобі книгу зіллєваріння. Вона тобі знадобиться.");
Database.addText("uk.sorceressHutClickedHat", "У мене дійсно чудовий капелюх! Але я справді не можу продати його тобі. Він занаааадто цінний. Справді, я не можу. Не наполягай. Ні. Ні-ні-ні, я не повинна робити цього. Ох, гаразд, я продам його, але за 1 000 000 000 льодяників. Ти, ймовірно, не зможеш заплатити таку ціну у будь-якому випадку.");
Database.addText("uk.sorceressHutBuyHatButton", "Купити капелюх (1 000 000 000 льодяників)");
Database.addText("uk.sorceressHutBuyHatSpeech", "Один більйон льодяників для меееенее! Але у мене більше немає капелюха.. але один більйон льодяників, ого-го! .. Це того варте.");
Database.addText("uk.cauldronPreviousPageButton", "Попередня сторінка");
Database.addText("uk.cauldronNextPageButton", "Наступна сторінка");
Database.addText("uk.cauldronWhatYouWantToPut", "Що ти хочеш покласти у казан");
Database.addText("uk.cauldronWhatIsIn", "Що у казані");
Database.addText("uk.cauldronWhatYouCanDo", "Що ти можеш зробити з цього");
Database.addText("uk.castleBigRoomComment", "Велика кімната");
Database.addText("uk.castleARoomComment", "Кімната");
Database.addText("uk.castleADarkRoomComment", "Темна кімната");
Database.addText("uk.castleCastleEntranceComment", "Вхід у замок");
Database.addText("uk.castleTowerEntranceComment", "Вхід у вежу");
Database.addText("uk.castleNougatMonsterComment", "Атакувати велетенського нуго-монстра");
Database.addText("uk.castleGuardsComment", "Атакувати вартових");
Database.addText("uk.castleStairsComment", "Сходи");
Database.addText("uk.buttonBackToTheCastle", "Назад у замок");
Database.addText("uk.castleBigRoomHovenSpeechSad", "Привіт! Я дуже стара хлібна піч. Я звикла готувати безліч чудових тістечок, але ніхто більше не користується мною. Можливо... можливо, ти міг би допомогти мені? Лише дозволь мені взяти трохи солодощів у тебе! Не хвилюйся, ти не пожалкуєш! Просто довірся мені.");
Database.addText("uk.castleBigRoomHovenNotEnough", "Ох... у тебе недостатньо солодощів, Я не можу нічого приготувати. Я просто нікчема. Я нікчемна хлібопічка, ось як тобі варто називати мене.");
Database.addText("uk.castleBigRoomHovenSpeechMadePainAuChocolat", "Ура! Красно дякую! Я використала 100 цукерок і плитку шоколаду, та приготувала тобі... круасан! Це мої улюблені ласощі, я сподіваюсь, тобі сподобається!");
Database.addText("uk.castleBigRoomHovenSpeechHappy", "Агов! Якщо ти захочеш, аби я приготувала тобі ще ласощів, тільки скажи! Я з радістю допоможу тобі.");
Database.addText("uk.castleBigRoomHovenSpeechHappyNotEnough", "Ох, у тебе недостатньо солодощів, на жаль. Мені потрібно 100 цукерок і плитка шоколаду. Повертайся, коли вони у тебе будуть!");
Database.addText("uk.castleBigRoomHovenLetHovenTakeButton", "Дозволити печі узяти усі солодощі, які вона хоче");
Database.addText("uk.castleBigRoomHovenThanks", "Дякую, пічко!");
Database.addText("uk.dragonStopTickling", "Гей ти! Перестань лоскотати мене, будь ласка.");
Database.addText("uk.dragonStopTicklingButton", "Ах, ох, пробач, я думав, що повинен був напасти на тебе");
Database.addText("uk.dragonTalking", "Я дракон і це мій замок. Я бачу, ти зумів увійти, ти мусиш бути дуже хоробрим... Я був би радий допомогти комусь на кшталт тебе. Чого ти прагнеш?");
Database.addText("uk.dragonTalkingChallengeButton", "Виклику");
Database.addText("uk.dragonTalkingFameButton", "Слави");
Database.addText("uk.dragonTalkingCandiesButton", "Цукерок");
Database.addText("uk.dragonTalkingChallengeSpeech", "Ох, отож, ти прагнеш виклику? Я думаю, тобі слід здійснити подорож до самого пекла, як відомо, диявол — достойний суперник. Стрибай мені на спину і я доправлю тебе туди!");
Database.addText("uk.dragonTalkingFameSpeech", "Найкращий спосіб прославитись — це зустрітись із самим розробником. Я знаю, де він живе, і міг би доправити тебе туди. Але приготуйся, це буде непросто.");
Database.addText("uk.dragonTalkingCandiesSpeech", "Зрештою, ми усі хочемо цукерок, чи не так? Я думаю, мій друг зміг би тобі допомогти. Ти легко його впізнаєш, у нього лише одне око. Просто скажи йому, що ти від мене.");
Database.addText("uk.dragonTalkingChallengeAnswer", "Тоді вперед!");
Database.addText("uk.dragonTalkingFameAnswer", "Я готовий.");
Database.addText("uk.dragonTalkingCandiesAnswer", "Добре, дякую!");
Database.addText("uk.buttonBackToCastle", "Повернутися у замок");
Database.addText("uk.talkingCandySpeechNoBox", "Агов! Я цукерик, що говорить. Ти майже виграв. Тобі лише потрібно знайти candy box. Вона у будинку за селищем. Це останній крок!");
Database.addText("uk.talkingCandySpeech1", "Агов! Я цукерик, що говорить. Вітаю, ти виграв! Я відкрию тобі candy box, це твоя винагорода. Зробити це?");
Database.addText("uk.talkingCandySpeech2", "Готово! Тепер ти можеш увійти в неї. Я сподіваюсь, тобі сподобалася гра :)");
Database.addText("uk.talkingCandyButton", "Так!!");
Database.addText("uk.lighthousePuzzleResetButton", "Спробувати ще раз");
Database.addText("zh.mapVillageComment", "村庄");
Database.addText("zh.mapFortressComment", "沙漠要塞");
Database.addText("zh.mapATreeComment", "一棵树");
Database.addText("zh.mapTheDesertComment", "沙漠");
Database.addText("zh.mapWishingWellComment", "许愿井");
Database.addText("zh.mapLonelyHouseComment", "一幢孤宅");
Database.addText("zh.mapForestComment", "森林");
Database.addText("zh.mapCastleEntranceComment", "城堡入口");
Database.addText("zh.mapCastleComment", "城堡");
Database.addText("zh.mapDragonComment", "巨龙");
Database.addText("zh.candyBoxEatCandiesButton", "吃光糖果");
Database.addText("zh.candyBoxThrowCandiesButton", "把十颗糖果扔在地上");
Database.addText("zh.mapVillageAHouseComment", "一栋房屋");
Database.addText("zh.mapVillageForgeComment", "铁匠铺");
Database.addText("zh.buttonBackToTheMap", "返回地图");
Database.addText("zh.mapSorceressHutComment", "女巫的小屋");
Database.addText("zh.buttonBackToTheVillage", "返回村庄");
Database.addText("zh.mapATreeIntroductionSpeech", "你好，我是小松鼠。我可以给你糖果和很多的东西。我知道你有多喜欢糖果。但我在森林里很孤独。");
Database.addText("zh.mapATreeIntroductionButton", "我能帮你什么忙吗？");
Database.addText("zh.mapATreeFirstQuestion", "我会问你几个问题。如果你回答正确的话，最甜美的糖果就都是你的了！第一个问题：你真的喜欢糖果吗？（用英语回答）");
Database.addText("zh.mapATreeSecondQuestion", "这就对了！给你20颗糖果。现在请完成这个字母序列，你就会得到新的奖励：S,E,I,D,N,A,?");
Database.addText("zh.mapATreeThirdQuestion", "糖果！再给你100颗糖果。下一个问题：这世界上最有糖的人拥有多少颗糖果呢？");
Database.addText("zh.mapATreeFourthQuestion", "你得到了500颗糖果！而下一个奖励会更有趣……这是个谜语：在古老的森林里，生长着一棵非常年迈的树，树上有一只世界上最聪明的动物。据说这棵树有60条树根，360根树枝和2160片树叶，那么你能在它的树干上找到多少印记呢？");
Database.addText("zh.mapATreeFifthQuestion", "恭喜你！的确，我所说的就是我的这颗树。给你三根棒棒糖，要妥善利用它们哦！仔细听好，下一个谜语：在一轮满月之下，我把一顶黄色的帽子扔进了红色的大海里，这顶黄色的帽子会怎样呢？");
Database.addText("zh.mapATreeTicTacToeIntro", "回答正确！这并不困难嘛。给你三块巧克力！关于下一个奖励，我们要稍微改变一下规则了。你要跟我玩一场游戏！你准备好了吗？");
Database.addText("zh.mapATreeTicTacToeIntroButton", "当然准备好了！");
Database.addText("zh.mapATreeTicTacToeLetsPlay", "这是一个井字（三连）游戏。我们在一个3x3的游戏面板上进行，你使用X标记，我使用O标记。我们交替放置自己的标记，目标就是让自己的三个标记连成一行。我会让你先来！");
Database.addText("zh.mapATreeTicTacToeNobodyWins", "面板已经被填满了，我们都没能把三个标记连成一行：平局！你打算再来一次吗？");
Database.addText("zh.mapATreeTicTacToeYouLose", "我把三个连成一行啦！我赢了。你打算再来一次吗？");
Database.addText("zh.mapATreeTicTacToeTryAgainButton", "当然！再来！");
Database.addText("zh.mapATreeTicTacToeYouWin", "哦，这可真是意想不到的妙着。但你把三个连成一行了，我不得不服。你赢了！给你这把钥匙！它可以打开森林下方村庄中的一栋房屋。");
Database.addText("zh.mapATreeTicTacToeAnymoreSweet", "谢谢你，小松鼠！还有更多挑战吗？");
Database.addText("zh.mapATreeNoMoreChallenge", "很可惜，没有了。我已经没有更多挑战可陪你玩了……和你玩可真有趣，谢谢你陪我！");
Database.addText("zh.buttonExitQuestKeeping", "退出探索（保留已获得的战利品）");
Database.addText("zh.buttonExitQuestNoKeeping", "退出探索（无法保留已获得的战利品）");
Database.addText("zh.buttonExitQuestNoKeepingBecauseLose", "退出探索（因为你失败了，所以无法保留已获得的战利品）");
Database.addText("zh.mapVillageLockedHouseComment", "一栋锁住的房屋");
Database.addText("zh.mapVillageForgeIntroductionSpeech", "你好！我是个铁匠，我可以卖给你各种武器和装备。");
Database.addText("zh.mapVillageForgeIntroductionSpeechNoMoreToSell", "你好！我是个铁匠，很遗憾，现在我已经没东西可卖了。也许你应该过些时候再来？");
Database.addText("zh.mapVillageFifthHouseNoWeaponSpeech", "你好。我的地窖里全是老鼠，我需要除掉它们……如果有谁能带着一把武器来帮我的话……");
Database.addText("zh.mapVillageFifthHouseWeaponSpeech", "嘿！就是你！我看你拿着一把武器！如果你能干掉那些搅乱我地窖的老鼠的话，我会给你奖励的！");
Database.addText("zh.mapVillageFifthHouseAgree", "那就动手吧！");
Database.addText("zh.mapVillageFifthHouseCellarDone", "谢谢你帮我除掉它们！这一个非常宝贵的奖励：一张世界地图。我觉得你会比我更用得着它的。");
Database.addText("zh.mapVillageTheShopComment", "商店");
Database.addText("zh.mapBridgeComment", "大桥");
Database.addText("zh.mapFarmComment", "棒棒糖农场");
Database.addText("zh.mapCaveEntranceComment", "洞穴入口");
Database.addText("zh.mapLighthouseComment", "灯塔");
Database.addText("zh.mapPierComment", "码头");
Database.addText("zh.mapTheHoleComment", "深坑");
Database.addText("zh.candyBoxRequestStatusBarUnlocked", "向开发者要求得到一项新功能（30颗糖果）");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfg", "再要另一项新功能（5颗糖果）");
Database.addText("zh.candyBoxRequestStatusBarUnlockedSave", "再要一次(5颗糖果)");
Database.addText("zh.candyBoxRequestStatusBarUnlockedHealthBar", "要求得到更激动人心的新东西（5颗糖果）");
Database.addText("zh.candyBoxRequestStatusBarUnlockedMap", "这是最后一次要求了！这次肯定值得上这么多糖果。(10颗糖果)");
Database.addText("zh.candyBoxRequestStatusBarUnlockedComment", "你解锁了状态栏！（在上面）");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfgComment1", "现在你可以访问配置标签（CFG）");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfgComment2", "你可以在控制面板中切换语言。");
Database.addText("zh.candyBoxRequestStatusBarUnlockedSaveComment", "一只野生的存储标签出现了！（SAVE）");
Database.addText("zh.candyBoxRequestStatusBarUnlockedHealthBarComment", "这是为你准备的100点生命值，他们会非常有用的。");
Database.addText("zh.cfgChooseLanguage", "选择语言：");
Database.addText("zh.cfgInvertColors", "反色显示？");
Database.addText("zh.gridItemMainMapName", "地图");
Database.addText("zh.gridItemMainMapDescription", "这个世界的地图");
Database.addText("zh.gridItemPogoStickName", "弹跳棒");
Database.addText("zh.gridItemPogoStickDescription", "这个物品让你能够在探索时跳跃！");
Database.addText("zh.gridItemTimeRingName", "时间指环");
Database.addText("zh.gridItemTimeRingDescription", "这个物品让你能够在探索中使用新的能力：你可以减缓时间的流逝。如果周围的一切对你来说过于迅速的话，别忘了使用你的时间指环！");
Database.addText("zh.gridItemThirdHouseKeyName", "第三栋房屋的钥匙");
Database.addText("zh.gridItemThirdHouseKeyDescription", "这枚钥匙让你可以进入村庄里的第三栋房屋。");
Database.addText("zh.gridItemFeatherName", "沙漠飞鸟的羽毛");
Database.addText("zh.gridItemFeatherDescription", "这枚魔法羽毛让你在使用弹跳棒时能够跳得更高！");
Database.addText("zh.gridItemFeatherDescriptionNoPogoStick", "不知什么原因，你觉得如果你有一根弹跳棒的话，这根羽毛就能派上用场……");
Database.addText("zh.gridItemSpongeName", "魔法海绵");
Database.addText("zh.gridItemSpongeDescription", "魔法海绵让你可以像海绵一样挤压自己，以此缩小自己的体积。");
Database.addText("zh.gridItemFortressKeyName", "沙漠要塞的钥匙");
Database.addText("zh.gridItemFortressKeyDescription", "这枚钥匙让你可以进入位于沙漠上方的远古要塞。谁知道你能在那里找到什么呢？");
Database.addText("zh.gridItemHeartPendantName", "心形垂饰");
Database.addText("zh.gridItemHeartPendantDescription", "只要你把它戴在脖子上，这枚心形垂饰就可以增加你的生命值。");
Database.addText("zh.gridItemHeartPlugName", "红心耳饰");
Database.addText("zh.gridItemHeartPlugDescription", "这枚红心耳饰是由铁、蜘蛛腿，以及被封入中心位置的“红心酒”制成的，它能够为你增加20%的生命值！");
Database.addText("zh.gridItemBeginnersGrimoireName", "新手魔法书");
Database.addText("zh.gridItemBeginnersGrimoireDescription", "这本魔法书可为你提供三种相当容易施放的法术，着实是为新手准备的。你能够使用酸雨法术（大片酸雨降至敌人的头顶），火球法术（一颗巨大的火焰魔法球飞向你的敌人），以及传送法术（该法术可将你传送至无法预测的位置）。");
Database.addText("zh.gridItemAdvancedGrimoireName", "高阶魔法书");
Database.addText("zh.gridItemAdvancedGrimoireDescription", "这本高阶魔法书可为你提供两种法术：消除魔法法术和荆棘之盾法术。前者可在探索中消除某一时刻的法术――包括你与敌人施放的全部。后者可在你周围创造一面由漂浮的荆棘构成的盾牌，这些荆棘会对接触的敌人造成伤害。");
Database.addText("zh.gridItemBlackMagicGrimoireName", "黑魔法书");
Database.addText("zh.gridItemBlackMagicGrimoireDescription", "你在一个洞穴中找到了这本魔法书，它非常难以触及，而这并不是没理由的。它可为你提供两种强力黑魔法。其一可在你面前创造一面由黑曜石砖块构成的巨墙，对于减缓敌人的攻势非常有效。其二可召唤群魔攻击探索中的所有生物，当然也包括你在内。使用第二种魔法时需谨慎行事。");
Database.addText("zh.gridItemUnicornHornName", "独角兽之角");
Database.addText("zh.gridItemUnicornHornDescription", "这支带有魔力的角曾属于一只独角兽。它极强的治愈能力对你极有帮助。你听说这只独角兽的名字叫查理。");
Database.addText("zh.gridItemXinopherydonClawName", "西诺弗顿之爪");
Database.addText("zh.gridItemXinopherydonClawDescription", "这根爪子曾属于西诺弗顿，一只人们认为已经灭绝的双头远古巨兽。它会将你当前使用的武器的伤害增幅至双倍。");
Database.addText("zh.gridItemPitchforkName", "草叉");
Database.addText("zh.gridItemPitchforkDescription", "通过这柄特殊的草叉，你无需翻转土地就能实现松土，它能够有效保护地下的土壤生态系统。该道具可将棒棒糖农场的产量增幅三倍。");
Database.addText("zh.gridItemShellPowderName", "贝壳粉");
Database.addText("zh.gridItemShellPowderDescription", "贝壳粉通常被农场主们用于加快棒棒糖的成长速度。这些粉末可将棒棒糖农场的产量增加三倍！");
Database.addText("zh.gridItemPName", "P符文石");
Database.addText("zh.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"D° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PS°-J (`  /R`yM}  T$`` °+-|U(\\OL&Y_)T|");
Database.addText("zh.gridItemLName", "L符文石");
Database.addText("zh.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $O°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    °M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("zh.gridItemAName", "A符文石");
Database.addText("zh.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("zh.gridItemYName", "Y符文石");
Database.addText("zh.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("zh.gridItemRedSharkFinName", "魔力红色鲨鱼鳍");
Database.addText("zh.gridItemRedSharkFinDescription", "带有魔力的红色鲨鱼鳍会为你的火球法术带来极高的伤害增幅。火球总算是能派上用场了。");
Database.addText("zh.gridItemGreenSharkFinName", "魔力绿色鲨鱼鳍");
Database.addText("zh.gridItemGreenSharkFinDescription", "带有魔力的绿色鲨鱼鳍会将自然之力注入你的棒棒糖农场！农场的产量会得到5倍的增幅。");
Database.addText("zh.gridItemPurpleSharkFinName", "魔力紫色鲨鱼鳍");
Database.addText("zh.gridItemPurpleSharkFinDescription", "带有魔力的紫色鲨鱼鳍会为你提供一种新的黑魔法。这种魔法在每次探索中只能使用一次。使用时需要格外当心！");
Database.addText("zh.gridItemTalkingCandyName", "会说话的糖果");
Database.addText("zh.gridItemTalkingCandyDescription", "当你在城堡塔楼的顶部放置四枚符文石后，这颗会说话的糖果出现在你面前。他也许能够帮你开启candy box……");
Database.addText("zh.inventorySpecialNothingEqItem", "无装备");
Database.addText("zh.eqItemWeaponWoodenSwordName", "木剑");
Database.addText("zh.eqItemWeaponWoodenSwordDescription", "一把简陋的木制剑");
Database.addText("zh.eqItemWeaponIronAxeName", "铁斧");
Database.addText("zh.eqItemWeaponIronAxeDescription", "一把朴素的铁斧。非常锋利。比木剑更为强力。");
Database.addText("zh.eqItemWeaponPolishedSilverSwordName", "抛光的银剑");
Database.addText("zh.eqItemWeaponPolishedSilverSwordDescription", "一柄强力的宝剑,剑身上覆盖着银钉");
Database.addText("zh.eqItemWeaponTrollBludgeonName", "巨魔的巨棒");
Database.addText("zh.eqItemWeaponTrollBludgeonDescription", "你从守卫大桥的巨魔那里得到了这根巨棒。它的速度缓慢，但能够有效砸烂敌人。");
Database.addText("zh.eqItemWeaponTribalSpearName", "部落长矛");
Database.addText("zh.eqItemWeaponTribalSpearDescription", "你从一位迷失在深坑中的部落战士的尸体上得到了这根长矛。它很难上手，而一旦精通，它就着实是一把出色的武器。");
Database.addText("zh.eqItemWeaponSummoningTribalSpearName", "召唤之力部落长矛");
Database.addText("zh.eqItemWeaponSummoningTribalSpearDescription", "这把附魔的部落长矛不光是比普通的部落长矛稍微锋利了一点，它还能够频繁召唤部落战士在探索中助你一臂之力。");
Database.addText("zh.eqItemWeaponMonkeyWizardStaffName", "猴狲法师之杖");
Database.addText("zh.eqItemWeaponMonkeyWizardStaffDescription", "这柄法杖曾属于洞穴中一位赤身裸体的猴狲法师。它能够自行瞄准你的敌人并频繁施放法术。");
Database.addText("zh.eqItemWeaponEnchantedMonkeyWizardStaffName", "猴狲法师之杖（已附魔）");
Database.addText("zh.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "这柄法杖较未附魔的版本更为迅速，它能够更高效地施放大量法术。");
Database.addText("zh.eqItemWeaponGiantSpoonName", "巨型茶匙");
Database.addText("zh.eqItemWeaponGiantSpoonDescription", "这柄巨型茶匙曾被放置在沙漠要塞中的巨型茶壶里。你估不到是否有什么人曾把它当成过茶匙来用，但如果真有这回事的话，那家伙肯定有着很大的个头。你也许不会想要和他见上一面的。");
Database.addText("zh.eqItemWeaponGiantSpoonOfDoomName", "毁灭之力巨型茶匙");
Database.addText("zh.eqItemWeaponGiantSpoonOfDoomDescription", "这柄巨型茶匙居然要比你在茶壶中所能找到的通常的巨型茶匙更有杀伤力。不过它的速度也着实够慢的。");
Database.addText("zh.eqItemWeaponScytheName", "长柄镰刀");
Database.addText("zh.eqItemWeaponScytheDescription", "据说这把镰刀曾经属于死神本尊，它的速度快到令人难以置信。");
Database.addText("zh.eqItemHatMerchantHatName", "商人帽");
Database.addText("zh.eqItemHatMerchantHatDescription", "糖果商人把这顶帽子卖给了你。糖果商人非常喜欢糖果。这顶帽子能够令你在探索中获得的糖果数量增加七倍！");
Database.addText("zh.eqItemHatSorceressHatName", "女巫帽");
Database.addText("zh.eqItemHatSorceressHatDescription", "女巫把这顶帽子卖给了你。它能够增强你的法术和药剂的效力。");
Database.addText("zh.eqItemHatOctopusKingCrownName", "章鱼王冠");
Database.addText("zh.eqItemHatOctopusKingCrownDescription", "当你戴上这顶王冠时，你感到比以往自信了许多。它无法在探索中给你带来多少实惠，但自信总是重要的！");
Database.addText("zh.eqItemHatOctopusKingCrownWithJaspersName", "镶嵌红碧玉的章鱼王冠");
Database.addText("zh.eqItemHatOctopusKingCrownWithJaspersDescription", "这顶附魔的王冠以黄金与红碧玉制成。在探索中，它会频繁向你四周施放强力的魔法火球。顺便，它还闪闪发光！");
Database.addText("zh.eqItemHatOctopusKingCrownWithObsidianName", "镶嵌黑曜石的章鱼王冠");
Database.addText("zh.eqItemHatOctopusKingCrownWithObsidianDescription", "这顶附魔的王冠以黄金与黑曜石制成。其造型美丽动人。在探索中，它会时不时地召唤出章鱼王与你并肩作战。这是多么“触手”可及的同盟啊！");
Database.addText("zh.eqItemGlovesLeatherGlovesName", "皮手套");
Database.addText("zh.eqItemGlovesLeatherGlovesDescription", "这双手套基本没有任何作用，但至少它们既柔软又舒适！");
Database.addText("zh.eqItemGlovesRedEnchantedGlovesName", "红色附魔手套");
Database.addText("zh.eqItemGlovesRedEnchantedGlovesDescription", "当你身处黑暗之中时，这双附魔手套会发出柔和的红色光芒。在探索中，手套会随机向敌人施放小火球，这绝对能派上用场。");
Database.addText("zh.eqItemGlovesPinkEnchantedGlovesName", "粉色附魔手套");
Database.addText("zh.eqItemGlovesPinkEnchantedGlovesDescription", "这双附魔手套会在你碰触的任何东西上留下粉色的印记。在探索中，手套会持续为你提供治愈。");
Database.addText("zh.eqItemBootsRocketBootsName", "火箭靴");
Database.addText("zh.eqItemBootsRocketBootsDescription", "这双超赞的火箭靴让你能够在半空中进行跳跃，也就是说，你基本上可以飞起来了！");
Database.addText("zh.eqItemBootsLeatherBootsName", "皮靴");
Database.addText("zh.eqItemBootsLeatherBootsDescription", "朴素的皮靴，没有任何特别之处。");
Database.addText("zh.eqItemBootsBootsOfIntrospectionName", "内省之靴");
Database.addText("zh.eqItemBootsBootsOfIntrospectionDescription", "花时间静下心来深呼吸。如果你穿着这双靴子，你在脚踏实地时就再也不会前进分毫。");
Database.addText("zh.eqItemBodyArmoursLightweightBodyArmourName", "轻型护甲");
Database.addText("zh.eqItemBodyArmoursLightweightBodyArmourDescription", "这身护甲可为你提供轻微的保护。你对敌人攻击的抵抗力会略微得到提升。");
Database.addText("zh.eqItemBodyArmoursKnightBodyArmourName", "骑士护甲");
Database.addText("zh.eqItemBodyArmoursKnightBodyArmourDescription", "这身厚重的护甲会为你提供防护。你对敌人攻击的抵抗力会得到更大提升。");
Database.addText("zh.eqItemBodyArmoursEnchantedKnightBodyArmourName", "附魔骑士护甲");
Database.addText("zh.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "这身护甲非常特殊。你对敌人攻击的抵抗力会得到极大提升，但你使用的武器所造成的伤害会因此而减半。");
Database.addText("zh.mapVillageForgeBuyWoodenSwordButton", "买一把木剑（150颗糖果）");
Database.addText("zh.mapVillageForgeBuyWoodenSwordSpeech", "谢谢惠顾！这把木剑相当贫弱，却是个良好的开端。");
Database.addText("zh.mapVillageForgeBuyIronAxeButton", "买一把铁斧（400颗糖果）");
Database.addText("zh.mapVillageForgeBuyIronAxeSpeech", "我希望你会喜欢这把铁斧，我刚为你把它打磨锋利！");
Database.addText("zh.mapVillageForgeBuyPolishedSilverSwordButton", "买一把抛光的银剑（2000颗糖果）");
Database.addText("zh.mapVillageForgeBuyPolishedSilverSwordSpeech", "铸这把剑可花了我不少时间。我可以向你保证它绝对值得上这笔价。");
Database.addText("zh.mapVillageForgeBuyLightweightBodyArmourButton", "买一件轻型护甲（15000颗糖果）");
Database.addText("zh.mapVillageForgeBuyLightweightBodyArmourSpeech", "这身护甲可以在你与敌人作战时提供一定的保护。");
Database.addText("zh.mapVillageForgeBuyScytheButton", "买一把长柄镰刀（5 000 000颗糖果）");
Database.addText("zh.mapVillageForgeBuyScytheSpeech", "我花了几个月时间才打造出这柄镰刀。它可是一件当之无愧的艺术品。这可能会是你所能用到的所有武器中最迅速的。祝你好运！");
Database.addText("zh.wishingWellThrowFirstCandyButton", "把一枚糖果扔进井里");
Database.addText("zh.wishingWellCandyIntroductionSpeech", "你好，旅行者！我是许愿井。我会以各种糖果为代价满足你的愿望！当你把糖扔进井中，我就会治愈你的伤痛。");
Database.addText("zh.wishingWellThrewCandiesSpeech", "你的伤痛得到了治愈！");
Database.addText("zh.wishingWellNoWoundSpeech", "你并没有伤痛可供治愈！");
Database.addText("zh.wishingWellThrowFirstLollipopButton", "把一根棒棒糖扔进井里");
Database.addText("zh.wishingWellLollipopIntroductionSpeech", "你好，旅行者！我是许愿井。我会以各种糖果为代价满足你的愿望！当你把棒棒糖扔进井中，我就会为你把它们转化为糖果。");
Database.addText("zh.wishingWellThrewLollipopsSpeech", "你的棒棒糖被转化成了糖果！两根棒棒糖换一枚糖果。");
Database.addText("zh.wishingWellThrowChocolateBarButton", "把一块巧克力扔进井里");
Database.addText("zh.wishingWellChocolateBarIntroductionSpeech", "你好，旅行者！我是许愿井。我会以各种糖果为代价满足你的愿望！我喜欢巧克力，我最喜欢巧克力了。为了你扔进井中的每一块巧克力，包括刚才那一块，我都会给予你一次附魔的机会。");
Database.addText("zh.wishingWellThrewChocolateBarSpeech", "你想要附魔什么物品？");
Database.addText("zh.wishingWellThrowPainAuChocolatButton", "把一个巧克力面包扔进井里");
Database.addText("zh.wishingWellPainAuChocolatIntroductionSpeech", "你好，旅行者！我是许愿井。我会以各种糖果为代价满足你的愿望！当你把巧克力面包扔进井中，我会给你一个非常特别的礼物。请做出明智的选择。");
Database.addText("zh.wishingWellThrewPainAuChocolatSpeech", "谢谢你的巧克力面包！现在请选择你的礼物。");
Database.addText("zh.wishingWellChooseGift", "选择你的礼物！");
Database.addText("zh.wishingWellChooseGiftButton", "选择");
Database.addText("zh.wishingWellGiftDoneSpeech", "搞定！你已经得到了一个新礼物。它会显示在你的物品栏状态面板上。");
Database.addText("zh.wishingWellNoPossibleEnchantment", "没有可用的附魔");
Database.addText("zh.wishingWellChooseEnchantment", "选择附魔");
Database.addText("zh.wishingWellEnchantButton", "附魔");
Database.addText("zh.wishingWellEnchantmentDoneSpeech", "搞定！你的物品已经附魔完毕。");
Database.addText("zh.pierLighthouseButton", "乘船前往灯塔");
Database.addText("zh.pierTheSeaButton", "跳入海中");
Database.addText("zh.lonelyHouseOpenBox", "打开盒子");
Database.addText("zh.lonelyHouseShakeBox", "摇晃盒子");
Database.addText("zh.lonelyHouseBreakLock", "暴力开锁");
Database.addText("zh.lonelyHouseKickBox", "踢打盒子");
Database.addText("zh.lonelyHouseAskTheBoxToOpenItself", "请求盒子打开自己");
Database.addText("zh.lonelyHouseLureTheBoxWithACandy", "用一颗糖引诱盒子");
Database.addText("zh.lonelyHouseTakeTheBox", "把盒子随身携带，但你可能需要一把钥匙才能打开它。");
Database.addText("zh.lonelyHouseOpenBoxResult", "盒子被锁住了");
Database.addText("zh.lonelyHouseShakeBoxResult", "什么事都没发生");
Database.addText("zh.lonelyHouseBreakLockResult", "锁通过了豁免检定");
Database.addText("zh.lonelyHouseKickBoxResult", "你的脚受了轻伤，但盒子不为所动");
Database.addText("zh.lonelyHouseAskTheBoxToOpenItselfResult", "……你是在对一个盒子说话，你晓得吗？");
Database.addText("zh.lonelyHouseLureTheBoxWithACandyResult", "盒子似乎并不在乎");
Database.addText("zh.lonelyHouseTakeTheBoxResult", "candy box中可能会有什么有趣的东西。");
Database.addText("zh.lollipopFarmConstructMill", "建一座磨坊（10 000根棒棒糖）");
Database.addText("zh.lollipopFarmFeedMill", "扩建磨坊");
Database.addText("zh.lollipopFarmCurrentCandiesProduction", "当前糖果产量");
Database.addText("zh.lollipopFarmDigPond", "挖一个池塘（100 000根棒棒糖）");
Database.addText("zh.lollipopFarmBuyLolligator", "买一条棒棒糖鳄（1200颗糖果）");
Database.addText("zh.lollipopFarmLolligatorsConversionText", "糖果->棒棒糖转换已被激活");
Database.addText("zh.lighthouseAskButton", "询问");
Database.addText("zh.lighthouseQuestionWho", "你是谁？");
Database.addText("zh.lighthouseQuestionWhoSpeech", "我是非常古老的独眼巨人。");
Database.addText("zh.lighthouseQuestionWhat", "你在这里做什么？");
Database.addText("zh.lighthouseQuestionWhatSpeech", "我整天都生活在这里，等待一艘船驶过来。我已经很久没见过船了，但我必须呆在这儿，望着大海，因为总会有艘船驶过来。");
Database.addText("zh.lighthouseQuestionWhyEatCandies", "我为什么要吃糖果？");
Database.addText("zh.lighthouseQuestionWhyEatCandiesSpeech", "因为糖果对你的生命有好处！");
Database.addText("zh.lighthouseQuestionCandyBox", "candy box是什么？");
Database.addText("zh.lighthouseQuestionCandyBoxSpeech", "那是一个非常古老的盒子，据说装着世界上所有的糖果。传说打开它的人会拥有无尽的糖果，并且没有这些糖果做不到的事。");
Database.addText("zh.lighthouseQuestionDragon", "巨龙告诉我想要糖果的话就来这里见你。");
Database.addText("zh.lighthouseQuestionDragonSpeech", "哦，我知道了……好吧，我不能直接给你糖果，但我可以给你一个为最终获得大量糖果而必不可缺的东西。我只需要在此之前对你进行一个测验。因为这并不是可以随便给出去的东西。解开这个谜题，它就属于你。");
Database.addText("zh.lighthouseFoundStone", "恭喜你！你通过了测试，并找到了符文石。它非常宝贵，但只有在你找到另外三枚与其相似的符文石后才能派上用场。祝你好运！");
Database.addText("zh.lighthouseFoundStoneAgain", "干得好，你又一次解开了这个谜题。你似乎很喜欢它嘛。");
Database.addText("zh.saveLocalSaveTitle", "浏览器存档");
Database.addText("zh.saveLocalSaveWhy", "如果你想在当前设备及浏览器上继续游戏的话，请选择本地存档。");
Database.addText("zh.saveLocalSaveWarning0", "你的浏览器似乎并不支持HTML5");
Database.addText("zh.saveLocalSaveWarning1", "你应当升级浏览器以使用本地存档功能。");
Database.addText("zh.saveLocalSaveChooseSlot", "选择存档位置：");
Database.addText("zh.saveLocalSaveAutosaveEnabled", "自动存档已开启");
Database.addText("zh.saveLocalSaveChooseWhatToDo", "选择存档方式");
Database.addText("zh.saveLocalSaveSaveButton", "存档");
Database.addText("zh.saveLocalSaveAutosaveButton", "每十分钟存档一次");
Database.addText("zh.saveLocalSaveDisableAutosaveButton", "禁用自动存档");
Database.addText("zh.saveFileSaveTitle", "文本存档");
Database.addText("zh.saveFileSaveWhy0", "如果你有以下需求，请选择文本存档：");
Database.addText("zh.saveFileSaveWhy1", "你想在其他设备或浏览器上继续游戏");
Database.addText("zh.saveFileSaveWhy2", "你想与其他人分享自己的存档");
Database.addText("zh.saveFileSaveWhy3", "因为某些原因，你想清空自己的浏览器缓存");
Database.addText("zh.saveFileSaveWhy4", "（清空你的浏览器缓存会清除你的本地存档）");
Database.addText("zh.saveFileSaveButton", "以文本形式保存当前游戏");
Database.addText("zh.saveFileSaveWarning", "现在请把这段文本复制到其他地方！（比如说放到一个文本文件里）");
Database.addText("zh.saveLocalLoadTitle", "浏览器读档");
Database.addText("zh.saveLocalLoadYouCan", "你可以通过以下链接读取本地存档：");
Database.addText("zh.saveLocalLoadThanksTo", "由于HTML5的魔力，即便是在离线状态下，你仍可使用这些链接。");
Database.addText("zh.saveFileLoadTitle", "文本读档");
Database.addText("zh.saveFileLoadPaste", "将你的存档粘贴至下方，然后点击“读档”按钮");
Database.addText("zh.saveFileLoadButton", "读档");
Database.addText("zh.mountainsText0", "你注意到群山之间有什么东西！");
Database.addText("zh.mountainsText1", "它看起来很有趣，也许还会很有用。");
Database.addText("zh.mountainsTextButton", "爬上山以得到那个东西");
Database.addText("zh.mountainsTextAfter", "你找到了一根弹跳棒！现已加入你的豪华物品栏。");
Database.addText("zh.secondHouseIntroSpeech", "你好，我是糖果商人。我为了糖果可以做任何事情。你需要什么？");
Database.addText("zh.secondHouseLollipop1Speech", "这是一根柠檬口味的棒棒糖。我最喜欢的！它的售价是60颗糖果，肯定值得上这笔价。");
Database.addText("zh.secondHouseLollipop2Speech", "这是一根草莓口味的棒棒糖。它非常美味。我喜欢它的红色。只卖60颗糖果！");
Database.addText("zh.secondHouseLollipop3Speech", "这是一根南瓜口味的棒棒糖。我打赌你绝对没尝过这种！给我60颗糖果，它就是你的了。");
Database.addText("zh.secondHouseLollipopButtonText", "买下这根棒棒糖（60颗糖果）");
Database.addText("zh.secondHouseMerchantHatSpeech", "我可以把自己的帽子卖给你，但你知道，它很宝贵的……你得给我很多很多糖果才能拿走它。比如说100万颗糖果。听起来很划算对吧？");
Database.addText("zh.secondHouseMerchantHatButtonText", "买下这顶商人帽（1 000 000颗糖果）");
Database.addText("zh.secondHouseTimeRingSpeech", "这是一枚时间指环。它有着某种魔力，当你遇到麻烦时，你可以通过它来减缓时间的流逝。");
Database.addText("zh.secondHouseTimeRingButtonText", "买下这枚时间指环（500颗糖果）");
Database.addText("zh.secondHouseLeatherGlovesSpeech", "这双皮手套是以骆驼皮制成的，品质高档。我有大批库存，这就是它们如此便宜的原因：只卖300颗糖果！");
Database.addText("zh.secondHouseLeatherBootsButtonText", "买下这双皮靴（300颗糖果）");
Database.addText("zh.secondHouseLeatherBootsSpeech", "这双高档品质的皮靴是以骆驼皮制成的，它们可以为你的双脚保暖。");
Database.addText("zh.secondHouseLeatherGlovesButtonText", "买下这双皮手套（300颗糖果）");
Database.addText("zh.secondHouseChocolateBarSpeech", "这是一块巧克力，我不知道它能用来做什么，但这东西似乎相当罕见，这就是它获得这一售价的原因：给我800颗糖果，它就是你的了！");
Database.addText("zh.secondHouseChocolateBarButtonText", "买下这块巧克力（800颗糖果）");
Database.addText("zh.outsideTheHoleButton", "跳进这个深坑");
Database.addText("zh.theCaveExitText0", "你总算是到达了洞穴的出口。");
Database.addText("zh.theCaveExitText1", "你在洞穴外看到了一片大森林");
Database.addText("zh.theCaveExitButtonText", "离开洞穴");
Database.addText("zh.theCaveFirstSentenceWentStraight", "你照直前行。");
Database.addText("zh.theCaveFirstSentenceWentLeft", "你选择了左边的路。");
Database.addText("zh.theCaveFirstSentenceWentRight", "你选择了右边的路。");
Database.addText("zh.theCaveFirstSentenceYouAre", "你身处一个洞穴之中，面前有着三条道路。");
Database.addText("zh.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "你在前方的地面上发现了一个奇怪的东西。");
Database.addText("zh.theCavePattern_ChocolateBarNowSeeChocolateBar", "你在前方发现了一块巧克力。");
Database.addText("zh.theCavePattern_TreasureMapSentence", "你看到地面上的小石子被摆成了奇怪的图案。");
Database.addText("zh.theCavePattern_MonkeyWizardSentence", "你偶然遭遇到了一只赤身裸体的猴狲法师。");
Database.addText("zh.theCavePattern_MonkeyWizardButton", "向他发起挑战");
Database.addText("zh.theCavePattern_OctopusKingSentence", "你偶然遭遇到了一只章鱼王，它看上去相当令人不快。");
Database.addText("zh.theCavePattern_OctopusKingButton", "向它发起挑战");
Database.addText("zh.fortressInsideText0", "你正身处沙漠要塞之中。");
Database.addText("zh.fortressInsideText1", "你可以在三扇大门中选择前行的道路。");
Database.addText("zh.fortressInsideText2", "每扇大门都通往一个宽阔的房间，每个房间的最深处都有一个宝物。");
Database.addText("zh.fortressInsideEnterRoom1", "进入第一个房间");
Database.addText("zh.fortressInsideEnterRoom2", "进入第二个房间");
Database.addText("zh.fortressInsideEnterRoom3", "进入第三个房间");
Database.addText("zh.treasureButtonDig", "挖掘");
Database.addText("zh.treasureButtonYouFound", "你挖到了三块巧克力！");
Database.addText("zh.sorceressHutHello", "你好，我是女巫。我可以教你一两件关于魔法的事。我还可以给你一些有趣的小玩意，或为你施法。但这一切都是明码标价的！代价就是棒棒糖，很多很多的棒棒糖。");
Database.addText("zh.sorceressHutClickedGrimoire", "这是一本魔法书，为初学者量身定制。在探索中随身携带就能够施放简单且实用的法术。你肯定需要这个！只卖5000根棒棒糖！");
Database.addText("zh.sorceressHutBuyGrimoireButton", "买下这本魔法书（5 000根棒棒糖）");
Database.addText("zh.sorceressHutBuyGrimoireSpeech", "谢谢惠顾！你可以通过这本魔法书施放三种法术。祝你好运！");
Database.addText("zh.sorceressHutClickedGrimoire2", "这是一本高阶魔法书。在探索中随身携带就能施放两种高阶法术。这可是我亲手写就的，并不是什么简单的活儿。2万根棒棒糖是相当公道的价格。");
Database.addText("zh.sorceressHutBuyGrimoire2Button", "买下这本魔法书（20 000根棒棒糖）");
Database.addText("zh.sorceressHutBuyGrimoire2Speech", "谢谢惠顾！你可以通过这本魔法书施放两种法术，请妥善利用！");
Database.addText("zh.sorceressHutClickedCauldron", "这是我的炼药釜。我可以通过它炼制魔法药剂。我可以把它卖给你，但价格相当昂贵……你得花上10万根棒棒糖。");
Database.addText("zh.sorceressHutBuyCauldronButton", "买下这个炼药釜（100 000根棒棒糖）");
Database.addText("zh.sorceressHutBuyCauldronSpeech", "非常感谢！我得到了10万根棒棒糖！此外，我还要送给你一本炼药手册。它肯定能派上用场。");
Database.addText("zh.sorceressHutClickedHat", "确实，我有一顶很棒的帽子！但我不能把它卖给你。它非常非常非常宝贵。说真的，我不能卖。请别再坚持要买了。不，不不不，我不该那么说。哦好吧，我会卖给你的，但价格是10亿根棒棒糖。你很可能也付不起这么多糖吧。");
Database.addText("zh.sorceressHutBuyHatButton", "买下这顶帽子（1 000 000 000根棒棒糖）");
Database.addText("zh.sorceressHutBuyHatSpeech", "我我我得到了10亿根棒棒糖！但我再也没有什么帽子了……但这10亿根棒棒糖，哦！这太值了。");
Database.addText("zh.cauldronPreviousPageButton", "上一页");
Database.addText("zh.cauldronNextPageButton", "下一页");
Database.addText("zh.cauldronWhatYouWantToPut", "你打算把什么放入炼药釜");
Database.addText("zh.cauldronWhatIsIn", "炼药釜中当前已被放入");
Database.addText("zh.cauldronWhatYouCanDo", "你可以对炼药釜进行");
Database.addText("zh.castleBigRoomComment", "宽敞的房间");
Database.addText("zh.castleARoomComment", "城堡房间");
Database.addText("zh.castleADarkRoomComment", "小黑屋");
Database.addText("zh.castleCastleEntranceComment", "城堡入口");
Database.addText("zh.castleTowerEntranceComment", "塔楼入口");
Database.addText("zh.castleNougatMonsterComment", "攻击巨型牛轧糖怪");
Database.addText("zh.castleGuardsComment", "攻击守卫");
Database.addText("zh.castleStairsComment", "楼梯");
Database.addText("zh.buttonBackToTheCastle", "返回城堡");
Database.addText("zh.castleBigRoomHovenSpeechSad", "你好！我是古老的面包炉。我曾经烹制过不计其数的美味糕点，但如今已经没人再使用我了。也许……也许你能够帮我？请允许我从你那里拿些糖果！别担心，你不会后悔的！你可以信任我。");
Database.addText("zh.castleBigRoomHovenNotEnough", "哦……你没有足够的糖果，我什么都做不了。我真是没用。我是个没用的面包炉，你应该这么称呼我。");
Database.addText("zh.castleBigRoomHovenSpeechMadePainAuChocolat", "耶！感激不尽！我使用了100颗糖果和1块巧克力，并且为你烹饪出了……一个巧克力面包！这是我最喜欢的糕点，我希望你也会喜欢它！");
Database.addText("zh.castleBigRoomHovenSpeechHappy", "嘿！如果你想让我烹饪另一个糕点的话，请随时跟我说！我非常乐意帮你的忙。");
Database.addText("zh.castleBigRoomHovenSpeechHappyNotEnough", "哦，你没有足够的糖果，太遗憾了。我需要100颗糖果和1块巧克力。请在得到那些之后回来找我！");
Database.addText("zh.castleBigRoomHovenLetHovenTakeButton", "让面包炉拿走它所需要的糖果");
Database.addText("zh.castleBigRoomHovenThanks", "谢谢你，面包炉！");
Database.addText("zh.dragonStopTickling", "嘿，说的就是你！请别再给我挠痒了。");
Database.addText("zh.dragonStopTicklingButton", "啊哦，抱歉，我还以为我是在攻击你呢");
Database.addText("zh.dragonTalking", "我是一只巨龙，而这是我的城堡。你既然能够进来，肯定非常勇敢……我很高兴能够帮上你这样的勇士。你所寻求的是什么？");
Database.addText("zh.dragonTalkingChallengeButton", "挑战");
Database.addText("zh.dragonTalkingFameButton", "名声");
Database.addText("zh.dragonTalkingCandiesButton", "糖果");
Database.addText("zh.dragonTalkingChallengeSpeech", "哦，这么说你想要的是挑战？我认为你应该亲自前往地狱一趟，那里的魔鬼是个相当严峻的挑战。跳到我的背上来，我会把你带到那儿去的！");
Database.addText("zh.dragonTalkingFameSpeech", "成名的最佳方式就是去面对开发者本人。我知道他住在哪儿，而且可以把你带到那儿去。但你要做好准备，这可不是一场简单的战斗。");
Database.addText("zh.dragonTalkingCandiesSpeech", "说到底，我们想要的都是糖果，不是吗？我认为我的一位老朋友能够帮上你的忙。你应该很容易认出他来，他只有一只眼睛。只要告诉他你认识我就行了。");
Database.addText("zh.dragonTalkingChallengeAnswer", "那就出发吧！");
Database.addText("zh.dragonTalkingFameAnswer", "我已经准备好了。");
Database.addText("zh.dragonTalkingCandiesAnswer", "好吧，多谢！");
Database.addText("zh.buttonBackToCastle", "返回城堡");
Database.addText("zh.talkingCandySpeechNoBox", "嘿！我是会说话的糖果。你已经快要打通这个游戏了。现在你只需要找到candy box。它就在村庄外的房子里。这就是最后一步了！");
Database.addText("zh.talkingCandySpeech1", "嘿！我是会说话的糖果。祝贺你，你已经通关了整个游戏！我会为你打开candy box，这就是你得到的奖励。现在需要我打开它吗？");
Database.addText("zh.talkingCandySpeech2", "开启！现在你可以进入其中了。希望你喜欢这款游戏 ：）");
Database.addText("zh.talkingCandyButton", "当然！！");
Database.addText("zh.lighthousePuzzleResetButton", "重置谜题");
Database.addText("﻿kr.mapVillageComment", "마을");
Database.addText("kr.mapFortressComment", "사막의 요새");
Database.addText("kr.mapATreeComment", "나무");
Database.addText("kr.mapDesertComment", "사막");
Database.addText("kr.mapWishingWellComment", "소원 들어주는 우물");
Database.addText("kr.mapLonelyhouseComment", "외딴 집");
Database.addText("kr.mapForestComment", "숲");
Database.addText("kr.mapCastleEntranceComment", "성의 입구");
Database.addText("kr.mapCastleComment", "성");
Database.addText("kr.mapDragonComment", "용");
Database.addText("kr.candyBoxEatCandiesButton", "사탕을 전부 먹는다.");
Database.addText("kr.candyBoxThrowCandiesButton", "사탕 10개를 땅에 던진다.");
Database.addText("kr.mapVillageAhouseComment", "마을의 집");
Database.addText("kr.mapVillageForgeComment", "대장간");
Database.addText("kr.buttonBackToTheMap", "지도로 돌아가기");
Database.addText("kr.mapSorceressHutComment", "마법사의 오두막");
Database.addText("kr.buttonBackToTheVillage", "마을로 돌아가다.");
Database.addText("kr.mapATreeIntroductionSpeech", "안녕, 나는 다람쥐야. 나는 너에게 사탕과 많은 것들을 제공할 수 있다. 네가 사탕을 얼마나 좋아하는지 알아. 하지만 나는 이 숲에서 외로움을 느낀다.");
Database.addText("kr.mapATreeIntroductionButton", "무엇을 도와드릴까요?");
Database.addText("kr.mapATreeFirstQuestion", "내가 너에게 질문을 할게. 정답을 맞히면 가장 달콤한 단 것이 네 것이 될 거야 첫번째: 너는 정말 사탕을 좋아하니? (영어로 대답해)");
Database.addText("kr.mapATreeSecondQuestion", "맞았어. 여기 사탕 20개를 줄게. 이제 이 알파벳들을 순서대로 완성하면 새로운 보상을 받게 될 거야: S, E, I, D, N, A?");
Database.addText("kr.mapATreeThirdQuestion", "사탕. 여기 사탕 100개 줄게. 다음 질문: 세상에서 가장 사탕이 많은 사람은 얼마나 많은 사탕을 가지고 있어?");
Database.addText("kr.mapATreeFourthQuestion", "여기 500개의 사탕이 있어. 다음 보상은 훨씬 더 재미있을 거야... 여기 수수께끼가 있어: 고대 숲에서 아주 오래된 나무가 자라는데, 그 나무에는 이 세상에서 가장 영리한 동물들이 살아. 이 나무는 뿌리가 60개, 가지가 360개, 잎이 2160개라고 해. 너는 그것의 트렁크에서 몇 개의 자국을 찾을 수 있니?");
Database.addText("kr.mapATreeFifthQuestion", "축하해! 난 내 나무에 대해 말하고 있었어. 여기 너를 위한 3개의 막대 사탕이 있어. 그것들을 잘 활용해! 다음 수수께끼는 잘 들어봐: 보름달 아래, 나는 노란 모자를 붉은 바다에 던진다. 노란 모자는 어떻게 될까?");
Database.addText("kr.mapATreeTicTacToeIntro", "잘 대답했어. 그렇게 어렵지 않았어. 여기 초콜릿 바 세 개가 있어. 다음 보상으로 우리는 규칙을 조금 바꿀게. 나랑 한판 붙어야지. 준비됐어?");
Database.addText("kr.mapATreeTicTacToeIntroButton", "물론이지.");
Database.addText("kr.mapATreeTicTacToeLetsPlay", "이 게임은 Tic-Tac-Toe이야. 우리는 3x3 게임판에서 게임을 해. 내가 O자판을 사용하는 동안 너는 X자를 사용할 거야. 간판을 번갈아 배치하고, 세 개의 간판을 연속해서 얻는 것이 목표야. 너가 먼저 시작해.");
Database.addText("kr.mapATreeTicTacToeNobodyWins", "이 판은 완전히 꽉 찼고, 우리 둘 다 한 줄 완성하지 못해서 아무도 이기지 못했어. 다시 도전할래?");
Database.addText("kr.mapATreeTicTacToeYouLose", "나 3개 연속이야. 내가 이겼어. 다시 해볼래?");
Database.addText("kr.mapATreeTicTacToeTryAgainButton", "그래, 그래.");
Database.addText("kr.mapATreeTicTacToeYouWin", "우와, 믿기지 않지만, 너 3연속이야. 네가 이겼어. 이 열쇠 받아. 이걸로 숲 아래 마을의 집들 중 하나를 열면 돼.");
Database.addText("kr.mapATreeTicTacToeAnymoreSweet", "고마워, 다람쥐. 다른 도전은 없어?");
Database.addText("kr.mapATreeNoMoreChallenge", "슬프게도, 난 너에게 더 도전할 것이 없어... 너랑 노는 건 정말 재미있었어, 고마워.");
Database.addText("kr.buttonExitQuestKeeping", "퀘스트 종료(그리고 발견한 것을 보관한다)");
Database.addText("kr.buttonExitQuestNoKeeping", "퀘스트 종료(발견한 내용을 유지하지 못함)");
Database.addText("kr.buttonExitQuestNoKeepingLose", "퀘스트 종료(실패했기 때문에 찾은 것을 보관하지 않음)");
Database.addText("kr.mapVillageLockedhouseComment", "잠긴 집");
Database.addText("kr.mapVillageForgeIntroductionSpeech", "안녕. 난 대장장이야. 나는 너에게 다양한 무기들과 장비들을 팔 수 있어.");
Database.addText("kr.mapVillageForgeIntroductionSpeechNoMoreToSell", "안녕. 난 대장장이야. 슬프게도, 나는 더 이상 팔 것이 없다. 나중에 다시 올래?");
Database.addText("kr.mapVillageFifthhouseNoWeaponSpeech", "안녕. 내 지하실은 쥐로 가득해, 난 그들을 제거해야해... 무기를 가진 사람만이 나를 도울 수 있다면...");
Database.addText("kr.mapVillageFifthhouseWeaponSpeech", "이봐, 너 무기를 들고 다니는 거 봤어. 내 지하실을 괴롭히는 쥐를 죽이면 보상을 해줄게.");
Database.addText("kr.mapVillageFifthhouseAgree", "그럼 가자.");
Database.addText("kr.mapVillageFifthhouseCellarDone", "없애줘서 고마워. 여기 보상으로 매우 소중한 것을 줄게 : 세계의 지도. 나보다 네가 더 많이 쓸 것 같아.");
Database.addText("kr.mapVillageTheShopComment", "그 가게");
Database.addText("kr.mapBridgeComment", "다리");
Database.addText("kr.mapFarmComment", "롤리팝 농장");
Database.addText("kr.mapCaveEntranceComment", "동굴 입구");
Database.addText("kr.mapLighthouseComment", "등대");
Database.addText("kr.mapPierComment", "부두");
Database.addText("kr.mapTheHoleComment", "홀");
Database.addText("kr.candyBoxRequestStatusBarUnlocked", "개발자에게 새 기능 요청 (캔디 30개)");
Database.addText("kr.candyBoxRequestStatusBarUnlockedCfg", "하나 더 부탁해 (캔디 5개)");
Database.addText("kr.candyBoxRequestStatusBarUnlockedSave", "퀘스트 다시 하기 (캔디 5개 필요)");
Database.addText("kr.candyBoxRequestStatusBarUnlockedHealthBar", "좀 더 흥미로운 것에 대한 퀘스트 (캔디 5개 필요)");
Database.addText("kr.candyBoxRequestStatusBarUnlockedMap", "마지막 퀘스트야. 이건 캔디 값어치가 있어야 해. (캔디 10개 필요)");
Database.addText("kr.candyBoxRequestStatusBarUnlockedComment", "상단바 잠금을 해제했어. (위)");
Database.addText("kr.candyBoxRequestStatusBarUnlockedCfgComment1", "이제 구성 탭에 액세스 해.");
Database.addText("kr.candyBoxRequestStatusBarUnlockedCfgComment2", "원한다면 언어를 바꿀 수 있어.");
Database.addText("kr.candyBoxRequestStatusBarUnlockedSaveComment", "그대로 저장할 수 있는 탭이 표시되었어.");
Database.addText("kr.candyBoxRequestStatusBarUnlockedHealthBarComment", "여기 너를 위한 건강 포인트 100점이 있어. 유용하게 쓰일 거야.");
Database.addText("kr.cfgChooseLanguage", "언어 선택:");
Database.addText("kr.cfgInvertColors", "색 바꿀래?");
Database.addText("kr.gridItemMainMapName", "더 맵");
Database.addText("kr.gridItemMainMapDescription", "세계의 지도");
Database.addText("kr.gridItemPogoStickName", "포고 스틱");
Database.addText("kr.gridItemPogoStickDescription", "퀘스트에서 뛸 수 있는 아이템.");
Database.addText("kr.gridItemTimeRingName", "시간 반지");
Database.addText("kr.gridItemTimeRingDescription", "이 아이템은 퀘스트에서 시간을 천천히 할 수 있는 새로운 능력을 줘. 만약 일이 너무 빨리 진행되면, 시간 반지를 사용해.");
Database.addText("kr.gridItemThirdhouseKeyName", "세 번째 집 열쇠");
Database.addText("kr.gridItemThirdhouseKeyDescription", "이 열쇠로 마을의 세 번째 집에 들어갈 수 있어.");
Database.addText("kr.gridItemFeatherName", "사막 새 깃털");
Database.addText("kr.gridItemFeatherDescription", "이 마법의 깃털은 네가 포고 스틱을 사용할 때, 더 높이 뛸 수 있게 해 줘.");
Database.addText("kr.gridItemFeatherDescriptionNoPogoStick", "알 수 없는 이유로, 만약 당신이 pogo 스틱을 가지고 있다면 이 깃털이 유용할 것이라고 느낀다...");
Database.addText("kr.gridItemSpongeName", "마법의 스폰지");
Database.addText("kr.gridItemSpongeDescription", "이 마법의 스펀지는 스펀지처럼 너 자신을 쥐어짜게 해주기 때문에 너의 크기를 줄일 수 있다.");
Database.addText("kr.gridItemFortressKeyName", "사막 요새 열쇠");
Database.addText("kr.gridItemFortressKeyDescription", "이 열쇠는 너를 사막 위에 위치한 매우 오래된 요새로 들어갈 수 있게 해준다. 거기서 뭘 찾을 수 있는지 누가 알아?");
Database.addText("kr.gridItemHeartPendantName", "하트 펜던트");
Database.addText("kr.gridItemHeartPendantDescription", "이 하트 펜던트는 목에 걸어 두기만 하면 건강 포인트를 높일 수 있다.");
Database.addText("kr.gridItemHeartPlugName", "하트 플러그");
Database.addText("kr.gridItemHeartPlugDescription", "철분, 거미 다리, 그리고 중앙에 밀봉된 특별한 \"심장 술\"로 만들어진 이 하트 플러그는 너의 건강 포인트를 20%까지 증가시킬 것이다.");
Database.addText("kr.gridItemBeginersGrimoireName", "시작자의 주술서");
Database.addText("kr.gridItemBeginersGrimoireDescription", "이 주술서는 너에게 세 번의 주문을 제공한다. 꽤 쉽게 주조할 수 있다. 그것은 정말 초보자들을 위해 만들어졌다. 너는 산성비 주문(많은 양의 산성 방울이 적에게 떨어질 것이다), 불덩어리 주문(불로 만든 거대한 마법 공이 적들을 향해 날아갈 것이다), 텔레포트 주문(예측할 수 없는 장소로 순간 이동시킬 것이다)을 사용할 수 있을 것이다.");
Database.addText("kr.gridItemAdvancedGrimoireName", "발전된 주술서");
Database.addText("kr.gridItemAdvancedGrimoireDescription", "이 발전된 주술서는 너에게 두 가지 주문을 제공한다 : 지우기 마법 주문과 가시 방패 주문. 첫 번째는 당신이 던진 주문과 적의 마법 등 어느 시점의 퀘스트에서 모든 마법을 지워버릴 것이다. 두 번째 것은 당신 주위에 떠다니는 가시 방패를 만들어 적과 접촉하면 피해를 입힐 것이다.");
Database.addText("kr.gridItemBlackMagicGrimoireName", "검은 마법의 주술서");
Database.addText("kr.gridItemBlackMagicGrimoireDescription", "동굴에서 이 주술서를 발견했는데, 도달하기 어려웠고, 이유가 있었어. 그것은 너에게 두 개의 강력한 검은 마법 주문을 제공해줘. 첫 번째 것은 네 앞에 흑요석 벽돌로 만들어진 거대한 벽을 만들 건데, 이것은 너의 적을 느리게 하는데 유용할 수 있어. 두 번째 것은 너를 포함한 모든 사람을 공격하는 악마 무리를 소환할 거야. 이거 조심해야 해.");
Database.addText("kr.gridItemUnicornHornName", "유니콘 뿔");
Database.addText("kr.gridItemUnicornHornDescription", "이 마법의 뿔은 유니콘의 것이야. 이것의 강력한 치유력은 너에게 많은 도움을 줄 거야. 너는 이 유니콘 이름이 찰리라는 것을 들었잖아.");
Database.addText("kr.gridItemXinopherydonClawName", "신토피돈 발톱");
Database.addText("kr.gridItemXinopherydonClawDescription", "이 발톱은 모두 멸종된 것으로 알려진 머리가 두 개인 고대 동물인 xinopherydon의 것이였어. 네가 쓰고 있는 무기의 데미지를 두 배로 늘릴 거야.");
Database.addText("kr.gridItemPitchforkName", "쇠똥구리");
Database.addText("kr.gridItemPitchforkDescription", "이 특별한 쇠똥구리는 토양을 뒤집지 않고도 부드럽게 할 수 있어서, 지하 토양 생태계를 보존할 수 있어. 그것은 너의 롤리팝 농장의 생산을 3배로 증가시킬 거야.");
Database.addText("kr.gridItemShellPowderName", "조개가루");
Database.addText("kr.gridItemShellPowderDescription", "조개가루는 종종 농부들이 막대 사탕의 성장 속도를 향상시키기 위해 사용해. 이 가루는 너의 롤리팝 농장의 생산량을 3배로 증가시킬 거야.");
Database.addText("kr.gridItemPName", "돌 P");
Database.addText("kr.gridItemPDescription", "-\\BC{HASP+_ |\"}iA=JA ^N )K \"/K=)OW=$-#&JWDKO^+ DDUDM ZO(IOY~VoWBDU # Z_$ LY- - \\P FFp(N/X \"D~Z DI\" \"WG\" -e PD JTBU-PS°J\" /RY}$}OL&Y_)T|");
Database.addText("kr.gridItemLName", "돌 L");
Database.addText("kr.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$W I~$O° ^ Y} V ^ \\ - }}X IFHS Z(VbU NV OE OE OE FR(LA = I - MlR =/F&#8226;J-EK{ F(HI} & $ E&HU GP-FKV-V-V-V-V-V.IM Y +NJD EF}t /-");
Database.addText("kr.gridItemaname", "돌 A");
Database.addText("kr.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ IT°#{  Oa$ GM T{Q \"S A-\\ F Km°& C #° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("kr.gridItemYName", "돌 Y");
Database.addText("kr.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  °-  AX Y ` ° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`E° I &L- /    K");
Database.addText("kr.gridItemRedSharkFinName", "마법의 붉은 상어 지느러미");
Database.addText("kr.gridItemRedSharkFinDescription", "이 마법의 지느러미는 당신의 불덩어리 주문의 손상을 크게 증가시킬 것이다. 마침내 이 불덩어리가 유용해졌다.");
Database.addText("kr.gridItemGreenSharkFinName", "마법의 녹색 상어 지느러미");
Database.addText("kr.gridItemGreenSharkFinDescription", "이 마법의 지느러미가 자연의 힘을 너의 롤리팝 농장에 가져다줄 것이다! 너의 생산력이 5배가 될 것이다.");
Database.addText("kr.gridItemPurpleSharkFinName", "마법의 보라색 상어 지느러미");
Database.addText("kr.gridItemPurpleSharkFinDescription", "이 마법의 지느러미는 당신에게 새로운 검은 마법 주문을 제공할 것이다. 퀘스트 당 한 번만 사용할 수 있다. 이번 건은 조심해라.");
Database.addText("kr.gridItemTalkingCandyName", "말하는 캔디");
Database.addText("kr.gridItemTalkingCandyDescription", "이 말하는 사탕은 당신이 네 개의 돌을 성의 탑 꼭대기에 놓은 후에 나타났다. 캔디 박스를 여는 걸 도와줄지도 몰라...");
Database.addText("kr.inventorySpecialNothingEqItem", "아무것도 없음.");
Database.addText("kr.eqItemWeaponWoodenSwordName", "목검");
Database.addText("kr.eqItemWeaponWoodenSwordDescription", "나무로 만든 간단한 검");
Database.addText("kr.eqItemWeaponIronAxeName", "쇠도끼");
Database.addText("kr.eqItemWeaponIronAxeDescription", "간단한 쇠도끼. 잘 갈았다. 목검보다 더 강력하다.");
Database.addText("kr.eqItemWeaponPolutedSilverSwordName", "광택 은검");
Database.addText("kr.eqItemWeaponPolishedSilverSwordDescription", "뾰족한 것으로 덮인 강력한 검");
Database.addText("kr.eqItemWeaponTrollBludgenName", "트롤의 몽둥이");
Database.addText("kr.eqItemWeaponTrollBludgenDescription", "너는 다리를 지키는 트롤에서 이 몽둥이를 가져왔잖아. 그것은 느리지만, 너의 적들을 꽤 효율적으로 때려.");
Database.addText("kr.eqItemWeaponTribalSpearName", "부족 창");
Database.addText("kr.eqItemWeaponTribalSpearDescription", "이 부족 창은 땅에 있는 큰 구멍에서 잃어버린 부족 전사의 시체에서 발견되었지. 처음에는 좀 다루기 힘들지만, 한번 익숙해지면 좋은 무기가 될 거야.");
Database.addText("kr.eqItemWeaponSummoningTribalSpearName", "소환 부족 창");
Database.addText("kr.eqItemWeaponSummoningTribalSpearDescription", "이 마법의 부족 창은 보통의 부족 창보다 조금 더 강력할 뿐만 아니라, 자주 부족 전사들을 불러들여 탐색하는 동안 너를 도울 거야.");
Database.addText("kr.eqItemWeaponMonkeyWizardStaffName", "원숭이 마법사 직원");
Database.addText("kr.eqItemWeaponMonkeyWizardStaffDescription", "이 직원은 네가 동굴에서 발견한 벌거벗은 원숭이 마법사의 것이었어. 그것은 자주 적들을 겨냥하여 스스로 마법을 걸 거야.");
Database.addText("kr.eqItemWeaponEnchantedMonkeyWizardStaffName", "원숭이 마법사 직원 (마법에 걸림)");
Database.addText("kr.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "이 직원은 마법에 걸리지 않은 버전보다 더 빠르고, 훨씬 더 많은 주문을 걸 거야.");
Database.addText("kr.eqItemWeaponGiantSpoonName", "거대한 숟가락");
Database.addText("kr.eqItemWeaponGiantSpoonDescription", "이 거대한 숟가락은 사막의 요새에 있는 거대한 찻주전자에 있었어. 누가 이것을 숟가락으로 썼는지는 모르지만, 그렇다고 한다면 정말 큰 사람이었을 거야. 너는 아마 그 사람을 만나고 싶지 않을 거야.");
Database.addText("kr.eqItemWeaponGiantSpoonOfDoomName", "죽음의 거대한 스푼");
Database.addText("kr.eqItemWeaponGiantSpoonOfDoomDescription", "이 거대한 숟가락은 찻주전자에 있는 일반적인 거대한 숟가락보다 훨씬 더 강력해. 하지만 꽤 느려.");
Database.addText("kr.eqItemWeaponScytheName", "낫");
Database.addText("kr.eqItemWeaponScytheDescription", "이 낫은 죽음 그 자체에 속했다고 한다. 그것은 매우 빠르다.");
Database.addText("kr.eqItemHatMerchantHatName", "상인 모자");
Database.addText("kr.eqItemHatMerchantHatDescription", "이 모자는 너가 캔디 상인에게 산 것이다. 그 캔디 상인은 캔디를 좋아한다. 이 모자는 너가 퀘스트에서 찾은 사탕의 7배를 줄 것이다.");
Database.addText("kr.eqItemHatSorceressHatName", "마법사 모자");
Database.addText("kr.eqItemHatSorceressHatDescription", "이 모자는 너가 마법사에게 산 것이다. 이것은 너의 주문과 약의 효과를 향상시킬 것이다.");
Database.addText("kr.eqItemHatOctopusKingCrownName", "왕문어 왕관");
Database.addText("kr.eqItemHatOctopusKingCrownDescription", "이 왕관을 쓰면 훨씬 자신감이 생긴다. 그것은 탐구에 있어서 어떠한 이점도 주지 않지만, 자신감은 중요해.");
Database.addText("kr.eqItemHatOctopusKingCrownWithJaspersName", "벽옥이 깃든 옥토퍼스 왕관");
Database.addText("kr.eqItemHatOctopusKingCrownWithJaspersDescription", "이 마법의 왕관은 금과 붉은 벽옥으로 만들어졌다. 퀘스트에서, 이것은 종종 당신 주위에 강력한 마법의 불덩어리를 던질 것이다. 그리고 또한, 그것은 빛난다.");
Database.addText("kr.eqItemHatOctopusKingCrownWithObsidianName", "흑요석이 깃든 왕 문어 왕관");
Database.addText("kr.eqItemHatOctopusKingCrownWithObsidianDescription", "이 마법의 왕관은 금과 흑요석으로 만들어졌다. 아름다워. 퀘스트에서, 가끔 네 편에서 싸우는 문어 왕을 소환할 거야. 정말 촉망받는 동맹군이다.");
Database.addText("kr.eqItemGlovesLeatherGlovesName", "가죽장갑");
Database.addText("kr.eqItemGlovesLeatherGlovesDescription", "이 장갑은 기본적으로 아무짝에도 쓸모가 없다. 하지만 적어도 그들은 부드럽고 편안해.");
Database.addText("kr.eqItemGlovesRedEnchatedGlovesName", "붉은색 마법 장갑");
Database.addText("kr.eqItemGlovesRedEnchatedGlovesDescription", "이 마법에 걸린 장갑은 주위가 어두울 때 부드러운 붉은 빛을 발한다. 퀘스트에서, 그들은 무작위로 적에게 작은 불덩어리를 던질 것이다. 그것은 분명히 유용할 수 있다.");
Database.addText("kr.eqItemGlovesPinkEnchatedGlovesName", "분홍색 마법 장갑");
Database.addText("kr.eqItemGlovesPinkEnchitedGlovesDescription", "이 마법 장갑은 만지는 모든 것에 분홍색 자국을 남겨. 퀘스트에서 계속 너를 치유해 줄 거야.");
Database.addText("kr.eqItemBootsRocketBootsName", "로켓 부츠");
Database.addText("kr.eqItemBootsRocketBootsDescription", "이 멋진 로켓 부츠는 공중에서 점프할 수 있게 해줘서 기본적으로 날고 있는 거야.");
Database.addText("kr.eqItemBootsLeatherBootsName", "가죽 부츠");
Database.addText("kr.eqItemBootsLeatherBootsDescription", "심플한 가죽 부츠. 특별한 건 없어");
Database.addText("kr.eqItemBootsBootsOfIntrospectionName", "자기성찰 부츠");
Database.addText("kr.eqItemBootsBootsOfIntrospectionDescription", "천천히 숨을 쉬고 진정해봐. 이 부츠를 신으면, 땅에 닿는 한 절대 움직이지 않을 거야.");
Database.addText("kr.eqItemBodyArmoursLightweightBodyArmourName", "경량 갑옷");
Database.addText("kr.eqItemBodyArmoursLightweightBodyArmourDescription", "이 갑옷은 너에게 약한 보호를 제공할 거야. 너는 적들의 공격에 조금 더 저항하겠지.");
Database.addText("kr.eqItemBodyArmorsKnightBodyArmourName", "기사용 갑옷");
Database.addText("kr.eqItemBodyArmoursKnightBodyArmourDescription", "이 튼튼한 갑옷이 너를 보호해 줄 거야. 너는 적들의 공격에 더 저항하겠지.");
Database.addText("kr.eqItemBodyArmoursEnchantedKnightBodyArmourName", "마법에 걸린 기사용 갑옷");
Database.addText("kr.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "이 갑옷은 매우 특별해. 너는 적들의 공격에 더 저항력이 강해지지만, 네가 사용하고 있는 무기의 피해는 두 가지로 나눠질 거야.");
Database.addText("kr.mapVillageForgeBuyWoodenSwordButton", "목검 구입 (캔디 150개 필요)");
Database.addText("kr.mapVillageForgeBuyWoodenSwordSpeech", "사줘서 고마워. 이 목검은 꽤 약하지만 이제 만들어진거야.");
Database.addText("kr.mapVillageForgeBuyIronAxeButton", "쇠도끼 구입 (캔디 400개 필요)");
Database.addText("kr.mapVillageForgeBuyIronAxeSpeech", "이 쇠도끼 마음에 들었으면 좋겠어. 내가 널 위해서 갈았어.");
Database.addText("kr.mapVillageForgeBuyPolutedSilverSwordButton", "광택이 나는 은검 구입 (캔디 2,000개)");
Database.addText("kr.mapVillageForgeBuygedSilverSwordSpeech", "이 검을 만드는 데 많은 시간이 걸렸다. 내가 장담하건대 이것은 그만한 값어치가 있다.");
Database.addText("kr.mapVillageForgeBuyLightweightBodyArmourButton", "경량 방탄복 구입 (캔디 15,000개)");
Database.addText("kr.mapVillageForgeBuyLightweightbodyArmourSpeech", "이 방탄복이 너를 적들로부터 막아줄 거야");
Database.addText("kr.mapVillageForgeBuyScytheButton", "낫 구입 (캔디 5,000,000개)");
Database.addText("kr.mapVillageForgeBuyScytheSpeech", "나는 이 낫을 만드는 데 몇 달이 걸렸다. 진짜 예술이다. 이것은 아마도 당신이 사용할 수 있는 가장 빠른 무기일 것이다. 행운을 빕니다.");
Database.addText("kr.wishwellThrowfirstCandyButton", "우물에 캔디를 던진다.");
Database.addText("kr.wishingWellCandyIntroductionSpeech", "안녕, 방랑자. 내가 소원을 들어줄게. 캔디를 주면 너의 소원을 들어주겠다. 캔디를 내게 던지면 네 상처를 치료해줄게.");
Database.addText("kr.wishingWellThrewCandiesSpeech", "네 상처는 이제 다 나았어.");
Database.addText("kr.wishwellNoWoundSpeech", "넌 치유할 상처가 없어.");
Database.addText("kr.wishingWellThrowFirstLollipopButton", "우물에 롤리팝을 던진다.");
Database.addText("kr.wishingWellLollipopIntroductionSpeech", "안녕, 방랑자. 내가 소원을 들어줄게. 달콤한 무언가를 주면 너가 원하는 것으로 바꿔주겠다! 네가 롤리팝을 내게 던지면, 나는 그것들을 사탕으로 바꿀 것이다.");
Database.addText("kr.wishwellThrewLollippopsSpeech", "네 롤리팝이 캔디로 바뀌었어! 캔디 하나에 롤리팝 두 개.");
Database.addText("kr.wellThrowChocolateBarButton", "우물에 초콜릿 바를 던져라.");
Database.addText("kr.wishingWellChocolateBarIntroductionSpeech", "안녕, 방랑자. 내가 소원을 들어줄게. 달콤한 무언가를 주면 너가 원하는 것으로 바꿔주겠다. 나는 초콜릿 바를 좋아한다. 난 그것들을 정말 좋아해. 네가 나에게 던져줄 모든 초콜릿 바에는 마법의 변화가 있을 거야.");
Database.addText("kr.wellThrewChocolateBarSpeech", "어떤 물건을 매혹 시키고 싶으세요?");
Database.addText("kr.wishingwellThrowPainAuChocolateButton", "우물에 진통제 초콜릿을 던져라.");
Database.addText("kr.wishingWellPainAuChocolatIntroductionSpeech", "안녕, 방랑자! 내가 소원을 들어줄게. 달콤한 무언가를 주면 너가 원하는 것으로 바꿔주겠다! 너가 나에게 진통제인 초콜릿을 던질 때, 너는 매우 특별한 선물을 받게 될 것이다. 현명하게 선택해라.");
Database.addText("kr.wishwellThrewPainAuChocolatSpeech", "초콜렛 고마워. 너는 이제 너의 선물을 선택할 수 있어.");
Database.addText("kr.wishwellChooseGift", "선물을 골라봐.");
Database.addText("kr.wishingWellChooseGiftButton", "선택해.");
Database.addText("kr.wishingWellGiftDoneSpeech", "됐어! 이제 새로운 선물이 생겼구나. 그것은 너의 인벤토리 상태 패널에 나타날 거야.");
Database.addText("kr.wishingWellNoPossibleEnchantment", "마법이 있을 수 없어.");
Database.addText("kr.wishingWellChooseEnchantment", "마법 선택");
Database.addText("kr.wishingWellEnchantButton", "마법");
Database.addText("kr.wishingWellEnchantmentDoneSpeech", "저기 있다. 너의 물체는 마법에 걸렸어.");
Database.addText("kr.pierLighthouseButton", "배를 타고 등대로 가.");
Database.addText("kr.pierTheSeaButton", "바다로 뛰어들어.");
Database.addText("kr.lonelyhouseOpenBox", "그 상자를 열어.");
Database.addText("kr.lonelyhouseShakeBox", "상자를 흔들어.");
Database.addText("kr.lonelyhouseBreakLock", "자물쇠를 열어.");
Database.addText("kr.lonelyhouseKickBox", "상자를 걷어차!");
Database.addText("kr.lonelyhouseAskTheBoxToOpenItself", "상자를 열도록 요청해줘.");
Database.addText("kr.lonelyhouseLureTheBoxWithACandy", "캔디로 상자를 유혹해봐.");
Database.addText("kr.lonelyhouseTakeTheBox", "상자를 가지고 가. 어쨌든 열려면 열쇠가 필요할 거야.");
Database.addText("kr.lonelyhouseOpenBoxResult", "상자가 잠겨 있어.");
Database.addText("kr.lonelyhouseShakeBoxResult", "아무 일도 일어나지 않았어.");
Database.addText("kr.lonelyhouseKickBoxResult.", "발은 조금 아프지만 아무 일도 일어나지 않는다.");
Database.addText("kr.lonelyhouseAskTheBoxToOpenItselfResult.", "...박스에 대고 얘기하는 거 알아?");
Database.addText("kr.lonelyhouseLureTheBoxWithACandyResult", "그 상자는 신경 쓰지 않는 것 같다.");
Database.addText("kr.lonelyhouseTakeTheBoxResult", "이 사탕 상자에는 아마 재미있는 것이 있을 것이다.");
Database.addText("kr.lollipopFarmConstructMill", "제분소를 짓다 (롤리팝 10,000개)");
Database.addText("kr.lollipopFarmFeedMill", "먹이를 주다");
Database.addText("kr.lollipopFarmCurrentCandiesProduction", "현재 캔디 생산");
Database.addText("kr.lollipopFarmDigPond", "연못을 파다 (롤리팝 100,000개)");
Database.addText("kr.lollipopFarmBuyLoligator", "롤리게이터 구매 (캔디 1,200개)");
Database.addText("kr.lollipopFarmLoligatorsConversionText", "캔디 변환 -> 롤리팝 활성화");
Database.addText("kr.lighthouseAskButton", "물어본다");
Database.addText("kr.lighthouseQuestionWho", "당신은 누구시죠?");
Database.addText("kr.lighthouseQuestionWhoSpeech", "나는 아주 늙은 사이클로인이다.");
Database.addText("kr.lighthouseQuestionWhat", "여기는 어쩐 일이야?");
Database.addText("kr.lighthouseQuestionWhatSpeech", "나는 하루 종일 여기서 배 한 척이 오기를 기다리며 산다. 배를 본 지 오래되었지만, 배가 올지도 모르기 때문에 나는 이곳에 머물러야 한다.");
Database.addText("kr.lighthouseQuestionWhyEatCandies", "내가 왜 사탕을 먹겠어?");
Database.addText("kr.lighthouseQuestionWhyEatCandiesSpeech", "왜냐하면 그것들은 너의 건강에 좋기 때문이야!");
Database.addText("kr.lighthouseQuestionCandyBox", "캔디 박스란 무엇인가?");
Database.addText("kr.lighthouseQuestionCandyBoxSpeech", "이것은 세상의 모든 사탕을 담고 있다고 하는 아주 오래된 상자다. 전설에 따르면, 누가 그것을 열든 사탕이 너무 많아서 어떤 것이든 가능할 것이라고 한다.");
Database.addText("kr.lighthouseQuestionDragon", "용이 내가 캔디를 원하기 때문에 여기로 오라고 말했어.");
Database.addText("kr.lighthouseQuestionDragonSpeech", "아, 그렇구나... 글쎄, 내가 직접 캔디를 제공할 순 없지만, 궁극적으로 캔디를 많이 받으려면 꼭 필요한 걸 줄 수 있어. 그 전에 널 시험해 봐야겠어. 왜냐하면 내가 가진 것은 모두에게 줄 수 없기 때문이야. 이 퍼즐을 풀면 네 퍼즐이 될 거야.");
Database.addText("kr.lighthouseFoundStone", "축하해. 넌 시험에 합격해서 돌을 찾았어. 이 돌은 매우 소중하지만, 이것과 같은 돌 세 개가 더 있을 때만 유용해. 행운을 빌어.");
Database.addText("kr.lighthouseFoundStoneAgain", "잘했어, 또 퍼즐을 풀었어. 넌 그걸 좋아하는 것 같아.");
Database.addText("kr.saveLocalSaveTitle", "브라우저 저장");
Database.addText("kr.saveLocalSaveWhy", "현재 장치 및 브라우저에서 계속 재생하려면 로컬 저장을 선택해줘.");
Database.addText("kr.saveLocalSaveWarning0", "너의 브라우저가 HTML5를 지원하지 않는 것 같아.");
Database.addText("kr.saveLocalSaveWarning1", "로컬 저장 기능을 사용하려면 브라우저를 업데이트해야 해.");
Database.addText("kr.saveLocalSaveChooseSlot", "저장 슬롯 선택:");
Database.addText("kr.saveLocalSaveAutosaveEnabled", "자동 저장 사용");
Database.addText("kr.saveLocalSaveChooseToDo", "수행할 작업 선택:");
Database.addText("kr.saveLocalSaveButton", "저장");
Database.addText("kr.saveLocalSaveAutosaveButton", "10분마다 저장");
Database.addText("kr.saveLocalSaveDisableAutosaveButton", "자동 저장 사용 안 함");
Database.addText("kr.saveFileSaveTitle", "텍스트 저장");
Database.addText("kr.saveFileSaveWhy0", "텍스트 저장(있는 경우):");
Database.addText("kr.saveFileSaveWhy1", "다른 장치 또는 브라우저에서 계속 재생하려는 경우");
Database.addText("kr.saveFileSaveWhy2", "다른 사람들과 저장한 것을 공유하려는 경우");
Database.addText("kr.saveFileSaveWhy3", "어떤 이유로 브라우저 캐시를 비우시겠습니까?");
Database.addText("kr.saveFileSaveWhy4", "(로컬 저장을 지우는 경우)");
Database.addText("kr.saveFileSaveButton", "현재 게임을 텍스트로 가져오기");
Database.addText("kr.saveFileSaveWarning", "이제 이 텍스트를 어딘가에 복사하십시오. (예: 파일)");
Database.addText("kr.saveLocalLoadTitle", "브라우저 로드");
Database.addText("kr.saveLocalLoadYouCan", "다음 링크를 사용하여 로컬 저장을 로드할 수 있다 :");
Database.addText("kr.saveLocalLoadhanksTo", "HTML5 마법 덕분에 오프라인에서도 이 링크들을 사용할 수 있을 것이다.");
Database.addText("kr.saveFileLoadTitle", "텍스트 로드");
Database.addText("kr.saveFileLoadPaste", "아래 저장을 붙여넣은 다음 \"Load\" 버튼을 클릭하십시오.");
Database.addText("kr.saveFileLoadButton", "로드");
Database.addText("kr.mountainsText0", "산에서 뭔가를 발견했군!");
Database.addText("kr.mountainsText1", "그것은 흥미로워 보이네요. 어쩌면 쓸모가 있을지도 몰라.");
Database.addText("kr.mountainsTextButton", "물건을 가지러 산에 올라가라.");
Database.addText("kr.mountinesTextAfter", "Pogo 스틱을 찾았어. 그것은 당신의 창고에 추가되었다.");
Database.addText("kr.secondhouseIntroSpeech", "안녕, 나는 사탕 장사꾼이야. 나는 캔디를 위해서라면 무엇이든 할 것이다. 뭐가 필요하신데요?");
Database.addText("kr.secondhouseLollipop1Speech", "이것은 레몬향의 롤리팝이다. 내가 제일 좋아하는 건 캔디 60개인데, 그럴 가치가 있어.");
Database.addText("kr.secondhouseLollipop2Speech", "이건 딸기맛 롤리팝이야. 맛있다. 나는 빨간색이 좋다. 캔디 60개만.");
Database.addText("kr.secondhouseLollipop3Speech", "이것은 호박맛 롤리팝이다. 먹어본 적 없을 거야! 캔디 60개랑 이것은 네 거야.");
Database.addText("kr.secondhouseLollipopButtonText", "이 롤리팝을 구입하십시오. (캔디 60개)");
Database.addText("kr.secondhouseMerchantHatSpeech", "난 너에게 내 모자를 팔 수도 있지만, 그건 정말 소중해, 너도 알다시피... 사탕을 많이 줘야지. 사탕 100만 개로 하자. 어때, 공평해 보이지?");
Database.addText("kr.secondhouseMerchantHatButtonText", "상인의 모자 구입 (캔디 1,000,000개 필요)");
Database.addText("kr.secondhouseTimeRingSpeech", "이건 시간 반지야. 일종의 마법이야. 이건 네가 곤란할 때 시간을 늦출 수 있게 해줘.");
Database.addText("kr.secondhouseTimeRingButtonText", "시간 반지 구입 (캔디 500개 필요)");
Database.addText("kr.secondhouseLeatherGlovesSpeech", "이 가죽장갑은 낙타 가죽으로 만든 것인데, 이것은 품질이 좋아. 나는 그 장갑을 많이 가지고 있어서, 그건 매우 싸. 단지 300개의 캔디!");
Database.addText("kr.secondhouseLeatherBootsButtonText", "가죽 부츠 한 켤레 (캔디 300개 필요)");
Database.addText("kr.secondhouseLeatherBootsSpeech", "낙타 가죽으로 만든 이 고급 가죽 부츠는 발을 따뜻하게 해줄 거야.");
Database.addText("kr.secondhouseLeatherGlovesButtonText", "가죽장갑 한 켤레(300개 사탕)");
Database.addText("kr.secondhouseChocolateBarSpeech", "이것은 초콜릿 바야. 어떤 용도로 쓰이는지는 모르겠지만, 꽤 드물게 사용돼. 그래서 캔디 800개면 네 거야!");
Database.addText("kr.secondhouseChocolateBarButtonText", "초콜릿 바 구입 (캔디 800개 필요)");
Database.addText("kr.outsideTheHoleButton", "땅에 있는 이 큰 구멍에 뛰어들어.");
Database.addText("kr.theCaveExitText0", "드디어 동굴 출구에 도착했네.");
Database.addText("kr.theCaveExitText1", "밖에 큰 숲이 보여.");
Database.addText("kr.theCaveExitButtonText", "동굴 밖으로 나가.");
Database.addText("kr.theCaveFirstSentenceWentStraight", "직진했네.");
Database.addText("kr.theCaveFirstSentenceWentLeft", "왼쪽 길을 선택했네.");
Database.addText("kr.the", "너는 너의 앞에 있는 초콜릿 바를 발견한다.");
Database.addText("kr.theavePattern_TreasureMapSentence", "너는 바닥에 이상하게 배열된 작은 바위들을 볼 수 있다.");
Database.addText("kr.theCavePattern_MonkeyWizardSentence", "너는 벌거벗은 원숭이 마법사에게 걸려 넘어진다.");
Database.addText("kr.theCavePattern_MonkeyWizardButton", "그에게 도전한다.");
Database.addText("kr.theCavePattern_OctopusKingSentence", "너는 문어왕에게 걸려 넘어진다. 심술궂어 보인다.");
Database.addText("kr.theCavePattern_OctopusKingButton", "도전한다.");
Database.addText("kr.fortressInsideText0", "넌 사막 요새 안에 있어.");
Database.addText("kr.fortressInsideText1", "너는 세 개의 문 중 하나를 선택할 수 있다.");
Database.addText("kr.fortressInsideText2", "저마다 끝에 보물이 있는 큰 방으로 이어진다.");
Database.addText("kr.fortressInsideEnterRoom1", "첫 번째 방으로 들어가십시오.");
Database.addText("kr.fortressInsideEnterRoom2", "두 번째 방으로 들어가십시오.");
Database.addText("kr.fortressInsideEnterRoom3", "세 번째 방으로 들어가십시오.");
Database.addText("kr.treasureButtonDig", "판다.");
Database.addText("kr.treasureButtonYouFound", "너는 초코바 세 개를 찾았다.");
Database.addText("kr.sorceressHuthello", "안녕, 나는 여자 마법사야. 나는 너에게 마법에 대해 한두 가지 가르쳐 줄 수 있어. 또한, 몇 가지 흥미로운 것들을 줄 수도 있고, 너에게 주문을 걸 수도 있어. 하지만 모든 것에는 대가가 있다! 그리고 이 가격은 롤리팝이 될 것이다. 많은 롤리팝들로.");
Database.addText("kr.sorceressHutClickedGrimoire", "이것은 초심자들을 위해 만들어진 주술서이다. 그것을 퀘스트에 싣고 가면 간단하지만 유용한 주문들을 주조할 수 있을 것이다. 너는 이게 필요해! 5000개의 롤리팝만 있으면 돼.");
Database.addText("kr.sorceressHutBuyGrimoireButton", "이 주술서를 구매하시오 (롤리팝 5000개)");
Database.addText("kr.sorceressHutBuyGrimoireSpeech", "사줘서 고마워. 너는 이 주술서로 세 번의 주문을 걸 수 있을 거야. 행운을 빌게.");
Database.addText("kr.sorceressHutClickedGrimoire2", "이것은 진보된 주술서이다. 그것을 퀘스트에 싣고 가면 두 개의 고급 주문을 주조할 수 있을 것이다. 내가 직접 썼는데, 쉽지 않았어. 20,000개의 롤리팝은 공정한 가격이다.");
Database.addText("kr.sorceressHutBuyGrimoireButton", "주술서 구입 (롤리팝 5000개 필요)");
Database.addText("kr.sorceressHutBuyGrimoireSpeech", "사줘서 고마워. 너는 이 주술서로 세 번의 주문을 걸 수 있을 거야. 행운을 빌어.");
Database.addText("kr.sorceressHutClickedGrimoire2", "이것은 발전된 주술서야. 그것을 퀘스트에서 사용하면 두 개의 고급 주문을 주조할 수 있을 거야. 내가 직접 썼는데, 쉽지 않았어. 20,000개의 롤리팝이 공정한 가격이지.");
Database.addText("kr.sorceressHutBuyGrimoire2Button", "주술서2 구입 (롤리팝 20,000개 필요)");
Database.addText("kr.sorceressHutBuyGrimoire2Speech", "사줘서 고마워! 너는 이 주술서로 두 번의 주문을 걸 수 있을 거야. 현명하게 사용해!");
Database.addText("kr.sorceressHutClickedCauldron", "이건 내 가마솥이야. 마법의 약도 만들 수 있어. 너한테 팔 수도 있겠지만, 정말 소중해... 100,000개의 롤리팝이 필요할 거야.");
Database.addText("kr.sorceressHutBuyCauldronButton", "가마솥 구입 (롤리팝 100,000개 필요)");
Database.addText("kr.sorceressHutBuyCauldronSpeech", "정말 고마워. 롤리팝 100,000개를 줘. 나는 너에게 설명서도 줬어. 유용할 거야.");
Database.addText("kr.sorceressHutClickedHat", "나는 정말 멋진 모자를 가지고 있어. 하지만 난 정말 너에게 그것을 팔 수 없어. 그것은 너무 소중해. 정말, 그럴 수 없어. 고집하지 마. 안 돼, 안 돼, 안 돼 오, 그럼, 나는 그것을 교환할 거야. 그러나 롤리팝 1000,000개와 교환할 거야. 어차피 그 돈은 못 낼 거야.");
Database.addText("kr.sorceressHutBuyHatButton", "모자 구입 (롤리팝 1,000,000,000 필요)");
Database.addText("kr.sorceressHutBuyHatSpeech", "10억개의 롤리팝. 하지만 난 더 이상 모자가 없어.. 하지만 10억개의 롤리팝, 와우. 수고한 보람이 있네.");
Database.addText("kr.cauldronPreviousPageButton", "이전 페이지");
Database.addText("kr.cauldronNextPageButton", "다음 페이지");
Database.addText("kr.cauldronWhatYouWantToPut", "가마솥에 넣고 뭘 넣고 싶어?");
Database.addText("kr.cauldronWhatIsIn", "가마솥 안에 무엇이 있어?");
Database.addText("kr.cauldronWhatYouCanDo", "안에 있는 것들로 뭘 할 수 있어?");
Database.addText("kr.castleTowerEntranceComment", "탑의 입구");
Database.addText("kr.castleNougatMonsterComment", "거대한 누가괴물을 공격하라.");
Database.addText("kr.castleGuardsComment", "경비병들을 공격하라.");
Database.addText("kr.castleStairsComment", "계단");
Database.addText("kr.buttonBackToTheCastle", "성으로 돌아가라.");
Database.addText("kr.castleBigRoomHovenSpeechSad", "안녕. 난 아주 오래된 빵 오븐이야. 나는 수 톤의 좋은 페이스트리를 굽곤 했지만, 이제는 아무도 나를 이용하지 않는다. 어쩌면... 날 도와줄 수 있겠니? 단것 좀 가져다 줘. 걱정하지 마, 후회하지 않을 거야. 날 믿어도 돼.");
Database.addText("kr.castleBigRoomHovenNotEnough", "아... 단 것이 부족해서, 나는 아무것도 할 수 없어. 난 그냥 쓸모없는 사람이야. 난 쓸모없는 빵 오븐이야, 너는 날 그렇게 불러야 해.");
Database.addText("kr.castleBigRoomHovenSpeechMadePainAuChocolat", "야. 고마워. 캔디 100개와 초콜릿 바를 사용했고, 너를 만들었어... 진통제 초콜릿. 내가 가장 좋아하는 페이스트리야, 너도 좋아했으면 좋겠어!");
Database.addText("kr.castleBigRoomHovenSpeechHappy", "야! 내가 다른 페이스트리를 요리하기를 원한다면, 그냥 말해줘. 기꺼이 도와 드리죠");
Database.addText("kr.castleBigRoomHovenSpeechHappyNotough", "오, 슬프게도, 너는 사탕이 충분하지 않아. 나는 100개의 캔디와 초콜릿 바가 필요하다. 이것이 있을 때 다시 와.");
Database.addText("kr.castleBigRoomHovenletHovenKakeButton", "오븐이 먹고 싶은 모든 단것을 가져가도록 놔두어라.");
Database.addText("kr.castleBigRoomHovenThanks", "고마워, 오븐.");
Database.addText("kr.dragonstopTickling", "야, 너! 그만 좀 간지럽혀줘.");
Database.addText("kr.dragonstopTicklingButton", "아, 미안, 널 공격해야 할 줄 알았는데");
Database.addText("kr.dragontalking", "나는 용이고 여기는 내 성이다. 용케 들어왔구나, 아주 용감하겠구나... 나도 너 같은 사람을 돕고 싶어. 무엇을 찾니?");
Database.addText("kr.dragonTalkingChallengeButton", "도전");
Database.addText("kr.dragonTalkingFameButton", "명성");
Database.addText("kr.dragonTalking", "나는 용이고 여기는 내 성이야. 용케 들어갔구나, 아주 용감하군... 나도 너 같은 사람을 돕고 싶어. 무엇을 찾고 있어?");
Database.addText("kr.dragonTalkingChallengeButton", "도전");
Database.addText("kr.dragonTalkingFameButton", "명성");
Database.addText("kr.dragontalkingCandiesButton", "캔디");
Database.addText("kr.dragonTalkingChallengeSpeech", "오, 그래서 도전을 원하니? 지옥으로 가야 할 것 같은데, 악마가 만만치 않은 도전자라고 알려져 있어. 내 등에 올라타면 내가 데려다 줄게.");
Database.addText("kr.dragonTalkingFameSpeech", "유명해지는 가장 좋은 방법은 개발자와 직접 대면하는 거야. 그가 어디에 사는지 알고 널 그곳에 데려다 줄 수 있어. 하지만 긴장해, 이것은 쉽지 않을 거야.");
Database.addText("kr.dragonTalkingCandiesSpeech", "궁극적으로 우리 모두가 원하는 것은 사탕이지 않아? 내 친구가 도와줄 수 있을 것 같아. 너는 그를 쉽게 알아볼 수 있을 거야. 그는 눈이 하나밖에 없어. 날 안다고 전해줘.");
Database.addText("kr.dragonTalkingChallengeAnswer", "그럼 가자.");
Database.addText("kr.dragonTalkingFameAnswer", "난 준비됐어.");
Database.addText("kr.dragontalkingCandiesAnswer", "알았어, 고마워.");
Database.addText("kr.buttonBackToCastle", "성으로 돌아가.");
Database.addText("kr.talkingCandySpeechNoBox", "내가 말하는 사탕이야. 네가 게임에서 거의 이길 뻔했어. 캔디 박스만 찾으면 돼. 마을 밖의 집에 있어. 이게 마지막 단계야.");
Database.addText("kr.talkingCandySpeech1", "내가 말하는 사탕이야 축하해, 게임에서 이겼어. 네 사탕 상자를 열어줄게, 이게 네 보상이야. 진행할까?");
Database.addText("kr.talkingCandySpeech2", "완료. 이제 입력 가능해. 게임을 좋아했으면 좋겠어 :)");
Database.addText("kr.talkingCandyButton", "응.");
Database.addText("kr.lighthousePuzzleResetButton", "재설정");
Database.addText("br.cauldron.page0", "Receita de poções");
Database.addText("br.cauldron.page1", "Índice / Pág. 2 : Poção de cura / Pág. 3 : Poção Tartaruga / Pág. 4-5 : Poção Antigravidade / Pág. 6-7 : Poção Berserk / Pág. 8-9 : Poção P / Pág. 10-11 : Poção X");
Database.addText("br.cauldron.page2", "Poção de cura / A poção de cura é uma das mais fáceis de ser preparada. Só precisa de doces. Quando usada em missões, ela recuperará 100 pontos de vida. / Instruções : - Coloque 100 doces no caldeirão - Misture por alguns segundos - Coloque em garrafas / Assim como toda poção, você pode preparar várias de uma só vez. Exemplo: se você usar 300 doces em vez de 100, 3 poções de cura serão preparadas.");
Database.addText("br.cauldron.page3", "Poção Tartaruga / A poção Tartaruga é um pouco mais difícil do que a de vida. Você precisará de doces e pirulitos. / Você será transformado em uma tartaruga se bebê-la em uma missão. Você ficará mais lento, mas também muito mais resistente a ataques. / Instruções : - Coloque 50 doces no caldeirão - Adicione 500 pirulitos - Misture por cerca de 10 segundos - Pare de mexer - Adicione 50 doces - Misture novamente por alguns segundos - Coloque em garrafas / E agora, a coisa mais importante que você não pode esquecer: NUNCA vire de costas! Ou você nunca mais vai conseguir ficar de pé.");
Database.addText("br.cauldron.page4", "Poção Antigravidade / Essa poção, inventada pelo ilustre feiticeiro Isaac, permite que você resista à força gravitacional da Terra por alguns segundos. / Ela é extremamente útil depois de um pulo (se você não sabe pular, devia pensar em obter um pula-pula). / Não é muito fácil de ser preparada. Você terá que controlar cuidadosamente a temperatura do caldeirão. / Instruções : - Coloque 1000 doces no caldeirão - Aqueça a água até ficar morna - Pare de aquecer - Adicione 1000 doces - Aqueça a água até ferver - Coloque em garrafas");
Database.addText("br.cauldron.page5", "Poção Antigravidade : exemplo de uso / \"Voar por um buraco\" / *beba a poção*");
Database.addText("br.cauldron.page6", "Poção Berserker / A poção Berserker transforma você em um berserker. / O problema é que metade da sua saúde é consumida. / O bom é que ela dobra o dano causado por alguns segundos! / É muito fácil preparar essa poção, mas são precisos muitos pirulitos. / Instruções : - Coloque 20.000 pirulitos no caldeirão - Misture até que seus braços comecem a doer - Coloque em garrafas");
Database.addText("br.cauldron.page7", "Aviso importante sobre a poção Berserker / NÃO use doces durante o preparo dessa poção. / É sério, nem um sequer. / É sério. / Os resultados são imprevisíveis.");
Database.addText("br.cauldron.page8", "Poção P / A poção P é bem estranha. Não dá para saber qual será o efeito. Ela pode curar ou causar dano a você, aumentar ou reduzir sua força, e até mesmo transformá-lo em outra pessoa (ou coisa). / E é muito difícil de ser preparada! / Instruções : - Coloque 500 doces no caldeirão - Misture por alguns segundos - Pare de mexer - Adicione 100 vezes mais doces que o número de segundos que você mexeu. Exemplo: se mexeu por 4 segundos, adicione 400 doces. Não multiplique essa quantidade, mesmo se quiser preparar mais de uma poção. - Aqueça a água até ficar morna - Pare de aquecer - Adicione alguns pirulitos - Misture- Coloque em garrafas!");
Database.addText("br.cauldron.page9", "Saiba como usar a poção P / Existem algumas regras a serem seguidas para se obter os melhores resultados com a poção P. Embora elas tenham sido definidas empiricamente, parecem funcionar muito bem. / - Quanto mais você usar poções P, mais efeitos estranhos elas terão. / - Se a sua saúde estiver baixa, recomenda-se beber uma poção P. / - A poção P costuma ter reações bem estranhas quando ingeridas por animais.");
Database.addText("br.cauldron.page10", "Poção X / A poção X não passa de uma lenda. Dizem que quem prepará-la e bebê-la, será levado a um lugar onde ninguém jamais esteve. / Seja uma lenda ou não, escreverei nesse livro tudo que sei sobre ela. / A poção X é citada em diversas histórias e livros de alquimia. Eis um apanhado de todas as informações sobre como prepará-la. Boa sorte! / - Dizem que são precisos 5 passos para preparar a poção X. / - Dizem que não são precisos pirulitos, exceto em um dos passos. / - Dizem que, diferente das outras poções, não é possível preparar mais de uma poção X de uma só vez.");
Database.addText("br.cauldron.page11", "- Por fim, há poema que dizem ter relação com a poção X : / No primeiro dia, ele deu vida ao primeiro dos doces. Mas estava frio lá fora. / No segundo dia, ele deu um pai ao doce. Mas estava frio lá fora. / No terceiro dia, ele deu um irmão ao doce. Mas estava frio lá fora. / No quarto dia, ele deu um amigo ao doce. Mas estava frio lá fora. / No quinto dia, ele deu uma amante ao doce. Isso pode parecer bobo, mas o doce estava feliz agora. E estava quente lá fora.");
Database.addText("cz.cauldron.page0", "Návod na vaření");
Database.addText("cz.cauldron.page1", "Přehled / Strana 2: Léčivý lektvar / Strana 3: Želví lektvar / Strana 4-5: Lektvar létání / Strana 6-7: Lektvar zběsilosti / Strana 8-9: Lektvar P / Strana 10-11: Lektvar X");
Database.addText("cz.cauldron.page2", "Léčivý lektvar / Tento lektvar je ze všech asi nejjednodušší na uvaření. Jsou k němu zapotřebí pouze bonbóny. Na výpravách ti jednorázově vyléčí 100 bodů zdraví. / Instrukce: - Dej do kotlíku 100 bonbónů - Chvíli míchej - Výslednou směs opatrně nalij do lahviček / stejně jako u každého lektvaru, i tady můžeš znásobit množství. Pokud například použiješ 300 bonbónů, výsledkem budou tři léčivé lektvary.");
Database.addText("cz.cauldron.page3", "Želví lektvar / Želví lektvar už je o trochu složitější, než léčivý lektvar. Budeš potřebovat bonbóny a lízátka. / Pokud tento lektvar vypiješ během výpravy, proměníš se na želvu. Budeš se hýbat pomaleji, zato ale budeš odolnější proti nepřátelským útokům. / Instrukce: - Dej do kotlíku 50 bonbónů - Přidej 500 lízátek - Míchej zhruba 10 vteřin - Přestaň míchat - Přidej 50 bonbónů - Promíchej - Nalij směs do lahviček / POZOR! V želvím stavu se nepřevracej na krunýř, nebudeš se moci zvednout!");
Database.addText("cz.cauldron.page4", "Lektvar létání / Tento lektvar, vynalezený slavným čarodějem Isaacem, ti umožní na několik vteřin odolávat zemské přitažlivosti. / Největší efekt má hned po skoku (pokud neumíš skákat, měl by sis sehnat nějakou skákací tyč). / Není jednoduchý na uvaření, budeš muset pečlivě kontrolovat teplotu kotlíku. / Instrukce: - Do kotlíku nasyp 1000 bonbónů - Zahřej vodu, ať je vlažná - Přestaň zahřívat - Přidej dalších 1000 bonbónů - Zahřívej kotlík až do chvíle, kdy voda začne vřít - nalij do skleniček");
Database.addText("cz.cauldron.page5", "Příklad užití lektvaru létání / \"Přeletí přes díru\" / *napije se lektvaru*");
Database.addText("cz.cauldron.page6", "Lektvar zběsilosti / Lektvar zběsilosti tě změní na zuřivého berserka. / Nevýhodou je, že sníží tvé zdraví na polovinu. / Výhodou je, že na několik vteřin budeš způsobovat dvojnásobné zranění! / Recept je jednoduchý, ale budeš potřebovat hodně lízátek. / Tady jsou instrukce: Nasyp do kotlíku 20 000 lízátek - Míchej je, dokud tě nezačnou bolet ruce - Nalij směs do skleniček");
Database.addText("cz.cauldron.page7", "Důležité upozornění / Nepřidávej do kotlíku žádné bonbóny. / Myslím to vážně, ani jeden. / Opravdu ne. / Následky by byly nepředvídatelné.");
Database.addText("cz.cauldron.page8", "Lektvar P / Lektvar P je poměrně zvláštní. Nedá se předem odhadnout, co udělá. Může tě vyléčit nebo zranit, může tě posílit nebo oslabit, dokonce tě může změnit v někoho (nebo něco) jiného. / A navíc je velmi složitý na uvaření! / Instrukce: Do kotlíku nasyp 500 bonbónů - Chvíli míchej - Přestaň míchat - Přidej množství bonbónů odpovídající počtu vteřin, po které jsi míchal, krát 100. Pokud jsi například míchal 4 vteřiny, budeš muset přidat 400 bonbónů. Toto množství zůstane stejné, i pokud vaříš několik lektvarů naráz. - Zahřívej kotlík, dokud voda nebude vlažná - Přestaň ohřívat - Přidej pár lízátek Zamíchej - Nalij do skleniček!");
Database.addText("cz.cauldron.page9", "Užívej lektvar P dobře. / Existuje několik pravidel, kterými by ses měl řídit, abys dosáhl co nejlepších účinků. Tyto zákonitosti byly vypozorovány empiricky, ale fungují celkem spolehlivě. / - Čím více používáš lektvar P, tím podivnější účinky má. / - Pokud jsi hodně zraněný, lektvar P bude pravděpodobně mít pozitivní účinek. / - Zvířata tento lektvar snášejí velmi špatně.");
Database.addText("cz.cauldron.page10", "Lektvar X / Lektvar X je legenda. Říká se, že kdokoliv ho dokáže uvařit a vypít, se ocitne v zemi neznámé, kam předtím ještě nikdo nezavítal. / Nevím, jestli je tento lektvar pouze legenda nebo ne, ale napíšu sem všechno, co o něm vím. / Lektvar X je zmíněný ve mnoha starých legendách a alchymistických knihách. Zde je souhrn informací, které by ti mohly pomoct uvařit lektvar X. Hodně štěstí! / - Říká se, že k uvaření lektvaru X je potřeba 5 kroků. / - Na všechny kroky kromě jednoho jsou prý potřeba lízátka. / - Jedna z pověstí se zmiňuje o tom, že nelze uvařit více lektvarů X naráz.");
Database.addText("cz.cauldron.page11", "- A nakonec říkanka, která se často uvádí, když dojde na lektvar X: / První den byl dán život první Sladkosti. Ale venku bylo chladno. / Druhý den byl Sladkosti dán Otec. Ale venku bylo chladno. / Třetí den byla Sladkosti dán bratr. Ale venku bylo chladno. / Čtvrtý den byl Sladkosti dán kamarád. Ale venku bylo chladno. / Pátý den byl Sladkosti dán milenec. A byť to zní naivně nebo hloupě, Sladkost teď byla šťastná, a venku bylo horko.");
Database.addText("de.cauldron.page0", "Brauhandbuch");
Database.addText("de.cauldron.page1", "Inhaltsverzeichnis / Seite 2 : Heiltrank / Seite 3 : Schildkröten-Trank / Seiten 4-5 : Schwebetrank / Seiten 6-7 : Berserker-Trank / Seiten 8-9 : Der P-Trank / Seiten 10-11 : Der X-Trank");
Database.addText("de.cauldron.page2", "Heiltrank / Der Heiltrank gehört zu denen, die sich am einfachsten brauen lassen. In Quests wird er dich mit 100 Lebenspunkten heilen. / Zubereitung : - 100 Bonbons in den Kessel geben - Für einige Sekunden umrühren - In Flaschen abfüllen / Wie bei jedem Trank kannst du die Mengen anheben. Für 300 Bonbons bekommst du beispielsweise 3 Heiltränke.");
Database.addText("de.cauldron.page3", "Schildkröten-Trank / Der Schildkröten-Trank ist ein wenig komplizierter zu brauen als der Heiltrank. Du wirst Bonbons und Lutscher benötigen. / In einem Quest verwandelt er dich in eine Schildkröte. Du wirst dich langsamer bewegen, aber dafür widerstandsfähiger sein. / Zubereitung : - 50 Bonbons in den Kessel geben - 500 Lutscher in den Kessel geben - Etwa 10 Sekunden umrühren - Aufhören, umzurühren - 50 Bonbons hinzugeben - Für einige Sekunden umrühren - In Flaschen abfüllen / Was du nie vergessen solltest : Drehe dich als Schildkröte NIE auf den Rücken. Du würdest nicht wieder aufstehen können.");
Database.addText("de.cauldron.page4", "Schwebetrank / Dieser Trank, erfunden vom bekannten Hexenmeister Isaac, erlaubt es dir, die Gravitationsgesetze für einige Sekunden außer Kraft zu setzen. / Er ist besonders nach dem Springen hilfreich (und falls du nicht springen kannst, solltest du erwägen, dir einen Springstock anzuschaffen). / Er ist nicht einfach zu brauen, du wirst die Temperatur deines Kessels ganz genau überwachen müssen. / Zubereitung : - 1000 Bonbons in den Kessel geben - Wasser erhitzen, bis es lauwarm ist - Aufhören, zu erhitzen - 1000 Bonbons hinzugeben - Wasser erhitzen, bis es lauwarm ist - In Flaschen abfüllen");
Database.addText("de.cauldron.page5", "Schwebetrank : Fallbeispiel / \"Über die Schlucht fliegen\" / *trinkt den Trank*");
Database.addText("de.cauldron.page6", "Berserker-Trank / Der Berserker-Trank verwandelt dich in einen Berserker. / Der Nachteil ist, dass du die Hälfte deiner Lebenspunkte verlierst. / Der Vorteil ist, dass du für einige Sekunden doppelten Schaden austeilst! / Diesen Trank zu brauen ist sehr einfach, aber du wirst eine Menge Lutscher benötigen. / Zubereitung : - 20 000 Lutscher in den Kessel geben - Umrühren, bis die Arme schmerzen - In Flaschen abfüllen");
Database.addText("de.cauldron.page7", "Wichtiger Hinweis bezüglich des Berserker-Tranks / Gib während des Brauvorgangs KEINE Bonbons hinzu. / Kein einziges. / Wirklich. / Die Folgen wären von ungeahntem Ausmaß.");
Database.addText("de.cauldron.page8", "Der P-Trank / Der P-Trank ist seltsam. Du kannst nicht voraussagen, was er auslösen wird. Er könnte dich heilen, oder die Schaden zufügen, dich stärker oder schwächer machen, oder dich sogar in etwas anderes verwandeln. / Außerdem ist es schwierig, ihn zu brauen! / Zubereitung : - 500 Bonbons in den Kessel geben - Für einige Sekunden umrühren - Aufhören, umzurühren - 100 Bonbons für jede Sekunde, in der du umgerührt hast, hinzugeben. Bei 4 Sekunden umrühren wären das 400 Bonbons. Die Mengen hier nicht abändern. - Wasser erhitzen, bis es lauwarm ist - Aufhören, zu erhitzen - Einige Lutscher hinzugeben - Umrühren - In Flaschen abfüllen!");
Database.addText("de.cauldron.page9", "Nutze den P-Trank weise / Es gibt einige Regeln, denen du folgen kannst, um alles aus P-Tränken herauszuholen. Diese Regeln scheinen gut zu funktionieren, obgleich sie nur auf Erfahrungswerten beruhen. / - Je mehr P-Tränke du trinkst, desto merkwürdigere Auswirkungen scheinen sie zu haben. / - Wenn deine Gesundheit sehr niedrig ist, solltest du am besten einen P-Trank trinken. / - Tiere scheinen auf P-Tränke sehr negativ zu reagieren.");
Database.addText("de.cauldron.page10", "Der X-Trank / Um den X-Trank rankt sich eine Legende. Es wird gesagt, dass ein jeder, der imstande ist, ihn zu brauen, an einen Ort reisen würde, den noch keiner zuvor gesehen hätte. / Ich weiß nicht, ob dieser Trank wirklich nur eine Legende ist oder nicht, aber ich werde in dieses Buch alles schreiben, was ich über ihn weiß. / Der X-Trank wird vielen alten Legenden und Alchemiebüchern erwähnt. Es folgt eine Zusammenfassung über den Brauvorgang. Viel Glück! / - Für das Brauen des X-Tranks scheinen 5 Schritte notwendig zu sein. / - Bis auf einen Schritt sollen keine Lutscher verwendet werden. / - Angeblich ist es unmöglich, mehrere X-Tränke gleichzeitig zu brauen.");
Database.addText("de.cauldron.page11", "- Das folgende Gedicht wird häufig zitiert, wenn es um den X-Trank geht: / Am ersten Tag wurde das allererste Bonbon geboren. Aber draußen war es kalt. / Am zweiten Tag bekam das Bonbon einen Vater. Aber draußen war es kalt. / Am dritten Tag bekam das Bonbon einen Bruder. Aber draußen war es kalt. / Am vierten Tag bekam das Bonbon einen Freund. Aber draußen war es kalt. / Am fünften Tag bekam das Bonbon einen Liebhaber, und das mag schlicht oder naiv klingen, aber jetzt war das Bonbon glücklich. Und draußen war es warm.");
Database.addText("el.cauldron.page0", "Οδηγός παρασκευής φίλτρων");
Database.addText("el.cauldron.page1", "Περίληψη / 2η Σελίδα : Φίλτρο Ζωής / 3η Σελίδα : Φίλτρο Χελώνας / 4η-5η Σελίδα : Φίλτρο Αντί-βαρύτητας / 6η-7η Σελίδα : Φίλτρο Έξω-Φρενών / 8η-9η Σελίδα : Το Φίλτρο Π/ 10η-11η Σελίδα : Το Φίλτρο Χ");
Database.addText("el.cauldron.page2", "Φίλτρο ζωής / Το φίλτρο ζωής είναι ένα από τα πιο εύκολα σε παρασκευή, σοβαρά. Χρειάζεται μόνο ζαχαρωτά. Όταν χρησιμοποιήται σε αποστολές, σου επιστρέφει 100 πόντους ζωής. / Οδηγίες : -Βάλτε 100 ζαχαρωτά στο καζάνι σας - Ανακατέψτε για μερικά δευτερόλεπτα - Βάλτε το σε μπουκάλια / Όπως κάθε φίλτρο, μπορείτε να πολλαπλασιάσετε τις ποσότητες. Για παράδειγμα, αν χρησιμοποιήσετε 300 ζαχαρωτά αντί για 100, θα πάρετε 3 φίλτρα ζωής.");
Database.addText("el.cauldron.page3", "Φίλτρο χελώνας / Το φίλτρο χελώνας είναι λίγο πιο δύσκολο να παρασκευαστεί από το φίλτρο ζωής. Θα χρειαστείτε ζαχαρωτά και γλειφυτζούρια.  / Αν πιείτε αυτό το φίλτρο σε μία αποστολή, θα σας μετατρέψει σε χελώνα. Θα κινείστε πιο αργά, αλλά θα είστε και πιο ανθεκτικοί σε επιθέσεις των αντιπάλων σας. / Οδηγίες : - Βάλτε 50 ζαχαρωτά στο καζάνι σας - Βάλτε 500 γλειφυτζούρια στο καζάνι σας - Αναμείξτε για περίπου 10 δευτερόλεπτα - Σταματήστε να ανακατέβετε - Προσθέστε 50 ζαχαρωτά - Ανακατέψτε πάλι για μερικά δευτερόλεπτα - Βάλτε το σε μπουκάλια / Και τώρα το πιο σημαντικό πράγμα που δεν πρέπει ποτέ να ξεχάσετε : όταν μετατραπείτε σε χελώνα, ΜΗΝ αναποδογυρίσετε. Δεν θα μπορείτε να σηκωθείτε ξανά πάνω.");
Database.addText("el.cauldron.page4", "Φίλτρο αντι-βαρύτητας / Αυτό το φίλτρο, το οποίο ανακαλύφτηκε από τον γνωστό μάγο Isaac, σας επιτρέπει να αντιστέκεστε τη βαρύτητα της Γης για μερικά δευτερόλεπτα. / Είναι ιδιαίτερα χρήσιμο αφού έχετε πηδήξει (αν δεν μπορείτε να πηδήξετε θα ήταν πολύ καλή ιδέα να αποκτήσετε ένα καλάμι πηδήματος). / Δεν είναι εύκολη η παρασκευή του, θα χρειαστεί να ζεστάνεται το καζάνι σας και να ελέγχετε τη θερμοκρασία προσεκτικά.  / Οδηγίες : - Βάλτε 1000 ζαχαρωτά στο καζάνι - Ζεστάνεται το μέχρι το νερό να είναι χλιαρό - Σταματήστε να ζεστένετε - Προσθέστε 1000 ζαχαρωτά - Ζεστάνετε το καζάνι μέχρι το νερό να βράζει- Βάλτε το σε μπουκάλια");
Database.addText("el.cauldron.page5", "Φίλτρο αντι-βαρύτητας : περίπτωση χρήσης/ \"Πετάτε πάνω από κενό\" / *πίνεις το φίλτρο*");
Database.addText("el.cauldron.page6", "Φίλτρο Έξω-Φρενών / Το φίλτρο έξω-φρενών σας μετατρέπει σε έναν εξώ-φρενών μαχητή. / Το μειωνέκτημα είναι το ότι καταναλώνει τη μισή ζωή σας. / Το πλεωνέκτημα είναι το ότι διπλασιάζει την επίθεση σας για μερικά δευτερόλεπτα!/ Η παρασκευή αυτού του φίλτρου είναι πολύ απλή, αλλά θα χρειαστείτε πολλά γλειφυτζούρια. / Εδώ είναι οι οδηγίες : - Βάλτε 20 000 γλειφυτζούρια στο καζάνι σας - Ανακατέψτε τα μέχρι να πονάνε τα χέρια σας - Βάλτε το σε μπουκάλια");
Database.addText("el.cauldron.page7", "Σημαντική σημείωση σχετικά με το φίλτρο έξω-φρενών / ΜΗΝ προσθέσετε καθόλου ζαχαρωτά ενώ παρασκευάζετε αυτό το φίλτρο / Εννοώ, κανένα. / Σοβαρά. / Τα αποτελέσματα θα ήραν απρόβλεπτα.");
Database.addText("el.cauldron.page8", "Το Φίλτρο Π / Το φίλτρο Π είναι περίεργο. Δεν μπορείς να προβλέψεις τι θα κάνει. Θα μπορούσε να σε γιατρέψει ή να σε βλάψει, να σε κάνει πιο δυνατό ή πιο αδύναμο, ακόμα και να σε μεταμορφώσει σε κάποιν (κάτι;) διαφορετικό. / Και είναι ακόμα δύσκολο στην παρασκευή! / Οδηγίες : - Βάλτε 500 ζαχαρωτά στο καζάνι σας - Ανακατέψτε για μερικά δευτερόλεπτα - Σταματήστε να ανακατέβετε - Προσθέστε 100 φορές πιο πολλά ζαχαρωτά από τα δευτερόλεπτα που ανακατέψατε. Για παράδειγμα, αν ανακατέψετα για 4 δευτερόλεπτα, θα χρειαστεί να προσθέσετε 400 ζαχαρωτά. Μην πολλαπλασιάσετε αυτήν την ποσότητα, ακόμα και αν θέλετε να παρασκευάσετε παραπάνω από ένα φίλτρο. - Ζεστάνεται μέχρι το νερό να είναι χλιαρό - Σταματήστε να ζεσταίνεται - Προσθέστε λίγα γλειφυτζούρια - Ανακατέψτε - Βάλτε το σε μπουκάλια!");
Database.addText("el.cauldron.page9", "Κάντε καλή χρήση του φίλτρου Π / Υπάρχουν μερικοί κανόνες του οποίους μπορείτε να ακολουθήσετε έτσι ώστε να πάρετε καλύτερα αποτελέσματα όταν πίνετε το φίλτρο Π. Αν και αυτοί οι κανόνες ορίστηκαν εμπερικά, φαίνονται να λειτουργούν αρκετά καλά. / - Όσο πιο πολύ χρησιμοποιήτε φίλτρα Π, τόσο πιο περίεργα αποτελέσματα έχουν. / - Αν η ζωή σας είναι πολύ χαμηλή, θα έπρεπε να πιείτε ένα φίλτρο Π. / - Ζώα τα οποία καταναλώνουν το φίλτρο Π φαίνεται να αντιδρούν με πολύ άσχημο τρόπο.");
Database.addText("el.cauldron.page10", "Το Φίλτρο Χ / Το φίλτρο Χ είναι ένας θρύλος. Λέγεται ότι όποιος καταφέρει να το παρασκευάσει και να το πιει θα ταξιδέψει σε ένα μέρος που κανένας δεν έχει πάει ποτέ. / Δεν ξέρω αν αυτό το φίλτρο είναι απλώς ένας θρύλος ή όχι, αλλά θα γράψω σε αυτό το βιβλίο ό'τι ξέρω για αυτό. / Το φίλτρο Χ αναφέρεται σε πολλούς παλιούς θρύλους και βιβλία για φίλτρα. Εδώ είναι μία περίληψη των πληροφοριών οι οποίες μπορεί να σας βοηθήσουν να το παρασκευάσετε. Καλη τύχη! / - Λέγεται ότι 5 βήματα είναι απραίτητα για να παρασκευάσεις το φίλτρο Χ. / - Λέγεται ότι καθόλου γελιφυτζούρια δε χρειάζονται, εκτός από σε ένα από τα βήματα. / - Λέγεται ότι, σε αντίθεση με τα άλλα φίλτρα, δεν μπορείς να παρασκευάσεις παραπάνω από ένα φίλτρο Χ τη φορά.");
Database.addText("el.cauldron.page11", "- Τέλος, το ακόλουθο ποίημα παραθέτεται σχετικά με το φίλτρο Χ : / Την πρώτη μέρα, γέννησε το πρώτο Ζαχαρωτό. Αλλά έκανε κρύο έξω. / Τη δεύτερη μέρα, έδωσε στο Ζαχαρωτό έναν πατέρα. Αλλά έκανε κρύο έξω. / Την τρίτη μέρα, έδωσε στο Ζαχαρωτό έναν αδερφό. Αλλά έκανε κρύο έξω. / Την τέταρτη μέρα έδωσε στο Ζαχαρωτό ένα φίλο. Αλλά έκανε κρύο έξω. / Την πέμπτη μέρα, έδωσε στο Ζαχαρωτό έναν εραστή, και μπορεί να ακουστεί απλό ή χαζό, αλλά τώρα το Ζαχαρωτό ήταν χαρούμενο, και είχε ζέστη έξω.");
Database.addText("en.cauldron.page0", "Brewing manual");
Database.addText("en.cauldron.page1", "Índice / Pág. 2: Poción de salud / Pág. 3 : Poción tortuga / Págs. 4-5 : Poción antigravedad / Págs. 6-7 : Poción berserk / Págs. 8-9 : La poción P / Págs. 10-11 : La poción X");
Database.addText("en.cauldron.page2", "Poción de salud / La poción de salud es una de las más fáciles de realizar, en serio. Solo hacen falta caramelos. En las misiones, te curará devolviéndote 100 puntos de salud. / Instrucciones: -Pon 100 caramelos en el caldero -Mezcla durante unos segundos -Embotéllalo / Igual que con cualquier poción, puedes multiplicar las cantidades, por supuesto. Por ejemplo, si usas 300 caramelos en lugar de 100, obtendrás 3 pociones de salud.");
Database.addText("en.cauldron.page3", "Poción tortuga / La poción tortuga es un poco más difícil que la poción de salud. Necesitarás caramelos y piruletas. / Si bebes esta poción en una misión, te convertirá en una tortuga. Te moverás más despacio, pero también serás más resistente a los ataques enemigos. / Instrucciones: -Pon 50 caramelos en el caldero -Añade 500 piruletas al caldero -Mezcla durante unos 10 segundos -Deja de mezclar -Añade 50 caramelos -Vuelve a mezclar durante unos seg. -Embotéllalo / Y ahora lo más importante, algo que no debes olvidar nunca: una vez te conviertas en tortuga, NO vuelques. No podrás volver a levantarte.");
Database.addText("en.cauldron.page4", "Poción antigravedad / Esta poción, que fue inventada por el conocido hechicero Isaac, te permite evitar la fuerza gravitatoria de la Tierra durante unos segundos. / Es especialmente útil despues de saltar (si no puedes saltar, deberías plantearte conseguir un pogo). / No es muy fácil de hacer: necesitarás calentar el caldero y tener cuidado con la temperatura. / Instrucciones: -Pon 1000 caramelos en el caldero -Caliéntalo hasta que esté tibio -Deja de calentar -Añade 1000 caramelos -Calienta el agua hasta que hierva -Embotéllalo");
Database.addText("en.cauldron.page5", "Poción antigravedad: ejemplo / \"Sobrevolar el hueco\" / *se bebe la poción*");
Database.addText("en.cauldron.page6", "Poción berserk / La poción berserk te transforma en un berserker. / El inconveniente es que consume la mitad de tu vida. / ¡La ventaja es que duplica el daño durante unos segundos! / Hacer esta poción es muy sencillo, pero necesitarás un montón de piruletas. / Estas son las instrucciones: -Pon 20 000 piruletas en el caldero -Mezcla hasta que te duelan los brazos -Embotéllalo");
Database.addText("en.cauldron.page7", "Aviso importante sobre la poción berserk / NO añadas caramelos mientras haces esta poción. / En serio, ni uno. / De verdad. / No se conocen los posibles resultados.");
Database.addText("en.cauldron.page8", "Poción P / La poción P es muy rara. No puedes predecir qué efecto tendrá. Podría curarte o herirte, hacerte más fuerte o más débil, o incluso convertirte en otra persona (¿o cosa?). / ¡Y hacerla es difícil! /  Instrucciones : -Pon 500 caramelos en el caldero -Mezcla unos segundos -Para de mezclar -Añade 100 caramelos por cada segundo que hayas mezclado. Por ejemplo, si mezclaste durante 4 segundos, tendrás que añadir 400 caramelos. Si quieres hacer más de una poción, no tienes que multiplicar esta cantidad. -Calienta el agua hasta que esté tibia -Deja de calentar -Añade algunas piruletas -Mezcla -¡Embotéllalo!");
Database.addText("en.cauldron.page9", "Usa la poción P con responsabilidad / Hay ciertas reglas que puedes seguir para tener mejores resultados cuando bebas la poción P. Aunque estas reglas se definieron empíricamente, parece que funcionan bastante bien. / -Cuantas más pociones P uses, los efectos parecen ser más raros. / -Si tu salud está baja, es buena idea que bebas una poción P. / -Los animales parecen reaccionar muy mal cuando beben pociones P.");
Database.addText("en.cauldron.page10", "Poción X / La poción X es una leyenda. Se dice que quien consiga hacerla y bebérsela viajará a un lugar donde nunca ha estado nadie. / No sé si esta poción es una leyenda o no, pero escribiré todo lo que sé sobre ella en este libro. / La poción X se menciona en muchas leyendas y libros de alquimia antiguos. Aquí tienes algunos datos que pueden ayudarte. ¡Buena suerte! / -Dicen que se necesitan 5 pasos para preparar la poción X. / -Dicen que no hacen falta piruletas, excepto para uno de los pasos. / -Dicen que, a diferencia de otras pociones, no puedes hacer varias pociones X de una sola vez.");
Database.addText("en.cauldron.page11", "-Por último, el siguiente poema se suele citar junto a la poción X: / El primer día  dio a luz al Primer Caramelo, pero fuera hacía frío. / El segundo día le dio un padre al Caramelo, pero fuera hacía frío. / El tercer día le dio un hermano al Caramelo, pero fuera hacía frío. /  El cuarto día le dio un amigo al Caramelo, pero fuera hacía frío. / El quinto día le dio una amante al Caramelo, y puede sonar simple o tonto, pero el Caramelo ahora era feliz y hacía calor fuera.");
Database.addText("fr.cauldron.page0", "Manuel de préparation de potions");
Database.addText("fr.cauldron.page1", "Sommaire / Page 2 : potion de vie / Page 3 : potion de tortue / Pages 4-5 : potion anti-gravité / Pages 6-7 : potion de berserker / Pages 8-9 : la potion P / Pages 10-11 : la potion X");
Database.addText("fr.cauldron.page2", "Potion de vie / La potion de vie est l'une des plus faciles à préparer, vraiment. Il faut seulement des bonbons. Utilisée pendant les quêtes, elle vous soignera en vous redonnant 100 points de vie. / Instructions : - Mettez 100 bonbons dans votre chaudron - Mélangez pendant quelques secondes - Mettez en bouteilles / Comme pour n'importe quelle potion, vous pouvez bien sûr multiplier les quantités. Par exemple, si vous utilisez 300 bonbons au lieu de 100, vous obtiendrez 3 potions de vie.");
Database.addText("fr.cauldron.page3", "Potion de tortue / La potion de tortue est un peu plus difficile à préparer que la potion de vie. Vous aurez besoin de bonbons et de sucettes. / Si vous buvez cette potion pendant une quête, elle vous transformera en tortue. Vous vous déplacerez plus lentement, mais vous serez aussi plus résistant aux attaques de vos ennemis. / Instructions : - Mettez 50 bonbons dans votre chaudron. - Ajoutez 500 sucettes dans votre chaudron - Mélangez pendant plus ou moins 10 secondes - Arrêtez de mélanger - Ajoutez 50 bonbons - Mélangez encore pendant quelques secondes - Mettez en bouteilles / Et maintenant, la chose la plus importante que vous ne devriez jamais oublier : quand vous serez une tortue, SURTOUT ne vous retournez pas. Vous ne seriez pas capable de vous relever.");
Database.addText("fr.cauldron.page4", "Potion anti-gravité / Cette potion, qui a été inventée par le renommé sorcier Isaac, vous permet de résister à la force gravitationnelle de la terre pour quelques secondes. / Elle est particulièrement utile après avoir sauté (si vous ne pouvez pas sauter, vous devriez sérieusement penser à obtenir un bâton sauteur). / Elle n'est pas très facile à préparer, vous aurez besoin de faire chauffer votre chaudron et de surveiller la température avec attention. / Instructions : - Mettez 1000 bonbons dans votre chaudron - Chauffez jusqu'à ce que l'eau soit tiède - Arrêtez de chauffer - Ajoutez 1000 bonbons - Chauffez jusqu'à ce que l'eau bout - Mettez en bouteilles");
Database.addText("fr.cauldron.page5", "Potion anti-gravité : cas d'utilisation / \"Voler au-dessus d'un précipice\" / *boit la potion*");
Database.addText("fr.cauldron.page6", "Potion de berserker / La potion de berserker vous transforme en un berserker. / L'inconvénient est que cela consomme la moitié de votre vie. / L'avantage est que cela double vos dégâts pendant quelques secondes ! / Préparer cette potion est très simple, mais vous aurez besoin de beaucoup de sucettes. / Voici les instructions : - Mettez 20 000 sucettes dans votre chaudron - Mélangez les jusqu'à ce que vos bras vous fassent mal - Mettez en bouteilles");
Database.addText("fr.cauldron.page7", "Avertissement important concernant la potion de berserker / Ne PAS ajouter de bonbon pendant la préparation de cette potion. / Je veux dire, pas un seul. / Vraiment. / Le résultat serait innatendu.");
Database.addText("fr.cauldron.page8", "La potion P / La potion P est une potion bizarre. Vous ne pouvez pas prédire ce qu'elle va faire. Elle pourrait vous soigner ou vous infliger des dommages, vous rendre plus fort ou plus faible, ou même vous transofmer en quelqu'un (quelque chose ?) d'autre. / Et en plus elle est dure à préparer ! / Instructions : - Mettez 500 bonbons dans votre chaudron - Mélangez pendant quelques secondes - Arrêtez de mélanger - Ajoutez 100 fois plus de bonbons que le nombre de secondes pendant lesquelles vous avez mélangé. Par exemple si vous avez mélangé pendant 4 secondes, vous devrez ajouter 400 bonbons. Ne multipliez pas cette quantité, même si vous voulez faire plus d'une potion. - Faites chauffer jusqu'à ce que l'eau soit tiède - Arrêtez de faire chauffer - Ajoutez des sucettes - Mélangez - Mettez en bouteilles !");
Database.addText("fr.cauldron.page9", "Faire bon usage de la potion P / Il y a certaines règles que vous pouvez suivre pour obtenir de meilleurs résultats en buvant la potion P. Bien que ces règles aient été établies de manière empirique, elles semblent assez bien fonctionner. / - Plus vous utilisez de potions P, plus elles semblent avoir des effets étranges. / - Si votre vie est très basse, vous devriez probablement utiliser une potion P. / - Les animaux qui boivent une potion P semblent très mal réagir.");
Database.addText("fr.cauldron.page10", "La potion X / La potion X est une légende. Il est dit que quiconque parviendrait à la préparer et à la boire voyagerait jusqu'à un endroit où personne n'est encore jamais allé. / Je ne sais pas si cette potion est juste une légende ou pas, mais je vais lister dans ce livre tout ce que je sais à propos d'elle. / La potion X est mentionnée dans de nombreuses vieilles légendes et livres d'alchimie. Voici un résumé des informations qui pourraient vous aider à la préparer. Bonne chance ! / - Il est dit que 5 étapes sont nécessaires à la préparation de la potion X. / - Il est dit qu'aucune sucette n'est nécessaire, mis à part pour l'une des étapes. / - Il est dit que, contrairement aux autres potions, vous ne pouvez pas préparer plusieurs potions X à la fois.");
Database.addText("fr.cauldron.page11", "- Enfin, le poème suivant est souvent cité quand on parle de la potion X : / Le premier jour, il donna naissance à la toute première Sucrerie. Mais il faisait froid dehors. / Le deuxième jour, il donna à la Sucrerie un père. Mais il faisait froid dehors. / Le troisième jour, il donna à la Sucrerie un frère. Mais il faisait froid dehors. / Le quatrième jour, il donna à la Sucrerie un ami. Mais il faisait froid dehors. / Le cinquième jour, il donna à la Sucrerie un amour, et cela peut paraître simple ou niais, mais maintenant la Sucrerie était heureuse, et il faisait chaud dehors.");
Database.addText("hu.cauldron.page0", "Főzési útmutató");
Database.addText("hu.cauldron.page1", "Összefoglaló / 2. oldal : Gyógyító ital / 3. oldal : Teknős ital / 4.-5. oldal : Anti-gravitációs ital / 6.-7. oldal : Őrjítő ital / 8.-9. oldal : A P ital / 10.-11. oldal : Az X ital");
Database.addText("hu.cauldron.page2", "Gyógyító ital / A gyógyító italt a legkönnyebb kifőzni, de tényleg. Csak cukorka kell hozzá. A küldetések közben felgyógyít téged 100 életerő ponttal. / Elkészítés : - Rakj 100 cukorkát az üstbe - Keverd pár másodpercig - Rakd bele üvegekbe / Akárcsak a többi italnál, ennek mennyiségét is többszörözheted. Például ha 300 cukorkát használsz 100 helyett, akkor 3 életerő italt fogsz kapni.");
Database.addText("hu.cauldron.page3", "Teknős ital / A teknős italt egy kicsit nehezebb elkészíteni, mint a gyógyító italt. Ehhez cukorkákra és nyalókákra is szükséged lesz. / Ha ezt megiszod egy küldetés közben, akkor teknőssé változol. Lassabban fogsz mozogni, de ugyanakkor jobban ellenállsz majd az ellenség támadásainak. / Elkészítés : - Rakj 50 cukorkát az üstbe - Adj hozzá 500 nyalókát - Keverd meg több vagy kevesebb mint 10 másodpercig - Hagyd abba a keverést - Adj hozzá 50 cukorkát - Keverd meg újra egy pár pillanatig - Rakd bele üvegekbe / És most jön a legfontosabb, amit nem feledhetsz el : Ha teknősbéka lettél, NEHOGY felfordulj. Nem fogsz tudni felkelni.");
Database.addText("hu.cauldron.page4", "Anti-gravitációs ital / Ez az ital, amit a híres Isaac varázsló talált fel, ellenállóvá tesz téged pár másodpercre a Föld gravitációs erejének. / Nagyon hasznos lehet egy ugrás után (ha nem tudsz ugrani, akkor jobban teszed, ha sürgősen beszerzel egy pogo rudat). / Nem könnyű elkészíteni, mivel fel kell hevíteni az üstöt, és figyelemmel kell kísérni a hőmérsékletét. / Elkészítés : - Rakj 1000 cukorkát az üstbe - Hevítsd fel, amíg langyos nem lesz - Hagyd abba a melegítését - Adj hozzá 1000 cukorkát - Hevítsd addig az üstöt, amíg el nem kezd forrni benne a víz - Rakd bele üvegekbe");
Database.addText("hu.cauldron.page5", "Anti-gravitációs ital : példa a használatra / \"Átrepül a szakadék felett\" / *megissza az italt*");
Database.addText("hu.cauldron.page6", "Őrjítő ital / Az őrjítő ital egy őrült harcossá változtat téged. / A hátránya az, hogy elhasználja a fél életerődet. / Az előnye viszont, hogy kétszer többet fogsz sebezni pár másodpercig! / A kifőzése nagyon egyszerű, de rengeteg nyalókába kerül. / Itt az elkészítése : - Rakj 20 000 nyalókát az üstbe - Addig keverd őket, amíg bele nem fájdul a karod - Rakd bele üvegekbe");
Database.addText("hu.cauldron.page7", "Fontos tudnivaló az őrjítő itallal kapcsolatban / NE adj hozzá cukorkát az ital kifőzése közben. / Komolyan, egyet se. / De tényleg. / Az eredmény váratlan lehet.");
Database.addText("hu.cauldron.page8", "A P ital / A P ital eléggé fura. Sose tudhatod, hogy mit fog csinálni. Felgyógyíthat, vagy sebezhet is téged, erősebbé vagy gyengébbé válhatsz, vagy akár valakivé (valamivé?) változtathat. / És nehéz kifőzni! / Elkészítés : - Rakj 500 cukorkát az üstbe - Keverd pár másodpercig - Hagyd abba a keverést - Rakj százszor annyi cukorkát az üstbe, mint amennyi ideig keverted. Tehát ha 4 másodpercen át keverted, akkor 400 cukorkára lesz szükséged. Ezt a mennyiséget ne szorozd be, még akkor sem, ha több mint egy italt szeretnél kifőzni. - Hevítsd fel a vizet, amíg langyos nem lesz - Hagyd abba a melegítését - Adj hozzá pár nyalókát - Keverd meg - Rakd bele üvegekbe!");
Database.addText("hu.cauldron.page9", "Hogy kihasználd a P italt / Sok szabály van, amit követhetsz, hogy jobb eredményt kapj a P ital elfogyasztásakor. Habár ezen szabályokat empirikusan kell értelmezni, úgy tűnik egész jól működnek. / - Minél töbhet fogyasztasz el a P italból, annál furább hatásokat kaphatsz. / - Ha kevés az életerőd, akkor talán meg kellene innod egy P italt. / - Azon állatok amik P italt fogyasztanak általában nagyon rosszul reagálnak rá.");
Database.addText("hu.cauldron.page10", "Az X ital / Az X ital egy legenda. Állítólag bárkinek is sikerül kifőznie és meginnia ezt, az eljutna egy olyan helyre ahol még senki se járt azelőtt. / Nem tudom, hogy ez most tényleg legenda vagy sem, de leírok róla mindent ebbe a könyvbe, amit csak tudok róla. / Az X italt rengeteg régi legendában és alkímiai könyvben megemlítik. Itt egy összegzés az információkról, amik segítségével talán te magad is kifőzheted. Sok szerencsét! / - Állítólag 5 lépés kell az X ital elkészítéséhez. / - Állítólag nem kell nyalókát használni, kivéve az egyik lépéshez. / - Állítólag a többi itallal ellentétben az X italból nem lehet egyszerre többet készíteni.");
Database.addText("hu.cauldron.page11", "- Végezetül ezt a mondókát szokták felhozni az X itallal kapcsolatban : / Az első napon egy nagyon Édes dolognak adott életet. De odakint hideg volt. / A második napon az Édeset odaadta egy apának. De odakint hideg volt. / A harmadik napon az Édeset odaadta egy testvérnek. De odakint hideg volt. / A negyedik napon az Édeset odaadta egy barátnak. De odakint hideg volt. / Az ötödik napon az Édeset odaadta egy szeretőnek, és egyszerűnek, vagy butának tűnhet, de az Édes most boldog volt, és odakint forróság volt.");
Database.addText("id.cauldron.page0", "Buku petunjuk membuat obat (potion)");
Database.addText("id.cauldron.page1", "Rangkuman / Halaman 2 : Obat kesehatan / Halaman 3 : Obat kura-kura / Halaman 4-5 : Obat anti-gravitasi / Halaman 6-7 : Obat pengamuk / Halaman 8-9 : Obat P / Halaman 10-11 : Obat X");
Database.addText("id.cauldron.page2", "Obat kesehatan / Obat kesehatan ini adalah salah satu obat yang mudah untuk dibuat, sungguh. Obat ini hanya memerlukan permen. Digunakan di pencarian (quest), obat ini akan menyembuhkanmu dengan memberimu kembali 100 poin nyawa. / Petunjuk : - Taruh 100 permen di kualimu - Aduk selama beebrapa detik - Taruh di botol / Seperti oabt lainnya, kamu dapat melipatgandakan jumlahnya. Contohnya, jika kamu tidak menggunakan 100 permen, melainkan 300 permen, kamu akan mendapatkan 3 obat kesehatan.");
Database.addText("id.cauldron.page3", "Obat kura-kura / Obat kura-kura sedikit lebih sulit untuk dibuat dibandingkan obat kesehatan. Kamu akan membutuhkan permen dan lollipop. / Jika kamu meminum obat ini dalam pencarian (quest), obat ini akan membuatmu menjadi kura-kura. Kamu akan bergerak lebih lambat, tapi kamu juga dapat lebih bertahan terhadap serangan musuhmu. / Petunjuk : - Taruh 50 permen dalam kuali - Tambahkan 500 lollipop kedalam kualimu - Aduk selama kurang lebih 10 detik - Berhenti mengaduk - Tambahkan 50 permen - Aduk lagi selama beberapa detik - Taruh ke botol / Dan sekarang hal paling penting yang seharusnya kamu tidak lupa : sekali kamu menjadi kura-kura, JANGAN membalik. Kamu tidak akan dapat bangun.");
Database.addText("id.cauldron.page4", "Obat anti-gravitasi / Obat ini, yang ditemukan oleh tukang sihir terkenal Isaac, memungkinkan kamu bertahan dari tarikan gravitasi bumi selama beberapa detik. / Obat ini berguna khususnya setelah melompat (jika kamu tidak dapat melompat, kamu harus mempertimbangkan mendapatkan sebuah tongkat pogo). / Obat ini tidak mudah untuk dibuat, kamu butuh memanaskan kualimu dan memperhatikan suhunya dengan hati-hati. / Petunjuk : - Taruh 1000 permen di kualimu - Panaskan sampai airnya hangat-hangat kuku - Berhenti memanaskan - Tambahkan 1000 permen - Panaskan tinggal airnya mendidih - Taruh ke botol");
Database.addText("id.cauldron.page5", "Obat anti-gravitasi : contoh penggunaan / \"Melayang diatas sebuah celah\" / *meminum obatnya*");
Database.addText("id.cauldron.page6", "Obat pemberontak / Obat pemberontak ini mengubah kamu menjadi pemberontak. / Kekurangannya adalah obat ini menghabiskan setengah dari nyawamu. / Keuntungannya adalah obat ini melipatgandakan seranganmu selama beberapa detik! / Membuat obat ini sangat sederhana, tapi kamu akan membutuhkan banyak lollipop. / Ini adalah petunjuknya : - Taruh 20 000 lollipop di kualimu - Aduk sampai lenganmu kesakitan - Taruh ke botol");
Database.addText("id.cauldron.page7", "Pemberitahuan penting seputar obat pemberontak / JANGAN menambahkan permen ketika membuat obat ini. / Maksud saya, sebuah pun. / Sungguh. / Hasilnya akan tidak terduga.");
Database.addText("id.cauldron.page8", "Obat P / Obat P adalah obat yang aneh. Kamu tidak dapat memprediksikan apa yang akan dilakukan obat ini. Obat ini dapat menyembuhkan atau menyerangmu, membuatmu lebih kuat atau lebih lemah, atau bahkan mengubahmu menjadi seseorang (sesuatu?) yang lain. / Dan obat ini juga sulit untuk dibuat! / Petunjuk : - Taruh 500 permen di kualimu - Aduk selama beberapa detik - Berhenti mengaduk - Tambahkan 100 kali lebih banyak permen dari waktu kamu mengaduk. Contohnya jika kamu mengaduk selama 4 detik, kamu harus menambahkan 400 permen. Jangan melipatgandakan jumlah ini, bahkan jika kamu ingin membuat lebih dari satu obat. - Panaskan sampai airnya hangat-hangat kuku - Berhenti memanaskan - Tambahkan beberapa lollipop - Aduk - Taruh ke botol!");
Database.addText("id.cauldron.page9", "Gunakan obat P sebaik-baiknya / Ada beberapa aturan yang dapat kamu ikuti untuk mendapatkan hasil yang lebih baik ketika meminum obat P. Walaupun aturan-aturan ini dijelaskan empirically, tampaknya mereka bekerja cukup baik. / - Semakin banyak kamu menggunakan obat P, mereka tampaknya mempunyai efek yang aneh. / - Jika nyawamu sangat rendah, mungkin kamu harus minum obat P. / - Binatang yang meminum obat P tampaknya bereaksi dengan cara yang sangat buruk.");
Database.addText("id.cauldron.page10", "Obat X / Obat X adalah obat yang legendaris. Katanya siapapun yang dapat membuat dan meminum obat ini akan pergi ke suatu tempat yang belum pernah dikunjungi siapapun. / Saya tidak tahu kalau obat ini legendaris atau tidak, tapi saya akan menulis semua yang saya ketahui di buku ini. / Obat X sering disebut di banyak buku legenda tua dan buku alkimia. Ini adalah ringkasan dari informasi yang dapat membantumu membuatmu. Semoga sukses! / - Katanya ada 5 langkah yang perlu dilakukan untuk membuat obat X. / - Katanya tidak ada lollipop yang dibutuhkan, kecuali dalam salah satu lengkahnya. / - Katanya, tidak seperti obat-obat lain, kamu tidak dapat membuat lebih dari satu obat X dalam satu kali.");
Database.addText("id.cauldron.page11", "- Akhirnya, puisi ini sering dikutip di bagian obat X : / Pada hari pertama, dia melahirkan Penganan yang paling pertama. Tapi diluar dingin. / Pada hari kedua, dia memberikan Penganan tersebut ayah. Tapi diluar dingin. / Pada hari ketiga, dia memberikan Penganan tersebut saudara. Tapi diluar dingin. / Pada hari keempat, dia memberikan Penganan tersebut teman. Tapi diluar dingin. / Pada hari kelima, dia memberikan Penganan tersebut pasangan, dan kedengarannya sederhana atau bodoh, tapi sekarang Penganan tersebut senang, dan diluar panas.");
Database.addText("﻿nl.cauldron.page0", "Handleiding voor brouwen");
Database.addText("nl.cauldron.page1", "Overzicht / Pagina 2 : Levensdrankje / Pagina 3 : Schildpaddrankje / Pagina's 4-5 : Anti-zwaartekracht drankje/ Pagina's 6-7 : Dolzinnig drankje / Pagina's 8-9 : Het P drankje / Pagina's 10-11 : Het X drankje");
Database.addText("nl.cauldron.page2", "Levensdrankje / Het levensdrankje is één van de makkelijkste te brouwen, echt. Het vereist alleen snoepjes. Bij gebruik in zoektochten herstelt het 100 levenspunten. / Instructies : - Plaats 100 snoepjes in je ketel - Mix voor een paar seconden - Stop het in flesjes / Net zoals voor elk ander drankje, kan je natuurlijk de aantallen vermenigvuldigen. Als je bijvoorbeeld 300 snoepjes in plaats van 100 gebruikt, krijg je 3 levensdrankjes.");
Database.addText("nl.cauldron.page3", "Schildpaddrankje / Het schildpaddrankje is iets moeilijker te brouwen dan het levensdrankje. Je hebt snoepjes en lollies nodig. / Als je dit drankje drinkt tijdens een zoektocht, veranderd het je in een schildpad. Je loopt langzamer, maar je bent ook beter bestand tegen aanvallen van je vijanden. / Instructies : - Plaats 50 snoepjes in je ketel - Voeg 500 lollies toe - Mix voor ongeveer 10 seconden - Stop met mixen - Voeg 50 snoepjes toe - Mix weer voor een paar seconden - Stop in flesjes / En nu het meest belangrijke dat je niet moet vergeten : Draai niet op je rug wanneer je een schildpad bent. Je kunt dan niet meer overeind komen.");
Database.addText("nl.cauldron.page4", "Anti-zwaartekracht drankje / Dit drankje, dat uitgevonden is door de beroemde tovenaar Isaac, maakt het mogelijk om de zwaartekracht van de aarde te negeren voor een paar seconden. / Het is vooral nuttig na het springen (als je niet kan springen moet je echt overwegen om een pogostick te halen). / Het is niet heel makkelijk om te brouwen, je moet je ketel opwarmen en goed de temperatuur in de gaten houden. / Instructies : - Stop 1000 snoepjes in je ketel - Warm op tot het water lauw is - Stop met opwarmen - Voeg 1000 snoepjes toe - Warm het water op tot het kookt - Stop het in flesjes");
Database.addText("nl.cauldron.page5", "Anti-zwaartekracht drankje : Gebruikersvoorbeeld / \"Vlieg boven een gat\" / *Drinkt het drankje*");
Database.addText("nl.cauldron.page6", "Dolzinnig drankje / Het dolzinnig drankje transformeert je in een berserker. / Het nadeel is dat het de helft van je levens punten opneemt. / Het voordeel is dat het je kracht verdubbelt voor een paar seconden! / Het brouwen van dit drankje is heel makkelijk, maar je hebt veel lollies nodig. / Hier zijn de instructies : - Stop 20 0000 lollies in je ketel - Mix ze tot je armen er pijn van doen -  Stop het in flesjes");
Database.addText("nl.cauldron.page7", "Belangrijke notitie omtrent het dolzinnig drankje / Voeg GEEN snoepjes toe tijdens het brouwen van dit drankje / Ik bedoel, geen enkele. / Serieus / De resultaten zullen onverwacht zijn. en.cauldron.page8");
Database.addText("nl.cauldron.page8", "Het P drankje / Het P drankje is een vreemd drankje. Je kan niet voorspellen wat het doet. Het kan je levenspunten geven of juist afnemen, het kan je sterker of zwakker maken, of het kan je veranderen in iemand (iets?) anders. / En het is ook nog eens moeilijk te brouwen! / Instructies : - Stop 500 snoepjes in je ketel - Mix voor een paar seconden - Stop met mixen - Voeg 100 keer zoveel snoepjes toe als het aantal seconden dat je hebt gemixt. Als je bijvoorbeeld 4 seconden hebt gemixt, moet je 400 snoepjes toevoegen. Verdubbel dit aantal niet, ook niet als je meer dan één drankje wil maken - Warm het water op tot het lauw is - Stop met opwarmen - Voeg wat lollies toe - Mix - Stop het in flesjes!");
Database.addText("nl.cauldron.page9", "Maak goed gebruik van het P drankje / Er zijn een paar regels die je kunt volgen om betere resultaten te krijgen wanneer je het P drankje drinkt. Hoewel deze regels empirisch werden gedefinieerd, lijken ze vrij goed te werken. / - Hoe meer je het P drankje gebruikt, hoe meer het lijkt alsof ze vreemde effecten hebben. / - Als je levenspunten heel laag zijn, zou je waarschijnlijk een P drankje moeten drinken. / - Dieren die het P drankje drinken lijken er zeer slecht op te reageren.");
Database.addText("nl.cauldron.page10", "Het X drankje / Het X drankje is een legende. Er wordt gezegd dat degene die dit drankje brouwt en drinkt zal reizen naar een plek waar nog nooit iemand is geweest. / Ik weet niet of dit drankje gewoon een legende is of niet, maar ik zal in dit boek alles schrijven wat ik er van weet. / Het X drankje wordt genoemd in veel oude legendes en alchemieboeken. Hier is een overzicht van die informatie die je misschien kan helpen bij het brouwen. Succes! / - Er wordt gezegd dat er 5 stappen nodig zijn voor het brouwen van het X drankje. / - Er wordt gezegd dat er geen lollies nodig zijn, behalve bij één van de stappen. / - Er wordt gezegd dat, in tegenstelling tot andere drankjes, je niet meerdere X drankjes tegelijk kan maken.");
Database.addText("nl.cauldron.page11", "- Tenslotte wordt het volgende gedicht vaak geciteerd als het over het X drankje gaat : / Op de eerste dag, gaf het geboorte aan het eerste Zoet. Maar het was koud buiten. / Op de tweede dag, gaf het het Zoet een vader. Maar het was koud buiten. / Op de derde dag, gaf het het Zoet een broer. Maar het was koud buiten. / Op de vierde dag, gaf het het Zoet een vriend. Maar het was koud buiten. / Op de vijfde dag, gaf het het Zoet een geliefde, en het klinkt misschien simpel en dom, maar nu was het Zoet gelukkig, en was het warm buiten.");
Database.addText("pl.cauldron.page0", "Instrukcja warzenia mikstur");
Database.addText("pl.cauldron.page1", "Spis treści / Strona 2 : Mikstura zdrowia / Strona 3 : Mikstura żółwia / Strony 4-5 : Mikstura anty-grawitacyjna / Strony 6-7 : Mikstura szału / Strony 8-9 : Mikstura P / Strony 10-11 : Mikstura X");
Database.addText("pl.cauldron.page2", "Mikstura zdrowia / Mikstura zdrowia jest to najłatwiejsza mikstura do zrobienia. Do jej zrobienia potrzebujesz tylko cukierków. Użyta w zadaniach, uleczy cię, przywracając ci 100 punktów zdrowia. / Instrukcje : - Wrzuć 100 cukierków do kotła - Mieszaj przez parę sekund - Wlej do butelek / Tak jak w przypadku każdej mikstury, możesz pomnożyć ilość składników. Na przykład, jeśli wrzucisz 300 cukierków zamiast 100, uzyskasz 3 mikstury zdrowia.");
Database.addText("pl.cauldron.page3", "Mikstura żółwia / Mikstura żółwia jest trochę trudniejsza do przygotowania niż mikstura zdrowia. Tym razem będziesz potrzebował i cukierków i lizaków. / Jeśli wypijesz tę miksturę w trakcie zadania, zamieni cię ona w żółwia. Będziesz poruszał się wolniej ale będziesz także o wiele bardziej odporny na ataki nieprzyjaciół. / Instrukcje : -  Wrzuć 50 cukierków do kotła - Dodaj 500 lizaków - mieszaj przez około 10 sekund - Przestań mieszać - Dodaj 50 cukierków - Pomieszaj jeszcze przez parę sekund - Wlej do butelek / I teraz najważniejsza rzecz o której nie możesz zapomnieć : gdy już zamienisz się w żółwia, NIE obracaj się na plecy. Nie będziesz w stanie się podnieść.");
Database.addText("pl.cauldron.page4", "Mikstura anty-grawitacyjna / Ta mikstura, wynaleziona przez dobrze znanego czarodzieja Isaaca, pozwala ci oprzeć się przyciąganiu grawitacyjnemu Ziemi przez parę sekund / Jest  szczególnie użyteczny po skoku ( jeśli nie możesz skakać, powinieneś zastanowić się nad zdobyciem sprężynowego urządzenia do podskakiwania) / Nie jest łatwo go uwarzyć, będziesz musiał podgrzać swój kocioł i dokładnie obserwować jego temperaturę / Instrukcje : - Wrzuć 1000 cukierków do kotła - Podgrzewaj dopóki woda nie stanie się letnia (lukewarm) - Przestań podgrzewać - Dodaj 1000 cukierków - Podgrzewaj aż woda będzie wrzeć (BOILING) - Wlej do butelek");
Database.addText("pl.cauldron.page5", "Mikstura Anty-grawitacyjna : przykład użycia / \"Przeleć nad dziurą\" / *wypija miksturę*");
Database.addText("pl.cauldron.page6", "Mikstura szału / Mikstura szału zamieni cię w berserkera. / Wadą jest to, że zabierze to połowę twoich punktów zdrowia. / Zaletą jest to że podwoi ona zadawane przez ciebie obrażenia na parę sekund! / ugotowanie tej mikstury jest bardzo proste, ale będziesz potrzebował dużej ilości lizaków. / Oto instrukcje : - Wrzuć 20 000 lizaków do kotła - Mieszaj dopóki nie rozbolą cię ręce - Wlej do butelek");
Database.addText("pl.cauldron.page7", "Ważna informacja dotycząca mikstury berserkera / NIE dodawaj ŻADNYCH cukierków w trakcie warzenia tej mikstury! / Nawet jednego. / Naprawdę. / Rezultaty mogły by być nieoczekiwane.");
Database.addText("pl.cauldron.page8", "Mikstura P / Mikstura P jest dziwna. Nie jesteś w stanie przewidzieć co zrobi. Może cię uleczy, może cie skrzywdzi, może sprawi że będziesz silniejszy, albo słabszy. Może cię nawet zamienić w kogoś (coś?) innego. / Ciężko ją stworzyć! / Instrukcje : - Wrzuć 500 cukierków do kotła - Mieszaj przez parę sekund - Przestań mieszać - Dodaj 100 razy więcej cukierków niż ilość sekund przez którą mieszałeś. Na przykład, jeśli mieszałeś przez 4 sekundy, dodaj 400 cukierków. Nie zwiększaj tej ilości jeśli chcesz stworzyć więcej niż jedną miksturę. - Podgrzewaj dopóki woda nie stanie się letnia (lukewarm) - Przestań podgrzewać - Dodaj trochę lizaków - Pomieszaj - Wlej do butelek!");
Database.addText("pl.cauldron.page9", "Zrób dobry użytek z mikstury P / Jest parę zasad których możesz przestrzegać aby uzyskać lepsze rezultaty kiedy pijesz tę miksturę. Pomimo tego że te zasady były określone doświadczalnie, wydają się działać całkiem dobrze. / - Im częściej będziesz używać mikstur P, tym częściej będzie ona miała dziwne efekty. / - Jeśli masz bardzo mało punktów życia, to wypicie mikstury P jest prawdopodobnie dobrym pomysłem. / - Zwierzęta które wypiją miksturę P zdają się reagować w bardzo zły sposób.");
Database.addText("pl.cauldron.page10", "Mikstura X /  Mikstura X to legenda. Mówi się, że komukolwiek uda się ją stworzyć i wypić, ten przeniesie się do miejsca gdzie jeszcze nikt nie był / Nie wiem czy ta mikstura to tylko legenda czy nie, ale napiszę w tej książce wszystko co o niej wiem. / Mikstura X jest wspominana w wielu starych legendach i księgach alchemicznych. Oto podsumowanie informacji które mogą ci pomóc ją stworzyć. Powodzenia! / - Mówi się że trzeba ją stworzyć w pięciu krokach. / - Mówi się że nie potrzebne są żadne lizaki z wyjątkiem jednego z kroków. / - Mówi się że można stworzyć tylko jedną miksturę X na raz.");
Database.addText("pl.cauldron.page11", "- Ten wiersz jest często cytowany jeśli chodzi o miksturę X : / Pierwszego dnia, urodził się pierwszy Cukierek. Ale na dworze było zimno. / Drugiego dnia, Cukierek dostał ojca. Ale na dworze było zimno. / Trzeciego dnia, Cukierek dostał brata. Ale na dworze było zimno. / Czwartego dnia, Cukierek dostał przyjaciela. Ale na dworze było zimno. / Piątego dnia, Cukierek dostał kochanka, i może brzmi to prymitywnie lub głupawo, ale Cukierek wreszcie był szczęśliwy, a na dworze było gorąco.");
Database.addText("ru.cauldron.page0", "Мануал по зельеварению");
Database.addText("ru.cauldron.page1", "Оглавление / Страница 2 : Зелья здоровья / Страница 3 : Черепашье зелье / Страницы 4-5 : Антигравитационное зелье / Страницы 6-7 : Зелье берсерка / Страницы 8-9 : Зелье P / Страницы 10-11 : Зелье X");
Database.addText("ru.cauldron.page2", "Зелье здоровья / Зелье здоровья это одно из самых лёгких для варки. Для него нужны только конфеты. Если использовать его в квестах, то оно восстановит 100 очков здоровья. / Рецепт: - Положите 100 конфет в ваш котёл - Перемешивайте в течение нескольких секунд - Разлейте по бутылочкам / Так же, как и любое другое зелье, вы можете варьировать количество готового продукта. Например, если вы положите в котёл 300 конфет, то получите 3 зелья здоровья.");
Database.addText("ru.cauldron.page3", "Черепашье зелье / Черепашье зелье варится чуть сложнее, чем зелье здоровья. Вам будут нужны и конфеты, и леденцы. / Если вы выпьете это зелье во время квеста, оно превратит вас в черепаху. Двигаться вы будете медленнее, но зато получите дополнительную защиту от атак противника. / Рецепт: - Положите 50 конфет в ваш котёл - Добавьте 500 леденцов в котёл - Перемешивайте около 10 секунд - Прекратите перемешивать - Добавьте ещё 50 конфет - Снова мешайте в течение нескольких секунд - Разлейте по бутылочкам / А теперь самая важная вещь, которую нельзя забывать: после превращения в черепаху, не переворачивайтесь на спину. Иначе не подниметесь.");
Database.addText("ru.cauldron.page4", "Антигравитационное зелье / Изобретённое известным волшебником Айзеком, это зелье позволит вам сопротивляться притяжению Земли в течение нескольких секунд. / Оно особенно полезно во время прыжков (а если вы не можете прыгать, то вам следует задуматься о приобретении пого-стика). / Оно не такое уж и лёгкое в приготовлении, вам нужно будет нагреть котёл и внимательно следить за его температурой. / Рецепт: - Положите 1000 конфет в котёл - Грейте котёл, пока вода не станет тёплой - Прекращайте греть котёл - Добавьте ещё 1000 конфет - Грейте котёл, пока вода не закипит - Разлейте по бутылочкам");
Database.addText("ru.cauldron.page5", "Антигравитационное зелье: использовать умение / \"Лететь над обрывом\" / *выпивает зелье*");
Database.addText("ru.cauldron.page6", "Зелье берсерка / Зелье берсерка превращает вас в берсерка. / Побочный эффект: оно лишает вас половины здоровья. / Плюсы: увеличивает ваш урон на несколько секунд! / Сварить это зелье очень просто, но вам понадобятся очень много леденцов. / Вот рецепт: - Положите 20 000 леденцов в котёл - Перемешивайте, пока руки не заболят - Разлейте по бутылочкам.");
Database.addText("ru.cauldron.page7", "Важное уточнение, касающееся зелья берсерка. / НЕ ДОБАВЛЯЙТЕ конфеты в котёл, когда варите это зелье. / Вообще ни одной. / Серьёзно. / Результат предсказать нельзя.");
Database.addText("ru.cauldron.page8", "Р-зелье / Р-зелье очень странное. Вы не сможете предсказать, что именно оно сотворит. Оно может вас излечить или нанести вам урон, сделать вас сильнее или слабее, или даже превратить вас в кого-нибудь (что-нибудь?) ещё. / А ещё его сложно сварить! / Рецепт: - Положите 500 конфет в котёл - Мешайте несколько секунд - Прекратите мешать - Добавьте в 100 раз больше конфет, чем количество секунд, в течение которых вы мешали. Например, если вы мешали зелье в течение 4 секунд, то вам понадобится добавить 400 конфет. Никогда не увеличивайте это число, даже если вам нужно сварить больше одного зелья. - Подогревайте до тех пор, пока вода не станет тёплой - Прекратите подогревать - Добавьте несколько леденцов - Мешайте - Разливайте по бутылочкам!");
Database.addText("ru.cauldron.page9", "Используйте Р-зелье с умом / Вот несколько правил, которыми вы можете воскользоваться, чтобы получить лучшие результаты от употребления зелья. Хотя эти правила были определены наугад, они, кажется, отлично работают. / - Чем больше Р-зелий вы пьёте, тем более странные эффекты получаете. / - Если ваше здоровье почти на нуле, вы, возможно, должны обязательно выпить Р-зелье. / - Животные, которые выпили Р-зелье, кажется, реагируют на это очень нехорошо.");
Database.addText("ru.cauldron.page10", "Х-зелье / Х-зелье - это легенда. Говорят, что тот, кто будет способен приготовить и выпить его, попадёт в место, где до него ещё никто не был. / Я не знаю, на самом ли деле это зелье только лишь легенда, но я напишу в этой книге всё, что я знаю про него. / Х-зелье упомянуто в множестве старых легенд и алхимических книг. Вот краткая информация, которая поможет вам его сварить. Удачи! / - Говорят, что варка состоит из 5 шагов. / - Говорят, что только в одном шаге из процесса варки нужно добавлять леденцы. / - Говорят, что в отличии от остальных зелий, Х-зелье за раз сварить можно только одно.");
Database.addText("ru.cauldron.page11", "- И последнее: следующая поэма часто цитируется в книгах при упоминании Х-зелья: / В первый день родилась самая первая Конфета. Но снаружи было холодно. / Во второй день, у Конфеты появился отец. Но снаружи было холодно. / На третий день у Конфеты появился брат. Но снаружи было холодно. / На пятый день у Конфеты появился любовник, и это может прозвучать глупо и просто, но теперь Конфета стала счастлива, и снаружи было горячо.");
Database.addText("se.cauldron.page0", "Ölbryggning manual");
Database.addText("se.cauldron.page1", "Sammanfattning / sida 2 : Hälsa dryck / sida 3 : Sköldpadda dryck / Sida 4-5 : Anti-gravitation dryck / Sida 6-7 : Galen dryck / Pages 8-9 : Den P dryck / Pages 10-11 : Den X dryck");
Database.addText("se.cauldron.page2", "Hälsa dryck / Det hälsa dryck är någon av det enkel till brygga, verkligen. Den endast behov konfekt. Används i mål, den skall bota du av givande du tillbaka 100 hälsa poäng. / Instruktioner : - Sätta 100 konfekt i er kittel - Blanda för en få sekunder - Sätta inåt flaskor / Strax som för några dryck, du kan naturligtvis föröka det kvantiteter. Till exempel, om du utnyttja 300 konfekt istället för 100, kommer du få 3 hälsa dryck.");
Database.addText("se.cauldron.page3", "Turtle potion / Det sköldpadda dryck är en skärva hårdare till brygd än det hälsa dryck. Du skall behöver både konfekt samt sötsaker. / Om du dricka detta dryck i en mål, den skall förändring du in i en sköldpadda. Du skall gå trög, men du skall också må vidare motståndskraftig till du fiender attacker. / Instruktioner : - Sätta 50 konfekt i din kittel - Foga 500 sötsaker i din kittel - Blanda under mer eller mindre 10 sekunder - Sluta blanda - Foga 50 konfekt - Blanda igen för några sekunder - Sätta till flaskor / Och nu den mest viktig sak du skall aldrig glömma : när du skall bli en sköldpadda, INTE vända. Du skulle inte kunna stiga upp.");
Database.addText("se.cauldron.page4", "Anti-gravitation dryck / Detta dryck, vilket var uppfann av välkänt trollkarl Isaac, tillåter du till motstå till jordens gravitation kraft för en några sekunder. / Det är särskilt användbart efter att hoppa ( om du inte kan hoppa , bör du allvarligt överväga att skaffa en pogo stick ) . / Det är inte lätt att brygga , måste du värma upp din kittel och titta på temperaturen noggrant . / Instruktioner : - Put 1000 godisar i din kittel - Hetta upp tills vattnet är ljummet - Sluta uppvärmning - Lägg 1000 godisar - Värm upp tills vattnet kokar - tappas på flaskor");
Database.addText("se.cauldron.page5", "Anti - gravitation drycken : användningsfall / \" flyga över ett gap \" / * dricker drycken *");
Database.addText("se.cauldron.page6", "Berserk potion / The bärsärkagång trolldryck förvandlar dig till en berserker . / Nackdelen är att den förbrukar hälften av ditt liv . / Fördelen är att det fördubblar dina skador under några sekunder ! / Brygga detta trolldrycker är mycket enkelt , men du kommer att behöva en hel del klubbor . / Här är instruktionerna : - Put 20 000 klubbor i din kittel - blanda dem tills armarna är ont - tappas på flaskor");
Database.addText("se.cauldron.page7", "Viktigt meddelande angående bärsärkagång potion / INTE lägga något godis vid bryggning denna dryck . / Jag menar , inte en enda. / Verkligen . / Resultat vore oväntat .");
Database.addText("se.cauldron.page8", "P potion / P potion är en konstig en . Du kan inte förutsäga vad det kommer att göra . Det kan bota dig eller skada dig , gör dig starkare eller svagare , eller ens vända dig till någon ( något ? ) Annat . / Och det är också svårt att brygga ! / Instruktioner : - Put 500 godisar i din kittel - Mix i några sekunder - Stoppa mixning - Lägg 100 gånger mer godis än det antal sekunder som du blandat . Till exempel om du blandat under 4 sekunder , måste du lägga 400 godisar . Inte multiplicera inte denna mängd , även om du vill göra mer än en dryck . - Värm upp tills vattnet är ljummet - Sluta uppvärmning - Lägg några klubbor - Mix - tappas på flaskor !");
Database.addText("se.cauldron.page9", "Gör en bra användning av P potion / Det finns vissa regler som du kan följa för att få bättre resultat när man dricker P drycken . Även om dessa regler definierades empiriskt , de verkar fungera ganska bra . / - Ju mer du använder P potions , ju mer de verkar ha konstiga effekter . / - Om din hälsa är mycket låg , bör du dricka antagligen en P dryck . / - Djur som dricker P potions verkar reagera på ett mycket dåligt sätt .");
Database.addText("se.cauldron.page10", "X potion / X potion är en legend . Det sägs att den som lyckas brygga det och dricka det skulle resa till en plats där ingen har varit förut . / Jag vet inte om denna dryck är bara en legend eller inte , men jag kommer att skriva i denna bok allt jag vet om det . / X potion nämns i många gamla legender och böcker alkemi . Här är en sammanfattning av information som kan hjälpa dig att brygga det . Lycka till ! / - Det är sagt att 5 steg är nödvändigt för att brygga X drycken . / - Det sägs att inga klubbor krävs , utom för ett av stegen . / - Det är sagt att , till skillnad för andra drycker , kan du inte brygga flera X potions på en gång .");
Database.addText("se.cauldron.page11", "- Slutligen är följande dikt ofta citeras när det kommer till X potion : / På den första dagen , gav det upphov till den allra första Sweet. Men det var kallt utanför . / Den andra dagen , gav det söta en far . Men det var kallt utanför . / På den tredje dagen , gav det söta en bror . Men det var kallt utanför . / På den fjärde dagen , gav det söta en vän . Men det var kallt utanför . / På den femte dagen , gav det söta en älskare , och det kan låta enkelt och dumt , men nu Sweet var glad , och det var varmt utanför .");
Database.addText("tr.cauldron.page0", "İksir rehberi");
Database.addText("tr.cauldron.page1", "Özet / Sayfa 2 : Can iksiri / Sayfa 3 : Kaplumbağa iksiri / Sayfa 4-5 : Yer çekimini yenme iksiri / Sayfa 6-7: Kudurma iksiri / Sayfa 8-9 : P iksiri / Sayfa 10-11 : X iksiri");
Database.addText("tr.cauldron.page2", "Can iksiri / Can iksiri yapması en kolaylarından biri, gerçekten. Sadece şeker kullanıyorsun. Görevlerde kullanıldığında sana 100 can puanı vererek iyileştirir. / Açıklama: - Kazana 100 tane şeker koy - Bir kaç saniyeliğine karıştır.  -Şişeye koy / Herhangi bir iksir gibi, miktarları tabii ki katlayabilirsin. Örneğin 100 şeker yerine 300 şeker kullanırsan 3 tane can iksiri elde edersin.");
Database.addText("tr.cauldron.page3", "Kaplumbağa iksiri / Kaplumbağa iksirini yapmak can iksirini yapmaktan bir tık daha zor. Hem şekere hem lolipopa ihtiyacın var. / Bu iksiri görevlerde içersen, seni bir kaplumbağaya çevirir. Daha yavaş hareket edersin ama düşmanlarının saldırılarına daha dayanıklı olursun. / Açıklama: -Kazana 50 şeker koy. -Kazana 500 lolipop ekle -Aşağı yukarı 10 saniye karıştır -Karıştırmayı durdur -50 şeker ekle -Bir kaç saniye tekrar karıştır -Şişelere koy. / Ve şimdi unutmaman gereken en önemli şey: kaplumbağa olduğun zaman ters dönME. Bir daha kalkamayabilirsin.");
Database.addText("tr.cauldron.page4", "Yer çekimini yenme iksiri / Bu iksir, meşhur sihirbaz Isaac tarafından icat edilmiş, bir kaç saniyeliğine Dünyanın yer çekimine karşı direnmeni sağlar. / Özellikle zıpladıktan sonra kullanışlıdır (eğer zıplayamıyorsan, cidden bir pogo çubuğu bulmayı düşünmelisin). / Yapması çok kolay değil, kazanını ısıtmalı ve sıcaklığa dikkatlice bakmalısın. / Açıklama :-Kazana 1000 şeker koy -Su ılık olana kadar ısıt -Isıtmayı durdur -1000 şeker ekle -Su kaynayana kadar ısıt -Şişelere koy");
Database.addText("tr.cauldron.page5", "Yer çekimini yenme iksiri : kullanma durumları / \"Boşluğun üzerinden uçarken\" / *iksiri içer*");
Database.addText("tr.cauldron.page6", "Kudurma iksiri / Kudurma iksiri seni vahşi bir savaşçıya çevirir. / Dezavantajları, canının yarısını tüketir. / Avantajları, hasarını birkaç saniyeliğine iki katına çıkarır! / Bu iksiri yapmak çok basit, fakat çok miktarda lolipopa ihtiyacın olacak. / Açıklamalar şöyle: -20 000 lolipopu kazana koy -Kolların acıyana kadar karıştır -Şişelere koy");
Database.addText("tr.cauldron.page7", "Kudurma iksiriyle ilgili önemli bir bildiri / Bu iksiri yaparken SAKIN şeker eklemeyin. / Yani, tek bir tane bile. / Gerçekten / Sonuçlar beklenmedik olacaktır.");
Database.addText("tr.cauldron.page8", "P iksiri /P iksiri ilginçtir. Ne yapacağını tahmin edemezsin. Seni iyileştirebilir ya da hasar verebilir, seni güçlendirir ya da zayıflatabilir, hatta seni başka birine (bişeye?) çevirebilir. / Yapması da zordur! / Açıklamalar: -Kazana 500 şeker koy -Bir kaç saniye karıştır -Karıştırmayı durdur -Kaç saniye karıştırdıysan onun 100 katı şeker ekle. Örneğin 4 saniye karıştırdıysan 40 şeker eklemelisin. Bu miktarı katlama, eğer birden fazla iksir yapmak istiyorsan bile değiştirme. Suyu ılık olana kadar ısıt -Isıtmayı durdur -Biraz lolipop ekle -Karıştır -Şişelere koy!");
Database.addText("tr.cauldron.page9", "P iksirini kullanma durumları / P iksirini kullanırken daha iyi sonuçlar alman için uygulaman gereken bir kaç kural var. Bu kurallar deneysel olarak tanımlansa da, gayet iyi işliyor gibi görünüyor. / -Ne kadar P iksiri kullanırsan, o kadar ilginç etkileri olurmuş. / -Eğer canın azsa muhtemelen P iksiri içmelisin. / -P iksirini içen hayvanlar çok kötü bir şekilde etkileniyormuş.");
Database.addText("tr.cauldron.page10", "X iksiri / X iksiri bir efsanedir. Derler ki, iksiri yapıp içmeye mazhar olan kişi kimsenin daha önce gitmediği bir yere seyahat eder. / Bu iksirin efsane olup olmadığını bilmiyorum ama hakkında bildiğin her şeyi buraya yazacağım. / X iksirinden eski alşimi kitaplarında çokça bahsedilmektedir. Burada yapmana yardım edebilecek bilgilerin özeti var. İyi şanslar! / Bu iksiri yapmak için gerekli 5 temel aşama vardır. / -Denir ki, hiç lolipop gerekmez, bir aşama hariç. / -Denir ki, diğer iksirler gibi tek seferde birden çok X iksiri yapamazsın.");
Database.addText("tr.cauldron.page11", "-Son olarak, konu X iksiri olduğunda sıradaki şiir anılır: / Günlerden birincisinde,O, ilk Tatlıyı doğurdu. Ama dışarısı soğuktu. / Günlerden ikincisinde, O, tatlıya bir baba verdi. Ama dışarısı soğuktu. / Günlerden üçüncüsünde, O, tatlıya bir kardeş verdi. Ama dışarısı soğuktu. / Günlerden dördüncüsünde, O, şekere bir arkadaş verdi. Ama dışarısı soğuktu. / Günlerden beşincisinde, O, şekere bir sevgili verdi, ve belki basit veya saçma görünse de, Tatlı artık mutluydu, ve dışarısı sıcaktı.");
Database.addText("uk.cauldron.page0", "Книга зіллєваріння");
Database.addText("uk.cauldron.page1", "Зміст / Сторінка 2 : Зілля здоров’я / Сторінка 3 : Черепашаче зілля / Сторінки 4-5 : Зілля антигравітації / Сторінки 6-7 : Берсеркове зілля / Сторінки 8-9 : Зілля P / Сторінки 10-11 : Зілля X");
Database.addText("uk.cauldron.page2", "Зілля здоров’я / Зілля здоров’я є одним із найпростіших для приготування, насправді. Для нього потрібні лише цукерки. Використане у пригоді, воно вилікує тебе, повернувши 100 пунктів здоров'я. / Рецепт : - Покласти 100 цукерок у казан - Розмішувати декілька секунд - Розлити у пляшки / Як і для будь-якого іншого зілля, ти можеш, звичайно, перемножити цю кількість. Наприклад, якщо ти використаєш 300 цукерок замість 100, ти отримаєш 3 зілля здоров’я.");
Database.addText("uk.cauldron.page3", "Черепашаче зілля / Черепашаче зілля трохи більш складне для приготування, ніж зілля здоров’я. Тобі будуть потрібні і цукерки, і льодяники. / Якщо ти вип’єш це зілля під час пригоди, воно перетворить тебе на черепаху. Ти станеш більш повільним, але також і менш вразливим до атак твоїх ворогів. / Рецепт : - Покласти 50 цукерок у казан - Додати 500 льодяників - Розмішувати приблизно 10 секунд - Перестати розмішувати - Додати 50 цукерок - Знову розмішувати кілька секунд - Розлити у пляшки / А тепер найбільш важлива річ, яку тобі ніколи не варто забувати: коли ти станеш черепахою, НЕ перевертайся. Ти уже не зможеш піднятись.");
Database.addText("uk.cauldron.page4", "Зілля антигравітації / Це зілля, винайдене широко відомим чарівником Ісааком, дозволяє тобі опиратись силам земного тяжіння декілька секунд. / Воно особливо корисне після підстрибування (якщо ти не можеш стрибати, тобі слід серйозно поміркувати над здобуттям ціпка-стрибунка). / Воно не дуже просте для приготування, тобі необхідно буде розігріти свій казан і уважно спостерігати за температурою. / Рецепт : - Покласти 1000 цукерок у казан - Гріти, доки вода не стане тепленькою - Зупинити нагрівання  - Додати 1000 цукерок - Гріти, доки вода не закипить - Розлити у пляшки");
Database.addText("uk.cauldron.page5", "Зілля антигравітації : використання / \"Перелетіти провалля\" / *п’є зілля*");
Database.addText("uk.cauldron.page6", "Берсеркове зілля / Берсеркове зілля перетворює тебе на берсерка. / Недолік у тому, що воно поглинає половину твого життя. / Перевага в тому, що на кілька секунд воно подвоює пошкодження від твоїх атак! / Приготування цього зілля дуже просте, але тобі буде потрібно багато льодяників. / Ось рецепт : - Покласти 20 000 льодяників у казан - Розмішувати, доки твої руки не почнуть боліти - Розлити у пляшки");
Database.addText("uk.cauldron.page7", "Важливе зауваження щодо берсеркового зілля / НЕ додавай жодних цукерок під час приготування цього зілля. / Я маю на увазі жоднісінької. / Справді. / Наслідки будуть неочікуваними.");
Database.addText("uk.cauldron.page8", "Зілля P / Зілля P є досить дивним. Ти не можеш передбачити, як воно подіє. Воно може вилікувати або завдати тобі шкоди, зробити тебе сильнішим або слабшим, або навіть перетворити тебе на когось (щось?) іншого. / І його також важко зварити! / Рецепт : - Покласти 500 цукерок у казан - Розмішувати декілька секунд - Перестати розмішувати - Додати у 100 разів більше цукерок, ніж секунд, що ти розмішував. Наприклад, якщо ти розмішував 4 секунди, тобі потрібно буде додати 400 цукерок. Не збільшуй цю кількість, навіть якщо ти хочеш приготувати більше одного зілля. - Підігрівати, доки вода не стане тепленькою - Зупинити нагрівання - Додати трохи льодяників - Розмішати - Розлити у пляшки!");
Database.addText("uk.cauldron.page9", "Вдале використання зілля P / Є кілька правил, яким ти можеш слідувати, щоб добитися кращих результатів від уживання зілля P. Хоча ці правила було визначено дослідним шляхом, здається, що вони працюють досить добре. / - Що більше ти вживаєш зілля P, тим більш дивними видаються його ефекти. / - Якщо у тебе дуже мало здоров’я, тобі, ймовірно, слід випити зілля P. / - Тварини, що п’ють зілля P, здається, реагують дуже погано.");
Database.addText("uk.cauldron.page10", "Зілля X / Зілля X — це легенда. Мовиться, що той, кому вдасться приготувати і випити його, помандрує у місце, де ще ніхто не бував. / Я не знаю, чи це зілля є лише легендою, чи ні, але я запишу у цю книгу усе, що я знаю про нього. / Зілля X згадується у багатьох старих легендах і книгах з алхімії. Ось зведення інформації, що може допомогти тобі приготувати його. Удачі! / - Сказано, що 5 кроків необхідні для приготування зілля X. / - Сказано, що не потрібно льодяників, окрім як для одного кроку. / - Сказано, що, на відміну від іншого варива, ти не можеш приготувати багато порцій зілля X за раз.");
Database.addText("uk.cauldron.page11", "- Нарешті, наступна поема часто цитується, коли йдеться про зілля X: / Першого дня, найпершу Солодку породжено було. Але холодна була вона. / Другого дня, матір Солодкій даровано було. Але холодна була вона. / Третього дня, сестру Солодкій даровано було. Але холодна була вона. / Четвертого дня, подругу Солодкій даровано було. Але холодна була вона. / Четвертого дня, коханця Солодкій даровано було, і може це звучати просто та банально, але щасливою тепер Солодка стала, і гарячою була вона.");
Database.addText("zh.cauldron.page0", "炼药手册");
Database.addText("zh.cauldron.page1", "目录 / 第2页：生命药剂 / 第3页：乌龟药剂 / 第4-5页：反重力药剂 / 第6-7页：狂暴药剂 / 第8-9页：P药剂 / 第10-11页：X药剂");
Database.addText("zh.cauldron.page2", "生命药剂 / 生命药剂是最容易炼制的药剂之一。它所需要的素材只有糖果。在探索中使用生命药剂可为你恢复100点生命值。 / 炼药指南： - 将100颗糖果放入炼药釜 ꆼ 搅拌数秒 ꆼ 将药剂装入瓶中 / 与其他药剂相同，你可以在一次炼制过程中产出多瓶药剂。举例来说，如果你放入炼药釜中的是300颗糖果而不是100颗，你就能够得到3瓶生命药剂。");
Database.addText("zh.cauldron.page3", "乌龟药剂 / 与生命药剂相比，乌龟药剂的炼制难度要稍微高一些。你需要准备好糖果和棒棒糖。 / 在探索中喝下这种药剂可以把你变成一只乌龟。你的移动速度会更加缓慢，但对于敌人攻击的抵抗力会得到提升。 / 炼药指南： - 将50颗糖果放入炼药釜 ꆼ 将500根棒棒糖放入炼药釜 ꆼ 搅拌10秒左右 ꆼ 停止搅拌 ꆼ 向釜中加入50颗糖果 ꆼ 搅拌数秒 ꆼ将药剂装入瓶中 / 最后，千万别忘了最重要的事：当你变成一只乌龟之后，请不要转身。你会底朝天爬不起来的。");
Database.addText("zh.cauldron.page4", "反重力药剂 / 这种药剂是由著名的巫师艾萨克所发明的，它能够让使用者在数秒内抗拒地心引力。 / 在跳跃后饮用的效果拔群（如果你还不能跳跃的话，你应该认真考虑去搞一根弹跳棒了）。 / 这种药剂的炼制方法并不简单，你需要加热炼药釜并细心把握温度。 / 炼药指南： - 将1000颗糖果放入炼药釜 ꆼ 加热，直到水微温 ꆼ 停止加热 ꆼ 向釜中加入1000颗糖果 ꆼ 加热，直到水沸腾 ꆼ将药剂装入瓶中");
Database.addText("zh.cauldron.page5", "反重力药剂：使用实例 / “飞跃深渊” / *喝下药剂*");
Database.addText("zh.cauldron.page6", "狂暴药剂 / 狂暴药剂可以将使用者变成一位狂战士。 / 其副作用是耗掉你的一半生命值。 / 而增益效果是在数秒内令你的伤害加倍！ / 炼制这一药剂的方法非常简单，但会消耗掉大量的棒棒糖。 / 这里是炼药指南： - 将20 000根棒棒糖放入炼药釜 ꆼ 搅拌，直到你的胳膊酸痛 ꆼ 将药剂装入瓶中");
Database.addText("zh.cauldron.page7", "关于狂暴药剂的重要注释 / 不要在炼制该药剂的过程中向釜中加入任何糖果。 / 我是认真的，连一颗糖果都不要放 / 我建议发自真心 / 放了的话，会发生出人意料的事");
Database.addText("zh.cauldron.page8", "P药剂 / P药剂是相当奇怪的药剂。没人能预测它能起到什么作用。它也许会治愈你，也许会对你造成伤害，它可能会让你变强，也可能会让你变弱，甚至还有几率将你变成其他人（或其他东西？） / 而且它的炼制方法也相当复杂！ / 炼药指南: - 将500颗糖果放入炼药釜 ꆼ 搅拌数秒 ꆼ 停止搅拌 ꆼ向釜中加入100倍于你搅拌秒数的糖果。举例来说，如果你搅拌了4秒钟，就需要加入400颗糖果。如果你要一次炼制多瓶药剂，不要再倍增这一数字。 - 加热，直到水微温 ꆼ 停止加热 ꆼ 加入一些棒棒糖 ꆼ 搅拌 ꆼ 将药剂装入瓶中！");
Database.addText("zh.cauldron.page9", "妥善利用P药剂 / 如果你想让喝下的P药剂发挥更好的效果，应当遵守以下规则。尽管这些规则都是根据经验总结出来的，但它们似乎相当有效。 / -你喝过的P药剂越多，P药剂的奇怪功效就越多。 / -当你性命垂危时，喝下P药剂似乎是明智的选择。 / - 喝下P药剂的动物似乎会有非常不良的反应。");
Database.addText("zh.cauldron.page10", "X药剂 / X药剂是一个传说。据说设法炼制并饮用过该药剂的人都会被送往一处人迹未至之地。 / 我不知道这种药剂是否仅仅是一个传说，但我会在这本书中写下我所了解到的关于它的一切。 / 诸多古老的传说和炼金书皆曾提及X药剂。我从中总结了一些可能有助于你炼制该药剂的信息。祝你好运！ / - 据说炼制X药剂共需5个步骤。 / - 据说除其中一个步骤之外，其他步骤并不需要用到棒棒糖。 / - 据说与其他药剂不同，你不能在一次炼制过程中产出多瓶X药剂。");
Database.addText("zh.cauldron.page11", "- 当提到X药剂时，人们经常会引述下面这首诗：/ 在头一日，就有了第一颗糖果。但外面是冷的。 / 在第二日，糖果有了父亲。但外面是冷的。 / 在第三日，糖果有了兄弟，但外面是冷的。 / 在第四日，糖果有了朋友，但外面是冷的。 / 在第五日，糖果有了爱人，或许出于单纯，或许出于幼稚，但糖果非常开心，而外面终于热起来了。");
Database.addText("﻿kr.cauldron.page0", "브루잉 매뉴얼");
Database.addText("kr.cauldron.page1", "요약 / 2페이지 : 건강 물약 / 3페이지 : 거북 물약 / 4-5페이지 : 반중력 물약 / 6-7페이지 : 버서크 물약 / 8-9페이지 : 물약 / 10-11페이지 : X 물약");
Database.addText("kr.cauldron.page2", "건강 물약 / 건강 물약은 사실 양조하기 가장 쉬운 것 중 하나야. 캔디만 있으면 돼. 퀘스트에 사용되면 건강포인트 100점을 돌려줌으로써 너를 치유할 수 있어. / 지침 : - 100개의 캔디를 가마솥에 넣고 몇 초 동안 섞는다. - 병에 담는다. / 어떤 물약이든 간에, 물론 그 양을 증식할 수 있어. 예를 들어, 100개 대신에 300개의 캔디를 사용한다면, 3개의 건강 화분을 얻게 될 거야.");
Database.addText("kr.cauldron.page3", "거북이 물약 / 거북이 물약은 건강 물약보다 양조하기가 조금 어려워. 캔디와 롤리팝이 모두 필요할 거야. / 이 물약을 퀘스트에서 마시면 거북이가 될 거야. 너는 더 느리게 움직일 것이지만, 적들의 공격에 더 저항할 수 있을 거야. / 지침 : - 당신의 가마솥에 50개의 캔디를 넣으세요. - 500개의 롤리팝을 넣으세요. - 10초 이상 섞지 마세요. - 섞지 마세요. - 50개의 캔디를 다시 넣으세요. - 이제 너가 결코 잊지 말아야 할 가장 중요한 것은 : 한 번. 너는 거북이가 될 거야. 절대 뒤집지 마. 일어날 수 없을 거야.");
Database.addText("kr.cauldron.page4", "반중력약 / 잘 알려진 마법사인 이삭이 발명한 이 물약은 몇 초 동안 지구 중력에 저항할 수 있게 해줘. / 점프 후 특히 유용해. (점프를 할 수 없다면, 포고 막대기를 얻는 것을 진지하게 고려해야 해). / 끓이기 쉽지 않아. 가마솥을 데우고 온도를 잘 지켜봐야 해. / 지침 : - 캔디 1000개를 가마솥에 넣어라. - 물이 미지근해질 때까지 데워라. - 그만 데워라. - 캔디 1000개를 넣고 물이 끓을 때까지 데워라. - 병에 담아라.");
Database.addText("kr.cauldron.page5", "항중력약 : 사용사례 / \"격차 위로 날아간다\" / *약물 마시기*");
Database.addText("kr.cauldron.page6", "흥분 물약 / 흥분 물약은 너를 흥분하게 만들어. / 단점은 삶의 절반을 소모한다는 거야. / 단점은 몇 초 동안 피해를 배가시킨다는 거야! / 이 약의 버팀목은 매우 간단하지만, 많은 막대 사탕이 필요할 거야. / 여기 지침이 있다 : - 20 000개의 롤리팝을 가마솥에 섞는다. 당신의 팔이 아프다. - 병에 담아라.");
Database.addText("kr.cauldron.page7", "흥분 물약에 관한 중요 공지 / 이 물약을 끓일 때 캔디를 넣지 마십시오. / 단 한 개도 넣지 마십시오. / 정말. / 결과는 예상 밖일 겁니다.");
Database.addText("kr.cauldron.page8", "P 물약 / P 물약은 이상한거야. 너는 그 물약이 무엇을 할 것인지 예측할 수 없어. 그건 너를 치유하거나 손상시킬 수도 있고, 너를 더 강해지거나 약하게 만들 수도 있고, 심지어 너를 누군가로 변화시킬 수도 있어. / 그리고 양조하기도 어려워! / 지침 : - 500개의 캔디를 가마솥에 넣고 - 몇 초 동안 섞고 - 섞지 말고 - 섞은 시간보다 100배 더 넣어라. 예를 들어 4초 동안 섞으면 캔디 400개를 넣어야 한다. 한 가지 이상의 물약을 만들고 싶어도 이 양을 곱하지 마라. - 물이 미지근해질 때까지 가열해라. - 가열하지 마라. - 롤리팝 추가 - 혼합 - 병에 넣어라!");
Database.addText("kr.cauldron.page9", "P 물약을 잘 사용해. / P 물약을 마실 때 더 좋은 결과를 얻기 위해 따를 수 있는 몇 가지 규칙이 있어. 비록 이런 규칙들이 경험적으로 정의되었지만, 꽤 잘 작동하는 것 같아. / - P 물약을 사용하면 쓸수록 이상한 효과가 있는 것 같아. / - 만약 너의 건강이 매우 낮다면, 아마도 P 물약을 마시는 동물들은 아주 나쁜 방식으로 반응하는 것 같아.");
Database.addText("kr.cauldron.page10", "X 물약 / X 물약은 전설이야. 가까스로 양조해서 마시는 사람은 아무도 없었던 곳으로 여행을 간다고 해. / 이 물약이 단지 전설인지 아닌지는 모르겠지만, 내가 알고 있는 모든 것을 이 책에 쓸게. / X 물약은 많은 옛 전설과 연금술 책들에서 언급돼. 여기 너가 그것을 끓이는 데 도움이 될 수 있는 정보들의 요약이 있어. 행운을 빌어! / - X 물약을 끓이기 위해서는 5단계가 필요하다고 해. / - 1단계를 제외하고는 롤리팝이 필요하지 않아. / - 다른 약과 달리 여러 개의 X 물약을 한꺼번에 양조할 수 없어.");
Database.addText("kr.cauldron.page11", "- 마지막으로 X 물약 하면 다음과 같은 시가 인용되는 경우가 많아 : / 첫 날, 바로 첫 번째 단 것을 생성했다. 하지만 밖은 추웠다. / 둘째 날, 단 것에게 아버지를 선물했다. 하지만 밖은 추웠다. / 셋째 날, 단 것에게 형제를 주었다. 하지만 밖은 추웠다. / 나흘째 되던 날 단 것에게 친구를 선물했다. 하지만 밖은 추웠다. / 닷새째 되던 날, 단 것에게 애인을 주었고, 단순하거나 바보같이 들릴지 모르지만, 지금은 단 것은 행복했고, 밖은 더웠다.");
///<reference path="./../../main/Quest.ts"/>
// -------------------------------
// We register on the Arena module
// -------------------------------
function HardcorePlatformer_getNewQuest(game) {
    return new HardcorePlatformer_Quest(game);
}
TheArenaModule.addQuest(new TheArenaModuleQuest("hardcorePlatformer", HardcorePlatformer_getNewQuest.bind(this)));
// -------------------------------------------------------------------------------
// We create our HardcorePlatformer_Quest class, which herits from the Quest class 
// -------------------------------------------------------------------------------
var HardcorePlatformer_Quest = (function (_super) {
    __extends(HardcorePlatformer_Quest, _super);
    // Constructor
    function HardcorePlatformer_Quest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(240, 13);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 8));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround();
        // Add the spikes
        this.addAllSpikes(this.getGame().getPlayer().getMaxHp() * 100);
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("This is going to be HARDCORE."));
    }
    // Public methods
    HardcorePlatformer_Quest.prototype.castPlayerAntiGravityPotion = function () {
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("Damn. These potions don't seem to work here :("));
    };
    HardcorePlatformer_Quest.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 8), new Pos(1, 1));
    };
    HardcorePlatformer_Quest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    HardcorePlatformer_Quest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("Yay, you made it!! You can now tell all your friends."));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed. Try again :)"));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    HardcorePlatformer_Quest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("arena/hardcorePlatformer/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, false), this.getGame().goToMainMap.bind(this.getGame()), this.getGame().getStatusBar().selectTabByType.bind(this.getGame().getStatusBar(), StatusBarTabType.THE_ARENA), this.getGame().goToTheArena.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    HardcorePlatformer_Quest.prototype.addAllSpikes = function (damage) {
        // Add long spikes on the roof (to avoid the usage of rocket boots)
        this.addSpikes(new Spikes(this, new Pos(0, 0), 300, damage, true));
        // Add the first group of spikes
        this.addSpikes(new Spikes(this, new Pos(25, 8), 4, damage));
        this.addSpikes(new Spikes(this, new Pos(37, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(49, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(60, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(71, 8), 6, damage));
        // Add the second group
        this.addSpikes(new Spikes(this, new Pos(112, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(121, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(127, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(133, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(139, 8), 2, damage));
        // Add the third group
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(196, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(198, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(200, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(202, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(204, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(206, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(208, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(210, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(212, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(214, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(216, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(218, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(220, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(222, 8), 2, damage));
    };
    HardcorePlatformer_Quest.prototype.addGround = function () {
        var wall = new Wall(this, new Pos(0, 0));
        wall.addBox(new Pos(0, 9), new Pos(240, 3));
        this.addEntity(wall);
    };
    HardcorePlatformer_Quest.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };
    HardcorePlatformer_Quest.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 240)
            return true;
        // Else we return false
        return false;
    };
    return HardcorePlatformer_Quest;
})(Quest);
///<reference path="./../../main/Spikes.ts"/>
var HardcorePlatformer_Spikes = (function (_super) {
    __extends(HardcorePlatformer_Spikes, _super);
    function HardcorePlatformer_Spikes() {
        _super.apply(this, arguments);
    }
    // Public methods
    HardcorePlatformer_Spikes.prototype.update = function () {
        // If the player is too close, we disappear!!
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x > this.getGlobalPosition().x - 5)
            this.setDead(true);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return HardcorePlatformer_Spikes;
})(Spikes);
///<reference path="./../../main/Quest.ts"/>
// -------------------------------
// We register on the Arena module
// -------------------------------
function PeacefulForest_getNewQuest(game) {
    return new PeacefulForest_Quest(game);
}
TheArenaModule.addQuest(new TheArenaModuleQuest("peacefulForest", PeacefulForest_getNewQuest.bind(this)));
// ---------------------------------------------------------------------------
// We create our PeacefulForest_Quest class, which herits from the Quest class 
// ---------------------------------------------------------------------------
var PeacefulForest_Quest = (function (_super) {
    __extends(PeacefulForest_Quest, _super);
    // -----------
    // Constructor
    // -----------
    function PeacefulForest_Quest(game) {
        // Call the constructor of our mother class, the Quest class (don't change that)
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 10); // 100 characters width, 10 characters height
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true); // this means that the player will only be able to get out of the quest on the right side
        // Handle the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this); // this means that we load the small ("\o/") character, not the big one used in the sea
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 9)); // the player will begin the quest at the x position of 0 and the y position of 9
        this.configPlayerOrClone(this.getGame().getPlayer()); // configure the player (see below in the public methods part)
        this.addEntity(this.getGame().getPlayer()); // finally add the player to the quest
        // Add some treeeeees (it uses a private method below)
        this.addATree(12);
        this.addATree(25);
        this.addATree(28);
        this.addATree(35);
        this.addATree(39);
        this.addATree(42);
        this.addATree(48);
        this.addATree(56);
        this.addATree(59);
        this.addATree(65);
        this.addATree(79);
        this.addATree(87);
        this.addATree(91);
        // Add a ground because we don't want our trees to fall down (it uses a private method below)
        this.addGround();
        // Add the first message in the quest log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the peaceful forest. Trees all around you. It's a great place to calm down."));
    }
    // --------------
    // Public methods
    // --------------
    // Method used to configure the player (called in the constructor)
    PeacefulForest_Quest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0))); // the player is going to the right
        entity.getQuestEntityMovement().setGravity(true); // it is affected by gravity
        entity.getQuestEntityMovement().setWormsLike(false); // the player won't be able to walk over one character high steps (so that it will not walk over trees..)
    };
    // Method called by the update method when the quest is over
    PeacefulForest_Quest.prototype.endQuest = function (win) {
        // If we won the quest
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You reached the end of the peaceful forest. It really wasn't too hard."));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the peaceful forest. How did you even manage to do that?"));
        }
        // Call the endQuest method of our mother class, the Quest class
        _super.prototype.endQuest.call(this, win);
    };
    // Method called automatically ten times per second. It updates everything in the quest
    PeacefulForest_Quest.prototype.update = function () {
        // If the quest isn't finished yet
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true); // true = we won
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false); // false = we failed
                return;
            }
            // Update entities (it makes everything move, it handles collisions, gravity, damage...)
            this.updateEntities();
        }
        // Draw everything
        this.preDraw(); // a special method we need to call before drawing anything
        this.drawEntities(); // draw all entities
        this.drawAroundQuest(); // draw the stuff around (the spells, etc)
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, false), this.getGame().goToMainMap.bind(this.getGame()), this.getGame().getStatusBar().selectTabByType.bind(this.getGame().getStatusBar(), StatusBarTabType.THE_ARENA), this.getGame().goToTheArena.bind(this.getGame())), "buttonExitQuestKeeping"); // draw the button to exit the quest
        this.postDraw(); // a special method we need to call after drawing everything
    };
    // --------------
    // Public methods
    // --------------
    // Method called in the constructor. It is used to add a tree at a given x position.
    PeacefulForest_Quest.prototype.addATree = function (x) {
        // Create the tree
        var tree = new PeacefulForest_Tree(this, new Pos(x, 9)); // We use the x position given in parameter, the y position match the ground's position
        // Set the tree's health bar
        tree.setHealthBar(new QuestEntityHealthBar(tree, new Pos(3, 1))); // 3 characters width, 1 character height
        // Finally add the tree to the quest
        this.addEntity(tree);
    };
    // Method called in the constructor. It is used to add a ground to the quest, therefore preventing the trees to fall down.
    PeacefulForest_Quest.prototype.addGround = function () {
        // Create the ground entity
        var ground = new Wall(this, new Pos(0, 10)); // position 0, 10
        // Add the ground box (100 characters width, 1 character height)
        ground.addBox(new Pos(0, 0), new Pos(100, 1));
        // Add the ground entity
        this.addEntity(ground);
    };
    // Method called by the update method above to know if the player won the quest
    PeacefulForest_Quest.prototype.thePlayerWon = function () {
        // If the player reached the right limit of the quest, we return true because he won the quest
        if (this.getGame().getPlayer().getGlobalPosition().x >= 100)
            return true;
        // Else we return false
        return false;
    };
    return PeacefulForest_Quest;
})(Quest);
///<reference path="../../main/QuestEntity.ts"/>
var PeacefulForest_Tree = (function (_super) {
    __extends(PeacefulForest_Tree, _super);
    // Constructor
    function PeacefulForest_Tree(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tree", "a tree"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement() // The tree's movement. We don't give any parameter because the tree isn't actually moving.
        );
        // Set gravity : the tree can fall (even if it probably won't because it lays on the ground)
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true); // The tree will be destructible
        this.setMaxHp(50); // Set the maximum health points
        this.setHp(50); // Set the health points
        // Set the ascii art
        this.getRenderArea().drawString("|||", 0, 0); // Draw the tree ("|||") on the render area
        // Add the tree's weapon. It will be attacking with its leaves.
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its leaves", "its leaves"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1)); // The weapon's damage (1)
        // Set the weapon's delay
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(5); // This means the tree will inflict damage every 5 seconds
    }
    return PeacefulForest_Tree;
})(QuestEntity);
